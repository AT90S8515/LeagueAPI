#pragma once
#include <json.hpp>
#include <optional>
#include <SimpleWeb/client_https.hpp>
#include <SimpleWeb/crypto.hpp>
#include <type_traits>
namespace nlohmann {
  template <typename T>
  struct adl_serializer<std::optional<T>> {
    static void to_json(json& j, const std::optional<T>& opt) {
      if(opt)
        j = *opt;
      else
        j = nullptr;
    }
    static void from_json(const json& j, std::optional<T>& opt) {
      if(j.is_null())
        opt.reset();
      else
        opt = j.get<T>();
    }
  };
}
namespace leagueapi {
  using json = nlohmann::json;
  template<typename T>
  static inline std::string as_string(const std::enable_if_t<std::is_arithmetic_v<T>,T>& v) {
    return std::to_string(v);
  }
  static inline std::string as_string(const std::string& v) {
    return v;
  }
  static inline std::string as_string(const json& j) {
    if (j.is_string())
      return j.get<std::string>();
    return j.dump();
  }
  template<typename T>
  static inline std::optional<std::string> as_string(const std::optional<T>& o) {
    if (o)
      return as_string(*o);
    return std::nullopt;
  }
  
  struct ActiveBoosts { /**/ 
    uint32_t ipLoyaltyBoost;/**/
    uint64_t summonerId;/**/
    uint32_t ipBoostPerWinCount;/**/
    std::string ipBoostEndDate;/**/
    uint32_t xpBoostPerWinCount;/**/
    uint32_t xpLoyaltyBoost;/**/
    std::string firstWinOfTheDayStartTime;/**/
    std::string xpBoostEndDate;/**/
  };
  static void to_json(json& j, const ActiveBoosts& v) { 
    j["ipLoyaltyBoost"] = v.ipLoyaltyBoost;
    j["summonerId"] = v.summonerId;
    j["ipBoostPerWinCount"] = v.ipBoostPerWinCount;
    j["ipBoostEndDate"] = v.ipBoostEndDate;
    j["xpBoostPerWinCount"] = v.xpBoostPerWinCount;
    j["xpLoyaltyBoost"] = v.xpLoyaltyBoost;
    j["firstWinOfTheDayStartTime"] = v.firstWinOfTheDayStartTime;
    j["xpBoostEndDate"] = v.xpBoostEndDate;
  }
  static void from_json(const json& j, ActiveBoosts& v) { 
    v.ipLoyaltyBoost = j.at("ipLoyaltyBoost").get<uint32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.ipBoostPerWinCount = j.at("ipBoostPerWinCount").get<uint32_t>(); 
    v.ipBoostEndDate = j.at("ipBoostEndDate").get<std::string>(); 
    v.xpBoostPerWinCount = j.at("xpBoostPerWinCount").get<uint32_t>(); 
    v.xpLoyaltyBoost = j.at("xpLoyaltyBoost").get<uint32_t>(); 
    v.firstWinOfTheDayStartTime = j.at("firstWinOfTheDayStartTime").get<std::string>(); 
    v.xpBoostEndDate = j.at("xpBoostEndDate").get<std::string>(); 
  } 
  struct ActiveBoostsLcdsStoreFulfillmentNotification { /**/ 
    std::string inventoryType;/**/
    json data;/**/
  };
  static void to_json(json& j, const ActiveBoostsLcdsStoreFulfillmentNotification& v) { 
    j["inventoryType"] = v.inventoryType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, ActiveBoostsLcdsStoreFulfillmentNotification& v) { 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct ActiveBoostsLcdsSummonerActiveBoostsDTO { /**/ 
    uint32_t ipLoyaltyBoost;/**/
    uint64_t summonerId;/**/
    uint32_t ipBoostPerWinCount;/**/
    int64_t ipBoostEndDate;/**/
    uint32_t xpBoostPerWinCount;/**/
    uint32_t xpLoyaltyBoost;/**/
    int64_t xpBoostEndDate;/**/
  };
  static void to_json(json& j, const ActiveBoostsLcdsSummonerActiveBoostsDTO& v) { 
    j["ipLoyaltyBoost"] = v.ipLoyaltyBoost;
    j["summonerId"] = v.summonerId;
    j["ipBoostPerWinCount"] = v.ipBoostPerWinCount;
    j["ipBoostEndDate"] = v.ipBoostEndDate;
    j["xpBoostPerWinCount"] = v.xpBoostPerWinCount;
    j["xpLoyaltyBoost"] = v.xpLoyaltyBoost;
    j["xpBoostEndDate"] = v.xpBoostEndDate;
  }
  static void from_json(const json& j, ActiveBoostsLcdsSummonerActiveBoostsDTO& v) { 
    v.ipLoyaltyBoost = j.at("ipLoyaltyBoost").get<uint32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.ipBoostPerWinCount = j.at("ipBoostPerWinCount").get<uint32_t>(); 
    v.ipBoostEndDate = j.at("ipBoostEndDate").get<int64_t>(); 
    v.xpBoostPerWinCount = j.at("xpBoostPerWinCount").get<uint32_t>(); 
    v.xpLoyaltyBoost = j.at("xpLoyaltyBoost").get<uint32_t>(); 
    v.xpBoostEndDate = j.at("xpBoostEndDate").get<int64_t>(); 
  } 
  enum class AggregationType { /**/ 
    average_e = 2, /**/ 
    none_e = 0, /**/ 
    sum_e = 1, /**/ 
  };
  static void to_json(json& j, const AggregationType& v) {
    switch(v) { 
    case AggregationType::average_e:
      j = "average";
    break;
    case AggregationType::none_e:
      j = "none";
    break;
    case AggregationType::sum_e:
      j = "sum";
    break;
    };
  }
  static void from_json(const json& j, AggregationType& v) {
    auto s = j.get<std::string>(); 
    if(s == "average") {
      v = AggregationType::average_e;
      return;
    } 
    if(s == "none") {
      v = AggregationType::none_e;
      return;
    } 
    if(s == "sum") {
      v = AggregationType::sum_e;
      return;
    } 
  } 
  struct SummonerLevelAndPoints { /**/ 
    uint32_t summonerLevel;/**/
    uint64_t expPoints;/**/
    uint64_t expToNextLevel;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const SummonerLevelAndPoints& v) { 
    j["summonerLevel"] = v.summonerLevel;
    j["expPoints"] = v.expPoints;
    j["expToNextLevel"] = v.expToNextLevel;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, SummonerLevelAndPoints& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.expPoints = j.at("expPoints").get<uint64_t>(); 
    v.expToNextLevel = j.at("expToNextLevel").get<uint64_t>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct BasePublicSummonerDTO { /**/ 
    uint64_t acctId;/**/
    std::string puuid;/**/
    std::string name;/**/
    int32_t profileIconId;/**/
    std::string previousSeasonHighestTier;/**/
    std::string internalName;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const BasePublicSummonerDTO& v) { 
    j["acctId"] = v.acctId;
    j["puuid"] = v.puuid;
    j["name"] = v.name;
    j["profileIconId"] = v.profileIconId;
    j["previousSeasonHighestTier"] = v.previousSeasonHighestTier;
    j["internalName"] = v.internalName;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, BasePublicSummonerDTO& v) { 
    v.acctId = j.at("acctId").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.previousSeasonHighestTier = j.at("previousSeasonHighestTier").get<std::string>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct AllPublicSummonerDataDTO { /**/ 
    SummonerLevelAndPoints summonerLevelAndPoints;/**/
    BasePublicSummonerDTO summoner;/**/
  };
  static void to_json(json& j, const AllPublicSummonerDataDTO& v) { 
    j["summonerLevelAndPoints"] = v.summonerLevelAndPoints;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, AllPublicSummonerDataDTO& v) { 
    v.summonerLevelAndPoints = j.at("summonerLevelAndPoints").get<SummonerLevelAndPoints>(); 
    v.summoner = j.at("summoner").get<BasePublicSummonerDTO>(); 
  } 
  struct PrivateSummonerDTO { /**/ 
    bool nameChangeFlag;/**/
    uint64_t acctId;/**/
    bool advancedTutorialFlag;/**/
    std::string name;/**/
    bool displayEloQuestionaire;/**/
    int32_t profileIconId;/**/
    std::string previousSeasonHighestTier;/**/
    bool tutorialFlag;/**/
    std::string internalName;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const PrivateSummonerDTO& v) { 
    j["nameChangeFlag"] = v.nameChangeFlag;
    j["acctId"] = v.acctId;
    j["advancedTutorialFlag"] = v.advancedTutorialFlag;
    j["name"] = v.name;
    j["displayEloQuestionaire"] = v.displayEloQuestionaire;
    j["profileIconId"] = v.profileIconId;
    j["previousSeasonHighestTier"] = v.previousSeasonHighestTier;
    j["tutorialFlag"] = v.tutorialFlag;
    j["internalName"] = v.internalName;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, PrivateSummonerDTO& v) { 
    v.nameChangeFlag = j.at("nameChangeFlag").get<bool>(); 
    v.acctId = j.at("acctId").get<uint64_t>(); 
    v.advancedTutorialFlag = j.at("advancedTutorialFlag").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
    v.displayEloQuestionaire = j.at("displayEloQuestionaire").get<bool>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.previousSeasonHighestTier = j.at("previousSeasonHighestTier").get<std::string>(); 
    v.tutorialFlag = j.at("tutorialFlag").get<bool>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct AllSummonerData { /**/ 
    SummonerLevelAndPoints summonerLevelAndPoints;/**/
    PrivateSummonerDTO summoner;/**/
  };
  static void to_json(json& j, const AllSummonerData& v) { 
    j["summonerLevelAndPoints"] = v.summonerLevelAndPoints;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, AllSummonerData& v) { 
    v.summonerLevelAndPoints = j.at("summonerLevelAndPoints").get<SummonerLevelAndPoints>(); 
    v.summoner = j.at("summoner").get<PrivateSummonerDTO>(); 
  } 
  struct BannedChampion { /**/ 
    int32_t teamId;/**/
    int32_t pickTurn;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const BannedChampion& v) { 
    j["teamId"] = v.teamId;
    j["pickTurn"] = v.pickTurn;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, BannedChampion& v) { 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.pickTurn = j.at("pickTurn").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct BaseMembershipInviteDto { /**/ 
    std::string clubKey;/**/
    uint64_t inviterSummonerId;/**/
    std::string inviteePlatformId;/**/
    std::string inviterPlatformId;/**/
    uint64_t inviterAccountId;/**/
    uint64_t inviteeSummonerId;/**/
    int32_t status;/**/
    std::string clubName;/**/
  };
  static void to_json(json& j, const BaseMembershipInviteDto& v) { 
    j["clubKey"] = v.clubKey;
    j["inviterSummonerId"] = v.inviterSummonerId;
    j["inviteePlatformId"] = v.inviteePlatformId;
    j["inviterPlatformId"] = v.inviterPlatformId;
    j["inviterAccountId"] = v.inviterAccountId;
    j["inviteeSummonerId"] = v.inviteeSummonerId;
    j["status"] = v.status;
    j["clubName"] = v.clubName;
  }
  static void from_json(const json& j, BaseMembershipInviteDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.inviterSummonerId = j.at("inviterSummonerId").get<uint64_t>(); 
    v.inviteePlatformId = j.at("inviteePlatformId").get<std::string>(); 
    v.inviterPlatformId = j.at("inviterPlatformId").get<std::string>(); 
    v.inviterAccountId = j.at("inviterAccountId").get<uint64_t>(); 
    v.inviteeSummonerId = j.at("inviteeSummonerId").get<uint64_t>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
  } 
  struct BindingAsyncCancelEvent { /*Represents a cancelled asynchronous operation.*/ 
    uint32_t asyncToken;/*Asynchronous operation token*/
  };
  static void to_json(json& j, const BindingAsyncCancelEvent& v) { 
    j["asyncToken"] = v.asyncToken;
  }
  static void from_json(const json& j, BindingAsyncCancelEvent& v) { 
    v.asyncToken = j.at("asyncToken").get<uint32_t>(); 
  } 
  struct BindingAsyncFailureEvent { /*Represents a failed asynchronous operation.*/ 
    std::string error;/*Error message*/
    uint32_t asyncToken;/*Asynchronous operation token*/
  };
  static void to_json(json& j, const BindingAsyncFailureEvent& v) { 
    j["error"] = v.error;
    j["asyncToken"] = v.asyncToken;
  }
  static void from_json(const json& j, BindingAsyncFailureEvent& v) { 
    v.error = j.at("error").get<std::string>(); 
    v.asyncToken = j.at("asyncToken").get<uint32_t>(); 
  } 
  enum class BindingAsyncState { /*Possible states of an asynchronous operation.*/ 
    Cancelled_e = 3, /*The operation was cancelled*/ 
    Cancelling_e = 2, /*A request to cancel the operation has been made*/ 
    Failed_e = 5, /*The operation encountered an error*/ 
    None_e = 0, /*Invalid state*/ 
    Running_e = 1, /*The operation is in flight*/ 
    Succeeded_e = 4, /*The operation completed successfully*/ 
  };
  static void to_json(json& j, const BindingAsyncState& v) {
    switch(v) { 
    case BindingAsyncState::Cancelled_e:
      j = "Cancelled";
    break;
    case BindingAsyncState::Cancelling_e:
      j = "Cancelling";
    break;
    case BindingAsyncState::Failed_e:
      j = "Failed";
    break;
    case BindingAsyncState::None_e:
      j = "None";
    break;
    case BindingAsyncState::Running_e:
      j = "Running";
    break;
    case BindingAsyncState::Succeeded_e:
      j = "Succeeded";
    break;
    };
  }
  static void from_json(const json& j, BindingAsyncState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Cancelled") {
      v = BindingAsyncState::Cancelled_e;
      return;
    } 
    if(s == "Cancelling") {
      v = BindingAsyncState::Cancelling_e;
      return;
    } 
    if(s == "Failed") {
      v = BindingAsyncState::Failed_e;
      return;
    } 
    if(s == "None") {
      v = BindingAsyncState::None_e;
      return;
    } 
    if(s == "Running") {
      v = BindingAsyncState::Running_e;
      return;
    } 
    if(s == "Succeeded") {
      v = BindingAsyncState::Succeeded_e;
      return;
    } 
  } 
  struct BindingCallbackEvent { /*Represents the parameters of a call to a provided callback.*/ 
    std::vector<json> parameters;/*Callback parameters*/
    uint32_t id;/*ID of the callback being invoked*/
  };
  static void to_json(json& j, const BindingCallbackEvent& v) { 
    j["parameters"] = v.parameters;
    j["id"] = v.id;
  }
  static void from_json(const json& j, BindingCallbackEvent& v) { 
    v.parameters = j.at("parameters").get<std::vector<json>>(); 
    v.id = j.at("id").get<uint32_t>(); 
  } 
  struct BindingFullTypeIdentifier { /*Describes the type of a value.*/ 
    std::string type;/**/
    std::string elementType;/**/
  };
  static void to_json(json& j, const BindingFullTypeIdentifier& v) { 
    j["type"] = v.type;
    j["elementType"] = v.elementType;
  }
  static void from_json(const json& j, BindingFullTypeIdentifier& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.elementType = j.at("elementType").get<std::string>(); 
  } 
  struct BindingFullFieldHelp { /*Describes a member of a struct.*/ 
    uint32_t offset;/**/
    BindingFullTypeIdentifier type;/**/
    std::string description;/**/
    bool optional;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BindingFullFieldHelp& v) { 
    j["offset"] = v.offset;
    j["type"] = v.type;
    j["description"] = v.description;
    j["optional"] = v.optional;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BindingFullFieldHelp& v) { 
    v.offset = j.at("offset").get<uint32_t>(); 
    v.type = j.at("type").get<BindingFullTypeIdentifier>(); 
    v.description = j.at("description").get<std::string>(); 
    v.optional = j.at("optional").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct BindingFullEnumValueHelp { /*Describes an enumerator.*/ 
    int32_t value;/**/
    std::string description;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BindingFullEnumValueHelp& v) { 
    j["value"] = v.value;
    j["description"] = v.description;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BindingFullEnumValueHelp& v) { 
    v.value = j.at("value").get<int32_t>(); 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct BindingFullTypeHelp { /*Describes a struct or enum type.*/ 
    std::string nameSpace;/**/
    std::vector<BindingFullFieldHelp> fields;/**/
    std::vector<std::string> tags;/**/
    std::string description;/**/
    std::vector<BindingFullEnumValueHelp> values;/**/
    std::string name;/**/
    uint32_t size;/**/
  };
  static void to_json(json& j, const BindingFullTypeHelp& v) { 
    j["nameSpace"] = v.nameSpace;
    j["fields"] = v.fields;
    j["tags"] = v.tags;
    j["description"] = v.description;
    j["values"] = v.values;
    j["name"] = v.name;
    j["size"] = v.size;
  }
  static void from_json(const json& j, BindingFullTypeHelp& v) { 
    v.nameSpace = j.at("nameSpace").get<std::string>(); 
    v.fields = j.at("fields").get<std::vector<BindingFullFieldHelp>>(); 
    v.tags = j.at("tags").get<std::vector<std::string>>(); 
    v.description = j.at("description").get<std::string>(); 
    v.values = j.at("values").get<std::vector<BindingFullEnumValueHelp>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.size = j.at("size").get<uint32_t>(); 
  } 
  struct BindingFullEventHelp { /*Describes an event.*/ 
    BindingFullTypeIdentifier type;/**/
    std::string nameSpace;/**/
    std::string description;/**/
    std::vector<std::string> tags;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BindingFullEventHelp& v) { 
    j["type"] = v.type;
    j["nameSpace"] = v.nameSpace;
    j["description"] = v.description;
    j["tags"] = v.tags;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BindingFullEventHelp& v) { 
    v.type = j.at("type").get<BindingFullTypeIdentifier>(); 
    v.nameSpace = j.at("nameSpace").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.tags = j.at("tags").get<std::vector<std::string>>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct BindingFullArgumentHelp { /*Describes a function parameter.*/ 
    BindingFullTypeIdentifier type;/**/
    std::string description;/**/
    bool optional;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BindingFullArgumentHelp& v) { 
    j["type"] = v.type;
    j["description"] = v.description;
    j["optional"] = v.optional;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BindingFullArgumentHelp& v) { 
    v.type = j.at("type").get<BindingFullTypeIdentifier>(); 
    v.description = j.at("description").get<std::string>(); 
    v.optional = j.at("optional").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct BindingFullFunctionHelp { /*Describes a function.*/ 
    std::vector<BindingFullArgumentHelp> arguments;/**/
    std::string nameSpace;/**/
    std::string help;/**/
    bool threadSafe;/**/
    std::vector<std::string> tags;/**/
    std::string async;/**/
    std::string description;/**/
    std::string name;/**/
    BindingFullTypeIdentifier returns;/**/
  };
  static void to_json(json& j, const BindingFullFunctionHelp& v) { 
    j["arguments"] = v.arguments;
    j["nameSpace"] = v.nameSpace;
    j["help"] = v.help;
    j["threadSafe"] = v.threadSafe;
    j["tags"] = v.tags;
    j["async"] = v.async;
    j["description"] = v.description;
    j["name"] = v.name;
    j["returns"] = v.returns;
  }
  static void from_json(const json& j, BindingFullFunctionHelp& v) { 
    v.arguments = j.at("arguments").get<std::vector<BindingFullArgumentHelp>>(); 
    v.nameSpace = j.at("nameSpace").get<std::string>(); 
    v.help = j.at("help").get<std::string>(); 
    v.threadSafe = j.at("threadSafe").get<bool>(); 
    v.tags = j.at("tags").get<std::vector<std::string>>(); 
    v.async = j.at("async").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.returns = j.at("returns").get<BindingFullTypeIdentifier>(); 
  } 
  struct BindingFullApiHelp { /*Describes the exposed native API.*/ 
    std::vector<BindingFullTypeHelp> types;/**/
    std::vector<BindingFullEventHelp> events;/**/
    std::vector<BindingFullFunctionHelp> functions;/**/
  };
  static void to_json(json& j, const BindingFullApiHelp& v) { 
    j["types"] = v.types;
    j["events"] = v.events;
    j["functions"] = v.functions;
  }
  static void from_json(const json& j, BindingFullApiHelp& v) { 
    v.types = j.at("types").get<std::vector<BindingFullTypeHelp>>(); 
    v.events = j.at("events").get<std::vector<BindingFullEventHelp>>(); 
    v.functions = j.at("functions").get<std::vector<BindingFullFunctionHelp>>(); 
  } 
  struct BindingGenericAsyncEvent { /*Represents generic data for an asynchronous event.*/ 
    uint32_t asyncToken;/*Asynchronous operation token*/
    json data;/*Event data*/
  };
  static void to_json(json& j, const BindingGenericAsyncEvent& v) { 
    j["asyncToken"] = v.asyncToken;
    j["data"] = v.data;
  }
  static void from_json(const json& j, BindingGenericAsyncEvent& v) { 
    v.asyncToken = j.at("asyncToken").get<uint32_t>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct BindingGenericEvent { /*Represents generic data for an event.*/ 
    json data;/*Event data*/
  };
  static void to_json(json& j, const BindingGenericEvent& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, BindingGenericEvent& v) { 
    v.data = j.at("data").get<json>(); 
  } 
  enum class BindingHelpFormat { /*Help format for binding functions and types.*/ 
    Epytext_e = 2, /*Python epytext format*/ 
    Full_e = 1, /*Native help format*/ 
  };
  static void to_json(json& j, const BindingHelpFormat& v) {
    switch(v) { 
    case BindingHelpFormat::Epytext_e:
      j = "Epytext";
    break;
    case BindingHelpFormat::Full_e:
      j = "Full";
    break;
    };
  }
  static void from_json(const json& j, BindingHelpFormat& v) {
    auto s = j.get<std::string>(); 
    if(s == "Epytext") {
      v = BindingHelpFormat::Epytext_e;
      return;
    } 
    if(s == "Full") {
      v = BindingHelpFormat::Full_e;
      return;
    } 
  } 
  struct BlockedPlayerResource { /**/ 
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BlockedPlayerResource& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BlockedPlayerResource& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct BoostTeamSkinRentalDTO { /**/ 
    int64_t price;/**/
    std::vector<int64_t> availableSkins;/**/
    std::string summonerName;/**/
    bool unlocked;/**/
    int64_t ipReward;/**/
    std::string skinUnlockMode;/**/
    int64_t ipRewardForPurchaser;/**/
  };
  static void to_json(json& j, const BoostTeamSkinRentalDTO& v) { 
    j["price"] = v.price;
    j["availableSkins"] = v.availableSkins;
    j["summonerName"] = v.summonerName;
    j["unlocked"] = v.unlocked;
    j["ipReward"] = v.ipReward;
    j["skinUnlockMode"] = v.skinUnlockMode;
    j["ipRewardForPurchaser"] = v.ipRewardForPurchaser;
  }
  static void from_json(const json& j, BoostTeamSkinRentalDTO& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.availableSkins = j.at("availableSkins").get<std::vector<int64_t>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.unlocked = j.at("unlocked").get<bool>(); 
    v.ipReward = j.at("ipReward").get<int64_t>(); 
    v.skinUnlockMode = j.at("skinUnlockMode").get<std::string>(); 
    v.ipRewardForPurchaser = j.at("ipRewardForPurchaser").get<int64_t>(); 
  } 
  enum class ClientBracketMatchStatus { /**/ 
    COMPLETED_e = 2, /**/ 
    STARTED_e = 1, /**/ 
    UPCOMING_e = 0, /**/ 
  };
  static void to_json(json& j, const ClientBracketMatchStatus& v) {
    switch(v) { 
    case ClientBracketMatchStatus::COMPLETED_e:
      j = "COMPLETED";
    break;
    case ClientBracketMatchStatus::STARTED_e:
      j = "STARTED";
    break;
    case ClientBracketMatchStatus::UPCOMING_e:
      j = "UPCOMING";
    break;
    };
  }
  static void from_json(const json& j, ClientBracketMatchStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "COMPLETED") {
      v = ClientBracketMatchStatus::COMPLETED_e;
      return;
    } 
    if(s == "STARTED") {
      v = ClientBracketMatchStatus::STARTED_e;
      return;
    } 
    if(s == "UPCOMING") {
      v = ClientBracketMatchStatus::UPCOMING_e;
      return;
    } 
  } 
  struct BracketMatch { /**/ 
    int64_t gameStartTime;/**/
    int32_t order;/**/
    int64_t winnerId;/**/
    int64_t id;/**/
    int64_t rosterId2;/**/
    int32_t round;/**/
    bool loserBracket;/**/
    int64_t gameId;/**/
    int64_t roundStartTime;/**/
    ClientBracketMatchStatus status;/**/
    int64_t rosterId1;/**/
  };
  static void to_json(json& j, const BracketMatch& v) { 
    j["gameStartTime"] = v.gameStartTime;
    j["order"] = v.order;
    j["winnerId"] = v.winnerId;
    j["id"] = v.id;
    j["rosterId2"] = v.rosterId2;
    j["round"] = v.round;
    j["loserBracket"] = v.loserBracket;
    j["gameId"] = v.gameId;
    j["roundStartTime"] = v.roundStartTime;
    j["status"] = v.status;
    j["rosterId1"] = v.rosterId1;
  }
  static void from_json(const json& j, BracketMatch& v) { 
    v.gameStartTime = j.at("gameStartTime").get<int64_t>(); 
    v.order = j.at("order").get<int32_t>(); 
    v.winnerId = j.at("winnerId").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.rosterId2 = j.at("rosterId2").get<int64_t>(); 
    v.round = j.at("round").get<int32_t>(); 
    v.loserBracket = j.at("loserBracket").get<bool>(); 
    v.gameId = j.at("gameId").get<int64_t>(); 
    v.roundStartTime = j.at("roundStartTime").get<int64_t>(); 
    v.status = j.at("status").get<ClientBracketMatchStatus>(); 
    v.rosterId1 = j.at("rosterId1").get<int64_t>(); 
  } 
  struct BracketRoster { /**/ 
    int64_t rosterId;/**/
    std::string shortName;/**/
    int32_t logo;/**/
    int32_t logoColor;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const BracketRoster& v) { 
    j["rosterId"] = v.rosterId;
    j["shortName"] = v.shortName;
    j["logo"] = v.logo;
    j["logoColor"] = v.logoColor;
    j["name"] = v.name;
  }
  static void from_json(const json& j, BracketRoster& v) { 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.logo = j.at("logo").get<int32_t>(); 
    v.logoColor = j.at("logoColor").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct Bracket { /**/ 
    std::vector<BracketMatch> matches;/**/
    int64_t id;/**/
    int64_t tournamentId;/**/
    int32_t currentLoserRound;/**/
    std::vector<BracketRoster> rosters;/**/
    std::vector<BracketMatch> loserBracketMatches;/**/
    int32_t currentRound;/**/
    int32_t size;/**/
    int64_t phaseId;/**/
  };
  static void to_json(json& j, const Bracket& v) { 
    j["matches"] = v.matches;
    j["id"] = v.id;
    j["tournamentId"] = v.tournamentId;
    j["currentLoserRound"] = v.currentLoserRound;
    j["rosters"] = v.rosters;
    j["loserBracketMatches"] = v.loserBracketMatches;
    j["currentRound"] = v.currentRound;
    j["size"] = v.size;
    j["phaseId"] = v.phaseId;
  }
  static void from_json(const json& j, Bracket& v) { 
    v.matches = j.at("matches").get<std::vector<BracketMatch>>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.currentLoserRound = j.at("currentLoserRound").get<int32_t>(); 
    v.rosters = j.at("rosters").get<std::vector<BracketRoster>>(); 
    v.loserBracketMatches = j.at("loserBracketMatches").get<std::vector<BracketMatch>>(); 
    v.currentRound = j.at("currentRound").get<int32_t>(); 
    v.size = j.at("size").get<int32_t>(); 
    v.phaseId = j.at("phaseId").get<int64_t>(); 
  } 
  struct BroadcastNotification { /**/ 
    std::vector<json> broadcastMessages;/**/
  };
  static void to_json(json& j, const BroadcastNotification& v) { 
    j["broadcastMessages"] = v.broadcastMessages;
  }
  static void from_json(const json& j, BroadcastNotification& v) { 
    v.broadcastMessages = j.at("broadcastMessages").get<std::vector<json>>(); 
  } 
  struct BuildInfo { /**/ 
    std::string branchFull;/**/
    int32_t codeBuildId;/**/
    std::string gameBranchFull;/**/
    std::string branch;/**/
    std::string patchlineVisibleName;/**/
    std::string version;/**/
    int32_t gameDataBuildId;/**/
    std::string gameBranch;/**/
    int32_t contentBuildId;/**/
    std::string patchline;/**/
  };
  static void to_json(json& j, const BuildInfo& v) { 
    j["branchFull"] = v.branchFull;
    j["codeBuildId"] = v.codeBuildId;
    j["gameBranchFull"] = v.gameBranchFull;
    j["branch"] = v.branch;
    j["patchlineVisibleName"] = v.patchlineVisibleName;
    j["version"] = v.version;
    j["gameDataBuildId"] = v.gameDataBuildId;
    j["gameBranch"] = v.gameBranch;
    j["contentBuildId"] = v.contentBuildId;
    j["patchline"] = v.patchline;
  }
  static void from_json(const json& j, BuildInfo& v) { 
    v.branchFull = j.at("branchFull").get<std::string>(); 
    v.codeBuildId = j.at("codeBuildId").get<int32_t>(); 
    v.gameBranchFull = j.at("gameBranchFull").get<std::string>(); 
    v.branch = j.at("branch").get<std::string>(); 
    v.patchlineVisibleName = j.at("patchlineVisibleName").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.gameDataBuildId = j.at("gameDataBuildId").get<int32_t>(); 
    v.gameBranch = j.at("gameBranch").get<std::string>(); 
    v.contentBuildId = j.at("contentBuildId").get<int32_t>(); 
    v.patchline = j.at("patchline").get<std::string>(); 
  } 
  enum class BuybackState { /**/ 
    FORCED_NOT_READY_e = 1, /**/ 
    NOT_READY_e = 0, /**/ 
    READY_e = 2, /**/ 
  };
  static void to_json(json& j, const BuybackState& v) {
    switch(v) { 
    case BuybackState::FORCED_NOT_READY_e:
      j = "FORCED_NOT_READY";
    break;
    case BuybackState::NOT_READY_e:
      j = "NOT_READY";
    break;
    case BuybackState::READY_e:
      j = "READY";
    break;
    };
  }
  static void from_json(const json& j, BuybackState& v) {
    auto s = j.get<std::string>(); 
    if(s == "FORCED_NOT_READY") {
      v = BuybackState::FORCED_NOT_READY_e;
      return;
    } 
    if(s == "NOT_READY") {
      v = BuybackState::NOT_READY_e;
      return;
    } 
    if(s == "READY") {
      v = BuybackState::READY_e;
      return;
    } 
  } 
  struct BuybackMember { /**/ 
    int32_t pay;/**/
    uint64_t playerId;/**/
    BuybackState buybackState;/**/
    int32_t bet;/**/
  };
  static void to_json(json& j, const BuybackMember& v) { 
    j["pay"] = v.pay;
    j["playerId"] = v.playerId;
    j["buybackState"] = v.buybackState;
    j["bet"] = v.bet;
  }
  static void from_json(const json& j, BuybackMember& v) { 
    v.pay = j.at("pay").get<int32_t>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.buybackState = j.at("buybackState").get<BuybackState>(); 
    v.bet = j.at("bet").get<int32_t>(); 
  } 
  struct ChampSelectLcdsPlayerChampionSelectionDTO { /**/ 
    std::string summonerInternalName;/**/
    int32_t spell1Id;/**/
    int32_t selectedSkinIndex;/**/
    int32_t championId;/**/
    int32_t spell2Id;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsPlayerChampionSelectionDTO& v) { 
    j["summonerInternalName"] = v.summonerInternalName;
    j["spell1Id"] = v.spell1Id;
    j["selectedSkinIndex"] = v.selectedSkinIndex;
    j["championId"] = v.championId;
    j["spell2Id"] = v.spell2Id;
  }
  static void from_json(const json& j, ChampSelectLcdsPlayerChampionSelectionDTO& v) { 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
    v.spell1Id = j.at("spell1Id").get<int32_t>(); 
    v.selectedSkinIndex = j.at("selectedSkinIndex").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<int32_t>(); 
  } 
  struct ChampSelectLcdsGameDTO { /**/ 
    std::vector<ChampSelectLcdsPlayerChampionSelectionDTO> playerChampionSelections;/**/
    std::string gameState;/**/
    uint64_t id;/**/
    std::vector<BannedChampion> bannedChampions;/**/
    std::string name;/**/
    std::vector<json> teamOne;/**/
    std::vector<std::string> gameMutators;/**/
    std::vector<json> teamTwo;/**/
    std::string queueTypeName;/**/
    std::string roomPassword;/**/
    int64_t spectatorDelay;/**/
    std::string roomName;/**/
    int32_t pickTurn;/**/
    int64_t optimisticLock;/**/
    std::string statusOfParticipants;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsGameDTO& v) { 
    j["playerChampionSelections"] = v.playerChampionSelections;
    j["gameState"] = v.gameState;
    j["id"] = v.id;
    j["bannedChampions"] = v.bannedChampions;
    j["name"] = v.name;
    j["teamOne"] = v.teamOne;
    j["gameMutators"] = v.gameMutators;
    j["teamTwo"] = v.teamTwo;
    j["queueTypeName"] = v.queueTypeName;
    j["roomPassword"] = v.roomPassword;
    j["spectatorDelay"] = v.spectatorDelay;
    j["roomName"] = v.roomName;
    j["pickTurn"] = v.pickTurn;
    j["optimisticLock"] = v.optimisticLock;
    j["statusOfParticipants"] = v.statusOfParticipants;
  }
  static void from_json(const json& j, ChampSelectLcdsGameDTO& v) { 
    v.playerChampionSelections = j.at("playerChampionSelections").get<std::vector<ChampSelectLcdsPlayerChampionSelectionDTO>>(); 
    v.gameState = j.at("gameState").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.bannedChampions = j.at("bannedChampions").get<std::vector<BannedChampion>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.teamOne = j.at("teamOne").get<std::vector<json>>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<json>>(); 
    v.queueTypeName = j.at("queueTypeName").get<std::string>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.spectatorDelay = j.at("spectatorDelay").get<int64_t>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.pickTurn = j.at("pickTurn").get<int32_t>(); 
    v.optimisticLock = j.at("optimisticLock").get<int64_t>(); 
    v.statusOfParticipants = j.at("statusOfParticipants").get<std::string>(); 
  } 
  struct ChampSelectLcdsGameTimerDTO { /**/ 
    double remainingTimeInMillis;/**/
    std::string currentGameState;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsGameTimerDTO& v) { 
    j["remainingTimeInMillis"] = v.remainingTimeInMillis;
    j["currentGameState"] = v.currentGameState;
  }
  static void from_json(const json& j, ChampSelectLcdsGameTimerDTO& v) { 
    v.remainingTimeInMillis = j.at("remainingTimeInMillis").get<double>(); 
    v.currentGameState = j.at("currentGameState").get<std::string>(); 
  } 
  struct ChampSelectLcdsObfuscatedParticipant { /**/ 
    uint64_t gameUniqueId;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsObfuscatedParticipant& v) { 
    j["gameUniqueId"] = v.gameUniqueId;
  }
  static void from_json(const json& j, ChampSelectLcdsObfuscatedParticipant& v) { 
    v.gameUniqueId = j.at("gameUniqueId").get<uint64_t>(); 
  } 
  struct ChampSelectLcdsPlayerParticipant { /**/ 
    uint64_t summonerId;/**/
    std::string summonerName;/**/
    int32_t pickMode;/**/
    std::string summonerInternalName;/**/
    int32_t pickTurn;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsPlayerParticipant& v) { 
    j["summonerId"] = v.summonerId;
    j["summonerName"] = v.summonerName;
    j["pickMode"] = v.pickMode;
    j["summonerInternalName"] = v.summonerInternalName;
    j["pickTurn"] = v.pickTurn;
  }
  static void from_json(const json& j, ChampSelectLcdsPlayerParticipant& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.pickMode = j.at("pickMode").get<int32_t>(); 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
    v.pickTurn = j.at("pickTurn").get<int32_t>(); 
  } 
  struct ChampSelectLcdsPointSummary { /**/ 
    int32_t pointsCostToRoll;/**/
    int32_t maxRolls;/**/
    int32_t numberOfRolls;/**/
    int32_t currentPoints;/**/
    int32_t pointsToNextRoll;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsPointSummary& v) { 
    j["pointsCostToRoll"] = v.pointsCostToRoll;
    j["maxRolls"] = v.maxRolls;
    j["numberOfRolls"] = v.numberOfRolls;
    j["currentPoints"] = v.currentPoints;
    j["pointsToNextRoll"] = v.pointsToNextRoll;
  }
  static void from_json(const json& j, ChampSelectLcdsPointSummary& v) { 
    v.pointsCostToRoll = j.at("pointsCostToRoll").get<int32_t>(); 
    v.maxRolls = j.at("maxRolls").get<int32_t>(); 
    v.numberOfRolls = j.at("numberOfRolls").get<int32_t>(); 
    v.currentPoints = j.at("currentPoints").get<int32_t>(); 
    v.pointsToNextRoll = j.at("pointsToNextRoll").get<int32_t>(); 
  } 
  struct ChampSelectLcdsPotentialTradersDTO { /**/ 
    std::vector<std::string> potentialTraders;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsPotentialTradersDTO& v) { 
    j["potentialTraders"] = v.potentialTraders;
  }
  static void from_json(const json& j, ChampSelectLcdsPotentialTradersDTO& v) { 
    v.potentialTraders = j.at("potentialTraders").get<std::vector<std::string>>(); 
  } 
  struct ChampSelectLcdsRollResult { /**/ 
    ChampSelectLcdsPointSummary pointSummary;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsRollResult& v) { 
    j["pointSummary"] = v.pointSummary;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, ChampSelectLcdsRollResult& v) { 
    v.pointSummary = j.at("pointSummary").get<ChampSelectLcdsPointSummary>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct ChampSelectLcdsTradeContractDTO { /**/ 
    std::string requesterInternalSummonerName;/**/
    std::string responderInternalSummonerName;/**/
    int32_t responderChampionId;/**/
    int32_t requesterChampionId;/**/
    std::string state;/**/
  };
  static void to_json(json& j, const ChampSelectLcdsTradeContractDTO& v) { 
    j["requesterInternalSummonerName"] = v.requesterInternalSummonerName;
    j["responderInternalSummonerName"] = v.responderInternalSummonerName;
    j["responderChampionId"] = v.responderChampionId;
    j["requesterChampionId"] = v.requesterChampionId;
    j["state"] = v.state;
  }
  static void from_json(const json& j, ChampSelectLcdsTradeContractDTO& v) { 
    v.requesterInternalSummonerName = j.at("requesterInternalSummonerName").get<std::string>(); 
    v.responderInternalSummonerName = j.at("responderInternalSummonerName").get<std::string>(); 
    v.responderChampionId = j.at("responderChampionId").get<int32_t>(); 
    v.requesterChampionId = j.at("requesterChampionId").get<int32_t>(); 
    v.state = j.at("state").get<std::string>(); 
  } 
  struct ClashRewardSpec { /**/ 
    std::string level;/**/
    std::string quantity;/**/
    std::string tier;/**/
    std::string seasonId;/**/
    std::string bracket;/**/
    std::string name;/**/
    std::string gem;/**/
    std::string pedestal;/**/
    std::string theme;/**/
    std::string cup;/**/
  };
  static void to_json(json& j, const ClashRewardSpec& v) { 
    j["level"] = v.level;
    j["quantity"] = v.quantity;
    j["tier"] = v.tier;
    j["seasonId"] = v.seasonId;
    j["bracket"] = v.bracket;
    j["name"] = v.name;
    j["gem"] = v.gem;
    j["pedestal"] = v.pedestal;
    j["theme"] = v.theme;
    j["cup"] = v.cup;
  }
  static void from_json(const json& j, ClashRewardSpec& v) { 
    v.level = j.at("level").get<std::string>(); 
    v.quantity = j.at("quantity").get<std::string>(); 
    v.tier = j.at("tier").get<std::string>(); 
    v.seasonId = j.at("seasonId").get<std::string>(); 
    v.bracket = j.at("bracket").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.gem = j.at("gem").get<std::string>(); 
    v.pedestal = j.at("pedestal").get<std::string>(); 
    v.theme = j.at("theme").get<std::string>(); 
    v.cup = j.at("cup").get<std::string>(); 
  } 
  struct ClashEventData { /**/ 
    std::string teamLogoName;/**/
    std::vector<std::string> playerUUIDs;/**/
    int32_t bracket;/**/
    std::string tier;/**/
    std::string theme;/**/
    ClashRewardSpec rewardSpec;/**/
    std::string earnedDate;/**/
    std::string rewardType;/**/
    int32_t seasonId;/**/
    int64_t tournamentId;/**/
    std::string teamLogoChromaId;/**/
    std::string teamName;/**/
    std::string tournamentName;/**/
  };
  static void to_json(json& j, const ClashEventData& v) { 
    j["teamLogoName"] = v.teamLogoName;
    j["playerUUIDs"] = v.playerUUIDs;
    j["bracket"] = v.bracket;
    j["tier"] = v.tier;
    j["theme"] = v.theme;
    j["rewardSpec"] = v.rewardSpec;
    j["earnedDate"] = v.earnedDate;
    j["rewardType"] = v.rewardType;
    j["seasonId"] = v.seasonId;
    j["tournamentId"] = v.tournamentId;
    j["teamLogoChromaId"] = v.teamLogoChromaId;
    j["teamName"] = v.teamName;
    j["tournamentName"] = v.tournamentName;
  }
  static void from_json(const json& j, ClashEventData& v) { 
    v.teamLogoName = j.at("teamLogoName").get<std::string>(); 
    v.playerUUIDs = j.at("playerUUIDs").get<std::vector<std::string>>(); 
    v.bracket = j.at("bracket").get<int32_t>(); 
    v.tier = j.at("tier").get<std::string>(); 
    v.theme = j.at("theme").get<std::string>(); 
    v.rewardSpec = j.at("rewardSpec").get<ClashRewardSpec>(); 
    v.earnedDate = j.at("earnedDate").get<std::string>(); 
    v.rewardType = j.at("rewardType").get<std::string>(); 
    v.seasonId = j.at("seasonId").get<int32_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.teamLogoChromaId = j.at("teamLogoChromaId").get<std::string>(); 
    v.teamName = j.at("teamName").get<std::string>(); 
    v.tournamentName = j.at("tournamentName").get<std::string>(); 
  } 
  enum class ClashRewardType { /**/ 
    FLAG_e = 1, /**/ 
    FRAME_e = 2, /**/ 
    LOGO_e = 3, /**/ 
    LOOT_e = 4, /**/ 
    TROPHY_e = 0, /**/ 
    VP_e = 5, /**/ 
  };
  static void to_json(json& j, const ClashRewardType& v) {
    switch(v) { 
    case ClashRewardType::FLAG_e:
      j = "FLAG";
    break;
    case ClashRewardType::FRAME_e:
      j = "FRAME";
    break;
    case ClashRewardType::LOGO_e:
      j = "LOGO";
    break;
    case ClashRewardType::LOOT_e:
      j = "LOOT";
    break;
    case ClashRewardType::TROPHY_e:
      j = "TROPHY";
    break;
    case ClashRewardType::VP_e:
      j = "VP";
    break;
    };
  }
  static void from_json(const json& j, ClashRewardType& v) {
    auto s = j.get<std::string>(); 
    if(s == "FLAG") {
      v = ClashRewardType::FLAG_e;
      return;
    } 
    if(s == "FRAME") {
      v = ClashRewardType::FRAME_e;
      return;
    } 
    if(s == "LOGO") {
      v = ClashRewardType::LOGO_e;
      return;
    } 
    if(s == "LOOT") {
      v = ClashRewardType::LOOT_e;
      return;
    } 
    if(s == "TROPHY") {
      v = ClashRewardType::TROPHY_e;
      return;
    } 
    if(s == "VP") {
      v = ClashRewardType::VP_e;
      return;
    } 
  } 
  struct ClashRewardDefinition { /**/ 
    ClashRewardSpec rewardSpec;/**/
    ClashRewardType rewardType;/**/
  };
  static void to_json(json& j, const ClashRewardDefinition& v) { 
    j["rewardSpec"] = v.rewardSpec;
    j["rewardType"] = v.rewardType;
  }
  static void from_json(const json& j, ClashRewardDefinition& v) { 
    v.rewardSpec = j.at("rewardSpec").get<ClashRewardSpec>(); 
    v.rewardType = j.at("rewardType").get<ClashRewardType>(); 
  } 
  enum class ClashRewardTime { /**/ 
    EOB_e = 2, /**/ 
    EOG_e = 1, /**/ 
    EOT_e = 3, /**/ 
    NONE_e = 0, /**/ 
  };
  static void to_json(json& j, const ClashRewardTime& v) {
    switch(v) { 
    case ClashRewardTime::EOB_e:
      j = "EOB";
    break;
    case ClashRewardTime::EOG_e:
      j = "EOG";
    break;
    case ClashRewardTime::EOT_e:
      j = "EOT";
    break;
    case ClashRewardTime::NONE_e:
      j = "NONE";
    break;
    };
  }
  static void from_json(const json& j, ClashRewardTime& v) {
    auto s = j.get<std::string>(); 
    if(s == "EOB") {
      v = ClashRewardTime::EOB_e;
      return;
    } 
    if(s == "EOG") {
      v = ClashRewardTime::EOG_e;
      return;
    } 
    if(s == "EOT") {
      v = ClashRewardTime::EOT_e;
      return;
    } 
    if(s == "NONE") {
      v = ClashRewardTime::NONE_e;
      return;
    } 
  } 
  struct ClashRewardOutput { /**/ 
    ClashRewardDefinition primary;/**/
    ClashRewardDefinition alternative;/**/
    ClashRewardTime show;/**/
    ClashRewardTime grant;/**/
  };
  static void to_json(json& j, const ClashRewardOutput& v) { 
    j["primary"] = v.primary;
    j["alternative"] = v.alternative;
    j["show"] = v.show;
    j["grant"] = v.grant;
  }
  static void from_json(const json& j, ClashRewardOutput& v) { 
    v.primary = j.at("primary").get<ClashRewardDefinition>(); 
    v.alternative = j.at("alternative").get<ClashRewardDefinition>(); 
    v.show = j.at("show").get<ClashRewardTime>(); 
    v.grant = j.at("grant").get<ClashRewardTime>(); 
  } 
  struct ClashRewardConfigEntry { /**/ 
    std::string key;/**/
    std::vector<ClashRewardOutput> vals;/**/
  };
  static void to_json(json& j, const ClashRewardConfigEntry& v) { 
    j["key"] = v.key;
    j["vals"] = v.vals;
  }
  static void from_json(const json& j, ClashRewardConfigEntry& v) { 
    v.key = j.at("key").get<std::string>(); 
    v.vals = j.at("vals").get<std::vector<ClashRewardOutput>>(); 
  } 
  enum class ClashRewardKeyType { /**/ 
    CUP_e = 1, /**/ 
    LOWEST_POSITION_e = 3, /**/ 
    SEASON_FLAG_COUNT_e = 7, /**/ 
    SEASON_VP_e = 6, /**/ 
    THEME_VP_e = 5, /**/ 
    TIER_e = 0, /**/ 
    TOKENS_e = 2, /**/ 
    WINS_e = 4, /**/ 
  };
  static void to_json(json& j, const ClashRewardKeyType& v) {
    switch(v) { 
    case ClashRewardKeyType::CUP_e:
      j = "CUP";
    break;
    case ClashRewardKeyType::LOWEST_POSITION_e:
      j = "LOWEST_POSITION";
    break;
    case ClashRewardKeyType::SEASON_FLAG_COUNT_e:
      j = "SEASON_FLAG_COUNT";
    break;
    case ClashRewardKeyType::SEASON_VP_e:
      j = "SEASON_VP";
    break;
    case ClashRewardKeyType::THEME_VP_e:
      j = "THEME_VP";
    break;
    case ClashRewardKeyType::TIER_e:
      j = "TIER";
    break;
    case ClashRewardKeyType::TOKENS_e:
      j = "TOKENS";
    break;
    case ClashRewardKeyType::WINS_e:
      j = "WINS";
    break;
    };
  }
  static void from_json(const json& j, ClashRewardKeyType& v) {
    auto s = j.get<std::string>(); 
    if(s == "CUP") {
      v = ClashRewardKeyType::CUP_e;
      return;
    } 
    if(s == "LOWEST_POSITION") {
      v = ClashRewardKeyType::LOWEST_POSITION_e;
      return;
    } 
    if(s == "SEASON_FLAG_COUNT") {
      v = ClashRewardKeyType::SEASON_FLAG_COUNT_e;
      return;
    } 
    if(s == "SEASON_VP") {
      v = ClashRewardKeyType::SEASON_VP_e;
      return;
    } 
    if(s == "THEME_VP") {
      v = ClashRewardKeyType::THEME_VP_e;
      return;
    } 
    if(s == "TIER") {
      v = ClashRewardKeyType::TIER_e;
      return;
    } 
    if(s == "TOKENS") {
      v = ClashRewardKeyType::TOKENS_e;
      return;
    } 
    if(s == "WINS") {
      v = ClashRewardKeyType::WINS_e;
      return;
    } 
  } 
  struct ClashRewardConfigClient { /**/ 
    bool grantToSub;/**/
    std::vector<ClashRewardConfigEntry> entries;/**/
    std::vector<ClashRewardKeyType> keyDef;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const ClashRewardConfigClient& v) { 
    j["grantToSub"] = v.grantToSub;
    j["entries"] = v.entries;
    j["keyDef"] = v.keyDef;
    j["name"] = v.name;
  }
  static void from_json(const json& j, ClashRewardConfigClient& v) { 
    v.grantToSub = j.at("grantToSub").get<bool>(); 
    v.entries = j.at("entries").get<std::vector<ClashRewardConfigEntry>>(); 
    v.keyDef = j.at("keyDef").get<std::vector<ClashRewardKeyType>>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct ClientDynamicConfig { /**/ 
    std::string configs;/**/
    bool compressed;/**/
    bool delta;/**/
  };
  static void to_json(json& j, const ClientDynamicConfig& v) { 
    j["configs"] = v.configs;
    j["compressed"] = v.compressed;
    j["delta"] = v.delta;
  }
  static void from_json(const json& j, ClientDynamicConfig& v) { 
    v.configs = j.at("configs").get<std::string>(); 
    v.compressed = j.at("compressed").get<bool>(); 
    v.delta = j.at("delta").get<bool>(); 
  } 
  enum class ClientRequestError { /**/ 
    ALREADY_DECLINE_WITHDRAW_e = 3, /**/ 
    ALREADY_INVITED_e = 1, /**/ 
    ALREADY_IN_PHASE_e = 5, /**/ 
    ALREADY_MEMBER_e = 0, /**/ 
    ALREADY_SUGGESTED_e = 2, /**/ 
    ALREADY_VOTE_WITHDRAW_e = 4, /**/ 
    CAPTAIN_NOT_ALLOWED_e = 6, /**/ 
    FAIL_INVITE_e = 7, /**/ 
    FAIL_SUGGESTINVITE_e = 8, /**/ 
    INACTIVE_PHASE_e = 15, /**/ 
    INACTIVE_REGISTRATION_e = 14, /**/ 
    INTERNAL_ERROR_e = 16, /**/ 
    INVALID_BRACKET_e = 30, /**/ 
    INVALID_BUY_BACK_e = 18, /**/ 
    INVALID_CHECKELIGIBILITY_SIZE_e = 29, /**/ 
    INVALID_INVITEE_e = 22, /**/ 
    INVALID_LOGO_e = 25, /**/ 
    INVALID_LOGOCOLOR_e = 26, /**/ 
    INVALID_MATCHID_e = 31, /**/ 
    INVALID_MATCHSTATUS_FORGAMEEND_e = 34, /**/ 
    INVALID_NAME_e = 27, /**/ 
    INVALID_PHASE_e = 21, /**/ 
    INVALID_PLAYER_e = 32, /**/ 
    INVALID_POSITION_e = 24, /**/ 
    INVALID_ROSTER_e = 17, /**/ 
    INVALID_ROSTER_MEMBER_SIZE_e = 23, /**/ 
    INVALID_SHORTNAME_e = 28, /**/ 
    INVALID_SUB_e = 19, /**/ 
    INVALID_TOURNAMENT_e = 20, /**/ 
    INVALID_WITHDRAW_e = 33, /**/ 
    IN_OTHER_PENDINGROSTER_e = 12, /**/ 
    IN_OTHER_PHASE_e = 13, /**/ 
    IN_OTHER_ROSTER_e = 11, /**/ 
    LOGOCOLOR_NOT_ALLOWED_e = 10, /**/ 
    LOGO_NOT_ALLOWED_e = 9, /**/ 
    MAX_INVITED_e = 35, /**/ 
    MAX_ROSTER_FETCHSIZE_e = 37, /**/ 
    MAX_SUBED_e = 36, /**/ 
    MAX_SUB_SIZE_e = 38, /**/ 
    NOT_ALLOWED_DELETE_TOURNAMENT_e = 49, /**/ 
    NOT_CAPTAIN_e = 43, /**/ 
    NOT_ENOUGH_TICKETS_e = 48, /**/ 
    NOT_INVITEE_e = 45, /**/ 
    NOT_MEMBER_e = 44, /**/ 
    NOT_SEED_INTO_LEAGUE_e = 46, /**/ 
    NOT_UNANIMOUS_e = 47, /**/ 
    NO_AVAILABLE_PHASE_e = 42, /**/ 
    NO_PERMISSION_CREATE_ROSTER_e = 40, /**/ 
    NO_PERMISSION_REGISTER_ROSTER_e = 41, /**/ 
    NO_SAME_PLAYER_e = 39, /**/ 
    OVER_INVITE_e = 51, /**/ 
    OVER_SUGGESTION_INVITE_e = 50, /**/ 
    PENDING_ROSTER_CLOSE_e = 54, /**/ 
    PENDING_ROSTER_FULL_e = 53, /**/ 
    PENDING_ROSTER_NOT_READY_e = 52, /**/ 
    ROSTER_DISBAND_NOT_ALLOWED_e = 57, /**/ 
    ROSTER_ELIMINATED_e = 55, /**/ 
    ROSTER_NOT_ELIMINATED_e = 56, /**/ 
    SUGGEST_INVITEE_NOT_EXIST_e = 58, /**/ 
    TICKET_ALREADY_SET_e = 59, /**/ 
    TICKET_NOT_SET_e = 62, /**/ 
    TICKET_OFFER_NOT_EXIST_e = 60, /**/ 
    TICKET_OFFER_OVER_LIMIT_e = 61, /**/ 
    WITHDRAW_CANCEL_NOT_ALLOWED_e = 64, /**/ 
    WITHDRAW_LOCKOUT_e = 65, /**/ 
    WITHDRAW_NOT_ALLOWED_e = 63, /**/ 
  };
  static void to_json(json& j, const ClientRequestError& v) {
    switch(v) { 
    case ClientRequestError::ALREADY_DECLINE_WITHDRAW_e:
      j = "ALREADY_DECLINE_WITHDRAW";
    break;
    case ClientRequestError::ALREADY_INVITED_e:
      j = "ALREADY_INVITED";
    break;
    case ClientRequestError::ALREADY_IN_PHASE_e:
      j = "ALREADY_IN_PHASE";
    break;
    case ClientRequestError::ALREADY_MEMBER_e:
      j = "ALREADY_MEMBER";
    break;
    case ClientRequestError::ALREADY_SUGGESTED_e:
      j = "ALREADY_SUGGESTED";
    break;
    case ClientRequestError::ALREADY_VOTE_WITHDRAW_e:
      j = "ALREADY_VOTE_WITHDRAW";
    break;
    case ClientRequestError::CAPTAIN_NOT_ALLOWED_e:
      j = "CAPTAIN_NOT_ALLOWED";
    break;
    case ClientRequestError::FAIL_INVITE_e:
      j = "FAIL_INVITE";
    break;
    case ClientRequestError::FAIL_SUGGESTINVITE_e:
      j = "FAIL_SUGGESTINVITE";
    break;
    case ClientRequestError::INACTIVE_PHASE_e:
      j = "INACTIVE_PHASE";
    break;
    case ClientRequestError::INACTIVE_REGISTRATION_e:
      j = "INACTIVE_REGISTRATION";
    break;
    case ClientRequestError::INTERNAL_ERROR_e:
      j = "INTERNAL_ERROR";
    break;
    case ClientRequestError::INVALID_BRACKET_e:
      j = "INVALID_BRACKET";
    break;
    case ClientRequestError::INVALID_BUY_BACK_e:
      j = "INVALID_BUY_BACK";
    break;
    case ClientRequestError::INVALID_CHECKELIGIBILITY_SIZE_e:
      j = "INVALID_CHECKELIGIBILITY_SIZE";
    break;
    case ClientRequestError::INVALID_INVITEE_e:
      j = "INVALID_INVITEE";
    break;
    case ClientRequestError::INVALID_LOGO_e:
      j = "INVALID_LOGO";
    break;
    case ClientRequestError::INVALID_LOGOCOLOR_e:
      j = "INVALID_LOGOCOLOR";
    break;
    case ClientRequestError::INVALID_MATCHID_e:
      j = "INVALID_MATCHID";
    break;
    case ClientRequestError::INVALID_MATCHSTATUS_FORGAMEEND_e:
      j = "INVALID_MATCHSTATUS_FORGAMEEND";
    break;
    case ClientRequestError::INVALID_NAME_e:
      j = "INVALID_NAME";
    break;
    case ClientRequestError::INVALID_PHASE_e:
      j = "INVALID_PHASE";
    break;
    case ClientRequestError::INVALID_PLAYER_e:
      j = "INVALID_PLAYER";
    break;
    case ClientRequestError::INVALID_POSITION_e:
      j = "INVALID_POSITION";
    break;
    case ClientRequestError::INVALID_ROSTER_e:
      j = "INVALID_ROSTER";
    break;
    case ClientRequestError::INVALID_ROSTER_MEMBER_SIZE_e:
      j = "INVALID_ROSTER_MEMBER_SIZE";
    break;
    case ClientRequestError::INVALID_SHORTNAME_e:
      j = "INVALID_SHORTNAME";
    break;
    case ClientRequestError::INVALID_SUB_e:
      j = "INVALID_SUB";
    break;
    case ClientRequestError::INVALID_TOURNAMENT_e:
      j = "INVALID_TOURNAMENT";
    break;
    case ClientRequestError::INVALID_WITHDRAW_e:
      j = "INVALID_WITHDRAW";
    break;
    case ClientRequestError::IN_OTHER_PENDINGROSTER_e:
      j = "IN_OTHER_PENDINGROSTER";
    break;
    case ClientRequestError::IN_OTHER_PHASE_e:
      j = "IN_OTHER_PHASE";
    break;
    case ClientRequestError::IN_OTHER_ROSTER_e:
      j = "IN_OTHER_ROSTER";
    break;
    case ClientRequestError::LOGOCOLOR_NOT_ALLOWED_e:
      j = "LOGOCOLOR_NOT_ALLOWED";
    break;
    case ClientRequestError::LOGO_NOT_ALLOWED_e:
      j = "LOGO_NOT_ALLOWED";
    break;
    case ClientRequestError::MAX_INVITED_e:
      j = "MAX_INVITED";
    break;
    case ClientRequestError::MAX_ROSTER_FETCHSIZE_e:
      j = "MAX_ROSTER_FETCHSIZE";
    break;
    case ClientRequestError::MAX_SUBED_e:
      j = "MAX_SUBED";
    break;
    case ClientRequestError::MAX_SUB_SIZE_e:
      j = "MAX_SUB_SIZE";
    break;
    case ClientRequestError::NOT_ALLOWED_DELETE_TOURNAMENT_e:
      j = "NOT_ALLOWED_DELETE_TOURNAMENT";
    break;
    case ClientRequestError::NOT_CAPTAIN_e:
      j = "NOT_CAPTAIN";
    break;
    case ClientRequestError::NOT_ENOUGH_TICKETS_e:
      j = "NOT_ENOUGH_TICKETS";
    break;
    case ClientRequestError::NOT_INVITEE_e:
      j = "NOT_INVITEE";
    break;
    case ClientRequestError::NOT_MEMBER_e:
      j = "NOT_MEMBER";
    break;
    case ClientRequestError::NOT_SEED_INTO_LEAGUE_e:
      j = "NOT_SEED_INTO_LEAGUE";
    break;
    case ClientRequestError::NOT_UNANIMOUS_e:
      j = "NOT_UNANIMOUS";
    break;
    case ClientRequestError::NO_AVAILABLE_PHASE_e:
      j = "NO_AVAILABLE_PHASE";
    break;
    case ClientRequestError::NO_PERMISSION_CREATE_ROSTER_e:
      j = "NO_PERMISSION_CREATE_ROSTER";
    break;
    case ClientRequestError::NO_PERMISSION_REGISTER_ROSTER_e:
      j = "NO_PERMISSION_REGISTER_ROSTER";
    break;
    case ClientRequestError::NO_SAME_PLAYER_e:
      j = "NO_SAME_PLAYER";
    break;
    case ClientRequestError::OVER_INVITE_e:
      j = "OVER_INVITE";
    break;
    case ClientRequestError::OVER_SUGGESTION_INVITE_e:
      j = "OVER_SUGGESTION_INVITE";
    break;
    case ClientRequestError::PENDING_ROSTER_CLOSE_e:
      j = "PENDING_ROSTER_CLOSE";
    break;
    case ClientRequestError::PENDING_ROSTER_FULL_e:
      j = "PENDING_ROSTER_FULL";
    break;
    case ClientRequestError::PENDING_ROSTER_NOT_READY_e:
      j = "PENDING_ROSTER_NOT_READY";
    break;
    case ClientRequestError::ROSTER_DISBAND_NOT_ALLOWED_e:
      j = "ROSTER_DISBAND_NOT_ALLOWED";
    break;
    case ClientRequestError::ROSTER_ELIMINATED_e:
      j = "ROSTER_ELIMINATED";
    break;
    case ClientRequestError::ROSTER_NOT_ELIMINATED_e:
      j = "ROSTER_NOT_ELIMINATED";
    break;
    case ClientRequestError::SUGGEST_INVITEE_NOT_EXIST_e:
      j = "SUGGEST_INVITEE_NOT_EXIST";
    break;
    case ClientRequestError::TICKET_ALREADY_SET_e:
      j = "TICKET_ALREADY_SET";
    break;
    case ClientRequestError::TICKET_NOT_SET_e:
      j = "TICKET_NOT_SET";
    break;
    case ClientRequestError::TICKET_OFFER_NOT_EXIST_e:
      j = "TICKET_OFFER_NOT_EXIST";
    break;
    case ClientRequestError::TICKET_OFFER_OVER_LIMIT_e:
      j = "TICKET_OFFER_OVER_LIMIT";
    break;
    case ClientRequestError::WITHDRAW_CANCEL_NOT_ALLOWED_e:
      j = "WITHDRAW_CANCEL_NOT_ALLOWED";
    break;
    case ClientRequestError::WITHDRAW_LOCKOUT_e:
      j = "WITHDRAW_LOCKOUT";
    break;
    case ClientRequestError::WITHDRAW_NOT_ALLOWED_e:
      j = "WITHDRAW_NOT_ALLOWED";
    break;
    };
  }
  static void from_json(const json& j, ClientRequestError& v) {
    auto s = j.get<std::string>(); 
    if(s == "ALREADY_DECLINE_WITHDRAW") {
      v = ClientRequestError::ALREADY_DECLINE_WITHDRAW_e;
      return;
    } 
    if(s == "ALREADY_INVITED") {
      v = ClientRequestError::ALREADY_INVITED_e;
      return;
    } 
    if(s == "ALREADY_IN_PHASE") {
      v = ClientRequestError::ALREADY_IN_PHASE_e;
      return;
    } 
    if(s == "ALREADY_MEMBER") {
      v = ClientRequestError::ALREADY_MEMBER_e;
      return;
    } 
    if(s == "ALREADY_SUGGESTED") {
      v = ClientRequestError::ALREADY_SUGGESTED_e;
      return;
    } 
    if(s == "ALREADY_VOTE_WITHDRAW") {
      v = ClientRequestError::ALREADY_VOTE_WITHDRAW_e;
      return;
    } 
    if(s == "CAPTAIN_NOT_ALLOWED") {
      v = ClientRequestError::CAPTAIN_NOT_ALLOWED_e;
      return;
    } 
    if(s == "FAIL_INVITE") {
      v = ClientRequestError::FAIL_INVITE_e;
      return;
    } 
    if(s == "FAIL_SUGGESTINVITE") {
      v = ClientRequestError::FAIL_SUGGESTINVITE_e;
      return;
    } 
    if(s == "INACTIVE_PHASE") {
      v = ClientRequestError::INACTIVE_PHASE_e;
      return;
    } 
    if(s == "INACTIVE_REGISTRATION") {
      v = ClientRequestError::INACTIVE_REGISTRATION_e;
      return;
    } 
    if(s == "INTERNAL_ERROR") {
      v = ClientRequestError::INTERNAL_ERROR_e;
      return;
    } 
    if(s == "INVALID_BRACKET") {
      v = ClientRequestError::INVALID_BRACKET_e;
      return;
    } 
    if(s == "INVALID_BUY_BACK") {
      v = ClientRequestError::INVALID_BUY_BACK_e;
      return;
    } 
    if(s == "INVALID_CHECKELIGIBILITY_SIZE") {
      v = ClientRequestError::INVALID_CHECKELIGIBILITY_SIZE_e;
      return;
    } 
    if(s == "INVALID_INVITEE") {
      v = ClientRequestError::INVALID_INVITEE_e;
      return;
    } 
    if(s == "INVALID_LOGO") {
      v = ClientRequestError::INVALID_LOGO_e;
      return;
    } 
    if(s == "INVALID_LOGOCOLOR") {
      v = ClientRequestError::INVALID_LOGOCOLOR_e;
      return;
    } 
    if(s == "INVALID_MATCHID") {
      v = ClientRequestError::INVALID_MATCHID_e;
      return;
    } 
    if(s == "INVALID_MATCHSTATUS_FORGAMEEND") {
      v = ClientRequestError::INVALID_MATCHSTATUS_FORGAMEEND_e;
      return;
    } 
    if(s == "INVALID_NAME") {
      v = ClientRequestError::INVALID_NAME_e;
      return;
    } 
    if(s == "INVALID_PHASE") {
      v = ClientRequestError::INVALID_PHASE_e;
      return;
    } 
    if(s == "INVALID_PLAYER") {
      v = ClientRequestError::INVALID_PLAYER_e;
      return;
    } 
    if(s == "INVALID_POSITION") {
      v = ClientRequestError::INVALID_POSITION_e;
      return;
    } 
    if(s == "INVALID_ROSTER") {
      v = ClientRequestError::INVALID_ROSTER_e;
      return;
    } 
    if(s == "INVALID_ROSTER_MEMBER_SIZE") {
      v = ClientRequestError::INVALID_ROSTER_MEMBER_SIZE_e;
      return;
    } 
    if(s == "INVALID_SHORTNAME") {
      v = ClientRequestError::INVALID_SHORTNAME_e;
      return;
    } 
    if(s == "INVALID_SUB") {
      v = ClientRequestError::INVALID_SUB_e;
      return;
    } 
    if(s == "INVALID_TOURNAMENT") {
      v = ClientRequestError::INVALID_TOURNAMENT_e;
      return;
    } 
    if(s == "INVALID_WITHDRAW") {
      v = ClientRequestError::INVALID_WITHDRAW_e;
      return;
    } 
    if(s == "IN_OTHER_PENDINGROSTER") {
      v = ClientRequestError::IN_OTHER_PENDINGROSTER_e;
      return;
    } 
    if(s == "IN_OTHER_PHASE") {
      v = ClientRequestError::IN_OTHER_PHASE_e;
      return;
    } 
    if(s == "IN_OTHER_ROSTER") {
      v = ClientRequestError::IN_OTHER_ROSTER_e;
      return;
    } 
    if(s == "LOGOCOLOR_NOT_ALLOWED") {
      v = ClientRequestError::LOGOCOLOR_NOT_ALLOWED_e;
      return;
    } 
    if(s == "LOGO_NOT_ALLOWED") {
      v = ClientRequestError::LOGO_NOT_ALLOWED_e;
      return;
    } 
    if(s == "MAX_INVITED") {
      v = ClientRequestError::MAX_INVITED_e;
      return;
    } 
    if(s == "MAX_ROSTER_FETCHSIZE") {
      v = ClientRequestError::MAX_ROSTER_FETCHSIZE_e;
      return;
    } 
    if(s == "MAX_SUBED") {
      v = ClientRequestError::MAX_SUBED_e;
      return;
    } 
    if(s == "MAX_SUB_SIZE") {
      v = ClientRequestError::MAX_SUB_SIZE_e;
      return;
    } 
    if(s == "NOT_ALLOWED_DELETE_TOURNAMENT") {
      v = ClientRequestError::NOT_ALLOWED_DELETE_TOURNAMENT_e;
      return;
    } 
    if(s == "NOT_CAPTAIN") {
      v = ClientRequestError::NOT_CAPTAIN_e;
      return;
    } 
    if(s == "NOT_ENOUGH_TICKETS") {
      v = ClientRequestError::NOT_ENOUGH_TICKETS_e;
      return;
    } 
    if(s == "NOT_INVITEE") {
      v = ClientRequestError::NOT_INVITEE_e;
      return;
    } 
    if(s == "NOT_MEMBER") {
      v = ClientRequestError::NOT_MEMBER_e;
      return;
    } 
    if(s == "NOT_SEED_INTO_LEAGUE") {
      v = ClientRequestError::NOT_SEED_INTO_LEAGUE_e;
      return;
    } 
    if(s == "NOT_UNANIMOUS") {
      v = ClientRequestError::NOT_UNANIMOUS_e;
      return;
    } 
    if(s == "NO_AVAILABLE_PHASE") {
      v = ClientRequestError::NO_AVAILABLE_PHASE_e;
      return;
    } 
    if(s == "NO_PERMISSION_CREATE_ROSTER") {
      v = ClientRequestError::NO_PERMISSION_CREATE_ROSTER_e;
      return;
    } 
    if(s == "NO_PERMISSION_REGISTER_ROSTER") {
      v = ClientRequestError::NO_PERMISSION_REGISTER_ROSTER_e;
      return;
    } 
    if(s == "NO_SAME_PLAYER") {
      v = ClientRequestError::NO_SAME_PLAYER_e;
      return;
    } 
    if(s == "OVER_INVITE") {
      v = ClientRequestError::OVER_INVITE_e;
      return;
    } 
    if(s == "OVER_SUGGESTION_INVITE") {
      v = ClientRequestError::OVER_SUGGESTION_INVITE_e;
      return;
    } 
    if(s == "PENDING_ROSTER_CLOSE") {
      v = ClientRequestError::PENDING_ROSTER_CLOSE_e;
      return;
    } 
    if(s == "PENDING_ROSTER_FULL") {
      v = ClientRequestError::PENDING_ROSTER_FULL_e;
      return;
    } 
    if(s == "PENDING_ROSTER_NOT_READY") {
      v = ClientRequestError::PENDING_ROSTER_NOT_READY_e;
      return;
    } 
    if(s == "ROSTER_DISBAND_NOT_ALLOWED") {
      v = ClientRequestError::ROSTER_DISBAND_NOT_ALLOWED_e;
      return;
    } 
    if(s == "ROSTER_ELIMINATED") {
      v = ClientRequestError::ROSTER_ELIMINATED_e;
      return;
    } 
    if(s == "ROSTER_NOT_ELIMINATED") {
      v = ClientRequestError::ROSTER_NOT_ELIMINATED_e;
      return;
    } 
    if(s == "SUGGEST_INVITEE_NOT_EXIST") {
      v = ClientRequestError::SUGGEST_INVITEE_NOT_EXIST_e;
      return;
    } 
    if(s == "TICKET_ALREADY_SET") {
      v = ClientRequestError::TICKET_ALREADY_SET_e;
      return;
    } 
    if(s == "TICKET_NOT_SET") {
      v = ClientRequestError::TICKET_NOT_SET_e;
      return;
    } 
    if(s == "TICKET_OFFER_NOT_EXIST") {
      v = ClientRequestError::TICKET_OFFER_NOT_EXIST_e;
      return;
    } 
    if(s == "TICKET_OFFER_OVER_LIMIT") {
      v = ClientRequestError::TICKET_OFFER_OVER_LIMIT_e;
      return;
    } 
    if(s == "WITHDRAW_CANCEL_NOT_ALLOWED") {
      v = ClientRequestError::WITHDRAW_CANCEL_NOT_ALLOWED_e;
      return;
    } 
    if(s == "WITHDRAW_LOCKOUT") {
      v = ClientRequestError::WITHDRAW_LOCKOUT_e;
      return;
    } 
    if(s == "WITHDRAW_NOT_ALLOWED") {
      v = ClientRequestError::WITHDRAW_NOT_ALLOWED_e;
      return;
    } 
  } 
  struct Club { /**/ 
    std::string key;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const Club& v) { 
    j["key"] = v.key;
    j["name"] = v.name;
  }
  static void from_json(const json& j, Club& v) { 
    v.key = j.at("key").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct ClubPermissions { /**/ 
    std::vector<std::string> INVITEE;/**/
    std::vector<std::string> OFFICER;/**/
    std::vector<std::string> ADMIN;/**/
    std::vector<std::string> UNKNOWN;/**/
    std::vector<std::string> MEMBER;/**/
    std::vector<std::string> OWNER;/**/
  };
  static void to_json(json& j, const ClubPermissions& v) { 
    j["INVITEE"] = v.INVITEE;
    j["OFFICER"] = v.OFFICER;
    j["ADMIN"] = v.ADMIN;
    j["UNKNOWN"] = v.UNKNOWN;
    j["MEMBER"] = v.MEMBER;
    j["OWNER"] = v.OWNER;
  }
  static void from_json(const json& j, ClubPermissions& v) { 
    v.INVITEE = j.at("INVITEE").get<std::vector<std::string>>(); 
    v.OFFICER = j.at("OFFICER").get<std::vector<std::string>>(); 
    v.ADMIN = j.at("ADMIN").get<std::vector<std::string>>(); 
    v.UNKNOWN = j.at("UNKNOWN").get<std::vector<std::string>>(); 
    v.MEMBER = j.at("MEMBER").get<std::vector<std::string>>(); 
    v.OWNER = j.at("OWNER").get<std::vector<std::string>>(); 
  } 
  struct ClubDataDto { /**/ 
    std::string clubKey;/**/
    std::string tag;/**/
    std::string motd;/**/
    ClubPermissions permissionMap;/**/
    std::string description;/**/
    int64_t createdTs;/**/
    int64_t lastModifiedTs;/**/
    std::string name;/**/
    std::string role;/**/
    std::string jid;/**/
  };
  static void to_json(json& j, const ClubDataDto& v) { 
    j["clubKey"] = v.clubKey;
    j["tag"] = v.tag;
    j["motd"] = v.motd;
    j["permissionMap"] = v.permissionMap;
    j["description"] = v.description;
    j["createdTs"] = v.createdTs;
    j["lastModifiedTs"] = v.lastModifiedTs;
    j["name"] = v.name;
    j["role"] = v.role;
    j["jid"] = v.jid;
  }
  static void from_json(const json& j, ClubDataDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.tag = j.at("tag").get<std::string>(); 
    v.motd = j.at("motd").get<std::string>(); 
    v.permissionMap = j.at("permissionMap").get<ClubPermissions>(); 
    v.description = j.at("description").get<std::string>(); 
    v.createdTs = j.at("createdTs").get<int64_t>(); 
    v.lastModifiedTs = j.at("lastModifiedTs").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.role = j.at("role").get<std::string>(); 
    v.jid = j.at("jid").get<std::string>(); 
  } 
  struct PlayerInfoDto { /**/ 
    std::string currentPlatformId;/**/
    uint64_t summonerId;/**/
    uint64_t currentAccountId;/**/
  };
  static void to_json(json& j, const PlayerInfoDto& v) { 
    j["currentPlatformId"] = v.currentPlatformId;
    j["summonerId"] = v.summonerId;
    j["currentAccountId"] = v.currentAccountId;
  }
  static void from_json(const json& j, PlayerInfoDto& v) { 
    v.currentPlatformId = j.at("currentPlatformId").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.currentAccountId = j.at("currentAccountId").get<uint64_t>(); 
  } 
  struct MemberSinceDto { /**/ 
    PlayerInfoDto playerInfo;/**/
    int64_t since;/**/
    std::string role;/**/
  };
  static void to_json(json& j, const MemberSinceDto& v) { 
    j["playerInfo"] = v.playerInfo;
    j["since"] = v.since;
    j["role"] = v.role;
  }
  static void from_json(const json& j, MemberSinceDto& v) { 
    v.playerInfo = j.at("playerInfo").get<PlayerInfoDto>(); 
    v.since = j.at("since").get<int64_t>(); 
    v.role = j.at("role").get<std::string>(); 
  } 
  struct ClubMembershipDto { /**/ 
    std::string clubKey;/**/
    std::vector<MemberSinceDto> removedMembers;/**/
    std::vector<MemberSinceDto> nominatedMembers;/**/
    std::vector<MemberSinceDto> invitedMembers;/**/
    std::vector<MemberSinceDto> activeMembers;/**/
  };
  static void to_json(json& j, const ClubMembershipDto& v) { 
    j["clubKey"] = v.clubKey;
    j["removedMembers"] = v.removedMembers;
    j["nominatedMembers"] = v.nominatedMembers;
    j["invitedMembers"] = v.invitedMembers;
    j["activeMembers"] = v.activeMembers;
  }
  static void from_json(const json& j, ClubMembershipDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.removedMembers = j.at("removedMembers").get<std::vector<MemberSinceDto>>(); 
    v.nominatedMembers = j.at("nominatedMembers").get<std::vector<MemberSinceDto>>(); 
    v.invitedMembers = j.at("invitedMembers").get<std::vector<MemberSinceDto>>(); 
    v.activeMembers = j.at("activeMembers").get<std::vector<MemberSinceDto>>(); 
  } 
  struct ClubDto { /**/ 
    ClubMembershipDto membership;/**/
    std::string platformId;/**/
    std::string resourceUri;/**/
    ClubDataDto clubData;/**/
  };
  static void to_json(json& j, const ClubDto& v) { 
    j["membership"] = v.membership;
    j["platformId"] = v.platformId;
    j["resourceUri"] = v.resourceUri;
    j["clubData"] = v.clubData;
  }
  static void from_json(const json& j, ClubDto& v) { 
    v.membership = j.at("membership").get<ClubMembershipDto>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.resourceUri = j.at("resourceUri").get<std::string>(); 
    v.clubData = j.at("clubData").get<ClubDataDto>(); 
  } 
  enum class ClubInviteStatus { /**/ 
    ACCEPTED_e = 1, /**/ 
    BLOCKED_e = 3, /**/ 
    PENDING_e = 0, /**/ 
    REJECTED_e = 2, /**/ 
  };
  static void to_json(json& j, const ClubInviteStatus& v) {
    switch(v) { 
    case ClubInviteStatus::ACCEPTED_e:
      j = "ACCEPTED";
    break;
    case ClubInviteStatus::BLOCKED_e:
      j = "BLOCKED";
    break;
    case ClubInviteStatus::PENDING_e:
      j = "PENDING";
    break;
    case ClubInviteStatus::REJECTED_e:
      j = "REJECTED";
    break;
    };
  }
  static void from_json(const json& j, ClubInviteStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "ACCEPTED") {
      v = ClubInviteStatus::ACCEPTED_e;
      return;
    } 
    if(s == "BLOCKED") {
      v = ClubInviteStatus::BLOCKED_e;
      return;
    } 
    if(s == "PENDING") {
      v = ClubInviteStatus::PENDING_e;
      return;
    } 
    if(s == "REJECTED") {
      v = ClubInviteStatus::REJECTED_e;
      return;
    } 
  } 
  struct ClubInvite { /**/ 
    std::string clubKey;/**/
    uint64_t inviteeAccountId;/**/
    uint64_t inviteeSummonerId;/**/
    uint64_t inviterAccountId;/**/
    std::string clubName;/**/
    std::string inviterSummonerName;/**/
    uint64_t inviterSummonerId;/**/
    ClubInviteStatus status;/**/
  };
  static void to_json(json& j, const ClubInvite& v) { 
    j["clubKey"] = v.clubKey;
    j["inviteeAccountId"] = v.inviteeAccountId;
    j["inviteeSummonerId"] = v.inviteeSummonerId;
    j["inviterAccountId"] = v.inviterAccountId;
    j["clubName"] = v.clubName;
    j["inviterSummonerName"] = v.inviterSummonerName;
    j["inviterSummonerId"] = v.inviterSummonerId;
    j["status"] = v.status;
  }
  static void from_json(const json& j, ClubInvite& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.inviteeAccountId = j.at("inviteeAccountId").get<uint64_t>(); 
    v.inviteeSummonerId = j.at("inviteeSummonerId").get<uint64_t>(); 
    v.inviterAccountId = j.at("inviterAccountId").get<uint64_t>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
    v.inviterSummonerName = j.at("inviterSummonerName").get<std::string>(); 
    v.inviterSummonerId = j.at("inviterSummonerId").get<uint64_t>(); 
    v.status = j.at("status").get<ClubInviteStatus>(); 
  } 
  struct ClubMOTD { /**/ 
    std::string motd;/**/
  };
  static void to_json(json& j, const ClubMOTD& v) { 
    j["motd"] = v.motd;
  }
  static void from_json(const json& j, ClubMOTD& v) { 
    v.motd = j.at("motd").get<std::string>(); 
  } 
  enum class ClubRole { /**/ 
    INVITEE_e = 4, /**/ 
    MEMBER_e = 3, /**/ 
    NOMINEE_e = 5, /**/ 
    OFFICER_e = 2, /**/ 
    OWNER_e = 1, /**/ 
    UNKNOWN_e = 0, /**/ 
  };
  static void to_json(json& j, const ClubRole& v) {
    switch(v) { 
    case ClubRole::INVITEE_e:
      j = "INVITEE";
    break;
    case ClubRole::MEMBER_e:
      j = "MEMBER";
    break;
    case ClubRole::NOMINEE_e:
      j = "NOMINEE";
    break;
    case ClubRole::OFFICER_e:
      j = "OFFICER";
    break;
    case ClubRole::OWNER_e:
      j = "OWNER";
    break;
    case ClubRole::UNKNOWN_e:
      j = "UNKNOWN";
    break;
    };
  }
  static void from_json(const json& j, ClubRole& v) {
    auto s = j.get<std::string>(); 
    if(s == "INVITEE") {
      v = ClubRole::INVITEE_e;
      return;
    } 
    if(s == "MEMBER") {
      v = ClubRole::MEMBER_e;
      return;
    } 
    if(s == "NOMINEE") {
      v = ClubRole::NOMINEE_e;
      return;
    } 
    if(s == "OFFICER") {
      v = ClubRole::OFFICER_e;
      return;
    } 
    if(s == "OWNER") {
      v = ClubRole::OWNER_e;
      return;
    } 
    if(s == "UNKNOWN") {
      v = ClubRole::UNKNOWN_e;
      return;
    } 
  } 
  struct ClubMember { /**/ 
    int64_t since;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    int32_t summonerIconId;/**/
    ClubRole role;/**/
    std::string summonerName;/**/
  };
  static void to_json(json& j, const ClubMember& v) { 
    j["since"] = v.since;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["summonerIconId"] = v.summonerIconId;
    j["role"] = v.role;
    j["summonerName"] = v.summonerName;
  }
  static void from_json(const json& j, ClubMember& v) { 
    v.since = j.at("since").get<int64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerIconId = j.at("summonerIconId").get<int32_t>(); 
    v.role = j.at("role").get<ClubRole>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
  } 
  struct ClubMemberLists { /**/ 
    std::vector<ClubMember> removedMembers;/**/
    std::vector<ClubMember> nominatedMembers;/**/
    std::vector<ClubMember> invitedMembers;/**/
    std::vector<ClubMember> activeMembers;/**/
  };
  static void to_json(json& j, const ClubMemberLists& v) { 
    j["removedMembers"] = v.removedMembers;
    j["nominatedMembers"] = v.nominatedMembers;
    j["invitedMembers"] = v.invitedMembers;
    j["activeMembers"] = v.activeMembers;
  }
  static void from_json(const json& j, ClubMemberLists& v) { 
    v.removedMembers = j.at("removedMembers").get<std::vector<ClubMember>>(); 
    v.nominatedMembers = j.at("nominatedMembers").get<std::vector<ClubMember>>(); 
    v.invitedMembers = j.at("invitedMembers").get<std::vector<ClubMember>>(); 
    v.activeMembers = j.at("activeMembers").get<std::vector<ClubMember>>(); 
  } 
  struct ClubName { /**/ 
    std::string name;/**/
  };
  static void to_json(json& j, const ClubName& v) { 
    j["name"] = v.name;
  }
  static void from_json(const json& j, ClubName& v) { 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class ClubPermission { /**/ 
    DEMOTE_e = 2, /**/ 
    INVITE_e = 0, /**/ 
    KICK_MEMBER_e = 3, /**/ 
    KICK_OFFICER_e = 4, /**/ 
    NOMINATE_e = 6, /**/ 
    OWNERSHIP_TRANSFER_e = 5, /**/ 
    PROMOTE_e = 1, /**/ 
    SET_DESCRIPTION_e = 8, /**/ 
    SET_MOTD_e = 7, /**/ 
  };
  static void to_json(json& j, const ClubPermission& v) {
    switch(v) { 
    case ClubPermission::DEMOTE_e:
      j = "DEMOTE";
    break;
    case ClubPermission::INVITE_e:
      j = "INVITE";
    break;
    case ClubPermission::KICK_MEMBER_e:
      j = "KICK_MEMBER";
    break;
    case ClubPermission::KICK_OFFICER_e:
      j = "KICK_OFFICER";
    break;
    case ClubPermission::NOMINATE_e:
      j = "NOMINATE";
    break;
    case ClubPermission::OWNERSHIP_TRANSFER_e:
      j = "OWNERSHIP_TRANSFER";
    break;
    case ClubPermission::PROMOTE_e:
      j = "PROMOTE";
    break;
    case ClubPermission::SET_DESCRIPTION_e:
      j = "SET_DESCRIPTION";
    break;
    case ClubPermission::SET_MOTD_e:
      j = "SET_MOTD";
    break;
    };
  }
  static void from_json(const json& j, ClubPermission& v) {
    auto s = j.get<std::string>(); 
    if(s == "DEMOTE") {
      v = ClubPermission::DEMOTE_e;
      return;
    } 
    if(s == "INVITE") {
      v = ClubPermission::INVITE_e;
      return;
    } 
    if(s == "KICK_MEMBER") {
      v = ClubPermission::KICK_MEMBER_e;
      return;
    } 
    if(s == "KICK_OFFICER") {
      v = ClubPermission::KICK_OFFICER_e;
      return;
    } 
    if(s == "NOMINATE") {
      v = ClubPermission::NOMINATE_e;
      return;
    } 
    if(s == "OWNERSHIP_TRANSFER") {
      v = ClubPermission::OWNERSHIP_TRANSFER_e;
      return;
    } 
    if(s == "PROMOTE") {
      v = ClubPermission::PROMOTE_e;
      return;
    } 
    if(s == "SET_DESCRIPTION") {
      v = ClubPermission::SET_DESCRIPTION_e;
      return;
    } 
    if(s == "SET_MOTD") {
      v = ClubPermission::SET_MOTD_e;
      return;
    } 
  } 
  struct ClubPlayer { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    int32_t summonerIconId;/**/
  };
  static void to_json(json& j, const ClubPlayer& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["summonerIconId"] = v.summonerIconId;
  }
  static void from_json(const json& j, ClubPlayer& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerIconId = j.at("summonerIconId").get<int32_t>(); 
  } 
  struct ClubPreferences { /**/ 
    std::string primaryClubKey;/**/
    bool shareClubAffiliation;/**/
  };
  static void to_json(json& j, const ClubPreferences& v) { 
    j["primaryClubKey"] = v.primaryClubKey;
    j["shareClubAffiliation"] = v.shareClubAffiliation;
  }
  static void from_json(const json& j, ClubPreferences& v) { 
    v.primaryClubKey = j.at("primaryClubKey").get<std::string>(); 
    v.shareClubAffiliation = j.at("shareClubAffiliation").get<bool>(); 
  } 
  struct ClubReferenceDto { /**/ 
    std::string clubKey;/**/
    std::string clubName;/**/
  };
  static void to_json(json& j, const ClubReferenceDto& v) { 
    j["clubKey"] = v.clubKey;
    j["clubName"] = v.clubName;
  }
  static void from_json(const json& j, ClubReferenceDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
  } 
  struct ClubTag { /**/ 
    std::string tag;/**/
  };
  static void to_json(json& j, const ClubTag& v) { 
    j["tag"] = v.tag;
  }
  static void from_json(const json& j, ClubTag& v) { 
    v.tag = j.at("tag").get<std::string>(); 
  } 
  struct ClubsConfig { /**/ 
    int32_t minClubNameLength;/**/
    bool clubNominationsEnabled;/**/
    int32_t clubMotdMaxLength;/**/
    int32_t clubNominationsMaxPending;/**/
    int32_t maxClubNameLength;/**/
    int32_t maxClubTagLength;/**/
    int32_t clubDescriptionMaxLength;/**/
    int32_t clubTagRequirementsMinMemberLevel;/**/
    int32_t minClubTagLength;/**/
    int32_t maxActiveClubs;/**/
    int32_t clubTagRequirementMinMembers;/**/
    int32_t clubTagRequirementMinGames;/**/
  };
  static void to_json(json& j, const ClubsConfig& v) { 
    j["minClubNameLength"] = v.minClubNameLength;
    j["clubNominationsEnabled"] = v.clubNominationsEnabled;
    j["clubMotdMaxLength"] = v.clubMotdMaxLength;
    j["clubNominationsMaxPending"] = v.clubNominationsMaxPending;
    j["maxClubNameLength"] = v.maxClubNameLength;
    j["maxClubTagLength"] = v.maxClubTagLength;
    j["clubDescriptionMaxLength"] = v.clubDescriptionMaxLength;
    j["clubTagRequirementsMinMemberLevel"] = v.clubTagRequirementsMinMemberLevel;
    j["minClubTagLength"] = v.minClubTagLength;
    j["maxActiveClubs"] = v.maxActiveClubs;
    j["clubTagRequirementMinMembers"] = v.clubTagRequirementMinMembers;
    j["clubTagRequirementMinGames"] = v.clubTagRequirementMinGames;
  }
  static void from_json(const json& j, ClubsConfig& v) { 
    v.minClubNameLength = j.at("minClubNameLength").get<int32_t>(); 
    v.clubNominationsEnabled = j.at("clubNominationsEnabled").get<bool>(); 
    v.clubMotdMaxLength = j.at("clubMotdMaxLength").get<int32_t>(); 
    v.clubNominationsMaxPending = j.at("clubNominationsMaxPending").get<int32_t>(); 
    v.maxClubNameLength = j.at("maxClubNameLength").get<int32_t>(); 
    v.maxClubTagLength = j.at("maxClubTagLength").get<int32_t>(); 
    v.clubDescriptionMaxLength = j.at("clubDescriptionMaxLength").get<int32_t>(); 
    v.clubTagRequirementsMinMemberLevel = j.at("clubTagRequirementsMinMemberLevel").get<int32_t>(); 
    v.minClubTagLength = j.at("minClubTagLength").get<int32_t>(); 
    v.maxActiveClubs = j.at("maxActiveClubs").get<int32_t>(); 
    v.clubTagRequirementMinMembers = j.at("clubTagRequirementMinMembers").get<int32_t>(); 
    v.clubTagRequirementMinGames = j.at("clubTagRequirementMinGames").get<int32_t>(); 
  } 
  struct ClubsNotificationResource { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    bool critical;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string created;/**/
    std::string expires;/**/
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const ClubsNotificationResource& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["data"] = v.data;
    j["type"] = v.type;
    j["created"] = v.created;
    j["expires"] = v.expires;
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, ClubsNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct ClubsPresenceDataDto { /**/ 
    uint64_t summonerId;/**/
    std::string summonerName;/**/
    std::string clubTag;/**/
    std::string clubName;/**/
  };
  static void to_json(json& j, const ClubsPresenceDataDto& v) { 
    j["summonerId"] = v.summonerId;
    j["summonerName"] = v.summonerName;
    j["clubTag"] = v.clubTag;
    j["clubName"] = v.clubName;
  }
  static void from_json(const json& j, ClubsPresenceDataDto& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.clubTag = j.at("clubTag").get<std::string>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
  } 
  struct ClubsServerConfigDto { /**/ 
    int32_t minClubNameLength;/**/
    bool clubNominationsEnabled;/**/
    int32_t clubMotdMaxLength;/**/
    int32_t clubNominationsMaxPending;/**/
    int32_t maxClubNameLength;/**/
    int32_t maxClubTagLength;/**/
    int32_t clubDescriptionMaxLength;/**/
    int32_t clubTagRequirementsMinMemberLevel;/**/
    int32_t minClubTagLength;/**/
    int32_t maxActiveClubs;/**/
    int32_t clubTagRequirementMinMembers;/**/
    int32_t clubTagRequirementMinGames;/**/
  };
  static void to_json(json& j, const ClubsServerConfigDto& v) { 
    j["minClubNameLength"] = v.minClubNameLength;
    j["clubNominationsEnabled"] = v.clubNominationsEnabled;
    j["clubMotdMaxLength"] = v.clubMotdMaxLength;
    j["clubNominationsMaxPending"] = v.clubNominationsMaxPending;
    j["maxClubNameLength"] = v.maxClubNameLength;
    j["maxClubTagLength"] = v.maxClubTagLength;
    j["clubDescriptionMaxLength"] = v.clubDescriptionMaxLength;
    j["clubTagRequirementsMinMemberLevel"] = v.clubTagRequirementsMinMemberLevel;
    j["minClubTagLength"] = v.minClubTagLength;
    j["maxActiveClubs"] = v.maxActiveClubs;
    j["clubTagRequirementMinMembers"] = v.clubTagRequirementMinMembers;
    j["clubTagRequirementMinGames"] = v.clubTagRequirementMinGames;
  }
  static void from_json(const json& j, ClubsServerConfigDto& v) { 
    v.minClubNameLength = j.at("minClubNameLength").get<int32_t>(); 
    v.clubNominationsEnabled = j.at("clubNominationsEnabled").get<bool>(); 
    v.clubMotdMaxLength = j.at("clubMotdMaxLength").get<int32_t>(); 
    v.clubNominationsMaxPending = j.at("clubNominationsMaxPending").get<int32_t>(); 
    v.maxClubNameLength = j.at("maxClubNameLength").get<int32_t>(); 
    v.maxClubTagLength = j.at("maxClubTagLength").get<int32_t>(); 
    v.clubDescriptionMaxLength = j.at("clubDescriptionMaxLength").get<int32_t>(); 
    v.clubTagRequirementsMinMemberLevel = j.at("clubTagRequirementsMinMemberLevel").get<int32_t>(); 
    v.minClubTagLength = j.at("minClubTagLength").get<int32_t>(); 
    v.maxActiveClubs = j.at("maxActiveClubs").get<int32_t>(); 
    v.clubTagRequirementMinMembers = j.at("clubTagRequirementMinMembers").get<int32_t>(); 
    v.clubTagRequirementMinGames = j.at("clubTagRequirementMinGames").get<int32_t>(); 
  } 
  struct ClubsSummoner { /**/ 
    int32_t profileIconId;/**/
    uint64_t summonerId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const ClubsSummoner& v) { 
    j["profileIconId"] = v.profileIconId;
    j["summonerId"] = v.summonerId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, ClubsSummoner& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct CollectionsLcdsChampionSkinDTO { /**/ 
    int32_t winCountRemaining;/**/
    uint64_t endDate;/**/
    int32_t skinId;/**/
    bool lastSelected;/**/
    bool stillObtainable;/**/
    bool owned;/**/
    bool freeToPlayReward;/**/
    std::vector<std::string> sources;/**/
    int32_t championId;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const CollectionsLcdsChampionSkinDTO& v) { 
    j["winCountRemaining"] = v.winCountRemaining;
    j["endDate"] = v.endDate;
    j["skinId"] = v.skinId;
    j["lastSelected"] = v.lastSelected;
    j["stillObtainable"] = v.stillObtainable;
    j["owned"] = v.owned;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["sources"] = v.sources;
    j["championId"] = v.championId;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, CollectionsLcdsChampionSkinDTO& v) { 
    v.winCountRemaining = j.at("winCountRemaining").get<int32_t>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.lastSelected = j.at("lastSelected").get<bool>(); 
    v.stillObtainable = j.at("stillObtainable").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.sources = j.at("sources").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct CollectionsLcdsChampionDTO { /**/ 
    bool rankedPlayEnabled;/**/
    bool freeToPlay;/**/
    uint64_t endDate;/**/
    std::vector<std::string> sources;/**/
    int32_t championId;/**/
    int32_t winCountRemaining;/**/
    uint64_t purchased;/**/
    std::vector<CollectionsLcdsChampionSkinDTO> championSkins;/**/
    bool botEnabled;/**/
    uint64_t purchaseDate;/**/
    bool freeToPlayReward;/**/
    bool active;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const CollectionsLcdsChampionDTO& v) { 
    j["rankedPlayEnabled"] = v.rankedPlayEnabled;
    j["freeToPlay"] = v.freeToPlay;
    j["endDate"] = v.endDate;
    j["sources"] = v.sources;
    j["championId"] = v.championId;
    j["winCountRemaining"] = v.winCountRemaining;
    j["purchased"] = v.purchased;
    j["championSkins"] = v.championSkins;
    j["botEnabled"] = v.botEnabled;
    j["purchaseDate"] = v.purchaseDate;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["active"] = v.active;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, CollectionsLcdsChampionDTO& v) { 
    v.rankedPlayEnabled = j.at("rankedPlayEnabled").get<bool>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.sources = j.at("sources").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.winCountRemaining = j.at("winCountRemaining").get<int32_t>(); 
    v.purchased = j.at("purchased").get<uint64_t>(); 
    v.championSkins = j.at("championSkins").get<std::vector<CollectionsLcdsChampionSkinDTO>>(); 
    v.botEnabled = j.at("botEnabled").get<bool>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.active = j.at("active").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct CollectionsLcdsClientDynamicConfigurationNotification { /**/ 
    std::string configs;/**/
    bool delta;/**/
  };
  static void to_json(json& j, const CollectionsLcdsClientDynamicConfigurationNotification& v) { 
    j["configs"] = v.configs;
    j["delta"] = v.delta;
  }
  static void from_json(const json& j, CollectionsLcdsClientDynamicConfigurationNotification& v) { 
    v.configs = j.at("configs").get<std::string>(); 
    v.delta = j.at("delta").get<bool>(); 
  } 
  struct CollectionsLcdsTalentEntry { /**/ 
    int32_t rank;/**/
    int32_t talentId;/**/
  };
  static void to_json(json& j, const CollectionsLcdsTalentEntry& v) { 
    j["rank"] = v.rank;
    j["talentId"] = v.talentId;
  }
  static void from_json(const json& j, CollectionsLcdsTalentEntry& v) { 
    v.rank = j.at("rank").get<int32_t>(); 
    v.talentId = j.at("talentId").get<int32_t>(); 
  } 
  struct CollectionsLcdsMasteryBookPageDTO { /**/ 
    uint32_t pageId;/**/
    uint64_t summonerId;/**/
    uint64_t createDate;/**/
    std::string name;/**/
    std::vector<CollectionsLcdsTalentEntry> talentEntries;/**/
    bool current;/**/
  };
  static void to_json(json& j, const CollectionsLcdsMasteryBookPageDTO& v) { 
    j["pageId"] = v.pageId;
    j["summonerId"] = v.summonerId;
    j["createDate"] = v.createDate;
    j["name"] = v.name;
    j["talentEntries"] = v.talentEntries;
    j["current"] = v.current;
  }
  static void from_json(const json& j, CollectionsLcdsMasteryBookPageDTO& v) { 
    v.pageId = j.at("pageId").get<uint32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.createDate = j.at("createDate").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.talentEntries = j.at("talentEntries").get<std::vector<CollectionsLcdsTalentEntry>>(); 
    v.current = j.at("current").get<bool>(); 
  } 
  struct CollectionsLcdsMasteryBookDTO { /**/ 
    std::vector<CollectionsLcdsMasteryBookPageDTO> bookPages;/**/
    uint64_t summonerId;/**/
    std::string dateString;/**/
  };
  static void to_json(json& j, const CollectionsLcdsMasteryBookDTO& v) { 
    j["bookPages"] = v.bookPages;
    j["summonerId"] = v.summonerId;
    j["dateString"] = v.dateString;
  }
  static void from_json(const json& j, CollectionsLcdsMasteryBookDTO& v) { 
    v.bookPages = j.at("bookPages").get<std::vector<CollectionsLcdsMasteryBookPageDTO>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.dateString = j.at("dateString").get<std::string>(); 
  } 
  struct CollectionsLcdsRentalUpdateNotification { /**/ 
    std::string inventoryType;/**/
    json data;/**/
  };
  static void to_json(json& j, const CollectionsLcdsRentalUpdateNotification& v) { 
    j["inventoryType"] = v.inventoryType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, CollectionsLcdsRentalUpdateNotification& v) { 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct CollectionsLcdsSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, CollectionsLcdsSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct CollectionsLcdsSlotEntry { /**/ 
    uint32_t runeSlotId;/**/
    uint32_t runeId;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSlotEntry& v) { 
    j["runeSlotId"] = v.runeSlotId;
    j["runeId"] = v.runeId;
  }
  static void from_json(const json& j, CollectionsLcdsSlotEntry& v) { 
    v.runeSlotId = j.at("runeSlotId").get<uint32_t>(); 
    v.runeId = j.at("runeId").get<uint32_t>(); 
  } 
  struct CollectionsLcdsSpellBookPageDTO { /**/ 
    std::vector<CollectionsLcdsSlotEntry> slotEntries;/**/
    uint32_t pageId;/**/
    uint64_t summonerId;/**/
    uint64_t createDate;/**/
    std::string name;/**/
    bool current;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSpellBookPageDTO& v) { 
    j["slotEntries"] = v.slotEntries;
    j["pageId"] = v.pageId;
    j["summonerId"] = v.summonerId;
    j["createDate"] = v.createDate;
    j["name"] = v.name;
    j["current"] = v.current;
  }
  static void from_json(const json& j, CollectionsLcdsSpellBookPageDTO& v) { 
    v.slotEntries = j.at("slotEntries").get<std::vector<CollectionsLcdsSlotEntry>>(); 
    v.pageId = j.at("pageId").get<uint32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.createDate = j.at("createDate").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.current = j.at("current").get<bool>(); 
  } 
  struct CollectionsLcdsSpellBookDTO { /**/ 
    std::vector<CollectionsLcdsSpellBookPageDTO> bookPages;/**/
    uint64_t summonerId;/**/
    std::string dateString;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSpellBookDTO& v) { 
    j["bookPages"] = v.bookPages;
    j["summonerId"] = v.summonerId;
    j["dateString"] = v.dateString;
  }
  static void from_json(const json& j, CollectionsLcdsSpellBookDTO& v) { 
    v.bookPages = j.at("bookPages").get<std::vector<CollectionsLcdsSpellBookPageDTO>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.dateString = j.at("dateString").get<std::string>(); 
  } 
  struct CollectionsLcdsStoreFulfillmentNotification { /**/ 
    std::string inventoryType;/**/
    json data;/**/
  };
  static void to_json(json& j, const CollectionsLcdsStoreFulfillmentNotification& v) { 
    j["inventoryType"] = v.inventoryType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, CollectionsLcdsStoreFulfillmentNotification& v) { 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct CollectionsLcdsSummonerIcon { /**/ 
    uint64_t summonerId;/**/
    int32_t iconId;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSummonerIcon& v) { 
    j["summonerId"] = v.summonerId;
    j["iconId"] = v.iconId;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, CollectionsLcdsSummonerIcon& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct CollectionsLcdsSummonerIconInventoryDTO { /**/ 
    std::vector<CollectionsLcdsSummonerIcon> summonerIcons;/**/
    uint64_t summonerId;/**/
    std::string dateString;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSummonerIconInventoryDTO& v) { 
    j["summonerIcons"] = v.summonerIcons;
    j["summonerId"] = v.summonerId;
    j["dateString"] = v.dateString;
  }
  static void from_json(const json& j, CollectionsLcdsSummonerIconInventoryDTO& v) { 
    v.summonerIcons = j.at("summonerIcons").get<std::vector<CollectionsLcdsSummonerIcon>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.dateString = j.at("dateString").get<std::string>(); 
  } 
  struct CollectionsLcdsSummonerRune { /**/ 
    uint32_t runeId;/**/
    int32_t quantity;/**/
    uint64_t purchased;/**/
    uint64_t summonerId;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSummonerRune& v) { 
    j["runeId"] = v.runeId;
    j["quantity"] = v.quantity;
    j["purchased"] = v.purchased;
    j["summonerId"] = v.summonerId;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, CollectionsLcdsSummonerRune& v) { 
    v.runeId = j.at("runeId").get<uint32_t>(); 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.purchased = j.at("purchased").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct CollectionsLcdsSummonerRuneInventory { /**/ 
    uint64_t summonerId;/**/
    std::string dateString;/**/
    std::vector<CollectionsLcdsSummonerRune> summonerRunes;/**/
  };
  static void to_json(json& j, const CollectionsLcdsSummonerRuneInventory& v) { 
    j["summonerId"] = v.summonerId;
    j["dateString"] = v.dateString;
    j["summonerRunes"] = v.summonerRunes;
  }
  static void from_json(const json& j, CollectionsLcdsSummonerRuneInventory& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.dateString = j.at("dateString").get<std::string>(); 
    v.summonerRunes = j.at("summonerRunes").get<std::vector<CollectionsLcdsSummonerRune>>(); 
  } 
  struct ContentItemIdentifier { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const ContentItemIdentifier& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, ContentItemIdentifier& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LootNameRefId { /**/ 
    std::string refId;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const LootNameRefId& v) { 
    j["refId"] = v.refId;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, LootNameRefId& v) { 
    v.refId = j.at("refId").get<std::string>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct CraftLootRefTransactionDTO { /**/ 
    int32_t repeat;/**/
    std::string recipeName;/**/
    std::vector<LootNameRefId> lootNameRefIds;/**/
  };
  static void to_json(json& j, const CraftLootRefTransactionDTO& v) { 
    j["repeat"] = v.repeat;
    j["recipeName"] = v.recipeName;
    j["lootNameRefIds"] = v.lootNameRefIds;
  }
  static void from_json(const json& j, CraftLootRefTransactionDTO& v) { 
    v.repeat = j.at("repeat").get<int32_t>(); 
    v.recipeName = j.at("recipeName").get<std::string>(); 
    v.lootNameRefIds = j.at("lootNameRefIds").get<std::vector<LootNameRefId>>(); 
  } 
  struct DownloadUrlRequestV2 { /**/ 
    uint64_t gameId;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const DownloadUrlRequestV2& v) { 
    j["gameId"] = v.gameId;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, DownloadUrlRequestV2& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct DownloadUrlResponseV2 { /**/ 
    std::string url;/**/
  };
  static void to_json(json& j, const DownloadUrlResponseV2& v) { 
    j["url"] = v.url;
  }
  static void from_json(const json& j, DownloadUrlResponseV2& v) { 
    v.url = j.at("url").get<std::string>(); 
  } 
  struct DynamicCelebrationMessagingNotificationResource { /**/ 
    int32_t status;/**/
    std::string itemId;/**/
    std::string celebrationType;/**/
    int32_t id;/**/
    std::string celebrationMessage;/**/
    std::string celebrationTitle;/**/
    std::string msgId;/**/
    std::string celebrationBody;/**/
    std::string itemQuantity;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const DynamicCelebrationMessagingNotificationResource& v) { 
    j["status"] = v.status;
    j["itemId"] = v.itemId;
    j["celebrationType"] = v.celebrationType;
    j["id"] = v.id;
    j["celebrationMessage"] = v.celebrationMessage;
    j["celebrationTitle"] = v.celebrationTitle;
    j["msgId"] = v.msgId;
    j["celebrationBody"] = v.celebrationBody;
    j["itemQuantity"] = v.itemQuantity;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, DynamicCelebrationMessagingNotificationResource& v) { 
    v.status = j.at("status").get<int32_t>(); 
    v.itemId = j.at("itemId").get<std::string>(); 
    v.celebrationType = j.at("celebrationType").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.celebrationMessage = j.at("celebrationMessage").get<std::string>(); 
    v.celebrationTitle = j.at("celebrationTitle").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.celebrationBody = j.at("celebrationBody").get<std::string>(); 
    v.itemQuantity = j.at("itemQuantity").get<std::string>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct EndOfGameLcdsClientReportV1 { /**/ 
    uint64_t offenderSummonerId;/**/
    uint64_t gameId;/**/
    std::string comments;/**/
    std::string offenses;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsClientReportV1& v) { 
    j["offenderSummonerId"] = v.offenderSummonerId;
    j["gameId"] = v.gameId;
    j["comments"] = v.comments;
    j["offenses"] = v.offenses;
  }
  static void from_json(const json& j, EndOfGameLcdsClientReportV1& v) { 
    v.offenderSummonerId = j.at("offenderSummonerId").get<uint64_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.comments = j.at("comments").get<std::string>(); 
    v.offenses = j.at("offenses").get<std::string>(); 
  } 
  struct EndOfGameLcdsSpell { /**/ 
    int32_t spellId;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsSpell& v) { 
    j["spellId"] = v.spellId;
  }
  static void from_json(const json& j, EndOfGameLcdsSpell& v) { 
    v.spellId = j.at("spellId").get<int32_t>(); 
  } 
  struct EndOfGameLcdsTeamId { /**/ 
    std::string fullId;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsTeamId& v) { 
    j["fullId"] = v.fullId;
  }
  static void from_json(const json& j, EndOfGameLcdsTeamId& v) { 
    v.fullId = j.at("fullId").get<std::string>(); 
  } 
  struct EndOfGameLcdsTeamInfo { /**/ 
    EndOfGameLcdsTeamId teamId;/**/
    std::string tag;/**/
    int64_t secondsUntilEligibleForDeletion;/**/
    std::string memberStatusString;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsTeamInfo& v) { 
    j["teamId"] = v.teamId;
    j["tag"] = v.tag;
    j["secondsUntilEligibleForDeletion"] = v.secondsUntilEligibleForDeletion;
    j["memberStatusString"] = v.memberStatusString;
    j["name"] = v.name;
  }
  static void from_json(const json& j, EndOfGameLcdsTeamInfo& v) { 
    v.teamId = j.at("teamId").get<EndOfGameLcdsTeamId>(); 
    v.tag = j.at("tag").get<std::string>(); 
    v.secondsUntilEligibleForDeletion = j.at("secondsUntilEligibleForDeletion").get<int64_t>(); 
    v.memberStatusString = j.at("memberStatusString").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct EndOfGameLcdsRawStatDTO { /**/ 
    int64_t value;/**/
    std::string statTypeName;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsRawStatDTO& v) { 
    j["value"] = v.value;
    j["statTypeName"] = v.statTypeName;
  }
  static void from_json(const json& j, EndOfGameLcdsRawStatDTO& v) { 
    v.value = j.at("value").get<int64_t>(); 
    v.statTypeName = j.at("statTypeName").get<std::string>(); 
  } 
  struct EndOfGameLcdsPlayerParticipantStatsSummary { /**/ 
    int32_t spell2Id;/**/
    std::vector<EndOfGameLcdsRawStatDTO> statistics;/**/
    int32_t profileIconId;/**/
    bool leaver;/**/
    int32_t teamId;/**/
    int32_t eloChange;/**/
    int32_t wins;/**/
    int32_t losses;/**/
    int32_t spell1Id;/**/
    uint64_t userId;/**/
    int32_t championId;/**/
    int32_t skinIndex;/**/
    int32_t level;/**/
    bool botPlayer;/**/
    int32_t elo;/**/
    std::string summonerName;/**/
    std::string skinName;/**/
    uint64_t gameId;/**/
    int32_t leaves;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsPlayerParticipantStatsSummary& v) { 
    j["spell2Id"] = v.spell2Id;
    j["statistics"] = v.statistics;
    j["profileIconId"] = v.profileIconId;
    j["leaver"] = v.leaver;
    j["teamId"] = v.teamId;
    j["eloChange"] = v.eloChange;
    j["wins"] = v.wins;
    j["losses"] = v.losses;
    j["spell1Id"] = v.spell1Id;
    j["userId"] = v.userId;
    j["championId"] = v.championId;
    j["skinIndex"] = v.skinIndex;
    j["level"] = v.level;
    j["botPlayer"] = v.botPlayer;
    j["elo"] = v.elo;
    j["summonerName"] = v.summonerName;
    j["skinName"] = v.skinName;
    j["gameId"] = v.gameId;
    j["leaves"] = v.leaves;
  }
  static void from_json(const json& j, EndOfGameLcdsPlayerParticipantStatsSummary& v) { 
    v.spell2Id = j.at("spell2Id").get<int32_t>(); 
    v.statistics = j.at("statistics").get<std::vector<EndOfGameLcdsRawStatDTO>>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.leaver = j.at("leaver").get<bool>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.wins = j.at("wins").get<int32_t>(); 
    v.losses = j.at("losses").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.level = j.at("level").get<int32_t>(); 
    v.botPlayer = j.at("botPlayer").get<bool>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.leaves = j.at("leaves").get<int32_t>(); 
  } 
  struct EndOfGameLcdsPointsPenalty { /**/ 
    std::string type;/**/
    double penalty;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsPointsPenalty& v) { 
    j["type"] = v.type;
    j["penalty"] = v.penalty;
  }
  static void from_json(const json& j, EndOfGameLcdsPointsPenalty& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.penalty = j.at("penalty").get<double>(); 
  } 
  struct EndOfGameLcdsEndOfGameStats { /**/ 
    int32_t rpEarned;/**/
    int32_t ipTotal;/**/
    std::vector<EndOfGameLcdsSpell> newSpells;/**/
    int32_t eloChange;/**/
    int32_t loyaltyBoostIpEarned;/**/
    uint64_t userId;/**/
    uint32_t gameLength;/**/
    int32_t elo;/**/
    bool ranked;/**/
    bool sendStatsToTournamentProvider;/**/
    std::string summonerName;/**/
    int32_t coOpVsAiMinutesLeftToday;/**/
    int32_t customMinutesLeftToday;/**/
    uint64_t previousXpTotal;/**/
    std::string myTeamStatus;/**/
    bool gameEndedInEarlySurrender;/**/
    int32_t boostIpEarned;/**/
    std::string queueType;/**/
    std::vector<std::string> gameMutators;/**/
    int32_t boostXpEarned;/**/
    int32_t completionBonusPoints;/**/
    uint64_t previousLevel;/**/
    bool earlySurrenderAccomplice;/**/
    bool leveledUp;/**/
    int32_t battleBoostIpEarned;/**/
    uint64_t reportGameId;/**/
    int32_t odinBonusIp;/**/
    EndOfGameLcdsTeamInfo myTeamInfo;/**/
    std::string gameType;/**/
    int32_t queueBonusEarned;/**/
    int32_t skinId;/**/
    int32_t coOpVsAiMsecsUntilReset;/**/
    int32_t experienceEarned;/**/
    EndOfGameLcdsTeamInfo otherTeamInfo;/**/
    std::string roomName;/**/
    bool causedEarlySurrender;/**/
    int32_t timeUntilNextFirstWinBonus;/**/
    int32_t skinIndex;/**/
    int32_t firstWinBonus;/**/
    bool teamEarlySurrendered;/**/
    std::vector<EndOfGameLcdsPlayerParticipantStatsSummary> otherTeamPlayerParticipantStats;/**/
    int32_t talentPointsGained;/**/
    bool imbalancedTeamsNoPoints;/**/
    std::vector<EndOfGameLcdsPointsPenalty> pointsPenalties;/**/
    std::string difficulty;/**/
    int32_t customMsecsUntilReset;/**/
    int32_t experienceTotal;/**/
    std::string roomPassword;/**/
    int32_t ipEarned;/**/
    std::vector<EndOfGameLcdsPlayerParticipantStatsSummary> teamPlayerParticipantStats;/**/
    uint64_t gameId;/**/
    std::string gameMode;/**/
    bool invalid;/**/
    int32_t loyaltyBoostXpEarned;/**/
    int32_t basePoints;/**/
    int32_t partyRewardsBonusIpEarned;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsEndOfGameStats& v) { 
    j["rpEarned"] = v.rpEarned;
    j["ipTotal"] = v.ipTotal;
    j["newSpells"] = v.newSpells;
    j["eloChange"] = v.eloChange;
    j["loyaltyBoostIpEarned"] = v.loyaltyBoostIpEarned;
    j["userId"] = v.userId;
    j["gameLength"] = v.gameLength;
    j["elo"] = v.elo;
    j["ranked"] = v.ranked;
    j["sendStatsToTournamentProvider"] = v.sendStatsToTournamentProvider;
    j["summonerName"] = v.summonerName;
    j["coOpVsAiMinutesLeftToday"] = v.coOpVsAiMinutesLeftToday;
    j["customMinutesLeftToday"] = v.customMinutesLeftToday;
    j["previousXpTotal"] = v.previousXpTotal;
    j["myTeamStatus"] = v.myTeamStatus;
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender;
    j["boostIpEarned"] = v.boostIpEarned;
    j["queueType"] = v.queueType;
    j["gameMutators"] = v.gameMutators;
    j["boostXpEarned"] = v.boostXpEarned;
    j["completionBonusPoints"] = v.completionBonusPoints;
    j["previousLevel"] = v.previousLevel;
    j["earlySurrenderAccomplice"] = v.earlySurrenderAccomplice;
    j["leveledUp"] = v.leveledUp;
    j["battleBoostIpEarned"] = v.battleBoostIpEarned;
    j["reportGameId"] = v.reportGameId;
    j["odinBonusIp"] = v.odinBonusIp;
    j["myTeamInfo"] = v.myTeamInfo;
    j["gameType"] = v.gameType;
    j["queueBonusEarned"] = v.queueBonusEarned;
    j["skinId"] = v.skinId;
    j["coOpVsAiMsecsUntilReset"] = v.coOpVsAiMsecsUntilReset;
    j["experienceEarned"] = v.experienceEarned;
    j["otherTeamInfo"] = v.otherTeamInfo;
    j["roomName"] = v.roomName;
    j["causedEarlySurrender"] = v.causedEarlySurrender;
    j["timeUntilNextFirstWinBonus"] = v.timeUntilNextFirstWinBonus;
    j["skinIndex"] = v.skinIndex;
    j["firstWinBonus"] = v.firstWinBonus;
    j["teamEarlySurrendered"] = v.teamEarlySurrendered;
    j["otherTeamPlayerParticipantStats"] = v.otherTeamPlayerParticipantStats;
    j["talentPointsGained"] = v.talentPointsGained;
    j["imbalancedTeamsNoPoints"] = v.imbalancedTeamsNoPoints;
    j["pointsPenalties"] = v.pointsPenalties;
    j["difficulty"] = v.difficulty;
    j["customMsecsUntilReset"] = v.customMsecsUntilReset;
    j["experienceTotal"] = v.experienceTotal;
    j["roomPassword"] = v.roomPassword;
    j["ipEarned"] = v.ipEarned;
    j["teamPlayerParticipantStats"] = v.teamPlayerParticipantStats;
    j["gameId"] = v.gameId;
    j["gameMode"] = v.gameMode;
    j["invalid"] = v.invalid;
    j["loyaltyBoostXpEarned"] = v.loyaltyBoostXpEarned;
    j["basePoints"] = v.basePoints;
    j["partyRewardsBonusIpEarned"] = v.partyRewardsBonusIpEarned;
  }
  static void from_json(const json& j, EndOfGameLcdsEndOfGameStats& v) { 
    v.rpEarned = j.at("rpEarned").get<int32_t>(); 
    v.ipTotal = j.at("ipTotal").get<int32_t>(); 
    v.newSpells = j.at("newSpells").get<std::vector<EndOfGameLcdsSpell>>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.loyaltyBoostIpEarned = j.at("loyaltyBoostIpEarned").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.gameLength = j.at("gameLength").get<uint32_t>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.sendStatsToTournamentProvider = j.at("sendStatsToTournamentProvider").get<bool>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.coOpVsAiMinutesLeftToday = j.at("coOpVsAiMinutesLeftToday").get<int32_t>(); 
    v.customMinutesLeftToday = j.at("customMinutesLeftToday").get<int32_t>(); 
    v.previousXpTotal = j.at("previousXpTotal").get<uint64_t>(); 
    v.myTeamStatus = j.at("myTeamStatus").get<std::string>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.boostIpEarned = j.at("boostIpEarned").get<int32_t>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.boostXpEarned = j.at("boostXpEarned").get<int32_t>(); 
    v.completionBonusPoints = j.at("completionBonusPoints").get<int32_t>(); 
    v.previousLevel = j.at("previousLevel").get<uint64_t>(); 
    v.earlySurrenderAccomplice = j.at("earlySurrenderAccomplice").get<bool>(); 
    v.leveledUp = j.at("leveledUp").get<bool>(); 
    v.battleBoostIpEarned = j.at("battleBoostIpEarned").get<int32_t>(); 
    v.reportGameId = j.at("reportGameId").get<uint64_t>(); 
    v.odinBonusIp = j.at("odinBonusIp").get<int32_t>(); 
    v.myTeamInfo = j.at("myTeamInfo").get<EndOfGameLcdsTeamInfo>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.queueBonusEarned = j.at("queueBonusEarned").get<int32_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.coOpVsAiMsecsUntilReset = j.at("coOpVsAiMsecsUntilReset").get<int32_t>(); 
    v.experienceEarned = j.at("experienceEarned").get<int32_t>(); 
    v.otherTeamInfo = j.at("otherTeamInfo").get<EndOfGameLcdsTeamInfo>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.causedEarlySurrender = j.at("causedEarlySurrender").get<bool>(); 
    v.timeUntilNextFirstWinBonus = j.at("timeUntilNextFirstWinBonus").get<int32_t>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.firstWinBonus = j.at("firstWinBonus").get<int32_t>(); 
    v.teamEarlySurrendered = j.at("teamEarlySurrendered").get<bool>(); 
    v.otherTeamPlayerParticipantStats = j.at("otherTeamPlayerParticipantStats").get<std::vector<EndOfGameLcdsPlayerParticipantStatsSummary>>(); 
    v.talentPointsGained = j.at("talentPointsGained").get<int32_t>(); 
    v.imbalancedTeamsNoPoints = j.at("imbalancedTeamsNoPoints").get<bool>(); 
    v.pointsPenalties = j.at("pointsPenalties").get<std::vector<EndOfGameLcdsPointsPenalty>>(); 
    v.difficulty = j.at("difficulty").get<std::string>(); 
    v.customMsecsUntilReset = j.at("customMsecsUntilReset").get<int32_t>(); 
    v.experienceTotal = j.at("experienceTotal").get<int32_t>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.ipEarned = j.at("ipEarned").get<int32_t>(); 
    v.teamPlayerParticipantStats = j.at("teamPlayerParticipantStats").get<std::vector<EndOfGameLcdsPlayerParticipantStatsSummary>>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.invalid = j.at("invalid").get<bool>(); 
    v.loyaltyBoostXpEarned = j.at("loyaltyBoostXpEarned").get<int32_t>(); 
    v.basePoints = j.at("basePoints").get<int32_t>(); 
    v.partyRewardsBonusIpEarned = j.at("partyRewardsBonusIpEarned").get<int32_t>(); 
  } 
  struct EndOfGameLcdsHarassmentReport { /**/ 
    std::string reportSource;/**/
    std::string comment;/**/
    uint64_t reportedSummonerId;/**/
    uint64_t gameId;/**/
    std::string offense;/**/
    uint64_t reportingSummonerId;/**/
  };
  static void to_json(json& j, const EndOfGameLcdsHarassmentReport& v) { 
    j["reportSource"] = v.reportSource;
    j["comment"] = v.comment;
    j["reportedSummonerId"] = v.reportedSummonerId;
    j["gameId"] = v.gameId;
    j["offense"] = v.offense;
    j["reportingSummonerId"] = v.reportingSummonerId;
  }
  static void from_json(const json& j, EndOfGameLcdsHarassmentReport& v) { 
    v.reportSource = j.at("reportSource").get<std::string>(); 
    v.comment = j.at("comment").get<std::string>(); 
    v.reportedSummonerId = j.at("reportedSummonerId").get<uint64_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.offense = j.at("offense").get<std::string>(); 
    v.reportingSummonerId = j.at("reportingSummonerId").get<uint64_t>(); 
  } 
  struct EndOfGameStats { /**/ 
    uint64_t timeUntilNextFirstWinBonus;/**/
  };
  static void to_json(json& j, const EndOfGameStats& v) { 
    j["timeUntilNextFirstWinBonus"] = v.timeUntilNextFirstWinBonus;
  }
  static void from_json(const json& j, EndOfGameStats& v) { 
    v.timeUntilNextFirstWinBonus = j.at("timeUntilNextFirstWinBonus").get<uint64_t>(); 
  } 
  struct EntitlementsToken { /**/ 
    std::string issuer;/**/
    std::string accessToken;/**/
    std::vector<std::string> entitlements;/**/
    std::string token;/**/
    std::string subject;/**/
  };
  static void to_json(json& j, const EntitlementsToken& v) { 
    j["issuer"] = v.issuer;
    j["accessToken"] = v.accessToken;
    j["entitlements"] = v.entitlements;
    j["token"] = v.token;
    j["subject"] = v.subject;
  }
  static void from_json(const json& j, EntitlementsToken& v) { 
    v.issuer = j.at("issuer").get<std::string>(); 
    v.accessToken = j.at("accessToken").get<std::string>(); 
    v.entitlements = j.at("entitlements").get<std::vector<std::string>>(); 
    v.token = j.at("token").get<std::string>(); 
    v.subject = j.at("subject").get<std::string>(); 
  } 
  struct PlayerParticipant { /**/ 
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const PlayerParticipant& v) { 
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, PlayerParticipant& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct EogLcdsGameDTO { /**/ 
    std::vector<PlayerParticipant> teamOne;/**/
    std::string gameState;/**/
    uint64_t id;/**/
    std::vector<BannedChampion> bannedChampions;/**/
    std::vector<PlayerParticipant> teamTwo;/**/
  };
  static void to_json(json& j, const EogLcdsGameDTO& v) { 
    j["teamOne"] = v.teamOne;
    j["gameState"] = v.gameState;
    j["id"] = v.id;
    j["bannedChampions"] = v.bannedChampions;
    j["teamTwo"] = v.teamTwo;
  }
  static void from_json(const json& j, EogLcdsGameDTO& v) { 
    v.teamOne = j.at("teamOne").get<std::vector<PlayerParticipant>>(); 
    v.gameState = j.at("gameState").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.bannedChampions = j.at("bannedChampions").get<std::vector<BannedChampion>>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<PlayerParticipant>>(); 
  } 
  struct FailedInvite { /**/ 
    ClientRequestError exception;/**/
    uint64_t playerId;/**/
  };
  static void to_json(json& j, const FailedInvite& v) { 
    j["exception"] = v.exception;
    j["playerId"] = v.playerId;
  }
  static void from_json(const json& j, FailedInvite& v) { 
    v.exception = j.at("exception").get<ClientRequestError>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
  } 
  struct FellowPlayerInfo { /**/ 
    uint64_t teamId;/**/
    uint64_t summonerId;/**/
    uint64_t championId;/**/
  };
  static void to_json(json& j, const FellowPlayerInfo& v) { 
    j["teamId"] = v.teamId;
    j["summonerId"] = v.summonerId;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, FellowPlayerInfo& v) { 
    v.teamId = j.at("teamId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.championId = j.at("championId").get<uint64_t>(); 
  } 
  struct GameClientChatMessageResource { /**/ 
    std::string fromSummonerName;/**/
    std::string body;/**/
  };
  static void to_json(json& j, const GameClientChatMessageResource& v) { 
    j["fromSummonerName"] = v.fromSummonerName;
    j["body"] = v.body;
  }
  static void from_json(const json& j, GameClientChatMessageResource& v) { 
    v.fromSummonerName = j.at("fromSummonerName").get<std::string>(); 
    v.body = j.at("body").get<std::string>(); 
  } 
  struct GameDataSummonerSpell { /**/ 
    uint64_t id;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const GameDataSummonerSpell& v) { 
    j["id"] = v.id;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, GameDataSummonerSpell& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  enum class GameQueuesLcdsAllowSpectators { /**/ 
    ALL_e = 3, /**/ 
    DROPINONLY_e = 2, /**/ 
    LOBBYONLY_e = 1, /**/ 
    NONE_e = 0, /**/ 
  };
  static void to_json(json& j, const GameQueuesLcdsAllowSpectators& v) {
    switch(v) { 
    case GameQueuesLcdsAllowSpectators::ALL_e:
      j = "ALL";
    break;
    case GameQueuesLcdsAllowSpectators::DROPINONLY_e:
      j = "DROPINONLY";
    break;
    case GameQueuesLcdsAllowSpectators::LOBBYONLY_e:
      j = "LOBBYONLY";
    break;
    case GameQueuesLcdsAllowSpectators::NONE_e:
      j = "NONE";
    break;
    };
  }
  static void from_json(const json& j, GameQueuesLcdsAllowSpectators& v) {
    auto s = j.get<std::string>(); 
    if(s == "ALL") {
      v = GameQueuesLcdsAllowSpectators::ALL_e;
      return;
    } 
    if(s == "DROPINONLY") {
      v = GameQueuesLcdsAllowSpectators::DROPINONLY_e;
      return;
    } 
    if(s == "LOBBYONLY") {
      v = GameQueuesLcdsAllowSpectators::LOBBYONLY_e;
      return;
    } 
    if(s == "NONE") {
      v = GameQueuesLcdsAllowSpectators::NONE_e;
      return;
    } 
  } 
  struct GameQueuesLcdsMatchingThrottleConfig { /**/ 
    int64_t limit;/**/
    std::string cacheName;/**/
  };
  static void to_json(json& j, const GameQueuesLcdsMatchingThrottleConfig& v) { 
    j["limit"] = v.limit;
    j["cacheName"] = v.cacheName;
  }
  static void from_json(const json& j, GameQueuesLcdsMatchingThrottleConfig& v) { 
    v.limit = j.at("limit").get<int64_t>(); 
    v.cacheName = j.at("cacheName").get<std::string>(); 
  } 
  struct GameQueuesLcdsGameQueueConfig { /**/ 
    uint32_t maximumParticipantListSize;/**/
    bool randomizeTeamSizes;/**/
    uint32_t minimumQueueDodgeDelayTime;/**/
    uint32_t minLevel;/**/
    GameQueuesLcdsMatchingThrottleConfig matchingThrottleConfig;/**/
    std::string queueStateString;/**/
    bool thresholdEnabled;/**/
    uint32_t blockedMinutesThreshold;/**/
    uint32_t numPlayersPerTeam;/**/
    bool botsCanSpawnOnBlueSide;/**/
    bool disallowFreeChampions;/**/
    uint32_t minimumParticipantListSize;/**/
    bool ranked;/**/
    std::string pointsConfigKey;/**/
    int32_t id;/**/
    uint64_t lastToggledOffTime;/**/
    std::vector<int32_t> supportedMapIds;/**/
    int64_t thresholdSize;/**/
    std::string queueBonusKey;/**/
    std::vector<std::string> gameMutators;/**/
    uint32_t maxLevel;/**/
    std::string typeString;/**/
    std::string mapSelectionAlgorithm;/**/
    int32_t gameTypeConfigId;/**/
    bool teamOnly;/**/
    uint32_t maxSummonerLevelForFirstWinOfTheDay;/**/
    std::string type;/**/
    std::string gameMode;/**/
    std::string cacheName;/**/
    uint64_t lastToggledOnTime;/**/
    std::string queueState;/**/
  };
  static void to_json(json& j, const GameQueuesLcdsGameQueueConfig& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["randomizeTeamSizes"] = v.randomizeTeamSizes;
    j["minimumQueueDodgeDelayTime"] = v.minimumQueueDodgeDelayTime;
    j["minLevel"] = v.minLevel;
    j["matchingThrottleConfig"] = v.matchingThrottleConfig;
    j["queueStateString"] = v.queueStateString;
    j["thresholdEnabled"] = v.thresholdEnabled;
    j["blockedMinutesThreshold"] = v.blockedMinutesThreshold;
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["botsCanSpawnOnBlueSide"] = v.botsCanSpawnOnBlueSide;
    j["disallowFreeChampions"] = v.disallowFreeChampions;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["ranked"] = v.ranked;
    j["pointsConfigKey"] = v.pointsConfigKey;
    j["id"] = v.id;
    j["lastToggledOffTime"] = v.lastToggledOffTime;
    j["supportedMapIds"] = v.supportedMapIds;
    j["thresholdSize"] = v.thresholdSize;
    j["queueBonusKey"] = v.queueBonusKey;
    j["gameMutators"] = v.gameMutators;
    j["maxLevel"] = v.maxLevel;
    j["typeString"] = v.typeString;
    j["mapSelectionAlgorithm"] = v.mapSelectionAlgorithm;
    j["gameTypeConfigId"] = v.gameTypeConfigId;
    j["teamOnly"] = v.teamOnly;
    j["maxSummonerLevelForFirstWinOfTheDay"] = v.maxSummonerLevelForFirstWinOfTheDay;
    j["type"] = v.type;
    j["gameMode"] = v.gameMode;
    j["cacheName"] = v.cacheName;
    j["lastToggledOnTime"] = v.lastToggledOnTime;
    j["queueState"] = v.queueState;
  }
  static void from_json(const json& j, GameQueuesLcdsGameQueueConfig& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<uint32_t>(); 
    v.randomizeTeamSizes = j.at("randomizeTeamSizes").get<bool>(); 
    v.minimumQueueDodgeDelayTime = j.at("minimumQueueDodgeDelayTime").get<uint32_t>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.matchingThrottleConfig = j.at("matchingThrottleConfig").get<GameQueuesLcdsMatchingThrottleConfig>(); 
    v.queueStateString = j.at("queueStateString").get<std::string>(); 
    v.thresholdEnabled = j.at("thresholdEnabled").get<bool>(); 
    v.blockedMinutesThreshold = j.at("blockedMinutesThreshold").get<uint32_t>(); 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<uint32_t>(); 
    v.botsCanSpawnOnBlueSide = j.at("botsCanSpawnOnBlueSide").get<bool>(); 
    v.disallowFreeChampions = j.at("disallowFreeChampions").get<bool>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<uint32_t>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.pointsConfigKey = j.at("pointsConfigKey").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.lastToggledOffTime = j.at("lastToggledOffTime").get<uint64_t>(); 
    v.supportedMapIds = j.at("supportedMapIds").get<std::vector<int32_t>>(); 
    v.thresholdSize = j.at("thresholdSize").get<int64_t>(); 
    v.queueBonusKey = j.at("queueBonusKey").get<std::string>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.typeString = j.at("typeString").get<std::string>(); 
    v.mapSelectionAlgorithm = j.at("mapSelectionAlgorithm").get<std::string>(); 
    v.gameTypeConfigId = j.at("gameTypeConfigId").get<int32_t>(); 
    v.teamOnly = j.at("teamOnly").get<bool>(); 
    v.maxSummonerLevelForFirstWinOfTheDay = j.at("maxSummonerLevelForFirstWinOfTheDay").get<uint32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.cacheName = j.at("cacheName").get<std::string>(); 
    v.lastToggledOnTime = j.at("lastToggledOnTime").get<uint64_t>(); 
    v.queueState = j.at("queueState").get<std::string>(); 
  } 
  struct GameflowLcdsGameDTO { /**/ 
    std::vector<json> playerChampionSelections;/**/
    std::string gameState;/**/
    uint64_t id;/**/
    int32_t maxNumPlayers;/**/
    std::vector<json> teamOne;/**/
    std::string gameType;/**/
    std::vector<json> teamTwo;/**/
    std::string queueTypeName;/**/
    int32_t gameTypeConfigId;/**/
    int32_t spectatorDelay;/**/
    int32_t mapId;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const GameflowLcdsGameDTO& v) { 
    j["playerChampionSelections"] = v.playerChampionSelections;
    j["gameState"] = v.gameState;
    j["id"] = v.id;
    j["maxNumPlayers"] = v.maxNumPlayers;
    j["teamOne"] = v.teamOne;
    j["gameType"] = v.gameType;
    j["teamTwo"] = v.teamTwo;
    j["queueTypeName"] = v.queueTypeName;
    j["gameTypeConfigId"] = v.gameTypeConfigId;
    j["spectatorDelay"] = v.spectatorDelay;
    j["mapId"] = v.mapId;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, GameflowLcdsGameDTO& v) { 
    v.playerChampionSelections = j.at("playerChampionSelections").get<std::vector<json>>(); 
    v.gameState = j.at("gameState").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.maxNumPlayers = j.at("maxNumPlayers").get<int32_t>(); 
    v.teamOne = j.at("teamOne").get<std::vector<json>>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<json>>(); 
    v.queueTypeName = j.at("queueTypeName").get<std::string>(); 
    v.gameTypeConfigId = j.at("gameTypeConfigId").get<int32_t>(); 
    v.spectatorDelay = j.at("spectatorDelay").get<int32_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct GameflowLcdsPlayerCredentialsDto { /**/ 
    uint64_t summonerId;/**/
    std::string observerServerIp;/**/
    std::string observerEncryptionKey;/**/
    bool observer;/**/
    uint16_t observerServerPort;/**/
    uint64_t gameId;/**/
    std::string serverIp;/**/
    uint16_t serverPort;/**/
    std::string encryptionKey;/**/
  };
  static void to_json(json& j, const GameflowLcdsPlayerCredentialsDto& v) { 
    j["summonerId"] = v.summonerId;
    j["observerServerIp"] = v.observerServerIp;
    j["observerEncryptionKey"] = v.observerEncryptionKey;
    j["observer"] = v.observer;
    j["observerServerPort"] = v.observerServerPort;
    j["gameId"] = v.gameId;
    j["serverIp"] = v.serverIp;
    j["serverPort"] = v.serverPort;
    j["encryptionKey"] = v.encryptionKey;
  }
  static void from_json(const json& j, GameflowLcdsPlayerCredentialsDto& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.observerServerIp = j.at("observerServerIp").get<std::string>(); 
    v.observerEncryptionKey = j.at("observerEncryptionKey").get<std::string>(); 
    v.observer = j.at("observer").get<bool>(); 
    v.observerServerPort = j.at("observerServerPort").get<uint16_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.serverIp = j.at("serverIp").get<std::string>(); 
    v.serverPort = j.at("serverPort").get<uint16_t>(); 
    v.encryptionKey = j.at("encryptionKey").get<std::string>(); 
  } 
  struct GameflowLcdsReconnectInfoDto { /**/ 
    GameflowLcdsGameDTO game;/**/
    GameflowLcdsPlayerCredentialsDto playerCredentials;/**/
    uint32_t reconnectDelay;/**/
  };
  static void to_json(json& j, const GameflowLcdsReconnectInfoDto& v) { 
    j["game"] = v.game;
    j["playerCredentials"] = v.playerCredentials;
    j["reconnectDelay"] = v.reconnectDelay;
  }
  static void from_json(const json& j, GameflowLcdsReconnectInfoDto& v) { 
    v.game = j.at("game").get<GameflowLcdsGameDTO>(); 
    v.playerCredentials = j.at("playerCredentials").get<GameflowLcdsPlayerCredentialsDto>(); 
    v.reconnectDelay = j.at("reconnectDelay").get<uint32_t>(); 
  } 
  struct Highlight { /**/ 
    uint64_t id;/**/
    std::string mtimeIso8601;/**/
    std::string filepath;/**/
    uint64_t mtimeMsUtc;/**/
    std::string name;/**/
    uint64_t fileSizeBytes;/**/
    std::string url;/**/
  };
  static void to_json(json& j, const Highlight& v) { 
    j["id"] = v.id;
    j["mtimeIso8601"] = v.mtimeIso8601;
    j["filepath"] = v.filepath;
    j["mtimeMsUtc"] = v.mtimeMsUtc;
    j["name"] = v.name;
    j["fileSizeBytes"] = v.fileSizeBytes;
    j["url"] = v.url;
  }
  static void from_json(const json& j, Highlight& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.mtimeIso8601 = j.at("mtimeIso8601").get<std::string>(); 
    v.filepath = j.at("filepath").get<std::string>(); 
    v.mtimeMsUtc = j.at("mtimeMsUtc").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.fileSizeBytes = j.at("fileSizeBytes").get<uint64_t>(); 
    v.url = j.at("url").get<std::string>(); 
  } 
  struct HighlightsConfig { /**/ 
    std::string invalidHighlightNameCharacters;/**/
    bool isHighlightsEnabled;/**/
  };
  static void to_json(json& j, const HighlightsConfig& v) { 
    j["invalidHighlightNameCharacters"] = v.invalidHighlightNameCharacters;
    j["isHighlightsEnabled"] = v.isHighlightsEnabled;
  }
  static void from_json(const json& j, HighlightsConfig& v) { 
    v.invalidHighlightNameCharacters = j.at("invalidHighlightNameCharacters").get<std::string>(); 
    v.isHighlightsEnabled = j.at("isHighlightsEnabled").get<bool>(); 
  } 
  struct HighlightsDynamicConfig { /**/ 
    bool Enabled;/**/
  };
  static void to_json(json& j, const HighlightsDynamicConfig& v) { 
    j["Enabled"] = v.Enabled;
  }
  static void from_json(const json& j, HighlightsDynamicConfig& v) { 
    v.Enabled = j.at("Enabled").get<bool>(); 
  } 
  struct HighlightsSettingsData { /**/ 
    std::string highlights_folder_path;/**/
  };
  static void to_json(json& j, const HighlightsSettingsData& v) { 
    j["highlights_folder_path"] = v.highlights_folder_path;
  }
  static void from_json(const json& j, HighlightsSettingsData& v) { 
    v.highlights_folder_path = j.at("highlights_folder_path").get<std::string>(); 
  } 
  struct HighlightsSettingsResource { /**/ 
    HighlightsSettingsData data;/**/
  };
  static void to_json(json& j, const HighlightsSettingsResource& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, HighlightsSettingsResource& v) { 
    v.data = j.at("data").get<HighlightsSettingsData>(); 
  } 
  struct KickoutMessage { /**/ 
    std::string message;/**/
  };
  static void to_json(json& j, const KickoutMessage& v) { 
    j["message"] = v.message;
  }
  static void from_json(const json& j, KickoutMessage& v) { 
    v.message = j.at("message").get<std::string>(); 
  } 
  struct LCDSBroadcastNotification { /**/ 
    std::vector<json> broadcastMessages;/**/
  };
  static void to_json(json& j, const LCDSBroadcastNotification& v) { 
    j["broadcastMessages"] = v.broadcastMessages;
  }
  static void from_json(const json& j, LCDSBroadcastNotification& v) { 
    v.broadcastMessages = j.at("broadcastMessages").get<std::vector<json>>(); 
  } 
  struct LCDSChampionReward { /**/ 
    std::vector<int32_t> skins;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LCDSChampionReward& v) { 
    j["skins"] = v.skins;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LCDSChampionReward& v) { 
    v.skins = j.at("skins").get<std::vector<int32_t>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LCDSLoyaltyRewards { /**/ 
    int32_t ipBoost;/**/
    std::vector<LCDSChampionReward> champions;/**/
    int32_t xpBoost;/**/
  };
  static void to_json(json& j, const LCDSLoyaltyRewards& v) { 
    j["ipBoost"] = v.ipBoost;
    j["champions"] = v.champions;
    j["xpBoost"] = v.xpBoost;
  }
  static void from_json(const json& j, LCDSLoyaltyRewards& v) { 
    v.ipBoost = j.at("ipBoost").get<int32_t>(); 
    v.champions = j.at("champions").get<std::vector<LCDSChampionReward>>(); 
    v.xpBoost = j.at("xpBoost").get<int32_t>(); 
  } 
  enum class LCDSLoyaltyStateChangeNotificationCategory { /**/ 
    change_e = 3, /**/ 
    disabled_e = 5, /**/ 
    expiry_e = 2, /**/ 
    grant_e = 1, /**/ 
    legacy_e = 0, /**/ 
    revoke_e = 4, /**/ 
  };
  static void to_json(json& j, const LCDSLoyaltyStateChangeNotificationCategory& v) {
    switch(v) { 
    case LCDSLoyaltyStateChangeNotificationCategory::change_e:
      j = "change";
    break;
    case LCDSLoyaltyStateChangeNotificationCategory::disabled_e:
      j = "disabled";
    break;
    case LCDSLoyaltyStateChangeNotificationCategory::expiry_e:
      j = "expiry";
    break;
    case LCDSLoyaltyStateChangeNotificationCategory::grant_e:
      j = "grant";
    break;
    case LCDSLoyaltyStateChangeNotificationCategory::legacy_e:
      j = "legacy";
    break;
    case LCDSLoyaltyStateChangeNotificationCategory::revoke_e:
      j = "revoke";
    break;
    };
  }
  static void from_json(const json& j, LCDSLoyaltyStateChangeNotificationCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "change") {
      v = LCDSLoyaltyStateChangeNotificationCategory::change_e;
      return;
    } 
    if(s == "disabled") {
      v = LCDSLoyaltyStateChangeNotificationCategory::disabled_e;
      return;
    } 
    if(s == "expiry") {
      v = LCDSLoyaltyStateChangeNotificationCategory::expiry_e;
      return;
    } 
    if(s == "grant") {
      v = LCDSLoyaltyStateChangeNotificationCategory::grant_e;
      return;
    } 
    if(s == "legacy") {
      v = LCDSLoyaltyStateChangeNotificationCategory::legacy_e;
      return;
    } 
    if(s == "revoke") {
      v = LCDSLoyaltyStateChangeNotificationCategory::revoke_e;
      return;
    } 
  } 
  struct LCDSLoyaltyStateChangeNotification { /**/ 
    LCDSLoyaltyRewards rewards;/**/
    uint64_t accountId;/**/
    LCDSLoyaltyStateChangeNotificationCategory notificationCategory;/**/
  };
  static void to_json(json& j, const LCDSLoyaltyStateChangeNotification& v) { 
    j["rewards"] = v.rewards;
    j["accountId"] = v.accountId;
    j["notificationCategory"] = v.notificationCategory;
  }
  static void from_json(const json& j, LCDSLoyaltyStateChangeNotification& v) { 
    v.rewards = j.at("rewards").get<LCDSLoyaltyRewards>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.notificationCategory = j.at("notificationCategory").get<LCDSLoyaltyStateChangeNotificationCategory>(); 
  } 
  struct LCDSPlayerMessagingSimpleMessage { /**/ 
    std::string bodyCode;/**/
    uint64_t accountId;/**/
    std::string titleCode;/**/
    std::string type;/**/
    std::string msgId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LCDSPlayerMessagingSimpleMessage& v) { 
    j["bodyCode"] = v.bodyCode;
    j["accountId"] = v.accountId;
    j["titleCode"] = v.titleCode;
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LCDSPlayerMessagingSimpleMessage& v) { 
    v.bodyCode = j.at("bodyCode").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.titleCode = j.at("titleCode").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LCDSPlayerMessagingSimpleMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LCDSPlayerMessagingSimpleMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LCDSPlayerMessagingSimpleMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LcdsBotParticipant { /**/ 
    std::string teamId;/**/
    std::string summonerName;/**/
    int32_t botSkillLevel;/**/
    uint64_t summonerId;/**/
    std::string summonerInternalName;/**/
  };
  static void to_json(json& j, const LcdsBotParticipant& v) { 
    j["teamId"] = v.teamId;
    j["summonerName"] = v.summonerName;
    j["botSkillLevel"] = v.botSkillLevel;
    j["summonerId"] = v.summonerId;
    j["summonerInternalName"] = v.summonerInternalName;
  }
  static void from_json(const json& j, LcdsBotParticipant& v) { 
    v.teamId = j.at("teamId").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.botSkillLevel = j.at("botSkillLevel").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
  } 
  struct LcdsSummoner { /**/ 
    std::string name;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const LcdsSummoner& v) { 
    j["name"] = v.name;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, LcdsSummoner& v) { 
    v.name = j.at("name").get<std::string>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct LcdsFailedJoinPlayer { /**/ 
    std::string reasonFailed;/**/
    LcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const LcdsFailedJoinPlayer& v) { 
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, LcdsFailedJoinPlayer& v) { 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<LcdsSummoner>(); 
  } 
  struct LcdsPlayerParticipant { /**/ 
    std::string summonerName;/**/
    int32_t botSkillLevel;/**/
    uint64_t summonerId;/**/
    std::string summonerInternalName;/**/
  };
  static void to_json(json& j, const LcdsPlayerParticipant& v) { 
    j["summonerName"] = v.summonerName;
    j["botSkillLevel"] = v.botSkillLevel;
    j["summonerId"] = v.summonerId;
    j["summonerInternalName"] = v.summonerInternalName;
  }
  static void from_json(const json& j, LcdsPlayerParticipant& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.botSkillLevel = j.at("botSkillLevel").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
  } 
  struct LcdsGameDTO { /**/ 
    std::string gameType;/**/
    std::vector<std::string> gameMutators;/**/
    int64_t id;/**/
    LcdsPlayerParticipant ownerSummary;/**/
    std::vector<LcdsPlayerParticipant> teamOne;/**/
    std::vector<LcdsPlayerParticipant> observers;/**/
    std::string name;/**/
    std::string spectatorsAllowed;/**/
    std::vector<LcdsPlayerParticipant> teamTwo;/**/
    std::string passbackDataPacket;/**/
    int32_t gameTypeConfigId;/**/
    std::string roomPassword;/**/
    int32_t maxNumPlayers;/**/
    std::string roomName;/**/
    std::string passbackUrl;/**/
    std::vector<std::string> practiceGameRewardsDisabledReasons;/**/
    int64_t optimisticLock;/**/
    int32_t mapId;/**/
    std::string gameState;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LcdsGameDTO& v) { 
    j["gameType"] = v.gameType;
    j["gameMutators"] = v.gameMutators;
    j["id"] = v.id;
    j["ownerSummary"] = v.ownerSummary;
    j["teamOne"] = v.teamOne;
    j["observers"] = v.observers;
    j["name"] = v.name;
    j["spectatorsAllowed"] = v.spectatorsAllowed;
    j["teamTwo"] = v.teamTwo;
    j["passbackDataPacket"] = v.passbackDataPacket;
    j["gameTypeConfigId"] = v.gameTypeConfigId;
    j["roomPassword"] = v.roomPassword;
    j["maxNumPlayers"] = v.maxNumPlayers;
    j["roomName"] = v.roomName;
    j["passbackUrl"] = v.passbackUrl;
    j["practiceGameRewardsDisabledReasons"] = v.practiceGameRewardsDisabledReasons;
    j["optimisticLock"] = v.optimisticLock;
    j["mapId"] = v.mapId;
    j["gameState"] = v.gameState;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LcdsGameDTO& v) { 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.ownerSummary = j.at("ownerSummary").get<LcdsPlayerParticipant>(); 
    v.teamOne = j.at("teamOne").get<std::vector<LcdsPlayerParticipant>>(); 
    v.observers = j.at("observers").get<std::vector<LcdsPlayerParticipant>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.spectatorsAllowed = j.at("spectatorsAllowed").get<std::string>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<LcdsPlayerParticipant>>(); 
    v.passbackDataPacket = j.at("passbackDataPacket").get<std::string>(); 
    v.gameTypeConfigId = j.at("gameTypeConfigId").get<int32_t>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.maxNumPlayers = j.at("maxNumPlayers").get<int32_t>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.passbackUrl = j.at("passbackUrl").get<std::string>(); 
    v.practiceGameRewardsDisabledReasons = j.at("practiceGameRewardsDisabledReasons").get<std::vector<std::string>>(); 
    v.optimisticLock = j.at("optimisticLock").get<int64_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.gameState = j.at("gameState").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LcdsGameInviteBaseRuntimeException { /**/ 
    std::string rootCauseClassname;/**/
  };
  static void to_json(json& j, const LcdsGameInviteBaseRuntimeException& v) { 
    j["rootCauseClassname"] = v.rootCauseClassname;
  }
  static void from_json(const json& j, LcdsGameInviteBaseRuntimeException& v) { 
    v.rootCauseClassname = j.at("rootCauseClassname").get<std::string>(); 
  } 
  struct LcdsGameMap { /**/ 
    int32_t minCustomPlayers;/**/
    std::string description;/**/
    std::string name;/**/
    int32_t totalPlayers;/**/
    int32_t mapId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LcdsGameMap& v) { 
    j["minCustomPlayers"] = v.minCustomPlayers;
    j["description"] = v.description;
    j["name"] = v.name;
    j["totalPlayers"] = v.totalPlayers;
    j["mapId"] = v.mapId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LcdsGameMap& v) { 
    v.minCustomPlayers = j.at("minCustomPlayers").get<int32_t>(); 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.totalPlayers = j.at("totalPlayers").get<int32_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LcdsGameNotification { /**/ 
    std::string type;/**/
    std::string messageCode;/**/
    std::string messageArgument;/**/
  };
  static void to_json(json& j, const LcdsGameNotification& v) { 
    j["type"] = v.type;
    j["messageCode"] = v.messageCode;
    j["messageArgument"] = v.messageArgument;
  }
  static void from_json(const json& j, LcdsGameNotification& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.messageCode = j.at("messageCode").get<std::string>(); 
    v.messageArgument = j.at("messageArgument").get<std::string>(); 
  } 
  struct LcdsPlayer { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LcdsPlayer& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LcdsPlayer& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LcdsInviter { /**/ 
    std::string summonerName;/**/
    std::string previousSeasonHighestTier;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LcdsInviter& v) { 
    j["summonerName"] = v.summonerName;
    j["previousSeasonHighestTier"] = v.previousSeasonHighestTier;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LcdsInviter& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.previousSeasonHighestTier = j.at("previousSeasonHighestTier").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  enum class LcdsInvitationState { /**/ 
    ACTIVE_e = 0, /**/ 
    ON_HOLD_e = 1, /**/ 
    REVOKED_e = 2, /**/ 
  };
  static void to_json(json& j, const LcdsInvitationState& v) {
    switch(v) { 
    case LcdsInvitationState::ACTIVE_e:
      j = "ACTIVE";
    break;
    case LcdsInvitationState::ON_HOLD_e:
      j = "ON_HOLD";
    break;
    case LcdsInvitationState::REVOKED_e:
      j = "REVOKED";
    break;
    };
  }
  static void from_json(const json& j, LcdsInvitationState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ACTIVE") {
      v = LcdsInvitationState::ACTIVE_e;
      return;
    } 
    if(s == "ON_HOLD") {
      v = LcdsInvitationState::ON_HOLD_e;
      return;
    } 
    if(s == "REVOKED") {
      v = LcdsInvitationState::REVOKED_e;
      return;
    } 
  } 
  struct LcdsInvitationRequest { /**/ 
    std::string invitePayload;/**/
    std::string invitationId;/**/
    std::string inviteType;/**/
    LcdsPlayer owner;/**/
    std::string gameMetaData;/**/
    LcdsInviter inviter;/**/
    LcdsInvitationState invitationState;/**/
  };
  static void to_json(json& j, const LcdsInvitationRequest& v) { 
    j["invitePayload"] = v.invitePayload;
    j["invitationId"] = v.invitationId;
    j["inviteType"] = v.inviteType;
    j["owner"] = v.owner;
    j["gameMetaData"] = v.gameMetaData;
    j["inviter"] = v.inviter;
    j["invitationState"] = v.invitationState;
  }
  static void from_json(const json& j, LcdsInvitationRequest& v) { 
    v.invitePayload = j.at("invitePayload").get<std::string>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.inviteType = j.at("inviteType").get<std::string>(); 
    v.owner = j.at("owner").get<LcdsPlayer>(); 
    v.gameMetaData = j.at("gameMetaData").get<std::string>(); 
    v.inviter = j.at("inviter").get<LcdsInviter>(); 
    v.invitationState = j.at("invitationState").get<LcdsInvitationState>(); 
  } 
  struct LcdsInviteFailed { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    LcdsGameInviteBaseRuntimeException exception;/**/
  };
  static void to_json(json& j, const LcdsInviteFailed& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["exception"] = v.exception;
  }
  static void from_json(const json& j, LcdsInviteFailed& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.exception = j.at("exception").get<LcdsGameInviteBaseRuntimeException>(); 
  } 
  struct LcdsInvitePrivileges { /**/ 
    bool canInvite;/**/
  };
  static void to_json(json& j, const LcdsInvitePrivileges& v) { 
    j["canInvite"] = v.canInvite;
  }
  static void from_json(const json& j, LcdsInvitePrivileges& v) { 
    v.canInvite = j.at("canInvite").get<bool>(); 
  } 
  enum class LcdsInviteeState { /**/ 
    ACCEPTED_e = 3, /**/ 
    ACCEPT_FAILED_e = 4, /**/ 
    BANNED_e = 8, /**/ 
    CREATOR_e = 0, /**/ 
    DECLINED_e = 2, /**/ 
    JOINED_e = 5, /**/ 
    KICKED_e = 7, /**/ 
    PENDING_e = 1, /**/ 
    QUIT_e = 6, /**/ 
  };
  static void to_json(json& j, const LcdsInviteeState& v) {
    switch(v) { 
    case LcdsInviteeState::ACCEPTED_e:
      j = "ACCEPTED";
    break;
    case LcdsInviteeState::ACCEPT_FAILED_e:
      j = "ACCEPT_FAILED";
    break;
    case LcdsInviteeState::BANNED_e:
      j = "BANNED";
    break;
    case LcdsInviteeState::CREATOR_e:
      j = "CREATOR";
    break;
    case LcdsInviteeState::DECLINED_e:
      j = "DECLINED";
    break;
    case LcdsInviteeState::JOINED_e:
      j = "JOINED";
    break;
    case LcdsInviteeState::KICKED_e:
      j = "KICKED";
    break;
    case LcdsInviteeState::PENDING_e:
      j = "PENDING";
    break;
    case LcdsInviteeState::QUIT_e:
      j = "QUIT";
    break;
    };
  }
  static void from_json(const json& j, LcdsInviteeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ACCEPTED") {
      v = LcdsInviteeState::ACCEPTED_e;
      return;
    } 
    if(s == "ACCEPT_FAILED") {
      v = LcdsInviteeState::ACCEPT_FAILED_e;
      return;
    } 
    if(s == "BANNED") {
      v = LcdsInviteeState::BANNED_e;
      return;
    } 
    if(s == "CREATOR") {
      v = LcdsInviteeState::CREATOR_e;
      return;
    } 
    if(s == "DECLINED") {
      v = LcdsInviteeState::DECLINED_e;
      return;
    } 
    if(s == "JOINED") {
      v = LcdsInviteeState::JOINED_e;
      return;
    } 
    if(s == "KICKED") {
      v = LcdsInviteeState::KICKED_e;
      return;
    } 
    if(s == "PENDING") {
      v = LcdsInviteeState::PENDING_e;
      return;
    } 
    if(s == "QUIT") {
      v = LcdsInviteeState::QUIT_e;
      return;
    } 
  } 
  struct LcdsInvitee { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    LcdsInviteeState inviteeState;/**/
  };
  static void to_json(json& j, const LcdsInvitee& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["inviteeState"] = v.inviteeState;
  }
  static void from_json(const json& j, LcdsInvitee& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.inviteeState = j.at("inviteeState").get<LcdsInviteeState>(); 
  } 
  struct LcdsMember { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    bool hasDelegatedInvitePower;/**/
  };
  static void to_json(json& j, const LcdsMember& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["hasDelegatedInvitePower"] = v.hasDelegatedInvitePower;
  }
  static void from_json(const json& j, LcdsMember& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.hasDelegatedInvitePower = j.at("hasDelegatedInvitePower").get<bool>(); 
  } 
  struct LcdsLobbyStatus { /**/ 
    std::string invitationId;/**/
    std::string chatKey;/**/
    std::vector<LcdsInvitee> invitees;/**/
    LcdsPlayer owner;/**/
    std::string gameMetaData;/**/
    std::vector<LcdsMember> members;/**/
  };
  static void to_json(json& j, const LcdsLobbyStatus& v) { 
    j["invitationId"] = v.invitationId;
    j["chatKey"] = v.chatKey;
    j["invitees"] = v.invitees;
    j["owner"] = v.owner;
    j["gameMetaData"] = v.gameMetaData;
    j["members"] = v.members;
  }
  static void from_json(const json& j, LcdsLobbyStatus& v) { 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.chatKey = j.at("chatKey").get<std::string>(); 
    v.invitees = j.at("invitees").get<std::vector<LcdsInvitee>>(); 
    v.owner = j.at("owner").get<LcdsPlayer>(); 
    v.gameMetaData = j.at("gameMetaData").get<std::string>(); 
    v.members = j.at("members").get<std::vector<LcdsMember>>(); 
  } 
  struct LcdsPayloadDto { /**/ 
    std::string method;/**/
    std::string body;/**/
    std::map<std::string, std::string> headers;/**/
    std::string path;/**/
  };
  static void to_json(json& j, const LcdsPayloadDto& v) { 
    j["method"] = v.method;
    j["body"] = v.body;
    j["headers"] = v.headers;
    j["path"] = v.path;
  }
  static void from_json(const json& j, LcdsPayloadDto& v) { 
    v.method = j.at("method").get<std::string>(); 
    v.body = j.at("body").get<std::string>(); 
    v.headers = j.at("headers").get<std::map<std::string, std::string>>(); 
    v.path = j.at("path").get<std::string>(); 
  } 
  struct LcdsPracticeGameConfig { /**/ 
    LcdsGameMap gameMap;/**/
    std::vector<std::string> gameMutators;/**/
    int32_t gameTypeConfig;/**/
    std::string gamePassword;/**/
    int32_t maxNumPlayers;/**/
    std::optional<std::string> passbackDataPacket;/**/
    std::optional<std::string> passbackUrl;/**/
    std::string gameName;/**/
    std::string allowSpectators;/**/
    std::string region;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LcdsPracticeGameConfig& v) { 
    j["gameMap"] = v.gameMap;
    j["gameMutators"] = v.gameMutators;
    j["gameTypeConfig"] = v.gameTypeConfig;
    j["gamePassword"] = v.gamePassword;
    j["maxNumPlayers"] = v.maxNumPlayers;
    j["passbackDataPacket"] = v.passbackDataPacket;
    j["passbackUrl"] = v.passbackUrl;
    j["gameName"] = v.gameName;
    j["allowSpectators"] = v.allowSpectators;
    j["region"] = v.region;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LcdsPracticeGameConfig& v) { 
    v.gameMap = j.at("gameMap").get<LcdsGameMap>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<int32_t>(); 
    v.gamePassword = j.at("gamePassword").get<std::string>(); 
    v.maxNumPlayers = j.at("maxNumPlayers").get<int32_t>(); 
    v.passbackDataPacket = j.at("passbackDataPacket").get<std::optional<std::string>>(); 
    v.passbackUrl = j.at("passbackUrl").get<std::optional<std::string>>(); 
    v.gameName = j.at("gameName").get<std::string>(); 
    v.allowSpectators = j.at("allowSpectators").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LcdsPracticeGameSearchResult { /**/ 
    LcdsGameMap gameMap;/**/
    uint64_t id;/**/
    int32_t maxNumPlayers;/**/
    int32_t team1Count;/**/
    std::string name;/**/
    std::string pickType;/**/
    int32_t gameMapId;/**/
    bool privateGame;/**/
    int32_t team2Count;/**/
    std::string allowSpectators;/**/
    LcdsPlayerParticipant owner;/**/
    int32_t spectatorCount;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LcdsPracticeGameSearchResult& v) { 
    j["gameMap"] = v.gameMap;
    j["id"] = v.id;
    j["maxNumPlayers"] = v.maxNumPlayers;
    j["team1Count"] = v.team1Count;
    j["name"] = v.name;
    j["pickType"] = v.pickType;
    j["gameMapId"] = v.gameMapId;
    j["privateGame"] = v.privateGame;
    j["team2Count"] = v.team2Count;
    j["allowSpectators"] = v.allowSpectators;
    j["owner"] = v.owner;
    j["spectatorCount"] = v.spectatorCount;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LcdsPracticeGameSearchResult& v) { 
    v.gameMap = j.at("gameMap").get<LcdsGameMap>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.maxNumPlayers = j.at("maxNumPlayers").get<int32_t>(); 
    v.team1Count = j.at("team1Count").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.pickType = j.at("pickType").get<std::string>(); 
    v.gameMapId = j.at("gameMapId").get<int32_t>(); 
    v.privateGame = j.at("privateGame").get<bool>(); 
    v.team2Count = j.at("team2Count").get<int32_t>(); 
    v.allowSpectators = j.at("allowSpectators").get<std::string>(); 
    v.owner = j.at("owner").get<LcdsPlayerParticipant>(); 
    v.spectatorCount = j.at("spectatorCount").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  enum class LcdsRemovalReason { /**/ 
    DESTROYED_e = 1, /**/ 
    KICKED_e = 0, /**/ 
    PROGRESSED_e = 2, /**/ 
  };
  static void to_json(json& j, const LcdsRemovalReason& v) {
    switch(v) { 
    case LcdsRemovalReason::DESTROYED_e:
      j = "DESTROYED";
    break;
    case LcdsRemovalReason::KICKED_e:
      j = "KICKED";
    break;
    case LcdsRemovalReason::PROGRESSED_e:
      j = "PROGRESSED";
    break;
    };
  }
  static void from_json(const json& j, LcdsRemovalReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "DESTROYED") {
      v = LcdsRemovalReason::DESTROYED_e;
      return;
    } 
    if(s == "KICKED") {
      v = LcdsRemovalReason::KICKED_e;
      return;
    } 
    if(s == "PROGRESSED") {
      v = LcdsRemovalReason::PROGRESSED_e;
      return;
    } 
  } 
  struct LcdsRemovedFromLobbyNotification { /**/ 
    LcdsRemovalReason removalReason;/**/
  };
  static void to_json(json& j, const LcdsRemovedFromLobbyNotification& v) { 
    j["removalReason"] = v.removalReason;
  }
  static void from_json(const json& j, LcdsRemovedFromLobbyNotification& v) { 
    v.removalReason = j.at("removalReason").get<LcdsRemovalReason>(); 
  } 
  struct LcdsSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LcdsSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LcdsSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LcdsSimpleMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LcdsSimpleMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LcdsSimpleMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LcdsStartChampSelectDto { /**/ 
    std::vector<LcdsFailedJoinPlayer> invalidPlayers;/**/
  };
  static void to_json(json& j, const LcdsStartChampSelectDto& v) { 
    j["invalidPlayers"] = v.invalidPlayers;
  }
  static void from_json(const json& j, LcdsStartChampSelectDto& v) { 
    v.invalidPlayers = j.at("invalidPlayers").get<std::vector<LcdsFailedJoinPlayer>>(); 
  } 
  enum class LeaguesLcdsLeagueTier { /**/ 
    BRONZE_e = 1, /**/ 
    CHALLENGER_e = 7, /**/ 
    DIAMOND_e = 5, /**/ 
    GOLD_e = 3, /**/ 
    MASTER_e = 6, /**/ 
    PLATINUM_e = 4, /**/ 
    SILVER_e = 2, /**/ 
  };
  static void to_json(json& j, const LeaguesLcdsLeagueTier& v) {
    switch(v) { 
    case LeaguesLcdsLeagueTier::BRONZE_e:
      j = "BRONZE";
    break;
    case LeaguesLcdsLeagueTier::CHALLENGER_e:
      j = "CHALLENGER";
    break;
    case LeaguesLcdsLeagueTier::DIAMOND_e:
      j = "DIAMOND";
    break;
    case LeaguesLcdsLeagueTier::GOLD_e:
      j = "GOLD";
    break;
    case LeaguesLcdsLeagueTier::MASTER_e:
      j = "MASTER";
    break;
    case LeaguesLcdsLeagueTier::PLATINUM_e:
      j = "PLATINUM";
    break;
    case LeaguesLcdsLeagueTier::SILVER_e:
      j = "SILVER";
    break;
    };
  }
  static void from_json(const json& j, LeaguesLcdsLeagueTier& v) {
    auto s = j.get<std::string>(); 
    if(s == "BRONZE") {
      v = LeaguesLcdsLeagueTier::BRONZE_e;
      return;
    } 
    if(s == "CHALLENGER") {
      v = LeaguesLcdsLeagueTier::CHALLENGER_e;
      return;
    } 
    if(s == "DIAMOND") {
      v = LeaguesLcdsLeagueTier::DIAMOND_e;
      return;
    } 
    if(s == "GOLD") {
      v = LeaguesLcdsLeagueTier::GOLD_e;
      return;
    } 
    if(s == "MASTER") {
      v = LeaguesLcdsLeagueTier::MASTER_e;
      return;
    } 
    if(s == "PLATINUM") {
      v = LeaguesLcdsLeagueTier::PLATINUM_e;
      return;
    } 
    if(s == "SILVER") {
      v = LeaguesLcdsLeagueTier::SILVER_e;
      return;
    } 
  } 
  enum class LeaguesLcdsQueueType { /**/ 
    RANKED_FLEX_SR_e = 2, /**/ 
    RANKED_FLEX_TT_e = 3, /**/ 
    RANKED_SOLO_5x5_e = 1, /**/ 
  };
  static void to_json(json& j, const LeaguesLcdsQueueType& v) {
    switch(v) { 
    case LeaguesLcdsQueueType::RANKED_FLEX_SR_e:
      j = "RANKED_FLEX_SR";
    break;
    case LeaguesLcdsQueueType::RANKED_FLEX_TT_e:
      j = "RANKED_FLEX_TT";
    break;
    case LeaguesLcdsQueueType::RANKED_SOLO_5x5_e:
      j = "RANKED_SOLO_5x5";
    break;
    };
  }
  static void from_json(const json& j, LeaguesLcdsQueueType& v) {
    auto s = j.get<std::string>(); 
    if(s == "RANKED_FLEX_SR") {
      v = LeaguesLcdsQueueType::RANKED_FLEX_SR_e;
      return;
    } 
    if(s == "RANKED_FLEX_TT") {
      v = LeaguesLcdsQueueType::RANKED_FLEX_TT_e;
      return;
    } 
    if(s == "RANKED_SOLO_5x5") {
      v = LeaguesLcdsQueueType::RANKED_SOLO_5x5_e;
      return;
    } 
  } 
  enum class LeaguesLcdsLeagueRank { /**/ 
    I_e = 0, /**/ 
    II_e = 1, /**/ 
    III_e = 2, /**/ 
    IV_e = 3, /**/ 
    V_e = 4, /**/ 
  };
  static void to_json(json& j, const LeaguesLcdsLeagueRank& v) {
    switch(v) { 
    case LeaguesLcdsLeagueRank::I_e:
      j = "I";
    break;
    case LeaguesLcdsLeagueRank::II_e:
      j = "II";
    break;
    case LeaguesLcdsLeagueRank::III_e:
      j = "III";
    break;
    case LeaguesLcdsLeagueRank::IV_e:
      j = "IV";
    break;
    case LeaguesLcdsLeagueRank::V_e:
      j = "V";
    break;
    };
  }
  static void from_json(const json& j, LeaguesLcdsLeagueRank& v) {
    auto s = j.get<std::string>(); 
    if(s == "I") {
      v = LeaguesLcdsLeagueRank::I_e;
      return;
    } 
    if(s == "II") {
      v = LeaguesLcdsLeagueRank::II_e;
      return;
    } 
    if(s == "III") {
      v = LeaguesLcdsLeagueRank::III_e;
      return;
    } 
    if(s == "IV") {
      v = LeaguesLcdsLeagueRank::IV_e;
      return;
    } 
    if(s == "V") {
      v = LeaguesLcdsLeagueRank::V_e;
      return;
    } 
  } 
  struct LeagueTierAndRankDTO { /**/ 
    std::string playerOrTeamId;/**/
    std::string playerOrTeamName;/**/
    LeaguesLcdsLeagueTier tier;/**/
    LeaguesLcdsQueueType queueType;/**/
    LeaguesLcdsLeagueRank rank;/**/
  };
  static void to_json(json& j, const LeagueTierAndRankDTO& v) { 
    j["playerOrTeamId"] = v.playerOrTeamId;
    j["playerOrTeamName"] = v.playerOrTeamName;
    j["tier"] = v.tier;
    j["queueType"] = v.queueType;
    j["rank"] = v.rank;
  }
  static void from_json(const json& j, LeagueTierAndRankDTO& v) { 
    v.playerOrTeamId = j.at("playerOrTeamId").get<std::string>(); 
    v.playerOrTeamName = j.at("playerOrTeamName").get<std::string>(); 
    v.tier = j.at("tier").get<LeaguesLcdsLeagueTier>(); 
    v.queueType = j.at("queueType").get<LeaguesLcdsQueueType>(); 
    v.rank = j.at("rank").get<LeaguesLcdsLeagueRank>(); 
  } 
  struct LeaguesLcdsAggregatedStat { /**/ 
    float value;/**/
    uint64_t id;/**/
    int32_t championId;/**/
    std::string statType;/**/
  };
  static void to_json(json& j, const LeaguesLcdsAggregatedStat& v) { 
    j["value"] = v.value;
    j["id"] = v.id;
    j["championId"] = v.championId;
    j["statType"] = v.statType;
  }
  static void from_json(const json& j, LeaguesLcdsAggregatedStat& v) { 
    v.value = j.at("value").get<float>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.statType = j.at("statType").get<std::string>(); 
  } 
  struct LeaguesLcdsAggregatedStatsKey { /**/ 
    uint64_t userId;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LeaguesLcdsAggregatedStatsKey& v) { 
    j["userId"] = v.userId;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LeaguesLcdsAggregatedStatsKey& v) { 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LeaguesLcdsAggregatedStats { /**/ 
    LeaguesLcdsAggregatedStatsKey key;/**/
    std::vector<LeaguesLcdsAggregatedStat> lifetimeStatistics;/**/
  };
  static void to_json(json& j, const LeaguesLcdsAggregatedStats& v) { 
    j["key"] = v.key;
    j["lifetimeStatistics"] = v.lifetimeStatistics;
  }
  static void from_json(const json& j, LeaguesLcdsAggregatedStats& v) { 
    v.key = j.at("key").get<LeaguesLcdsAggregatedStatsKey>(); 
    v.lifetimeStatistics = j.at("lifetimeStatistics").get<std::vector<LeaguesLcdsAggregatedStat>>(); 
  } 
  struct LeaguesLcdsChampionStatInfo { /**/ 
    int32_t totalGamesPlayed;/**/
    std::vector<LeaguesLcdsAggregatedStat> stats;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LeaguesLcdsChampionStatInfo& v) { 
    j["totalGamesPlayed"] = v.totalGamesPlayed;
    j["stats"] = v.stats;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LeaguesLcdsChampionStatInfo& v) { 
    v.totalGamesPlayed = j.at("totalGamesPlayed").get<int32_t>(); 
    v.stats = j.at("stats").get<std::vector<LeaguesLcdsAggregatedStat>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LeaguesLcdsMiniSeriesDTO { /**/ 
    uint64_t target;/**/
    uint64_t wins;/**/
    std::string progress;/**/
    uint64_t timeLeftToPlayMillis;/**/
    uint64_t losses;/**/
  };
  static void to_json(json& j, const LeaguesLcdsMiniSeriesDTO& v) { 
    j["target"] = v.target;
    j["wins"] = v.wins;
    j["progress"] = v.progress;
    j["timeLeftToPlayMillis"] = v.timeLeftToPlayMillis;
    j["losses"] = v.losses;
  }
  static void from_json(const json& j, LeaguesLcdsMiniSeriesDTO& v) { 
    v.target = j.at("target").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.progress = j.at("progress").get<std::string>(); 
    v.timeLeftToPlayMillis = j.at("timeLeftToPlayMillis").get<uint64_t>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
  } 
  struct LeaguesLcdsLeagueItemDTO { /**/ 
    bool inactive;/**/
    LeaguesLcdsLeagueTier tier;/**/
    int32_t leaguePoints;/**/
    LeaguesLcdsQueueType queueType;/**/
    LeaguesLcdsMiniSeriesDTO miniSeries;/**/
    uint64_t previousDayLeaguePosition;/**/
    uint64_t wins;/**/
    int32_t apexDaysUntilDecay;/**/
    uint64_t timeUntilInactivityStatusChanges;/**/
    std::string playerOrTeamName;/**/
    bool freshBlood;/**/
    bool hotStreak;/**/
    uint64_t losses;/**/
    bool displayDecayWarning;/**/
    std::string playerOrTeamId;/**/
    uint64_t demotionWarning;/**/
    LeaguesLcdsLeagueRank rank;/**/
    bool veteran;/**/
    std::string inactivityStatus;/**/
  };
  static void to_json(json& j, const LeaguesLcdsLeagueItemDTO& v) { 
    j["inactive"] = v.inactive;
    j["tier"] = v.tier;
    j["leaguePoints"] = v.leaguePoints;
    j["queueType"] = v.queueType;
    j["miniSeries"] = v.miniSeries;
    j["previousDayLeaguePosition"] = v.previousDayLeaguePosition;
    j["wins"] = v.wins;
    j["apexDaysUntilDecay"] = v.apexDaysUntilDecay;
    j["timeUntilInactivityStatusChanges"] = v.timeUntilInactivityStatusChanges;
    j["playerOrTeamName"] = v.playerOrTeamName;
    j["freshBlood"] = v.freshBlood;
    j["hotStreak"] = v.hotStreak;
    j["losses"] = v.losses;
    j["displayDecayWarning"] = v.displayDecayWarning;
    j["playerOrTeamId"] = v.playerOrTeamId;
    j["demotionWarning"] = v.demotionWarning;
    j["rank"] = v.rank;
    j["veteran"] = v.veteran;
    j["inactivityStatus"] = v.inactivityStatus;
  }
  static void from_json(const json& j, LeaguesLcdsLeagueItemDTO& v) { 
    v.inactive = j.at("inactive").get<bool>(); 
    v.tier = j.at("tier").get<LeaguesLcdsLeagueTier>(); 
    v.leaguePoints = j.at("leaguePoints").get<int32_t>(); 
    v.queueType = j.at("queueType").get<LeaguesLcdsQueueType>(); 
    v.miniSeries = j.at("miniSeries").get<LeaguesLcdsMiniSeriesDTO>(); 
    v.previousDayLeaguePosition = j.at("previousDayLeaguePosition").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.apexDaysUntilDecay = j.at("apexDaysUntilDecay").get<int32_t>(); 
    v.timeUntilInactivityStatusChanges = j.at("timeUntilInactivityStatusChanges").get<uint64_t>(); 
    v.playerOrTeamName = j.at("playerOrTeamName").get<std::string>(); 
    v.freshBlood = j.at("freshBlood").get<bool>(); 
    v.hotStreak = j.at("hotStreak").get<bool>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
    v.displayDecayWarning = j.at("displayDecayWarning").get<bool>(); 
    v.playerOrTeamId = j.at("playerOrTeamId").get<std::string>(); 
    v.demotionWarning = j.at("demotionWarning").get<uint64_t>(); 
    v.rank = j.at("rank").get<LeaguesLcdsLeagueRank>(); 
    v.veteran = j.at("veteran").get<bool>(); 
    v.inactivityStatus = j.at("inactivityStatus").get<std::string>(); 
  } 
  struct LeaguesLcdsLeagueListDTO { /**/ 
    LeaguesLcdsLeagueTier tier;/**/
    std::vector<LeaguesLcdsLeagueItemDTO> entries;/**/
    std::string name;/**/
    LeaguesLcdsQueueType queue;/**/
    uint64_t nextApexUpdate;/**/
    uint64_t maxLeagueSize;/**/
    std::string requestorsName;/**/
  };
  static void to_json(json& j, const LeaguesLcdsLeagueListDTO& v) { 
    j["tier"] = v.tier;
    j["entries"] = v.entries;
    j["name"] = v.name;
    j["queue"] = v.queue;
    j["nextApexUpdate"] = v.nextApexUpdate;
    j["maxLeagueSize"] = v.maxLeagueSize;
    j["requestorsName"] = v.requestorsName;
  }
  static void from_json(const json& j, LeaguesLcdsLeagueListDTO& v) { 
    v.tier = j.at("tier").get<LeaguesLcdsLeagueTier>(); 
    v.entries = j.at("entries").get<std::vector<LeaguesLcdsLeagueItemDTO>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.queue = j.at("queue").get<LeaguesLcdsQueueType>(); 
    v.nextApexUpdate = j.at("nextApexUpdate").get<uint64_t>(); 
    v.maxLeagueSize = j.at("maxLeagueSize").get<uint64_t>(); 
    v.requestorsName = j.at("requestorsName").get<std::string>(); 
  } 
  struct LeaguesLcdsPlayerAggregatedStats { /**/ 
    uint64_t playerId;/**/
    LeaguesLcdsAggregatedStats aggregatedStats;/**/
  };
  static void to_json(json& j, const LeaguesLcdsPlayerAggregatedStats& v) { 
    j["playerId"] = v.playerId;
    j["aggregatedStats"] = v.aggregatedStats;
  }
  static void from_json(const json& j, LeaguesLcdsPlayerAggregatedStats& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.aggregatedStats = j.at("aggregatedStats").get<LeaguesLcdsAggregatedStats>(); 
  } 
  struct LeaguesLcdsTeamMemberInfoDTO { /**/ 
    std::string playerName;/**/
    uint64_t playerId;/**/
  };
  static void to_json(json& j, const LeaguesLcdsTeamMemberInfoDTO& v) { 
    j["playerName"] = v.playerName;
    j["playerId"] = v.playerId;
  }
  static void from_json(const json& j, LeaguesLcdsTeamMemberInfoDTO& v) { 
    v.playerName = j.at("playerName").get<std::string>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
  } 
  struct LeaguesLcdsRosterDTO { /**/ 
    std::vector<LeaguesLcdsTeamMemberInfoDTO> memberList;/**/
  };
  static void to_json(json& j, const LeaguesLcdsRosterDTO& v) { 
    j["memberList"] = v.memberList;
  }
  static void from_json(const json& j, LeaguesLcdsRosterDTO& v) { 
    v.memberList = j.at("memberList").get<std::vector<LeaguesLcdsTeamMemberInfoDTO>>(); 
  } 
  struct LeaguesLcdsSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LeaguesLcdsSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LeaguesLcdsSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LeaguesLcdsSummonerLeagueItemsDTO { /**/ 
    std::vector<LeaguesLcdsLeagueItemDTO> summonerLeagues;/**/
  };
  static void to_json(json& j, const LeaguesLcdsSummonerLeagueItemsDTO& v) { 
    j["summonerLeagues"] = v.summonerLeagues;
  }
  static void from_json(const json& j, LeaguesLcdsSummonerLeagueItemsDTO& v) { 
    v.summonerLeagues = j.at("summonerLeagues").get<std::vector<LeaguesLcdsLeagueItemDTO>>(); 
  } 
  struct LeaguesLcdsSummonerLeagueListDTO { /**/ 
    LeaguesLcdsLeagueTier tier;/**/
    LeaguesLcdsLeagueRank requestorsRank;/**/
    std::vector<LeaguesLcdsLeagueItemDTO> entries;/**/
    std::string name;/**/
    LeaguesLcdsQueueType queue;/**/
    uint64_t nextApexUpdate;/**/
    std::string requestorsName;/**/
  };
  static void to_json(json& j, const LeaguesLcdsSummonerLeagueListDTO& v) { 
    j["tier"] = v.tier;
    j["requestorsRank"] = v.requestorsRank;
    j["entries"] = v.entries;
    j["name"] = v.name;
    j["queue"] = v.queue;
    j["nextApexUpdate"] = v.nextApexUpdate;
    j["requestorsName"] = v.requestorsName;
  }
  static void from_json(const json& j, LeaguesLcdsSummonerLeagueListDTO& v) { 
    v.tier = j.at("tier").get<LeaguesLcdsLeagueTier>(); 
    v.requestorsRank = j.at("requestorsRank").get<LeaguesLcdsLeagueRank>(); 
    v.entries = j.at("entries").get<std::vector<LeaguesLcdsLeagueItemDTO>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.queue = j.at("queue").get<LeaguesLcdsQueueType>(); 
    v.nextApexUpdate = j.at("nextApexUpdate").get<uint64_t>(); 
    v.requestorsName = j.at("requestorsName").get<std::string>(); 
  } 
  struct LeaguesLcdsSummonerLeaguesDTO { /**/ 
    std::vector<LeaguesLcdsSummonerLeagueListDTO> summonerLeagues;/**/
  };
  static void to_json(json& j, const LeaguesLcdsSummonerLeaguesDTO& v) { 
    j["summonerLeagues"] = v.summonerLeagues;
  }
  static void from_json(const json& j, LeaguesLcdsSummonerLeaguesDTO& v) { 
    v.summonerLeagues = j.at("summonerLeagues").get<std::vector<LeaguesLcdsSummonerLeagueListDTO>>(); 
  } 
  struct LeaguesLcdsTeamIdDTO { /**/ 
    std::string fullId;/**/
  };
  static void to_json(json& j, const LeaguesLcdsTeamIdDTO& v) { 
    j["fullId"] = v.fullId;
  }
  static void from_json(const json& j, LeaguesLcdsTeamIdDTO& v) { 
    v.fullId = j.at("fullId").get<std::string>(); 
  } 
  struct LeaguesLcdsTeamAggregatedStats { /**/ 
    std::vector<LeaguesLcdsPlayerAggregatedStats> playerAggregatedStatsList;/**/
    LeaguesLcdsTeamIdDTO id;/**/
    std::string queueType;/**/
  };
  static void to_json(json& j, const LeaguesLcdsTeamAggregatedStats& v) { 
    j["playerAggregatedStatsList"] = v.playerAggregatedStatsList;
    j["id"] = v.id;
    j["queueType"] = v.queueType;
  }
  static void from_json(const json& j, LeaguesLcdsTeamAggregatedStats& v) { 
    v.playerAggregatedStatsList = j.at("playerAggregatedStatsList").get<std::vector<LeaguesLcdsPlayerAggregatedStats>>(); 
    v.id = j.at("id").get<LeaguesLcdsTeamIdDTO>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
  } 
  struct LeaguesLcdsTeamDTO { /**/ 
    LeaguesLcdsTeamIdDTO teamId;/**/
    LeaguesLcdsRosterDTO roster;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LeaguesLcdsTeamDTO& v) { 
    j["teamId"] = v.teamId;
    j["roster"] = v.roster;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LeaguesLcdsTeamDTO& v) { 
    v.teamId = j.at("teamId").get<LeaguesLcdsTeamIdDTO>(); 
    v.roster = j.at("roster").get<LeaguesLcdsRosterDTO>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LeaguesSimpleMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LeaguesSimpleMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LeaguesSimpleMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LeaverBusterLcdsMatchmakingNotification { /**/ 
    std::vector<json> playerJoinFailures;/**/
  };
  static void to_json(json& j, const LeaverBusterLcdsMatchmakingNotification& v) { 
    j["playerJoinFailures"] = v.playerJoinFailures;
  }
  static void from_json(const json& j, LeaverBusterLcdsMatchmakingNotification& v) { 
    v.playerJoinFailures = j.at("playerJoinFailures").get<std::vector<json>>(); 
  } 
  struct LeaverBusterLcdsSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LeaverBusterLcdsSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LeaverBusterLcdsSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  enum class LeaverBusterNotificationType { /**/ 
    Invalid_e = 0, /**/ 
    PunishedGamesRemaining_e = 3, /**/ 
    PunishmentIncurred_e = 2, /**/ 
    Reforming_e = 4, /**/ 
    TaintedWarning_e = 1, /**/ 
  };
  static void to_json(json& j, const LeaverBusterNotificationType& v) {
    switch(v) { 
    case LeaverBusterNotificationType::Invalid_e:
      j = "Invalid";
    break;
    case LeaverBusterNotificationType::PunishedGamesRemaining_e:
      j = "PunishedGamesRemaining";
    break;
    case LeaverBusterNotificationType::PunishmentIncurred_e:
      j = "PunishmentIncurred";
    break;
    case LeaverBusterNotificationType::Reforming_e:
      j = "Reforming";
    break;
    case LeaverBusterNotificationType::TaintedWarning_e:
      j = "TaintedWarning";
    break;
    };
  }
  static void from_json(const json& j, LeaverBusterNotificationType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LeaverBusterNotificationType::Invalid_e;
      return;
    } 
    if(s == "PunishedGamesRemaining") {
      v = LeaverBusterNotificationType::PunishedGamesRemaining_e;
      return;
    } 
    if(s == "PunishmentIncurred") {
      v = LeaverBusterNotificationType::PunishmentIncurred_e;
      return;
    } 
    if(s == "Reforming") {
      v = LeaverBusterNotificationType::Reforming_e;
      return;
    } 
    if(s == "TaintedWarning") {
      v = LeaverBusterNotificationType::TaintedWarning_e;
      return;
    } 
  } 
  struct LeaverBusterNotificationResource { /**/ 
    LeaverBusterNotificationType type;/**/
    std::string msgId;/**/
    int32_t punishedGamesRemaining;/**/
    uint32_t id;/**/
  };
  static void to_json(json& j, const LeaverBusterNotificationResource& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["punishedGamesRemaining"] = v.punishedGamesRemaining;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LeaverBusterNotificationResource& v) { 
    v.type = j.at("type").get<LeaverBusterNotificationType>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.punishedGamesRemaining = j.at("punishedGamesRemaining").get<int32_t>(); 
    v.id = j.at("id").get<uint32_t>(); 
  } 
  struct LeaverBusterSimpleMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LeaverBusterSimpleMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LeaverBusterSimpleMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LobbyClientDynamicConfigurationNotification { /**/ 
    std::string configs;/**/
    bool delta;/**/
  };
  static void to_json(json& j, const LobbyClientDynamicConfigurationNotification& v) { 
    j["configs"] = v.configs;
    j["delta"] = v.delta;
  }
  static void from_json(const json& j, LobbyClientDynamicConfigurationNotification& v) { 
    v.configs = j.at("configs").get<std::string>(); 
    v.delta = j.at("delta").get<bool>(); 
  } 
  enum class LogSeverityLevels { /*Allowable severity levels for log events.*/ 
    Always_e = 3, /*Always logged, regardless of program's state*/ 
    Error_e = 2, /*Critical failure; thread may terminate*/ 
    Okay_e = 0, /*Progress nominal (used for INFO and TRACE)*/ 
    Warning_e = 1, /*Progress expected to continue, despite issues*/ 
  };
  static void to_json(json& j, const LogSeverityLevels& v) {
    switch(v) { 
    case LogSeverityLevels::Always_e:
      j = "Always";
    break;
    case LogSeverityLevels::Error_e:
      j = "Error";
    break;
    case LogSeverityLevels::Okay_e:
      j = "Okay";
    break;
    case LogSeverityLevels::Warning_e:
      j = "Warning";
    break;
    };
  }
  static void from_json(const json& j, LogSeverityLevels& v) {
    auto s = j.get<std::string>(); 
    if(s == "Always") {
      v = LogSeverityLevels::Always_e;
      return;
    } 
    if(s == "Error") {
      v = LogSeverityLevels::Error_e;
      return;
    } 
    if(s == "Okay") {
      v = LogSeverityLevels::Okay_e;
      return;
    } 
    if(s == "Warning") {
      v = LogSeverityLevels::Warning_e;
      return;
    } 
  } 
  struct LogEvent { /*Describes a log entry.*/ 
    std::string message;/**/
    LogSeverityLevels severity;/**/
  };
  static void to_json(json& j, const LogEvent& v) { 
    j["message"] = v.message;
    j["severity"] = v.severity;
  }
  static void from_json(const json& j, LogEvent& v) { 
    v.message = j.at("message").get<std::string>(); 
    v.severity = j.at("severity").get<LogSeverityLevels>(); 
  } 
  struct LoginDataPacket { /**/ 
    uint64_t timeUntilFirstWinOfDay;/**/
  };
  static void to_json(json& j, const LoginDataPacket& v) { 
    j["timeUntilFirstWinOfDay"] = v.timeUntilFirstWinOfDay;
  }
  static void from_json(const json& j, LoginDataPacket& v) { 
    v.timeUntilFirstWinOfDay = j.at("timeUntilFirstWinOfDay").get<uint64_t>(); 
  } 
  enum class LoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LoginSessionStates& v) {
    switch(v) { 
    case LoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LoginSession { /**/ 
    LoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LoginSession& v) { 
    v.state = j.at("state").get<LoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolAccountVerificationAVSConfig { /**/ 
    bool Enabled;/**/
  };
  static void to_json(json& j, const LolAccountVerificationAVSConfig& v) { 
    j["Enabled"] = v.Enabled;
  }
  static void from_json(const json& j, LolAccountVerificationAVSConfig& v) { 
    v.Enabled = j.at("Enabled").get<bool>(); 
  } 
  struct LolAccountVerificationDeviceResponse { /**/ 
    std::string message;/**/
    int32_t status;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolAccountVerificationDeviceResponse& v) { 
    j["message"] = v.message;
    j["status"] = v.status;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolAccountVerificationDeviceResponse& v) { 
    v.message = j.at("message").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  struct LolAccountVerificationInvalidateResponse { /**/ 
    int32_t smsTokenExpireDurationInSec;/**/
    std::string message;/**/
    int32_t status;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolAccountVerificationInvalidateResponse& v) { 
    j["smsTokenExpireDurationInSec"] = v.smsTokenExpireDurationInSec;
    j["message"] = v.message;
    j["status"] = v.status;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolAccountVerificationInvalidateResponse& v) { 
    v.smsTokenExpireDurationInSec = j.at("smsTokenExpireDurationInSec").get<int32_t>(); 
    v.message = j.at("message").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  struct LolAccountVerificationIsVerifiedResponse { /**/ 
    std::string message;/**/
    int32_t status;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolAccountVerificationIsVerifiedResponse& v) { 
    j["message"] = v.message;
    j["status"] = v.status;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolAccountVerificationIsVerifiedResponse& v) { 
    v.message = j.at("message").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  enum class LolAccountVerificationLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolAccountVerificationLoginSessionState& v) {
    switch(v) { 
    case LolAccountVerificationLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolAccountVerificationLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolAccountVerificationLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolAccountVerificationLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolAccountVerificationLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolAccountVerificationLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolAccountVerificationLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolAccountVerificationLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolAccountVerificationLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolAccountVerificationLoginSession { /**/ 
    LolAccountVerificationLoginSessionState state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolAccountVerificationLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolAccountVerificationLoginSession& v) { 
    v.state = j.at("state").get<LolAccountVerificationLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolAccountVerificationPlatformGeneratedCredentials { /**/ 
    json gasToken;/**/
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolAccountVerificationPlatformGeneratedCredentials& v) { 
    j["gasToken"] = v.gasToken;
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolAccountVerificationPlatformGeneratedCredentials& v) { 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolAccountVerificationSendTokenRequest { /**/ 
    std::string mediator;/**/
    std::string locale;/**/
    std::string device;/**/
  };
  static void to_json(json& j, const LolAccountVerificationSendTokenRequest& v) { 
    j["mediator"] = v.mediator;
    j["locale"] = v.locale;
    j["device"] = v.device;
  }
  static void from_json(const json& j, LolAccountVerificationSendTokenRequest& v) { 
    v.mediator = j.at("mediator").get<std::string>(); 
    v.locale = j.at("locale").get<std::string>(); 
    v.device = j.at("device").get<std::string>(); 
  } 
  struct LolAccountVerificationSendTokenResponse { /**/ 
    int32_t smsTokenExpireDurationInSec;/**/
    std::string message;/**/
    int32_t status;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolAccountVerificationSendTokenResponse& v) { 
    j["smsTokenExpireDurationInSec"] = v.smsTokenExpireDurationInSec;
    j["message"] = v.message;
    j["status"] = v.status;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolAccountVerificationSendTokenResponse& v) { 
    v.smsTokenExpireDurationInSec = j.at("smsTokenExpireDurationInSec").get<int32_t>(); 
    v.message = j.at("message").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  struct LolAccountVerificationVerifyRequest { /**/ 
    std::string mediator;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolAccountVerificationVerifyRequest& v) { 
    j["mediator"] = v.mediator;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolAccountVerificationVerifyRequest& v) { 
    v.mediator = j.at("mediator").get<std::string>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolAccountVerificationVerifyResponse { /**/ 
    std::string message;/**/
    int32_t status;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolAccountVerificationVerifyResponse& v) { 
    j["message"] = v.message;
    j["status"] = v.status;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolAccountVerificationVerifyResponse& v) { 
    v.message = j.at("message").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  struct LolAcsAcsChampionGames { /**/ 
    int32_t queue;/**/
    std::string lane;/**/
    int32_t championId;/**/
    std::string role;/**/
  };
  static void to_json(json& j, const LolAcsAcsChampionGames& v) { 
    j["queue"] = v.queue;
    j["lane"] = v.lane;
    j["championId"] = v.championId;
    j["role"] = v.role;
  }
  static void from_json(const json& j, LolAcsAcsChampionGames& v) { 
    v.queue = j.at("queue").get<int32_t>(); 
    v.lane = j.at("lane").get<std::string>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.role = j.at("role").get<std::string>(); 
  } 
  struct LolAcsAcsChampionGamesCollection { /**/ 
    std::vector<LolAcsAcsChampionGames> champions;/**/
    uint32_t gameCount;/**/
  };
  static void to_json(json& j, const LolAcsAcsChampionGamesCollection& v) { 
    j["champions"] = v.champions;
    j["gameCount"] = v.gameCount;
  }
  static void from_json(const json& j, LolAcsAcsChampionGamesCollection& v) { 
    v.champions = j.at("champions").get<std::vector<LolAcsAcsChampionGames>>(); 
    v.gameCount = j.at("gameCount").get<uint32_t>(); 
  } 
  struct LolAcsAcsEndPoint { /**/ 
    std::string url;/**/
  };
  static void to_json(json& j, const LolAcsAcsEndPoint& v) { 
    j["url"] = v.url;
  }
  static void from_json(const json& j, LolAcsAcsEndPoint& v) { 
    v.url = j.at("url").get<std::string>(); 
  } 
  enum class LolAcsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolAcsLoginSessionStates& v) {
    switch(v) { 
    case LolAcsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolAcsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolAcsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolAcsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolAcsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolAcsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolAcsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolAcsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolAcsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolAcsLoginSession { /**/ 
    LolAcsLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolAcsLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolAcsLoginSession& v) { 
    v.state = j.at("state").get<LolAcsLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolBannersBannerFlag { /**/ 
    std::string level;/**/
    std::string seasonId;/**/
    std::string theme;/**/
  };
  static void to_json(json& j, const LolBannersBannerFlag& v) { 
    j["level"] = v.level;
    j["seasonId"] = v.seasonId;
    j["theme"] = v.theme;
  }
  static void from_json(const json& j, LolBannersBannerFlag& v) { 
    v.level = j.at("level").get<std::string>(); 
    v.seasonId = j.at("seasonId").get<std::string>(); 
    v.theme = j.at("theme").get<std::string>(); 
  } 
  struct LolBannersClashV2FlagRewardSpec { /**/ 
    std::string level;/**/
    std::string seasonId;/**/
    std::string theme;/**/
  };
  static void to_json(json& j, const LolBannersClashV2FlagRewardSpec& v) { 
    j["level"] = v.level;
    j["seasonId"] = v.seasonId;
    j["theme"] = v.theme;
  }
  static void from_json(const json& j, LolBannersClashV2FlagRewardSpec& v) { 
    v.level = j.at("level").get<std::string>(); 
    v.seasonId = j.at("seasonId").get<std::string>(); 
    v.theme = j.at("theme").get<std::string>(); 
  } 
  struct LolBannersCapClashFlagEntitlementPayload { /**/ 
    LolBannersClashV2FlagRewardSpec rewardSpec;/**/
    std::string eventId;/**/
    std::string rewardType;/**/
  };
  static void to_json(json& j, const LolBannersCapClashFlagEntitlementPayload& v) { 
    j["rewardSpec"] = v.rewardSpec;
    j["eventId"] = v.eventId;
    j["rewardType"] = v.rewardType;
  }
  static void from_json(const json& j, LolBannersCapClashFlagEntitlementPayload& v) { 
    v.rewardSpec = j.at("rewardSpec").get<LolBannersClashV2FlagRewardSpec>(); 
    v.eventId = j.at("eventId").get<std::string>(); 
    v.rewardType = j.at("rewardType").get<std::string>(); 
  } 
  struct LolBannersTournamentFlagInventoryItem { /**/ 
    LolBannersCapClashFlagEntitlementPayload payload;/**/
    std::string purchaseDate;/**/
  };
  static void to_json(json& j, const LolBannersTournamentFlagInventoryItem& v) { 
    j["payload"] = v.payload;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, LolBannersTournamentFlagInventoryItem& v) { 
    v.payload = j.at("payload").get<LolBannersCapClashFlagEntitlementPayload>(); 
    v.purchaseDate = j.at("purchaseDate").get<std::string>(); 
  } 
  struct LolBannersInventoryItemsByType { /**/ 
    std::vector<LolBannersTournamentFlagInventoryItem> TOURNAMENT_FLAG;/**/
  };
  static void to_json(json& j, const LolBannersInventoryItemsByType& v) { 
    j["TOURNAMENT_FLAG"] = v.TOURNAMENT_FLAG;
  }
  static void from_json(const json& j, LolBannersInventoryItemsByType& v) { 
    v.TOURNAMENT_FLAG = j.at("TOURNAMENT_FLAG").get<std::vector<LolBannersTournamentFlagInventoryItem>>(); 
  } 
  struct LolBannersInventoryResponse { /**/ 
    LolBannersInventoryItemsByType items;/**/
  };
  static void to_json(json& j, const LolBannersInventoryResponse& v) { 
    j["items"] = v.items;
  }
  static void from_json(const json& j, LolBannersInventoryResponse& v) { 
    v.items = j.at("items").get<LolBannersInventoryItemsByType>(); 
  } 
  struct LolBannersLoadoutsSlot { /**/ 
    int64_t itemId;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const LolBannersLoadoutsSlot& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, LolBannersLoadoutsSlot& v) { 
    v.itemId = j.at("itemId").get<int64_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LolBannersSummonerProfileUpdate { /**/ 
    json value;/**/
    std::string key;/**/
  };
  static void to_json(json& j, const LolBannersSummonerProfileUpdate& v) { 
    j["value"] = v.value;
    j["key"] = v.key;
  }
  static void from_json(const json& j, LolBannersSummonerProfileUpdate& v) { 
    v.value = j.at("value").get<json>(); 
    v.key = j.at("key").get<std::string>(); 
  } 
  struct LolChampSelectChampSelectAction { /**/ 
    std::string type;/**/
    int64_t actorCellId;/**/
    bool completed;/**/
    int64_t id;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectAction& v) { 
    j["type"] = v.type;
    j["actorCellId"] = v.actorCellId;
    j["completed"] = v.completed;
    j["id"] = v.id;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolChampSelectChampSelectAction& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.actorCellId = j.at("actorCellId").get<int64_t>(); 
    v.completed = j.at("completed").get<bool>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolChampSelectChampSelectBannableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectBannableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolChampSelectChampSelectBannableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectChampSelectBannedChampions { /**/ 
    std::vector<int32_t> theirTeamBans;/**/
    int32_t numBans;/**/
    std::vector<int32_t> myTeamBans;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectBannedChampions& v) { 
    j["theirTeamBans"] = v.theirTeamBans;
    j["numBans"] = v.numBans;
    j["myTeamBans"] = v.myTeamBans;
  }
  static void from_json(const json& j, LolChampSelectChampSelectBannedChampions& v) { 
    v.theirTeamBans = j.at("theirTeamBans").get<std::vector<int32_t>>(); 
    v.numBans = j.at("numBans").get<int32_t>(); 
    v.myTeamBans = j.at("myTeamBans").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectChampSelectChatRoomDetails { /**/ 
    std::optional<std::string> chatRoomPassword;/**/
    std::string chatRoomName;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectChatRoomDetails& v) { 
    j["chatRoomPassword"] = v.chatRoomPassword;
    j["chatRoomName"] = v.chatRoomName;
  }
  static void from_json(const json& j, LolChampSelectChampSelectChatRoomDetails& v) { 
    v.chatRoomPassword = j.at("chatRoomPassword").get<std::optional<std::string>>(); 
    v.chatRoomName = j.at("chatRoomName").get<std::string>(); 
  } 
  struct LolChampSelectChampSelectDisabledChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectDisabledChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolChampSelectChampSelectDisabledChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectChampSelectMySelection { /**/ 
    std::optional<int64_t> wardSkinId;/**/
    std::optional<uint64_t> spell1Id;/**/
    std::optional<int32_t> selectedSkinId;/**/
    std::optional<uint64_t> spell2Id;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectMySelection& v) { 
    j["wardSkinId"] = v.wardSkinId;
    j["spell1Id"] = v.spell1Id;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
  }
  static void from_json(const json& j, LolChampSelectChampSelectMySelection& v) { 
    v.wardSkinId = j.at("wardSkinId").get<std::optional<int64_t>>(); 
    v.spell1Id = j.at("spell1Id").get<std::optional<uint64_t>>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<std::optional<int32_t>>(); 
    v.spell2Id = j.at("spell2Id").get<std::optional<uint64_t>>(); 
  } 
  struct LolChampSelectChampSelectPickableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectPickableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolChampSelectChampSelectPickableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectChampSelectPickableSkins { /**/ 
    std::vector<int32_t> skinIds;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectPickableSkins& v) { 
    j["skinIds"] = v.skinIds;
  }
  static void from_json(const json& j, LolChampSelectChampSelectPickableSkins& v) { 
    v.skinIds = j.at("skinIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectChampSelectPlayerSelection { /**/ 
    std::string assignedPosition;/**/
    std::string playerType;/**/
    int32_t championPickIntent;/**/
    uint64_t spell1Id;/**/
    int32_t championId;/**/
    int64_t wardSkinId;/**/
    int32_t team;/**/
    uint64_t summonerId;/**/
    int32_t selectedSkinId;/**/
    uint64_t spell2Id;/**/
    int64_t cellId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectPlayerSelection& v) { 
    j["assignedPosition"] = v.assignedPosition;
    j["playerType"] = v.playerType;
    j["championPickIntent"] = v.championPickIntent;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
    j["wardSkinId"] = v.wardSkinId;
    j["team"] = v.team;
    j["summonerId"] = v.summonerId;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
    j["cellId"] = v.cellId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolChampSelectChampSelectPlayerSelection& v) { 
    v.assignedPosition = j.at("assignedPosition").get<std::string>(); 
    v.playerType = j.at("playerType").get<std::string>(); 
    v.championPickIntent = j.at("championPickIntent").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.wardSkinId = j.at("wardSkinId").get<int64_t>(); 
    v.team = j.at("team").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<uint64_t>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolChampSelectChampSelectTimer { /**/ 
    int64_t adjustedTimeLeftInPhase;/**/
    bool isInfinite;/**/
    uint64_t internalNowInEpochMs;/**/
    int64_t timeLeftInPhase;/**/
    int64_t totalTimeInPhase;/**/
    std::string phase;/**/
    int32_t adjustedTimeLeftInPhaseInSec;/**/
    int32_t timeLeftInPhaseInSec;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectTimer& v) { 
    j["adjustedTimeLeftInPhase"] = v.adjustedTimeLeftInPhase;
    j["isInfinite"] = v.isInfinite;
    j["internalNowInEpochMs"] = v.internalNowInEpochMs;
    j["timeLeftInPhase"] = v.timeLeftInPhase;
    j["totalTimeInPhase"] = v.totalTimeInPhase;
    j["phase"] = v.phase;
    j["adjustedTimeLeftInPhaseInSec"] = v.adjustedTimeLeftInPhaseInSec;
    j["timeLeftInPhaseInSec"] = v.timeLeftInPhaseInSec;
  }
  static void from_json(const json& j, LolChampSelectChampSelectTimer& v) { 
    v.adjustedTimeLeftInPhase = j.at("adjustedTimeLeftInPhase").get<int64_t>(); 
    v.isInfinite = j.at("isInfinite").get<bool>(); 
    v.internalNowInEpochMs = j.at("internalNowInEpochMs").get<uint64_t>(); 
    v.timeLeftInPhase = j.at("timeLeftInPhase").get<int64_t>(); 
    v.totalTimeInPhase = j.at("totalTimeInPhase").get<int64_t>(); 
    v.phase = j.at("phase").get<std::string>(); 
    v.adjustedTimeLeftInPhaseInSec = j.at("adjustedTimeLeftInPhaseInSec").get<int32_t>(); 
    v.timeLeftInPhaseInSec = j.at("timeLeftInPhaseInSec").get<int32_t>(); 
  } 
  enum class LolChampSelectChampSelectTradeState { /**/ 
    AVAILABLE_e = 1, /**/ 
    BUSY_e = 2, /**/ 
    INVALID_e = 3, /**/ 
    RECEIVED_e = 4, /**/ 
    SENT_e = 5, /**/ 
  };
  static void to_json(json& j, const LolChampSelectChampSelectTradeState& v) {
    switch(v) { 
    case LolChampSelectChampSelectTradeState::AVAILABLE_e:
      j = "AVAILABLE";
    break;
    case LolChampSelectChampSelectTradeState::BUSY_e:
      j = "BUSY";
    break;
    case LolChampSelectChampSelectTradeState::INVALID_e:
      j = "INVALID";
    break;
    case LolChampSelectChampSelectTradeState::RECEIVED_e:
      j = "RECEIVED";
    break;
    case LolChampSelectChampSelectTradeState::SENT_e:
      j = "SENT";
    break;
    };
  }
  static void from_json(const json& j, LolChampSelectChampSelectTradeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AVAILABLE") {
      v = LolChampSelectChampSelectTradeState::AVAILABLE_e;
      return;
    } 
    if(s == "BUSY") {
      v = LolChampSelectChampSelectTradeState::BUSY_e;
      return;
    } 
    if(s == "INVALID") {
      v = LolChampSelectChampSelectTradeState::INVALID_e;
      return;
    } 
    if(s == "RECEIVED") {
      v = LolChampSelectChampSelectTradeState::RECEIVED_e;
      return;
    } 
    if(s == "SENT") {
      v = LolChampSelectChampSelectTradeState::SENT_e;
      return;
    } 
  } 
  struct LolChampSelectChampSelectTradeContract { /**/ 
    LolChampSelectChampSelectTradeState state;/**/
    int64_t cellId;/**/
    int64_t id;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectTradeContract& v) { 
    j["state"] = v.state;
    j["cellId"] = v.cellId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChampSelectChampSelectTradeContract& v) { 
    v.state = j.at("state").get<LolChampSelectChampSelectTradeState>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
  } 
  struct LolChampSelectChampSelectSession { /**/ 
    std::vector<LolChampSelectChampSelectPlayerSelection> theirTeam;/**/
    bool isSpectating;/**/
    int64_t localPlayerCellId;/**/
    LolChampSelectChampSelectTimer timer;/**/
    bool allowBattleBoost;/**/
    LolChampSelectChampSelectChatRoomDetails chatDetails;/**/
    std::vector<LolChampSelectChampSelectPlayerSelection> myTeam;/**/
    bool allowRerolling;/**/
    std::vector<LolChampSelectChampSelectTradeContract> trades;/**/
    std::vector<json> actions;/**/
    uint32_t rerollsRemaining;/**/
    bool allowSkinSelection;/**/
    LolChampSelectChampSelectBannedChampions bans;/**/
  };
  static void to_json(json& j, const LolChampSelectChampSelectSession& v) { 
    j["theirTeam"] = v.theirTeam;
    j["isSpectating"] = v.isSpectating;
    j["localPlayerCellId"] = v.localPlayerCellId;
    j["timer"] = v.timer;
    j["allowBattleBoost"] = v.allowBattleBoost;
    j["chatDetails"] = v.chatDetails;
    j["myTeam"] = v.myTeam;
    j["allowRerolling"] = v.allowRerolling;
    j["trades"] = v.trades;
    j["actions"] = v.actions;
    j["rerollsRemaining"] = v.rerollsRemaining;
    j["allowSkinSelection"] = v.allowSkinSelection;
    j["bans"] = v.bans;
  }
  static void from_json(const json& j, LolChampSelectChampSelectSession& v) { 
    v.theirTeam = j.at("theirTeam").get<std::vector<LolChampSelectChampSelectPlayerSelection>>(); 
    v.isSpectating = j.at("isSpectating").get<bool>(); 
    v.localPlayerCellId = j.at("localPlayerCellId").get<int64_t>(); 
    v.timer = j.at("timer").get<LolChampSelectChampSelectTimer>(); 
    v.allowBattleBoost = j.at("allowBattleBoost").get<bool>(); 
    v.chatDetails = j.at("chatDetails").get<LolChampSelectChampSelectChatRoomDetails>(); 
    v.myTeam = j.at("myTeam").get<std::vector<LolChampSelectChampSelectPlayerSelection>>(); 
    v.allowRerolling = j.at("allowRerolling").get<bool>(); 
    v.trades = j.at("trades").get<std::vector<LolChampSelectChampSelectTradeContract>>(); 
    v.actions = j.at("actions").get<std::vector<json>>(); 
    v.rerollsRemaining = j.at("rerollsRemaining").get<uint32_t>(); 
    v.allowSkinSelection = j.at("allowSkinSelection").get<bool>(); 
    v.bans = j.at("bans").get<LolChampSelectChampSelectBannedChampions>(); 
  } 
  struct LolChampSelectLegacyChampSelectAction { /**/ 
    int32_t pickTurn;/**/
    int64_t id;/**/
    std::string type;/**/
    int64_t actorCellId;/**/
    bool completed;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectAction& v) { 
    j["pickTurn"] = v.pickTurn;
    j["id"] = v.id;
    j["type"] = v.type;
    j["actorCellId"] = v.actorCellId;
    j["completed"] = v.completed;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectAction& v) { 
    v.pickTurn = j.at("pickTurn").get<int32_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.actorCellId = j.at("actorCellId").get<int64_t>(); 
    v.completed = j.at("completed").get<bool>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolChampSelectLegacyChampSelectBannableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectBannableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectBannableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectLegacyChampSelectBannedChampions { /**/ 
    std::vector<int32_t> theirTeamBans;/**/
    int32_t numBans;/**/
    std::vector<int32_t> myTeamBans;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectBannedChampions& v) { 
    j["theirTeamBans"] = v.theirTeamBans;
    j["numBans"] = v.numBans;
    j["myTeamBans"] = v.myTeamBans;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectBannedChampions& v) { 
    v.theirTeamBans = j.at("theirTeamBans").get<std::vector<int32_t>>(); 
    v.numBans = j.at("numBans").get<int32_t>(); 
    v.myTeamBans = j.at("myTeamBans").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectLegacyChampSelectChatRoomDetails { /**/ 
    std::optional<std::string> chatRoomPassword;/**/
    std::string chatRoomName;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectChatRoomDetails& v) { 
    j["chatRoomPassword"] = v.chatRoomPassword;
    j["chatRoomName"] = v.chatRoomName;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectChatRoomDetails& v) { 
    v.chatRoomPassword = j.at("chatRoomPassword").get<std::optional<std::string>>(); 
    v.chatRoomName = j.at("chatRoomName").get<std::string>(); 
  } 
  struct LolChampSelectLegacyChampSelectMySelection { /**/ 
    std::optional<int64_t> wardSkinId;/**/
    std::optional<uint64_t> spell1Id;/**/
    std::optional<int32_t> selectedSkinId;/**/
    std::optional<uint64_t> spell2Id;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectMySelection& v) { 
    j["wardSkinId"] = v.wardSkinId;
    j["spell1Id"] = v.spell1Id;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectMySelection& v) { 
    v.wardSkinId = j.at("wardSkinId").get<std::optional<int64_t>>(); 
    v.spell1Id = j.at("spell1Id").get<std::optional<uint64_t>>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<std::optional<int32_t>>(); 
    v.spell2Id = j.at("spell2Id").get<std::optional<uint64_t>>(); 
  } 
  struct LolChampSelectLegacyChampSelectPickableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectPickableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectPickableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolChampSelectLegacyChampSelectPlayerSelection { /**/ 
    std::string assignedPosition;/**/
    std::string playerType;/**/
    int32_t championPickIntent;/**/
    uint64_t spell1Id;/**/
    int32_t championId;/**/
    int64_t wardSkinId;/**/
    int32_t team;/**/
    uint64_t summonerId;/**/
    int32_t selectedSkinId;/**/
    uint64_t spell2Id;/**/
    int64_t cellId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectPlayerSelection& v) { 
    j["assignedPosition"] = v.assignedPosition;
    j["playerType"] = v.playerType;
    j["championPickIntent"] = v.championPickIntent;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
    j["wardSkinId"] = v.wardSkinId;
    j["team"] = v.team;
    j["summonerId"] = v.summonerId;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
    j["cellId"] = v.cellId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectPlayerSelection& v) { 
    v.assignedPosition = j.at("assignedPosition").get<std::string>(); 
    v.playerType = j.at("playerType").get<std::string>(); 
    v.championPickIntent = j.at("championPickIntent").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.wardSkinId = j.at("wardSkinId").get<int64_t>(); 
    v.team = j.at("team").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<uint64_t>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolChampSelectLegacyChampSelectTimer { /**/ 
    int64_t adjustedTimeLeftInPhase;/**/
    bool isInfinite;/**/
    uint64_t internalNowInEpochMs;/**/
    int64_t timeLeftInPhase;/**/
    int64_t totalTimeInPhase;/**/
    std::string phase;/**/
    int32_t adjustedTimeLeftInPhaseInSec;/**/
    int32_t timeLeftInPhaseInSec;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectTimer& v) { 
    j["adjustedTimeLeftInPhase"] = v.adjustedTimeLeftInPhase;
    j["isInfinite"] = v.isInfinite;
    j["internalNowInEpochMs"] = v.internalNowInEpochMs;
    j["timeLeftInPhase"] = v.timeLeftInPhase;
    j["totalTimeInPhase"] = v.totalTimeInPhase;
    j["phase"] = v.phase;
    j["adjustedTimeLeftInPhaseInSec"] = v.adjustedTimeLeftInPhaseInSec;
    j["timeLeftInPhaseInSec"] = v.timeLeftInPhaseInSec;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectTimer& v) { 
    v.adjustedTimeLeftInPhase = j.at("adjustedTimeLeftInPhase").get<int64_t>(); 
    v.isInfinite = j.at("isInfinite").get<bool>(); 
    v.internalNowInEpochMs = j.at("internalNowInEpochMs").get<uint64_t>(); 
    v.timeLeftInPhase = j.at("timeLeftInPhase").get<int64_t>(); 
    v.totalTimeInPhase = j.at("totalTimeInPhase").get<int64_t>(); 
    v.phase = j.at("phase").get<std::string>(); 
    v.adjustedTimeLeftInPhaseInSec = j.at("adjustedTimeLeftInPhaseInSec").get<int32_t>(); 
    v.timeLeftInPhaseInSec = j.at("timeLeftInPhaseInSec").get<int32_t>(); 
  } 
  enum class LolChampSelectLegacyChampSelectTradeState { /**/ 
    AVAILABLE_e = 1, /**/ 
    BUSY_e = 2, /**/ 
    INVALID_e = 3, /**/ 
    RECEIVED_e = 4, /**/ 
    SENT_e = 5, /**/ 
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectTradeState& v) {
    switch(v) { 
    case LolChampSelectLegacyChampSelectTradeState::AVAILABLE_e:
      j = "AVAILABLE";
    break;
    case LolChampSelectLegacyChampSelectTradeState::BUSY_e:
      j = "BUSY";
    break;
    case LolChampSelectLegacyChampSelectTradeState::INVALID_e:
      j = "INVALID";
    break;
    case LolChampSelectLegacyChampSelectTradeState::RECEIVED_e:
      j = "RECEIVED";
    break;
    case LolChampSelectLegacyChampSelectTradeState::SENT_e:
      j = "SENT";
    break;
    };
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectTradeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AVAILABLE") {
      v = LolChampSelectLegacyChampSelectTradeState::AVAILABLE_e;
      return;
    } 
    if(s == "BUSY") {
      v = LolChampSelectLegacyChampSelectTradeState::BUSY_e;
      return;
    } 
    if(s == "INVALID") {
      v = LolChampSelectLegacyChampSelectTradeState::INVALID_e;
      return;
    } 
    if(s == "RECEIVED") {
      v = LolChampSelectLegacyChampSelectTradeState::RECEIVED_e;
      return;
    } 
    if(s == "SENT") {
      v = LolChampSelectLegacyChampSelectTradeState::SENT_e;
      return;
    } 
  } 
  struct LolChampSelectLegacyChampSelectTradeContract { /**/ 
    LolChampSelectLegacyChampSelectTradeState state;/**/
    int64_t cellId;/**/
    int64_t id;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectTradeContract& v) { 
    j["state"] = v.state;
    j["cellId"] = v.cellId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectTradeContract& v) { 
    v.state = j.at("state").get<LolChampSelectLegacyChampSelectTradeState>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
  } 
  struct LolChampSelectLegacyChampSelectSession { /**/ 
    std::vector<LolChampSelectLegacyChampSelectPlayerSelection> theirTeam;/**/
    bool isSpectating;/**/
    int64_t localPlayerCellId;/**/
    LolChampSelectLegacyChampSelectTimer timer;/**/
    bool allowBattleBoost;/**/
    LolChampSelectLegacyChampSelectChatRoomDetails chatDetails;/**/
    std::vector<LolChampSelectLegacyChampSelectPlayerSelection> myTeam;/**/
    bool allowRerolling;/**/
    std::vector<LolChampSelectLegacyChampSelectTradeContract> trades;/**/
    std::vector<json> actions;/**/
    uint32_t rerollsRemaining;/**/
    bool allowSkinSelection;/**/
    LolChampSelectLegacyChampSelectBannedChampions bans;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyChampSelectSession& v) { 
    j["theirTeam"] = v.theirTeam;
    j["isSpectating"] = v.isSpectating;
    j["localPlayerCellId"] = v.localPlayerCellId;
    j["timer"] = v.timer;
    j["allowBattleBoost"] = v.allowBattleBoost;
    j["chatDetails"] = v.chatDetails;
    j["myTeam"] = v.myTeam;
    j["allowRerolling"] = v.allowRerolling;
    j["trades"] = v.trades;
    j["actions"] = v.actions;
    j["rerollsRemaining"] = v.rerollsRemaining;
    j["allowSkinSelection"] = v.allowSkinSelection;
    j["bans"] = v.bans;
  }
  static void from_json(const json& j, LolChampSelectLegacyChampSelectSession& v) { 
    v.theirTeam = j.at("theirTeam").get<std::vector<LolChampSelectLegacyChampSelectPlayerSelection>>(); 
    v.isSpectating = j.at("isSpectating").get<bool>(); 
    v.localPlayerCellId = j.at("localPlayerCellId").get<int64_t>(); 
    v.timer = j.at("timer").get<LolChampSelectLegacyChampSelectTimer>(); 
    v.allowBattleBoost = j.at("allowBattleBoost").get<bool>(); 
    v.chatDetails = j.at("chatDetails").get<LolChampSelectLegacyChampSelectChatRoomDetails>(); 
    v.myTeam = j.at("myTeam").get<std::vector<LolChampSelectLegacyChampSelectPlayerSelection>>(); 
    v.allowRerolling = j.at("allowRerolling").get<bool>(); 
    v.trades = j.at("trades").get<std::vector<LolChampSelectLegacyChampSelectTradeContract>>(); 
    v.actions = j.at("actions").get<std::vector<json>>(); 
    v.rerollsRemaining = j.at("rerollsRemaining").get<uint32_t>(); 
    v.allowSkinSelection = j.at("allowSkinSelection").get<bool>(); 
    v.bans = j.at("bans").get<LolChampSelectLegacyChampSelectBannedChampions>(); 
  } 
  struct LolChampSelectLegacyCollectionsRental { /**/ 
    bool rented;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyCollectionsRental& v) { 
    j["rented"] = v.rented;
  }
  static void from_json(const json& j, LolChampSelectLegacyCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
  } 
  struct LolChampSelectLegacyCollectionsOwnership { /**/ 
    LolChampSelectLegacyCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolChampSelectLegacyCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolChampSelectLegacyCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolChampSelectLegacyCollectionsChampion { /**/ 
    LolChampSelectLegacyCollectionsOwnership ownership;/**/
    bool freeToPlay;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyCollectionsChampion& v) { 
    j["ownership"] = v.ownership;
    j["freeToPlay"] = v.freeToPlay;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChampSelectLegacyCollectionsChampion& v) { 
    v.ownership = j.at("ownership").get<LolChampSelectLegacyCollectionsOwnership>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolChampSelectLegacyGameflowGameClient { /**/ 
    bool running;/**/
    bool visible;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowGameClient& v) { 
    j["running"] = v.running;
    j["visible"] = v.visible;
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowGameClient& v) { 
    v.running = j.at("running").get<bool>(); 
    v.visible = j.at("visible").get<bool>(); 
  } 
  struct LolChampSelectLegacyQueueGameTypeConfig { /**/ 
    bool battleBoost;/**/
    int32_t maxAllowableBans;/**/
    bool allowTrades;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyQueueGameTypeConfig& v) { 
    j["battleBoost"] = v.battleBoost;
    j["maxAllowableBans"] = v.maxAllowableBans;
    j["allowTrades"] = v.allowTrades;
  }
  static void from_json(const json& j, LolChampSelectLegacyQueueGameTypeConfig& v) { 
    v.battleBoost = j.at("battleBoost").get<bool>(); 
    v.maxAllowableBans = j.at("maxAllowableBans").get<int32_t>(); 
    v.allowTrades = j.at("allowTrades").get<bool>(); 
  } 
  struct LolChampSelectLegacyQueue { /**/ 
    bool areFreeChampionsAllowed;/**/
    LolChampSelectLegacyQueueGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyQueue& v) { 
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolChampSelectLegacyQueue& v) { 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolChampSelectLegacyQueueGameTypeConfig>(); 
  } 
  struct LolChampSelectLegacyGameflowGameData { /**/ 
    LolChampSelectLegacyQueue queue;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowGameData& v) { 
    j["queue"] = v.queue;
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolChampSelectLegacyQueue>(); 
  } 
  enum class LolChampSelectLegacyGameflowGameDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowGameDodgeState& v) {
    switch(v) { 
    case LolChampSelectLegacyGameflowGameDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolChampSelectLegacyGameflowGameDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolChampSelectLegacyGameflowGameDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolChampSelectLegacyGameflowGameDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowGameDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolChampSelectLegacyGameflowGameDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolChampSelectLegacyGameflowGameDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolChampSelectLegacyGameflowGameDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolChampSelectLegacyGameflowGameDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  struct LolChampSelectLegacyGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolChampSelectLegacyGameflowGameDodgeState state;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolChampSelectLegacyGameflowGameDodgeState>(); 
  } 
  enum class LolChampSelectLegacyGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowPhase& v) {
    switch(v) { 
    case LolChampSelectLegacyGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolChampSelectLegacyGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolChampSelectLegacyGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolChampSelectLegacyGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolChampSelectLegacyGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolChampSelectLegacyGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolChampSelectLegacyGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolChampSelectLegacyGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolChampSelectLegacyGameflowPhase::None_e:
      j = "None";
    break;
    case LolChampSelectLegacyGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolChampSelectLegacyGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolChampSelectLegacyGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolChampSelectLegacyGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolChampSelectLegacyGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolChampSelectLegacyGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolChampSelectLegacyGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolChampSelectLegacyGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolChampSelectLegacyGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolChampSelectLegacyGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolChampSelectLegacyGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolChampSelectLegacyGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolChampSelectLegacyGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolChampSelectLegacyGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolChampSelectLegacyGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolChampSelectLegacyGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolChampSelectLegacyGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolChampSelectLegacyGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolChampSelectLegacyGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolChampSelectLegacyGameflowSession { /**/ 
    LolChampSelectLegacyGameflowPhase phase;/**/
    LolChampSelectLegacyGameflowGameData gameData;/**/
    LolChampSelectLegacyGameflowGameClient gameClient;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolChampSelectLegacyGameflowSession& v) { 
    v.phase = j.at("phase").get<LolChampSelectLegacyGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolChampSelectLegacyGameflowGameData>(); 
    v.gameClient = j.at("gameClient").get<LolChampSelectLegacyGameflowGameClient>(); 
  } 
  struct LolChampSelectLegacyLobbyStatus { /**/ 
    int32_t queueId;/**/
    bool isSpectator;/**/
    bool allowedPlayAgain;/**/
    std::vector<uint64_t> memberSummonerIds;/**/
    bool isCustom;/**/
    bool isLeader;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["isSpectator"] = v.isSpectator;
    j["allowedPlayAgain"] = v.allowedPlayAgain;
    j["memberSummonerIds"] = v.memberSummonerIds;
    j["isCustom"] = v.isCustom;
    j["isLeader"] = v.isLeader;
  }
  static void from_json(const json& j, LolChampSelectLegacyLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.allowedPlayAgain = j.at("allowedPlayAgain").get<bool>(); 
    v.memberSummonerIds = j.at("memberSummonerIds").get<std::vector<uint64_t>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
  } 
  enum class LolChampSelectLegacyLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolChampSelectLegacyLoginSessionStates& v) {
    switch(v) { 
    case LolChampSelectLegacyLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolChampSelectLegacyLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolChampSelectLegacyLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolChampSelectLegacyLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolChampSelectLegacyLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolChampSelectLegacyLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolChampSelectLegacyLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolChampSelectLegacyLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolChampSelectLegacyLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolChampSelectLegacyLoginSession { /**/ 
    bool connected;/**/
    LolChampSelectLegacyLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolChampSelectLegacyLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolChampSelectLegacyLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolChampSelectLegacyPlayerStatus { /**/ 
    std::optional<LolChampSelectLegacyLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolChampSelectLegacyLobbyStatus> lastQueuedLobbyStatus;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
  }
  static void from_json(const json& j, LolChampSelectLegacyPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolChampSelectLegacyLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolChampSelectLegacyLobbyStatus>>(); 
  } 
  struct LolChampSelectLegacySummoner { /**/ 
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacySummoner& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolChampSelectLegacySummoner& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolChampSelectLegacyTeamBoost { /**/ 
    int64_t price;/**/
    std::vector<int64_t> availableSkins;/**/
    std::string summonerName;/**/
    bool unlocked;/**/
    int64_t ipReward;/**/
    std::string skinUnlockMode;/**/
    int64_t ipRewardForPurchaser;/**/
  };
  static void to_json(json& j, const LolChampSelectLegacyTeamBoost& v) { 
    j["price"] = v.price;
    j["availableSkins"] = v.availableSkins;
    j["summonerName"] = v.summonerName;
    j["unlocked"] = v.unlocked;
    j["ipReward"] = v.ipReward;
    j["skinUnlockMode"] = v.skinUnlockMode;
    j["ipRewardForPurchaser"] = v.ipRewardForPurchaser;
  }
  static void from_json(const json& j, LolChampSelectLegacyTeamBoost& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.availableSkins = j.at("availableSkins").get<std::vector<int64_t>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.unlocked = j.at("unlocked").get<bool>(); 
    v.ipReward = j.at("ipReward").get<int64_t>(); 
    v.skinUnlockMode = j.at("skinUnlockMode").get<std::string>(); 
    v.ipRewardForPurchaser = j.at("ipRewardForPurchaser").get<int64_t>(); 
  } 
  struct LolChampSelectTeamBoost { /**/ 
    int64_t price;/**/
    std::vector<int64_t> availableSkins;/**/
    std::string summonerName;/**/
    bool unlocked;/**/
    int64_t ipReward;/**/
    std::string skinUnlockMode;/**/
    int64_t ipRewardForPurchaser;/**/
  };
  static void to_json(json& j, const LolChampSelectTeamBoost& v) { 
    j["price"] = v.price;
    j["availableSkins"] = v.availableSkins;
    j["summonerName"] = v.summonerName;
    j["unlocked"] = v.unlocked;
    j["ipReward"] = v.ipReward;
    j["skinUnlockMode"] = v.skinUnlockMode;
    j["ipRewardForPurchaser"] = v.ipRewardForPurchaser;
  }
  static void from_json(const json& j, LolChampSelectTeamBoost& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.availableSkins = j.at("availableSkins").get<std::vector<int64_t>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.unlocked = j.at("unlocked").get<bool>(); 
    v.ipReward = j.at("ipReward").get<int64_t>(); 
    v.skinUnlockMode = j.at("skinUnlockMode").get<std::string>(); 
    v.ipRewardForPurchaser = j.at("ipRewardForPurchaser").get<int64_t>(); 
  } 
  struct LolChampionsCollectionsChampionSpell { /**/ 
    std::string description;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSpell& v) { 
    j["description"] = v.description;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSpell& v) { 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChampionsCollectionsRental { /**/ 
    bool rented;/**/
    int32_t winCountRemaining;/**/
    uint64_t endDate;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsRental& v) { 
    j["rented"] = v.rented;
    j["winCountRemaining"] = v.winCountRemaining;
    j["endDate"] = v.endDate;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, LolChampionsCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
    v.winCountRemaining = j.at("winCountRemaining").get<int32_t>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct LolChampionsCollectionsOwnership { /**/ 
    LolChampionsCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolChampionsCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolChampionsCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolChampionsCollectionsChampionSkinEmblemPosition { /**/ 
    std::string vertical;/**/
    std::string horizontal;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSkinEmblemPosition& v) { 
    j["vertical"] = v.vertical;
    j["horizontal"] = v.horizontal;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSkinEmblemPosition& v) { 
    v.vertical = j.at("vertical").get<std::string>(); 
    v.horizontal = j.at("horizontal").get<std::string>(); 
  } 
  struct LolChampionsCollectionsChampionSkinEmblemPath { /**/ 
    std::string small;/**/
    std::string large;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSkinEmblemPath& v) { 
    j["small"] = v.small;
    j["large"] = v.large;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSkinEmblemPath& v) { 
    v.small = j.at("small").get<std::string>(); 
    v.large = j.at("large").get<std::string>(); 
  } 
  struct LolChampionsCollectionsChampionSkinEmblem { /**/ 
    LolChampionsCollectionsChampionSkinEmblemPosition positions;/**/
    LolChampionsCollectionsChampionSkinEmblemPath emblemPath;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSkinEmblem& v) { 
    j["positions"] = v.positions;
    j["emblemPath"] = v.emblemPath;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSkinEmblem& v) { 
    v.positions = j.at("positions").get<LolChampionsCollectionsChampionSkinEmblemPosition>(); 
    v.emblemPath = j.at("emblemPath").get<LolChampionsCollectionsChampionSkinEmblemPath>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChampionsCollectionsChampionChroma { /**/ 
    bool lastSelected;/**/
    std::vector<std::string> colors;/**/
    int32_t id;/**/
    std::string name;/**/
    LolChampionsCollectionsOwnership ownership;/**/
    bool stillObtainable;/**/
    bool disabled;/**/
    int32_t championId;/**/
    std::optional<std::string> chromaPath;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionChroma& v) { 
    j["lastSelected"] = v.lastSelected;
    j["colors"] = v.colors;
    j["id"] = v.id;
    j["name"] = v.name;
    j["ownership"] = v.ownership;
    j["stillObtainable"] = v.stillObtainable;
    j["disabled"] = v.disabled;
    j["championId"] = v.championId;
    j["chromaPath"] = v.chromaPath;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionChroma& v) { 
    v.lastSelected = j.at("lastSelected").get<bool>(); 
    v.colors = j.at("colors").get<std::vector<std::string>>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.ownership = j.at("ownership").get<LolChampionsCollectionsOwnership>(); 
    v.stillObtainable = j.at("stillObtainable").get<bool>(); 
    v.disabled = j.at("disabled").get<bool>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.chromaPath = j.at("chromaPath").get<std::optional<std::string>>(); 
  } 
  struct LolChampionsCollectionsChampionSkin { /**/ 
    int32_t id;/**/
    std::string name;/**/
    bool isBase;/**/
    bool disabled;/**/
    std::string uncenteredSplashPath;/**/
    bool lastSelected;/**/
    int32_t championId;/**/
    bool stillObtainable;/**/
    std::optional<std::string> skinType;/**/
    std::vector<LolChampionsCollectionsChampionSkinEmblem> emblems;/**/
    std::optional<std::string> splashVideoPath;/**/
    std::string cardPath;/**/
    std::string splashPath;/**/
    std::optional<std::string> featuresText;/**/
    std::string rarityGemPath;/**/
    LolChampionsCollectionsOwnership ownership;/**/
    std::optional<std::string> chromaPath;/**/
    std::string tilePath;/**/
    std::vector<LolChampionsCollectionsChampionChroma> chromas;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSkin& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
    j["isBase"] = v.isBase;
    j["disabled"] = v.disabled;
    j["uncenteredSplashPath"] = v.uncenteredSplashPath;
    j["lastSelected"] = v.lastSelected;
    j["championId"] = v.championId;
    j["stillObtainable"] = v.stillObtainable;
    j["skinType"] = v.skinType;
    j["emblems"] = v.emblems;
    j["splashVideoPath"] = v.splashVideoPath;
    j["cardPath"] = v.cardPath;
    j["splashPath"] = v.splashPath;
    j["featuresText"] = v.featuresText;
    j["rarityGemPath"] = v.rarityGemPath;
    j["ownership"] = v.ownership;
    j["chromaPath"] = v.chromaPath;
    j["tilePath"] = v.tilePath;
    j["chromas"] = v.chromas;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSkin& v) { 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.isBase = j.at("isBase").get<bool>(); 
    v.disabled = j.at("disabled").get<bool>(); 
    v.uncenteredSplashPath = j.at("uncenteredSplashPath").get<std::string>(); 
    v.lastSelected = j.at("lastSelected").get<bool>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.stillObtainable = j.at("stillObtainable").get<bool>(); 
    v.skinType = j.at("skinType").get<std::optional<std::string>>(); 
    v.emblems = j.at("emblems").get<std::vector<LolChampionsCollectionsChampionSkinEmblem>>(); 
    v.splashVideoPath = j.at("splashVideoPath").get<std::optional<std::string>>(); 
    v.cardPath = j.at("cardPath").get<std::string>(); 
    v.splashPath = j.at("splashPath").get<std::string>(); 
    v.featuresText = j.at("featuresText").get<std::optional<std::string>>(); 
    v.rarityGemPath = j.at("rarityGemPath").get<std::string>(); 
    v.ownership = j.at("ownership").get<LolChampionsCollectionsOwnership>(); 
    v.chromaPath = j.at("chromaPath").get<std::optional<std::string>>(); 
    v.tilePath = j.at("tilePath").get<std::string>(); 
    v.chromas = j.at("chromas").get<std::vector<LolChampionsCollectionsChampionChroma>>(); 
  } 
  struct LolChampionsCollectionsChampion { /**/ 
    std::string chooseVoPath;/**/
    uint64_t purchased;/**/
    int32_t id;/**/
    std::string name;/**/
    LolChampionsCollectionsChampionSpell passive;/**/
    std::string alias;/**/
    std::vector<std::string> disabledQueues;/**/
    std::vector<LolChampionsCollectionsChampionSpell> spells;/**/
    std::vector<std::string> roles;/**/
    std::string squarePortraitPath;/**/
    bool freeToPlay;/**/
    bool botEnabled;/**/
    LolChampionsCollectionsOwnership ownership;/**/
    std::string banVoPath;/**/
    std::vector<LolChampionsCollectionsChampionSkin> skins;/**/
    std::string stingerSfxPath;/**/
    bool active;/**/
    bool rankedPlayEnabled;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampion& v) { 
    j["chooseVoPath"] = v.chooseVoPath;
    j["purchased"] = v.purchased;
    j["id"] = v.id;
    j["name"] = v.name;
    j["passive"] = v.passive;
    j["alias"] = v.alias;
    j["disabledQueues"] = v.disabledQueues;
    j["spells"] = v.spells;
    j["roles"] = v.roles;
    j["squarePortraitPath"] = v.squarePortraitPath;
    j["freeToPlay"] = v.freeToPlay;
    j["botEnabled"] = v.botEnabled;
    j["ownership"] = v.ownership;
    j["banVoPath"] = v.banVoPath;
    j["skins"] = v.skins;
    j["stingerSfxPath"] = v.stingerSfxPath;
    j["active"] = v.active;
    j["rankedPlayEnabled"] = v.rankedPlayEnabled;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampion& v) { 
    v.chooseVoPath = j.at("chooseVoPath").get<std::string>(); 
    v.purchased = j.at("purchased").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.passive = j.at("passive").get<LolChampionsCollectionsChampionSpell>(); 
    v.alias = j.at("alias").get<std::string>(); 
    v.disabledQueues = j.at("disabledQueues").get<std::vector<std::string>>(); 
    v.spells = j.at("spells").get<std::vector<LolChampionsCollectionsChampionSpell>>(); 
    v.roles = j.at("roles").get<std::vector<std::string>>(); 
    v.squarePortraitPath = j.at("squarePortraitPath").get<std::string>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.botEnabled = j.at("botEnabled").get<bool>(); 
    v.ownership = j.at("ownership").get<LolChampionsCollectionsOwnership>(); 
    v.banVoPath = j.at("banVoPath").get<std::string>(); 
    v.skins = j.at("skins").get<std::vector<LolChampionsCollectionsChampionSkin>>(); 
    v.stingerSfxPath = j.at("stingerSfxPath").get<std::string>(); 
    v.active = j.at("active").get<bool>(); 
    v.rankedPlayEnabled = j.at("rankedPlayEnabled").get<bool>(); 
  } 
  struct LolChampionsCollectionsChampionMinimal { /**/ 
    std::string chooseVoPath;/**/
    uint64_t purchased;/**/
    int32_t id;/**/
    std::string name;/**/
    std::string alias;/**/
    std::vector<std::string> disabledQueues;/**/
    std::vector<std::string> roles;/**/
    std::string squarePortraitPath;/**/
    bool freeToPlay;/**/
    bool botEnabled;/**/
    LolChampionsCollectionsOwnership ownership;/**/
    std::string banVoPath;/**/
    std::string stingerSfxPath;/**/
    bool active;/**/
    bool rankedPlayEnabled;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionMinimal& v) { 
    j["chooseVoPath"] = v.chooseVoPath;
    j["purchased"] = v.purchased;
    j["id"] = v.id;
    j["name"] = v.name;
    j["alias"] = v.alias;
    j["disabledQueues"] = v.disabledQueues;
    j["roles"] = v.roles;
    j["squarePortraitPath"] = v.squarePortraitPath;
    j["freeToPlay"] = v.freeToPlay;
    j["botEnabled"] = v.botEnabled;
    j["ownership"] = v.ownership;
    j["banVoPath"] = v.banVoPath;
    j["stingerSfxPath"] = v.stingerSfxPath;
    j["active"] = v.active;
    j["rankedPlayEnabled"] = v.rankedPlayEnabled;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionMinimal& v) { 
    v.chooseVoPath = j.at("chooseVoPath").get<std::string>(); 
    v.purchased = j.at("purchased").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.alias = j.at("alias").get<std::string>(); 
    v.disabledQueues = j.at("disabledQueues").get<std::vector<std::string>>(); 
    v.roles = j.at("roles").get<std::vector<std::string>>(); 
    v.squarePortraitPath = j.at("squarePortraitPath").get<std::string>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.botEnabled = j.at("botEnabled").get<bool>(); 
    v.ownership = j.at("ownership").get<LolChampionsCollectionsOwnership>(); 
    v.banVoPath = j.at("banVoPath").get<std::string>(); 
    v.stingerSfxPath = j.at("stingerSfxPath").get<std::string>(); 
    v.active = j.at("active").get<bool>(); 
    v.rankedPlayEnabled = j.at("rankedPlayEnabled").get<bool>(); 
  } 
  struct LolChampionsCollectionsChampionPlayableCounts { /**/ 
    uint32_t championsFreeToPlayReward;/**/
    uint32_t championsFreeToPlay;/**/
    uint32_t championsOwned;/**/
    uint32_t championsRented;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionPlayableCounts& v) { 
    j["championsFreeToPlayReward"] = v.championsFreeToPlayReward;
    j["championsFreeToPlay"] = v.championsFreeToPlay;
    j["championsOwned"] = v.championsOwned;
    j["championsRented"] = v.championsRented;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionPlayableCounts& v) { 
    v.championsFreeToPlayReward = j.at("championsFreeToPlayReward").get<uint32_t>(); 
    v.championsFreeToPlay = j.at("championsFreeToPlay").get<uint32_t>(); 
    v.championsOwned = j.at("championsOwned").get<uint32_t>(); 
    v.championsRented = j.at("championsRented").get<uint32_t>(); 
  } 
  struct LolChampionsCollectionsChampionSkinMinimal { /**/ 
    bool lastSelected;/**/
    int32_t id;/**/
    std::string splashPath;/**/
    std::string name;/**/
    bool isBase;/**/
    LolChampionsCollectionsOwnership ownership;/**/
    std::string tilePath;/**/
    bool stillObtainable;/**/
    bool disabled;/**/
    int32_t championId;/**/
    std::optional<std::string> chromaPath;/**/
  };
  static void to_json(json& j, const LolChampionsCollectionsChampionSkinMinimal& v) { 
    j["lastSelected"] = v.lastSelected;
    j["id"] = v.id;
    j["splashPath"] = v.splashPath;
    j["name"] = v.name;
    j["isBase"] = v.isBase;
    j["ownership"] = v.ownership;
    j["tilePath"] = v.tilePath;
    j["stillObtainable"] = v.stillObtainable;
    j["disabled"] = v.disabled;
    j["championId"] = v.championId;
    j["chromaPath"] = v.chromaPath;
  }
  static void from_json(const json& j, LolChampionsCollectionsChampionSkinMinimal& v) { 
    v.lastSelected = j.at("lastSelected").get<bool>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.splashPath = j.at("splashPath").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.isBase = j.at("isBase").get<bool>(); 
    v.ownership = j.at("ownership").get<LolChampionsCollectionsOwnership>(); 
    v.tilePath = j.at("tilePath").get<std::string>(); 
    v.stillObtainable = j.at("stillObtainable").get<bool>(); 
    v.disabled = j.at("disabled").get<bool>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.chromaPath = j.at("chromaPath").get<std::optional<std::string>>(); 
  } 
  struct LolChampionsGameDataChampionSpell { /**/ 
    std::string description;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChampionsGameDataChampionSpell& v) { 
    j["description"] = v.description;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChampionsGameDataChampionSpell& v) { 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChampionsGameDataChampionChroma { /**/ 
    std::vector<std::string> colors;/**/
    int32_t id;/**/
    std::string chromaPath;/**/
  };
  static void to_json(json& j, const LolChampionsGameDataChampionChroma& v) { 
    j["colors"] = v.colors;
    j["id"] = v.id;
    j["chromaPath"] = v.chromaPath;
  }
  static void from_json(const json& j, LolChampionsGameDataChampionChroma& v) { 
    v.colors = j.at("colors").get<std::vector<std::string>>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.chromaPath = j.at("chromaPath").get<std::string>(); 
  } 
  struct LolChampionsGameDataChampionSkin { /**/ 
    int32_t id;/**/
    std::string name;/**/
    std::vector<LolChampionsCollectionsChampionSkinEmblem> emblems;/**/
    std::string uncenteredSplashPath;/**/
    std::optional<std::string> chromaPath;/**/
    std::optional<std::string> skinType;/**/
    std::optional<std::string> splashVideoPath;/**/
    std::string cardPath;/**/
    std::string splashPath;/**/
    std::string rarityGemPath;/**/
    std::optional<std::string> featuresText;/**/
    std::string tilePath;/**/
    std::vector<LolChampionsGameDataChampionChroma> chromas;/**/
  };
  static void to_json(json& j, const LolChampionsGameDataChampionSkin& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
    j["emblems"] = v.emblems;
    j["uncenteredSplashPath"] = v.uncenteredSplashPath;
    j["chromaPath"] = v.chromaPath;
    j["skinType"] = v.skinType;
    j["splashVideoPath"] = v.splashVideoPath;
    j["cardPath"] = v.cardPath;
    j["splashPath"] = v.splashPath;
    j["rarityGemPath"] = v.rarityGemPath;
    j["featuresText"] = v.featuresText;
    j["tilePath"] = v.tilePath;
    j["chromas"] = v.chromas;
  }
  static void from_json(const json& j, LolChampionsGameDataChampionSkin& v) { 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.emblems = j.at("emblems").get<std::vector<LolChampionsCollectionsChampionSkinEmblem>>(); 
    v.uncenteredSplashPath = j.at("uncenteredSplashPath").get<std::string>(); 
    v.chromaPath = j.at("chromaPath").get<std::optional<std::string>>(); 
    v.skinType = j.at("skinType").get<std::optional<std::string>>(); 
    v.splashVideoPath = j.at("splashVideoPath").get<std::optional<std::string>>(); 
    v.cardPath = j.at("cardPath").get<std::string>(); 
    v.splashPath = j.at("splashPath").get<std::string>(); 
    v.rarityGemPath = j.at("rarityGemPath").get<std::string>(); 
    v.featuresText = j.at("featuresText").get<std::optional<std::string>>(); 
    v.tilePath = j.at("tilePath").get<std::string>(); 
    v.chromas = j.at("chromas").get<std::vector<LolChampionsGameDataChampionChroma>>(); 
  } 
  struct LolChampionsGameDataChampion { /**/ 
    std::vector<LolChampionsGameDataChampionSpell> spells;/**/
    std::vector<std::string> roles;/**/
    std::string chooseVoPath;/**/
    std::string squarePortraitPath;/**/
    int32_t id;/**/
    std::string name;/**/
    LolChampionsGameDataChampionSpell passive;/**/
    std::string alias;/**/
    std::vector<LolChampionsGameDataChampionSkin> skins;/**/
    std::string banVoPath;/**/
    std::string stingerSfxPath;/**/
  };
  static void to_json(json& j, const LolChampionsGameDataChampion& v) { 
    j["spells"] = v.spells;
    j["roles"] = v.roles;
    j["chooseVoPath"] = v.chooseVoPath;
    j["squarePortraitPath"] = v.squarePortraitPath;
    j["id"] = v.id;
    j["name"] = v.name;
    j["passive"] = v.passive;
    j["alias"] = v.alias;
    j["skins"] = v.skins;
    j["banVoPath"] = v.banVoPath;
    j["stingerSfxPath"] = v.stingerSfxPath;
  }
  static void from_json(const json& j, LolChampionsGameDataChampion& v) { 
    v.spells = j.at("spells").get<std::vector<LolChampionsGameDataChampionSpell>>(); 
    v.roles = j.at("roles").get<std::vector<std::string>>(); 
    v.chooseVoPath = j.at("chooseVoPath").get<std::string>(); 
    v.squarePortraitPath = j.at("squarePortraitPath").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.passive = j.at("passive").get<LolChampionsGameDataChampionSpell>(); 
    v.alias = j.at("alias").get<std::string>(); 
    v.skins = j.at("skins").get<std::vector<LolChampionsGameDataChampionSkin>>(); 
    v.banVoPath = j.at("banVoPath").get<std::string>(); 
    v.stingerSfxPath = j.at("stingerSfxPath").get<std::string>(); 
  } 
  struct LolChampionsGameDataChampionSummary { /**/ 
    int32_t id;/**/
  };
  static void to_json(json& j, const LolChampionsGameDataChampionSummary& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChampionsGameDataChampionSummary& v) { 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolChampionsLcdsDynamicClientConfig { /**/ 
    json DisabledChampions;/**/
  };
  static void to_json(json& j, const LolChampionsLcdsDynamicClientConfig& v) { 
    j["DisabledChampions"] = v.DisabledChampions;
  }
  static void from_json(const json& j, LolChampionsLcdsDynamicClientConfig& v) { 
    v.DisabledChampions = j.at("DisabledChampions").get<json>(); 
  } 
  enum class LolChampionsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolChampionsLoginSessionStates& v) {
    switch(v) { 
    case LolChampionsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolChampionsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolChampionsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolChampionsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolChampionsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolChampionsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolChampionsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolChampionsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolChampionsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolChampionsLoginSession { /**/ 
    bool connected;/**/
    LolChampionsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolChampionsLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolChampionsLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolChampionsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolChampionsPlayerNotification { /**/ 
    std::string source;/**/
    bool critical;/**/
    std::string backgroundUrl;/**/
    std::string iconUrl;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolChampionsPlayerNotification& v) { 
    j["source"] = v.source;
    j["critical"] = v.critical;
    j["backgroundUrl"] = v.backgroundUrl;
    j["iconUrl"] = v.iconUrl;
    j["data"] = v.data;
    j["type"] = v.type;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChampionsPlayerNotification& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  struct LolChampionsSummoner { /**/ 
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolChampionsSummoner& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolChampionsSummoner& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolChatActiveConversationResource { /**/ 
    std::string id;/**/
  };
  static void to_json(json& j, const LolChatActiveConversationResource& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChatActiveConversationResource& v) { 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct LolChatAuthResourcePlain { /**/ 
    json gasToken;/**/
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolChatAuthResourcePlain& v) { 
    j["gasToken"] = v.gasToken;
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolChatAuthResourcePlain& v) { 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolChatAuthResourceRsoAccessToken { /**/ 
    std::vector<std::string> scopes;/**/
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolChatAuthResourceRsoAccessToken& v) { 
    j["scopes"] = v.scopes;
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolChatAuthResourceRsoAccessToken& v) { 
    v.scopes = j.at("scopes").get<std::vector<std::string>>(); 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  enum class LolChatAuthType { /**/ 
    plain_e = 0, /**/ 
    rsoCreate_e = 1, /**/ 
    rsoRefresh_e = 2, /**/ 
  };
  static void to_json(json& j, const LolChatAuthType& v) {
    switch(v) { 
    case LolChatAuthType::plain_e:
      j = "plain";
    break;
    case LolChatAuthType::rsoCreate_e:
      j = "rsoCreate";
    break;
    case LolChatAuthType::rsoRefresh_e:
      j = "rsoRefresh";
    break;
    };
  }
  static void from_json(const json& j, LolChatAuthType& v) {
    auto s = j.get<std::string>(); 
    if(s == "plain") {
      v = LolChatAuthType::plain_e;
      return;
    } 
    if(s == "rsoCreate") {
      v = LolChatAuthType::rsoCreate_e;
      return;
    } 
    if(s == "rsoRefresh") {
      v = LolChatAuthType::rsoRefresh_e;
      return;
    } 
  } 
  struct LolChatBlockedPlayerResource { /**/ 
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChatBlockedPlayerResource& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChatBlockedPlayerResource& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChatChampSelection { /**/ 
    std::string summonerInternalName;/**/
    int32_t selectedSkinIndex;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolChatChampSelection& v) { 
    j["summonerInternalName"] = v.summonerInternalName;
    j["selectedSkinIndex"] = v.selectedSkinIndex;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolChatChampSelection& v) { 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
    v.selectedSkinIndex = j.at("selectedSkinIndex").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolChatChatDomainConfig { /**/ 
    std::optional<std::string> ClubDomainName;/**/
    std::optional<std::string> PublicDomainName;/**/
    std::optional<std::string> CustomGameDomainName;/**/
    std::optional<std::string> PrivateDomainName;/**/
    std::optional<std::string> CustomTeamDomainName;/**/
    std::optional<std::string> RankedTeamDomainName;/**/
    std::optional<std::string> P2PDomainName;/**/
    std::optional<std::string> PostGameDomainName;/**/
    std::optional<std::string> TeamBuilderDomainName;/**/
    std::optional<std::string> ChampSelectDomainName;/**/
  };
  static void to_json(json& j, const LolChatChatDomainConfig& v) { 
    j["ClubDomainName"] = v.ClubDomainName;
    j["PublicDomainName"] = v.PublicDomainName;
    j["CustomGameDomainName"] = v.CustomGameDomainName;
    j["PrivateDomainName"] = v.PrivateDomainName;
    j["CustomTeamDomainName"] = v.CustomTeamDomainName;
    j["RankedTeamDomainName"] = v.RankedTeamDomainName;
    j["P2PDomainName"] = v.P2PDomainName;
    j["PostGameDomainName"] = v.PostGameDomainName;
    j["TeamBuilderDomainName"] = v.TeamBuilderDomainName;
    j["ChampSelectDomainName"] = v.ChampSelectDomainName;
  }
  static void from_json(const json& j, LolChatChatDomainConfig& v) { 
    v.ClubDomainName = j.at("ClubDomainName").get<std::optional<std::string>>(); 
    v.PublicDomainName = j.at("PublicDomainName").get<std::optional<std::string>>(); 
    v.CustomGameDomainName = j.at("CustomGameDomainName").get<std::optional<std::string>>(); 
    v.PrivateDomainName = j.at("PrivateDomainName").get<std::optional<std::string>>(); 
    v.CustomTeamDomainName = j.at("CustomTeamDomainName").get<std::optional<std::string>>(); 
    v.RankedTeamDomainName = j.at("RankedTeamDomainName").get<std::optional<std::string>>(); 
    v.P2PDomainName = j.at("P2PDomainName").get<std::optional<std::string>>(); 
    v.PostGameDomainName = j.at("PostGameDomainName").get<std::optional<std::string>>(); 
    v.TeamBuilderDomainName = j.at("TeamBuilderDomainName").get<std::optional<std::string>>(); 
    v.ChampSelectDomainName = j.at("ChampSelectDomainName").get<std::optional<std::string>>(); 
  } 
  enum class LolChatChatPlatformLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolChatChatPlatformLoginSessionState& v) {
    switch(v) { 
    case LolChatChatPlatformLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolChatChatPlatformLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolChatChatPlatformLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolChatChatPlatformLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolChatChatPlatformLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolChatChatPlatformLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolChatChatPlatformLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolChatChatPlatformLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolChatChatPlatformLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolChatChatPlatformLoginSession { /**/ 
    LolChatChatPlatformLoginSessionState state;/**/
    std::optional<uint64_t> summonerId;/**/
    uint64_t accountId;/**/
    bool isNewPlayer;/**/
    std::string username;/**/
    std::string idToken;/**/
    std::string userAuthToken;/**/
    json gasToken;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolChatChatPlatformLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["isNewPlayer"] = v.isNewPlayer;
    j["username"] = v.username;
    j["idToken"] = v.idToken;
    j["userAuthToken"] = v.userAuthToken;
    j["gasToken"] = v.gasToken;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolChatChatPlatformLoginSession& v) { 
    v.state = j.at("state").get<LolChatChatPlatformLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<std::optional<uint64_t>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.isNewPlayer = j.at("isNewPlayer").get<bool>(); 
    v.username = j.at("username").get<std::string>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.userAuthToken = j.at("userAuthToken").get<std::string>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  enum class LolChatChatRankedTier { /**/ 
    BRONZE_e = 2, /**/ 
    CHALLENGER_e = 8, /**/ 
    DIAMOND_e = 6, /**/ 
    GOLD_e = 4, /**/ 
    MASTER_e = 7, /**/ 
    NOT_RANKED_e = 0, /**/ 
    PLATINUM_e = 5, /**/ 
    PROVISIONAL_e = 1, /**/ 
    SILVER_e = 3, /**/ 
  };
  static void to_json(json& j, const LolChatChatRankedTier& v) {
    switch(v) { 
    case LolChatChatRankedTier::BRONZE_e:
      j = "BRONZE";
    break;
    case LolChatChatRankedTier::CHALLENGER_e:
      j = "CHALLENGER";
    break;
    case LolChatChatRankedTier::DIAMOND_e:
      j = "DIAMOND";
    break;
    case LolChatChatRankedTier::GOLD_e:
      j = "GOLD";
    break;
    case LolChatChatRankedTier::MASTER_e:
      j = "MASTER";
    break;
    case LolChatChatRankedTier::NOT_RANKED_e:
      j = "NOT_RANKED";
    break;
    case LolChatChatRankedTier::PLATINUM_e:
      j = "PLATINUM";
    break;
    case LolChatChatRankedTier::PROVISIONAL_e:
      j = "PROVISIONAL";
    break;
    case LolChatChatRankedTier::SILVER_e:
      j = "SILVER";
    break;
    };
  }
  static void from_json(const json& j, LolChatChatRankedTier& v) {
    auto s = j.get<std::string>(); 
    if(s == "BRONZE") {
      v = LolChatChatRankedTier::BRONZE_e;
      return;
    } 
    if(s == "CHALLENGER") {
      v = LolChatChatRankedTier::CHALLENGER_e;
      return;
    } 
    if(s == "DIAMOND") {
      v = LolChatChatRankedTier::DIAMOND_e;
      return;
    } 
    if(s == "GOLD") {
      v = LolChatChatRankedTier::GOLD_e;
      return;
    } 
    if(s == "MASTER") {
      v = LolChatChatRankedTier::MASTER_e;
      return;
    } 
    if(s == "NOT_RANKED") {
      v = LolChatChatRankedTier::NOT_RANKED_e;
      return;
    } 
    if(s == "PLATINUM") {
      v = LolChatChatRankedTier::PLATINUM_e;
      return;
    } 
    if(s == "PROVISIONAL") {
      v = LolChatChatRankedTier::PROVISIONAL_e;
      return;
    } 
    if(s == "SILVER") {
      v = LolChatChatRankedTier::SILVER_e;
      return;
    } 
  } 
  enum class LolChatChatRankedQueue { /**/ 
    INVALID_e = 0, /**/ 
    RANKED_FLEX_SR_e = 2, /**/ 
    RANKED_FLEX_TT_e = 1, /**/ 
    RANKED_SOLO_5x5_e = 3, /**/ 
    RANKED_TEAM_3x3_e = 4, /**/ 
    RANKED_TEAM_5x5_e = 5, /**/ 
  };
  static void to_json(json& j, const LolChatChatRankedQueue& v) {
    switch(v) { 
    case LolChatChatRankedQueue::INVALID_e:
      j = "INVALID";
    break;
    case LolChatChatRankedQueue::RANKED_FLEX_SR_e:
      j = "RANKED_FLEX_SR";
    break;
    case LolChatChatRankedQueue::RANKED_FLEX_TT_e:
      j = "RANKED_FLEX_TT";
    break;
    case LolChatChatRankedQueue::RANKED_SOLO_5x5_e:
      j = "RANKED_SOLO_5x5";
    break;
    case LolChatChatRankedQueue::RANKED_TEAM_3x3_e:
      j = "RANKED_TEAM_3x3";
    break;
    case LolChatChatRankedQueue::RANKED_TEAM_5x5_e:
      j = "RANKED_TEAM_5x5";
    break;
    };
  }
  static void from_json(const json& j, LolChatChatRankedQueue& v) {
    auto s = j.get<std::string>(); 
    if(s == "INVALID") {
      v = LolChatChatRankedQueue::INVALID_e;
      return;
    } 
    if(s == "RANKED_FLEX_SR") {
      v = LolChatChatRankedQueue::RANKED_FLEX_SR_e;
      return;
    } 
    if(s == "RANKED_FLEX_TT") {
      v = LolChatChatRankedQueue::RANKED_FLEX_TT_e;
      return;
    } 
    if(s == "RANKED_SOLO_5x5") {
      v = LolChatChatRankedQueue::RANKED_SOLO_5x5_e;
      return;
    } 
    if(s == "RANKED_TEAM_3x3") {
      v = LolChatChatRankedQueue::RANKED_TEAM_3x3_e;
      return;
    } 
    if(s == "RANKED_TEAM_5x5") {
      v = LolChatChatRankedQueue::RANKED_TEAM_5x5_e;
      return;
    } 
  } 
  struct LolChatChatRankedEntry { /**/ 
    std::string leagueName;/**/
    LolChatChatRankedTier rankedTier;/**/
    LolChatChatRankedQueue rankedQueue;/**/
    uint64_t games;/**/
    uint64_t wins;/**/
    uint64_t division;/**/
  };
  static void to_json(json& j, const LolChatChatRankedEntry& v) { 
    j["leagueName"] = v.leagueName;
    j["rankedTier"] = v.rankedTier;
    j["rankedQueue"] = v.rankedQueue;
    j["games"] = v.games;
    j["wins"] = v.wins;
    j["division"] = v.division;
  }
  static void from_json(const json& j, LolChatChatRankedEntry& v) { 
    v.leagueName = j.at("leagueName").get<std::string>(); 
    v.rankedTier = j.at("rankedTier").get<LolChatChatRankedTier>(); 
    v.rankedQueue = j.at("rankedQueue").get<LolChatChatRankedQueue>(); 
    v.games = j.at("games").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.division = j.at("division").get<uint64_t>(); 
  } 
  struct LolChatChatRankedData { /**/ 
    std::vector<LolChatChatRankedEntry> rankedData;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolChatChatRankedData& v) { 
    j["rankedData"] = v.rankedData;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolChatChatRankedData& v) { 
    v.rankedData = j.at("rankedData").get<std::vector<LolChatChatRankedEntry>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolChatLcuSocialConfig { /**/ 
    bool ForceChatFilter;/**/
    uint64_t QueueJobGraceSeconds;/**/
    bool AggressiveScanning;/**/
    bool SilenceChatWhileInGame;/**/
  };
  static void to_json(json& j, const LolChatLcuSocialConfig& v) { 
    j["ForceChatFilter"] = v.ForceChatFilter;
    j["QueueJobGraceSeconds"] = v.QueueJobGraceSeconds;
    j["AggressiveScanning"] = v.AggressiveScanning;
    j["SilenceChatWhileInGame"] = v.SilenceChatWhileInGame;
  }
  static void from_json(const json& j, LolChatLcuSocialConfig& v) { 
    v.ForceChatFilter = j.at("ForceChatFilter").get<bool>(); 
    v.QueueJobGraceSeconds = j.at("QueueJobGraceSeconds").get<uint64_t>(); 
    v.AggressiveScanning = j.at("AggressiveScanning").get<bool>(); 
    v.SilenceChatWhileInGame = j.at("SilenceChatWhileInGame").get<bool>(); 
  } 
  struct LolChatChatServiceDynamicClientConfig { /**/ 
    std::optional<LolChatChatDomainConfig> ChatDomain;/**/
    std::optional<LolChatLcuSocialConfig> LcuSocial;/**/
  };
  static void to_json(json& j, const LolChatChatServiceDynamicClientConfig& v) { 
    j["ChatDomain"] = v.ChatDomain;
    j["LcuSocial"] = v.LcuSocial;
  }
  static void from_json(const json& j, LolChatChatServiceDynamicClientConfig& v) { 
    v.ChatDomain = j.at("ChatDomain").get<std::optional<LolChatChatDomainConfig>>(); 
    v.LcuSocial = j.at("LcuSocial").get<std::optional<LolChatLcuSocialConfig>>(); 
  } 
  struct LolChatChatSummoner { /**/ 
    int32_t profileIconId;/**/
    uint64_t summonerId;/**/
    uint32_t summonerLevel;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolChatChatSummoner& v) { 
    j["profileIconId"] = v.profileIconId;
    j["summonerId"] = v.summonerId;
    j["summonerLevel"] = v.summonerLevel;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolChatChatSummoner& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolChatConversationMessageResource { /**/ 
    std::string timestamp;/**/
    std::string id;/**/
    std::string type;/**/
    uint64_t fromId;/**/
    bool isHistorical;/**/
    std::string body;/**/
  };
  static void to_json(json& j, const LolChatConversationMessageResource& v) { 
    j["timestamp"] = v.timestamp;
    j["id"] = v.id;
    j["type"] = v.type;
    j["fromId"] = v.fromId;
    j["isHistorical"] = v.isHistorical;
    j["body"] = v.body;
  }
  static void from_json(const json& j, LolChatConversationMessageResource& v) { 
    v.timestamp = j.at("timestamp").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.fromId = j.at("fromId").get<uint64_t>(); 
    v.isHistorical = j.at("isHistorical").get<bool>(); 
    v.body = j.at("body").get<std::string>(); 
  } 
  struct LolChatConversationResource { /**/ 
    std::string inviterId;/**/
    bool isMuted;/**/
    uint64_t unreadMessageCount;/**/
    std::string id;/**/
    std::string name;/**/
    std::string type;/**/
    std::optional<LolChatConversationMessageResource> lastMessage;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolChatConversationResource& v) { 
    j["inviterId"] = v.inviterId;
    j["isMuted"] = v.isMuted;
    j["unreadMessageCount"] = v.unreadMessageCount;
    j["id"] = v.id;
    j["name"] = v.name;
    j["type"] = v.type;
    j["lastMessage"] = v.lastMessage;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolChatConversationResource& v) { 
    v.inviterId = j.at("inviterId").get<std::string>(); 
    v.isMuted = j.at("isMuted").get<bool>(); 
    v.unreadMessageCount = j.at("unreadMessageCount").get<uint64_t>(); 
    v.id = j.at("id").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.lastMessage = j.at("lastMessage").get<std::optional<LolChatConversationMessageResource>>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolChatDebugResource { /**/ 
    std::optional<bool> isXMPPLoggingEnabled;/**/
    std::optional<uint32_t> maxReconnectInterval;/**/
    std::optional<bool> failAllChatLogin;/**/
    std::optional<bool> failNextKeepAlive;/**/
    std::optional<bool> triggerChatDisconnect;/**/
    std::optional<uint32_t> asyncWaitInterval;/**/
    std::optional<uint32_t> keepAliveInterval;/**/
    std::optional<bool> failNextChatLogout;/**/
    std::optional<uint32_t> minReconnectInterval;/**/
    std::optional<bool> enableChatFiltering;/**/
    std::optional<bool> silenceChatWhileInGame;/**/
    std::optional<bool> failNextChatLogin;/**/
  };
  static void to_json(json& j, const LolChatDebugResource& v) { 
    j["isXMPPLoggingEnabled"] = v.isXMPPLoggingEnabled;
    j["maxReconnectInterval"] = v.maxReconnectInterval;
    j["failAllChatLogin"] = v.failAllChatLogin;
    j["failNextKeepAlive"] = v.failNextKeepAlive;
    j["triggerChatDisconnect"] = v.triggerChatDisconnect;
    j["asyncWaitInterval"] = v.asyncWaitInterval;
    j["keepAliveInterval"] = v.keepAliveInterval;
    j["failNextChatLogout"] = v.failNextChatLogout;
    j["minReconnectInterval"] = v.minReconnectInterval;
    j["enableChatFiltering"] = v.enableChatFiltering;
    j["silenceChatWhileInGame"] = v.silenceChatWhileInGame;
    j["failNextChatLogin"] = v.failNextChatLogin;
  }
  static void from_json(const json& j, LolChatDebugResource& v) { 
    v.isXMPPLoggingEnabled = j.at("isXMPPLoggingEnabled").get<std::optional<bool>>(); 
    v.maxReconnectInterval = j.at("maxReconnectInterval").get<std::optional<uint32_t>>(); 
    v.failAllChatLogin = j.at("failAllChatLogin").get<std::optional<bool>>(); 
    v.failNextKeepAlive = j.at("failNextKeepAlive").get<std::optional<bool>>(); 
    v.triggerChatDisconnect = j.at("triggerChatDisconnect").get<std::optional<bool>>(); 
    v.asyncWaitInterval = j.at("asyncWaitInterval").get<std::optional<uint32_t>>(); 
    v.keepAliveInterval = j.at("keepAliveInterval").get<std::optional<uint32_t>>(); 
    v.failNextChatLogout = j.at("failNextChatLogout").get<std::optional<bool>>(); 
    v.minReconnectInterval = j.at("minReconnectInterval").get<std::optional<uint32_t>>(); 
    v.enableChatFiltering = j.at("enableChatFiltering").get<std::optional<bool>>(); 
    v.silenceChatWhileInGame = j.at("silenceChatWhileInGame").get<std::optional<bool>>(); 
    v.failNextChatLogin = j.at("failNextChatLogin").get<std::optional<bool>>(); 
  } 
  struct LolChatErrorResource { /**/ 
    std::string from;/**/
    std::string message;/**/
    uint64_t id;/**/
    uint64_t code;/**/
    std::string text;/**/
  };
  static void to_json(json& j, const LolChatErrorResource& v) { 
    j["from"] = v.from;
    j["message"] = v.message;
    j["id"] = v.id;
    j["code"] = v.code;
    j["text"] = v.text;
  }
  static void from_json(const json& j, LolChatErrorResource& v) { 
    v.from = j.at("from").get<std::string>(); 
    v.message = j.at("message").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.code = j.at("code").get<uint64_t>(); 
    v.text = j.at("text").get<std::string>(); 
  } 
  enum class LolChatFriendRequestDirection { /**/ 
    both_e = 2, /**/ 
    in_e = 0, /**/ 
    out_e = 1, /**/ 
  };
  static void to_json(json& j, const LolChatFriendRequestDirection& v) {
    switch(v) { 
    case LolChatFriendRequestDirection::both_e:
      j = "both";
    break;
    case LolChatFriendRequestDirection::in_e:
      j = "in";
    break;
    case LolChatFriendRequestDirection::out_e:
      j = "out";
    break;
    };
  }
  static void from_json(const json& j, LolChatFriendRequestDirection& v) {
    auto s = j.get<std::string>(); 
    if(s == "both") {
      v = LolChatFriendRequestDirection::both_e;
      return;
    } 
    if(s == "in") {
      v = LolChatFriendRequestDirection::in_e;
      return;
    } 
    if(s == "out") {
      v = LolChatFriendRequestDirection::out_e;
      return;
    } 
  } 
  struct LolChatFriendRequestResource { /**/ 
    std::string note;/**/
    uint64_t id;/**/
    LolChatFriendRequestDirection direction;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChatFriendRequestResource& v) { 
    j["note"] = v.note;
    j["id"] = v.id;
    j["direction"] = v.direction;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChatFriendRequestResource& v) { 
    v.note = j.at("note").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.direction = j.at("direction").get<LolChatFriendRequestDirection>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChatFriendResource { /**/ 
    std::map<std::string, std::string> lol;/**/
    std::optional<std::string> lastSeenOnlineTimestamp;/**/
    uint64_t id;/**/
    std::string name;/**/
    std::string statusMessage;/**/
    uint32_t displayGroupId;/**/
    int32_t icon;/**/
    std::string note;/**/
    std::string availability;/**/
    bool isP2PConversationMuted;/**/
    uint32_t groupId;/**/
  };
  static void to_json(json& j, const LolChatFriendResource& v) { 
    j["lol"] = v.lol;
    j["lastSeenOnlineTimestamp"] = v.lastSeenOnlineTimestamp;
    j["id"] = v.id;
    j["name"] = v.name;
    j["statusMessage"] = v.statusMessage;
    j["displayGroupId"] = v.displayGroupId;
    j["icon"] = v.icon;
    j["note"] = v.note;
    j["availability"] = v.availability;
    j["isP2PConversationMuted"] = v.isP2PConversationMuted;
    j["groupId"] = v.groupId;
  }
  static void from_json(const json& j, LolChatFriendResource& v) { 
    v.lol = j.at("lol").get<std::map<std::string, std::string>>(); 
    v.lastSeenOnlineTimestamp = j.at("lastSeenOnlineTimestamp").get<std::optional<std::string>>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.statusMessage = j.at("statusMessage").get<std::string>(); 
    v.displayGroupId = j.at("displayGroupId").get<uint32_t>(); 
    v.icon = j.at("icon").get<int32_t>(); 
    v.note = j.at("note").get<std::string>(); 
    v.availability = j.at("availability").get<std::string>(); 
    v.isP2PConversationMuted = j.at("isP2PConversationMuted").get<bool>(); 
    v.groupId = j.at("groupId").get<uint32_t>(); 
  } 
  struct LolChatGameDataChampionSummary { /**/ 
    std::string alias;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolChatGameDataChampionSummary& v) { 
    j["alias"] = v.alias;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChatGameDataChampionSummary& v) { 
    v.alias = j.at("alias").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolChatQueueGameTypeConfig { /**/ 
    int64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChatQueueGameTypeConfig& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChatQueueGameTypeConfig& v) { 
    v.id = j.at("id").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChatQueue { /**/ 
    std::string type;/**/
    LolChatQueueGameTypeConfig gameTypeConfig;/**/
    int32_t id;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolChatQueue& v) { 
    j["type"] = v.type;
    j["gameTypeConfig"] = v.gameTypeConfig;
    j["id"] = v.id;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolChatQueue& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolChatQueueGameTypeConfig>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolChatTeamPlayerEntry { /**/ 
    std::string summonerInternalName;/**/
    uint64_t summonerId;/**/
    std::string summonerName;/**/
  };
  static void to_json(json& j, const LolChatTeamPlayerEntry& v) { 
    j["summonerInternalName"] = v.summonerInternalName;
    j["summonerId"] = v.summonerId;
    j["summonerName"] = v.summonerName;
  }
  static void from_json(const json& j, LolChatTeamPlayerEntry& v) { 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
  } 
  struct LolChatGameflowGameData { /**/ 
    LolChatQueue queue;/**/
    std::vector<LolChatTeamPlayerEntry> teamOne;/**/
    std::vector<LolChatChampSelection> playerChampionSelections;/**/
    std::vector<LolChatTeamPlayerEntry> teamTwo;/**/
  };
  static void to_json(json& j, const LolChatGameflowGameData& v) { 
    j["queue"] = v.queue;
    j["teamOne"] = v.teamOne;
    j["playerChampionSelections"] = v.playerChampionSelections;
    j["teamTwo"] = v.teamTwo;
  }
  static void from_json(const json& j, LolChatGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolChatQueue>(); 
    v.teamOne = j.at("teamOne").get<std::vector<LolChatTeamPlayerEntry>>(); 
    v.playerChampionSelections = j.at("playerChampionSelections").get<std::vector<LolChatChampSelection>>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<LolChatTeamPlayerEntry>>(); 
  } 
  struct LolChatGameflowGameMap { /**/ 
    int64_t id;/**/
  };
  static void to_json(json& j, const LolChatGameflowGameMap& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChatGameflowGameMap& v) { 
    v.id = j.at("id").get<int64_t>(); 
  } 
  enum class LolChatGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolChatGameflowPhase& v) {
    switch(v) { 
    case LolChatGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolChatGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolChatGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolChatGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolChatGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolChatGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolChatGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolChatGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolChatGameflowPhase::None_e:
      j = "None";
    break;
    case LolChatGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolChatGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolChatGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolChatGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolChatGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolChatGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolChatGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolChatGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolChatGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolChatGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolChatGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolChatGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolChatGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolChatGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolChatGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolChatGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolChatGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolChatGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolChatGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolChatGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolChatGameflowSession { /**/ 
    LolChatGameflowGameMap map;/**/
    LolChatGameflowPhase phase;/**/
    LolChatGameflowGameData gameData;/**/
  };
  static void to_json(json& j, const LolChatGameflowSession& v) { 
    j["map"] = v.map;
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
  }
  static void from_json(const json& j, LolChatGameflowSession& v) { 
    v.map = j.at("map").get<LolChatGameflowGameMap>(); 
    v.phase = j.at("phase").get<LolChatGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolChatGameflowGameData>(); 
  } 
  struct LolChatGroupResource { /**/ 
    int32_t priority;/**/
    bool isMetaGroup;/**/
    bool collapsed;/**/
    uint32_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolChatGroupResource& v) { 
    j["priority"] = v.priority;
    j["isMetaGroup"] = v.isMetaGroup;
    j["collapsed"] = v.collapsed;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolChatGroupResource& v) { 
    v.priority = j.at("priority").get<int32_t>(); 
    v.isMetaGroup = j.at("isMetaGroup").get<bool>(); 
    v.collapsed = j.at("collapsed").get<bool>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolChatLobbyMember { /**/ 
    bool isOwner;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolChatLobbyMember& v) { 
    j["isOwner"] = v.isOwner;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolChatLobbyMember& v) { 
    v.isOwner = j.at("isOwner").get<bool>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  enum class LolChatQueueCustomGameSpectatorPolicy { /**/ 
    AllAllowed_e = 3, /**/ 
    FriendsAllowed_e = 2, /**/ 
    LobbyAllowed_e = 1, /**/ 
    NotAllowed_e = 0, /**/ 
  };
  static void to_json(json& j, const LolChatQueueCustomGameSpectatorPolicy& v) {
    switch(v) { 
    case LolChatQueueCustomGameSpectatorPolicy::AllAllowed_e:
      j = "AllAllowed";
    break;
    case LolChatQueueCustomGameSpectatorPolicy::FriendsAllowed_e:
      j = "FriendsAllowed";
    break;
    case LolChatQueueCustomGameSpectatorPolicy::LobbyAllowed_e:
      j = "LobbyAllowed";
    break;
    case LolChatQueueCustomGameSpectatorPolicy::NotAllowed_e:
      j = "NotAllowed";
    break;
    };
  }
  static void from_json(const json& j, LolChatQueueCustomGameSpectatorPolicy& v) {
    auto s = j.get<std::string>(); 
    if(s == "AllAllowed") {
      v = LolChatQueueCustomGameSpectatorPolicy::AllAllowed_e;
      return;
    } 
    if(s == "FriendsAllowed") {
      v = LolChatQueueCustomGameSpectatorPolicy::FriendsAllowed_e;
      return;
    } 
    if(s == "LobbyAllowed") {
      v = LolChatQueueCustomGameSpectatorPolicy::LobbyAllowed_e;
      return;
    } 
    if(s == "NotAllowed") {
      v = LolChatQueueCustomGameSpectatorPolicy::NotAllowed_e;
      return;
    } 
  } 
  struct LolChatLobbyStatus { /**/ 
    int32_t queueId;/**/
    bool isCustom;/**/
    bool isPracticeTool;/**/
    bool isLeader;/**/
    LolChatQueueCustomGameSpectatorPolicy customSpectatorPolicy;/**/
  };
  static void to_json(json& j, const LolChatLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["isCustom"] = v.isCustom;
    j["isPracticeTool"] = v.isPracticeTool;
    j["isLeader"] = v.isLeader;
    j["customSpectatorPolicy"] = v.customSpectatorPolicy;
  }
  static void from_json(const json& j, LolChatLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isPracticeTool = j.at("isPracticeTool").get<bool>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
    v.customSpectatorPolicy = j.at("customSpectatorPolicy").get<LolChatQueueCustomGameSpectatorPolicy>(); 
  } 
  struct LolChatLobbyPlayerStatus { /**/ 
    std::optional<LolChatLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolChatLobbyStatus> lastQueuedLobbyStatus;/**/
  };
  static void to_json(json& j, const LolChatLobbyPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
  }
  static void from_json(const json& j, LolChatLobbyPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolChatLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolChatLobbyStatus>>(); 
  } 
  struct LolChatPlayerPreferences { /**/ 
    std::string type;/**/
    std::string hash;/**/
    uint64_t modified;/**/
    std::string data;/**/
  };
  static void to_json(json& j, const LolChatPlayerPreferences& v) { 
    j["type"] = v.type;
    j["hash"] = v.hash;
    j["modified"] = v.modified;
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolChatPlayerPreferences& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.hash = j.at("hash").get<std::string>(); 
    v.modified = j.at("modified").get<uint64_t>(); 
    v.data = j.at("data").get<std::string>(); 
  } 
  struct LolChatPluginRegionLocaleChangedEvent { /**/ 
    std::string locale;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolChatPluginRegionLocaleChangedEvent& v) { 
    j["locale"] = v.locale;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolChatPluginRegionLocaleChangedEvent& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolChatSanitizeRequest { /**/ 
    std::vector<std::string> texts;/**/
    std::optional<uint32_t> level;/**/
    std::optional<bool> aggressiveScan;/**/
    std::optional<bool> removeDisallowedChars;/**/
  };
  static void to_json(json& j, const LolChatSanitizeRequest& v) { 
    j["texts"] = v.texts;
    j["level"] = v.level;
    j["aggressiveScan"] = v.aggressiveScan;
    j["removeDisallowedChars"] = v.removeDisallowedChars;
  }
  static void from_json(const json& j, LolChatSanitizeRequest& v) { 
    v.texts = j.at("texts").get<std::vector<std::string>>(); 
    v.level = j.at("level").get<std::optional<uint32_t>>(); 
    v.aggressiveScan = j.at("aggressiveScan").get<std::optional<bool>>(); 
    v.removeDisallowedChars = j.at("removeDisallowedChars").get<std::optional<bool>>(); 
  } 
  struct LolChatSanitizeResponse { /**/ 
    std::optional<std::vector<std::string>> texts;/**/
    bool modified;/**/
  };
  static void to_json(json& j, const LolChatSanitizeResponse& v) { 
    j["texts"] = v.texts;
    j["modified"] = v.modified;
  }
  static void from_json(const json& j, LolChatSanitizeResponse& v) { 
    v.texts = j.at("texts").get<std::optional<std::vector<std::string>>>(); 
    v.modified = j.at("modified").get<bool>(); 
  } 
  struct LolChatSanitizerStatus { /**/ 
    std::string platformID;/**/
    std::string locale;/**/
    bool ready;/**/
  };
  static void to_json(json& j, const LolChatSanitizerStatus& v) { 
    j["platformID"] = v.platformID;
    j["locale"] = v.locale;
    j["ready"] = v.ready;
  }
  static void from_json(const json& j, LolChatSanitizerStatus& v) { 
    v.platformID = j.at("platformID").get<std::string>(); 
    v.locale = j.at("locale").get<std::string>(); 
    v.ready = j.at("ready").get<bool>(); 
  } 
  enum class LolChatSessionState { /**/ 
    connected_e = 1, /**/ 
    disconnected_e = 3, /**/ 
    initializing_e = 0, /**/ 
    loaded_e = 2, /**/ 
    shuttingdown_e = 4, /**/ 
  };
  static void to_json(json& j, const LolChatSessionState& v) {
    switch(v) { 
    case LolChatSessionState::connected_e:
      j = "connected";
    break;
    case LolChatSessionState::disconnected_e:
      j = "disconnected";
    break;
    case LolChatSessionState::initializing_e:
      j = "initializing";
    break;
    case LolChatSessionState::loaded_e:
      j = "loaded";
    break;
    case LolChatSessionState::shuttingdown_e:
      j = "shuttingdown";
    break;
    };
  }
  static void from_json(const json& j, LolChatSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "connected") {
      v = LolChatSessionState::connected_e;
      return;
    } 
    if(s == "disconnected") {
      v = LolChatSessionState::disconnected_e;
      return;
    } 
    if(s == "initializing") {
      v = LolChatSessionState::initializing_e;
      return;
    } 
    if(s == "loaded") {
      v = LolChatSessionState::loaded_e;
      return;
    } 
    if(s == "shuttingdown") {
      v = LolChatSessionState::shuttingdown_e;
      return;
    } 
  } 
  struct LolChatSessionResource { /**/ 
    uint32_t sessionExpire;/**/
    LolChatSessionState sessionState;/**/
  };
  static void to_json(json& j, const LolChatSessionResource& v) { 
    j["sessionExpire"] = v.sessionExpire;
    j["sessionState"] = v.sessionState;
  }
  static void from_json(const json& j, LolChatSessionResource& v) { 
    v.sessionExpire = j.at("sessionExpire").get<uint32_t>(); 
    v.sessionState = j.at("sessionState").get<LolChatSessionState>(); 
  } 
  struct LolChatSettingsResource { /**/ 
    json data;/**/
  };
  static void to_json(json& j, const LolChatSettingsResource& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolChatSettingsResource& v) { 
    v.data = j.at("data").get<json>(); 
  } 
  struct LolChatSpectateGameInfoResource { /**/ 
    std::string dropInSpectateGameId;/**/
    std::string allowObserveMode;/**/
    std::string gameQueueType;/**/
  };
  static void to_json(json& j, const LolChatSpectateGameInfoResource& v) { 
    j["dropInSpectateGameId"] = v.dropInSpectateGameId;
    j["allowObserveMode"] = v.allowObserveMode;
    j["gameQueueType"] = v.gameQueueType;
  }
  static void from_json(const json& j, LolChatSpectateGameInfoResource& v) { 
    v.dropInSpectateGameId = j.at("dropInSpectateGameId").get<std::string>(); 
    v.allowObserveMode = j.at("allowObserveMode").get<std::string>(); 
    v.gameQueueType = j.at("gameQueueType").get<std::string>(); 
  } 
  struct LolChatUserResource { /**/ 
    std::optional<std::string> lastSeenOnlineTimestamp;/**/
    uint64_t id;/**/
    std::string name;/**/
    std::optional<std::string> statusMessage;/**/
    std::map<std::string, std::string> lol;/**/
    int32_t icon;/**/
    std::string availability;/**/
  };
  static void to_json(json& j, const LolChatUserResource& v) { 
    j["lastSeenOnlineTimestamp"] = v.lastSeenOnlineTimestamp;
    j["id"] = v.id;
    j["name"] = v.name;
    j["statusMessage"] = v.statusMessage;
    j["lol"] = v.lol;
    j["icon"] = v.icon;
    j["availability"] = v.availability;
  }
  static void from_json(const json& j, LolChatUserResource& v) { 
    v.lastSeenOnlineTimestamp = j.at("lastSeenOnlineTimestamp").get<std::optional<std::string>>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.statusMessage = j.at("statusMessage").get<std::optional<std::string>>(); 
    v.lol = j.at("lol").get<std::map<std::string, std::string>>(); 
    v.icon = j.at("icon").get<int32_t>(); 
    v.availability = j.at("availability").get<std::string>(); 
  } 
  struct LolClashTicketOffer { /**/ 
    int32_t amount;/**/
    uint64_t summonerId;/**/
    bool isAccepted;/**/
  };
  static void to_json(json& j, const LolClashTicketOffer& v) { 
    j["amount"] = v.amount;
    j["summonerId"] = v.summonerId;
    j["isAccepted"] = v.isAccepted;
  }
  static void from_json(const json& j, LolClashTicketOffer& v) { 
    v.amount = j.at("amount").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.isAccepted = j.at("isAccepted").get<bool>(); 
  } 
  struct LolClashBiddingData { /**/ 
    int32_t currentBid;/**/
    std::vector<LolClashTicketOffer> incomingOffers;/**/
    int32_t currentPaid;/**/
  };
  static void to_json(json& j, const LolClashBiddingData& v) { 
    j["currentBid"] = v.currentBid;
    j["incomingOffers"] = v.incomingOffers;
    j["currentPaid"] = v.currentPaid;
  }
  static void from_json(const json& j, LolClashBiddingData& v) { 
    v.currentBid = j.at("currentBid").get<int32_t>(); 
    v.incomingOffers = j.at("incomingOffers").get<std::vector<LolClashTicketOffer>>(); 
    v.currentPaid = j.at("currentPaid").get<int32_t>(); 
  } 
  struct LolClashBracket { /**/ 
    std::vector<BracketMatch> matches;/**/
    int64_t id;/**/
    int32_t period;/**/
    int64_t tournamentId;/**/
    int32_t currentLoserRound;/**/
    std::vector<BracketRoster> rosters;/**/
    std::vector<BracketMatch> loserBracketMatches;/**/
    int32_t currentRound;/**/
    int32_t size;/**/
    bool isComplete;/**/
  };
  static void to_json(json& j, const LolClashBracket& v) { 
    j["matches"] = v.matches;
    j["id"] = v.id;
    j["period"] = v.period;
    j["tournamentId"] = v.tournamentId;
    j["currentLoserRound"] = v.currentLoserRound;
    j["rosters"] = v.rosters;
    j["loserBracketMatches"] = v.loserBracketMatches;
    j["currentRound"] = v.currentRound;
    j["size"] = v.size;
    j["isComplete"] = v.isComplete;
  }
  static void from_json(const json& j, LolClashBracket& v) { 
    v.matches = j.at("matches").get<std::vector<BracketMatch>>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.currentLoserRound = j.at("currentLoserRound").get<int32_t>(); 
    v.rosters = j.at("rosters").get<std::vector<BracketRoster>>(); 
    v.loserBracketMatches = j.at("loserBracketMatches").get<std::vector<BracketMatch>>(); 
    v.currentRound = j.at("currentRound").get<int32_t>(); 
    v.size = j.at("size").get<int32_t>(); 
    v.isComplete = j.at("isComplete").get<bool>(); 
  } 
  struct LolClashChangeIconRequest { /**/ 
    int32_t iconColorId;/**/
    int32_t iconId;/**/
  };
  static void to_json(json& j, const LolClashChangeIconRequest& v) { 
    j["iconColorId"] = v.iconColorId;
    j["iconId"] = v.iconId;
  }
  static void from_json(const json& j, LolClashChangeIconRequest& v) { 
    v.iconColorId = j.at("iconColorId").get<int32_t>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
  } 
  struct LolClashChangeNameRequest { /**/ 
    std::string name;/**/
  };
  static void to_json(json& j, const LolClashChangeNameRequest& v) { 
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolClashChangeNameRequest& v) { 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class LolClashClashVisibility { /**/ 
    DarkVisible_e = 1, /**/ 
    Hidden_e = 0, /**/ 
    Visible_e = 2, /**/ 
  };
  static void to_json(json& j, const LolClashClashVisibility& v) {
    switch(v) { 
    case LolClashClashVisibility::DarkVisible_e:
      j = "DarkVisible";
    break;
    case LolClashClashVisibility::Hidden_e:
      j = "Hidden";
    break;
    case LolClashClashVisibility::Visible_e:
      j = "Visible";
    break;
    };
  }
  static void from_json(const json& j, LolClashClashVisibility& v) {
    auto s = j.get<std::string>(); 
    if(s == "DarkVisible") {
      v = LolClashClashVisibility::DarkVisible_e;
      return;
    } 
    if(s == "Hidden") {
      v = LolClashClashVisibility::Hidden_e;
      return;
    } 
    if(s == "Visible") {
      v = LolClashClashVisibility::Visible_e;
      return;
    } 
  } 
  enum class LolClashClashState { /**/ 
    DarkDisabled_e = 0, /**/ 
    DarkEnabled_e = 1, /**/ 
    Disabled_e = 2, /**/ 
    Enabled_e = 3, /**/ 
  };
  static void to_json(json& j, const LolClashClashState& v) {
    switch(v) { 
    case LolClashClashState::DarkDisabled_e:
      j = "DarkDisabled";
    break;
    case LolClashClashState::DarkEnabled_e:
      j = "DarkEnabled";
    break;
    case LolClashClashState::Disabled_e:
      j = "Disabled";
    break;
    case LolClashClashState::Enabled_e:
      j = "Enabled";
    break;
    };
  }
  static void from_json(const json& j, LolClashClashState& v) {
    auto s = j.get<std::string>(); 
    if(s == "DarkDisabled") {
      v = LolClashClashState::DarkDisabled_e;
      return;
    } 
    if(s == "DarkEnabled") {
      v = LolClashClashState::DarkEnabled_e;
      return;
    } 
    if(s == "Disabled") {
      v = LolClashClashState::Disabled_e;
      return;
    } 
    if(s == "Enabled") {
      v = LolClashClashState::Enabled_e;
      return;
    } 
  } 
  struct LolClashClashConfig { /**/ 
    bool IsPlaymodeRestrictionEnabled;/**/
    bool UseIndividualEntitlement;/**/
    LolClashClashVisibility Visibility;/**/
    std::string IconConfig;/**/
    LolClashClashState EnabledState;/**/
    std::string DarkModeEntitlement;/**/
  };
  static void to_json(json& j, const LolClashClashConfig& v) { 
    j["IsPlaymodeRestrictionEnabled"] = v.IsPlaymodeRestrictionEnabled;
    j["UseIndividualEntitlement"] = v.UseIndividualEntitlement;
    j["Visibility"] = v.Visibility;
    j["IconConfig"] = v.IconConfig;
    j["EnabledState"] = v.EnabledState;
    j["DarkModeEntitlement"] = v.DarkModeEntitlement;
  }
  static void from_json(const json& j, LolClashClashConfig& v) { 
    v.IsPlaymodeRestrictionEnabled = j.at("IsPlaymodeRestrictionEnabled").get<bool>(); 
    v.UseIndividualEntitlement = j.at("UseIndividualEntitlement").get<bool>(); 
    v.Visibility = j.at("Visibility").get<LolClashClashVisibility>(); 
    v.IconConfig = j.at("IconConfig").get<std::string>(); 
    v.EnabledState = j.at("EnabledState").get<LolClashClashState>(); 
    v.DarkModeEntitlement = j.at("DarkModeEntitlement").get<std::string>(); 
  } 
  struct LolClashClubsSummoner { /**/ 
    int32_t profileIconId;/**/
    uint64_t summonerId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolClashClubsSummoner& v) { 
    j["profileIconId"] = v.profileIconId;
    j["summonerId"] = v.summonerId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolClashClubsSummoner& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolClashEntitlementsToken { /**/ 
    std::string accessToken;/**/
    std::vector<std::string> entitlements;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolClashEntitlementsToken& v) { 
    j["accessToken"] = v.accessToken;
    j["entitlements"] = v.entitlements;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolClashEntitlementsToken& v) { 
    v.accessToken = j.at("accessToken").get<std::string>(); 
    v.entitlements = j.at("entitlements").get<std::vector<std::string>>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolClashEogPlayerUpdateDTO { /**/ 
    std::vector<ClashRewardDefinition> rewardProgress;/**/
    std::vector<ClashRewardDefinition> earnedRewards;/**/
    int64_t tournamentId;/**/
    bool winner;/**/
    int32_t themeVp;/**/
    int64_t gameId;/**/
    int32_t seasonVp;/**/
  };
  static void to_json(json& j, const LolClashEogPlayerUpdateDTO& v) { 
    j["rewardProgress"] = v.rewardProgress;
    j["earnedRewards"] = v.earnedRewards;
    j["tournamentId"] = v.tournamentId;
    j["winner"] = v.winner;
    j["themeVp"] = v.themeVp;
    j["gameId"] = v.gameId;
    j["seasonVp"] = v.seasonVp;
  }
  static void from_json(const json& j, LolClashEogPlayerUpdateDTO& v) { 
    v.rewardProgress = j.at("rewardProgress").get<std::vector<ClashRewardDefinition>>(); 
    v.earnedRewards = j.at("earnedRewards").get<std::vector<ClashRewardDefinition>>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.winner = j.at("winner").get<bool>(); 
    v.themeVp = j.at("themeVp").get<int32_t>(); 
    v.gameId = j.at("gameId").get<int64_t>(); 
    v.seasonVp = j.at("seasonVp").get<int32_t>(); 
  } 
  enum class LolClashFoundationError { /**/ 
    CLASH_DISABLED_e = 1, /**/ 
    CLASH_NOT_INITIALIZED_e = 0, /**/ 
    DESERIALIZATION_FAILED_e = 2, /**/ 
    GAMEFLOW_UNAVAILABLE_e = 3, /**/ 
  };
  static void to_json(json& j, const LolClashFoundationError& v) {
    switch(v) { 
    case LolClashFoundationError::CLASH_DISABLED_e:
      j = "CLASH_DISABLED";
    break;
    case LolClashFoundationError::CLASH_NOT_INITIALIZED_e:
      j = "CLASH_NOT_INITIALIZED";
    break;
    case LolClashFoundationError::DESERIALIZATION_FAILED_e:
      j = "DESERIALIZATION_FAILED";
    break;
    case LolClashFoundationError::GAMEFLOW_UNAVAILABLE_e:
      j = "GAMEFLOW_UNAVAILABLE";
    break;
    };
  }
  static void from_json(const json& j, LolClashFoundationError& v) {
    auto s = j.get<std::string>(); 
    if(s == "CLASH_DISABLED") {
      v = LolClashFoundationError::CLASH_DISABLED_e;
      return;
    } 
    if(s == "CLASH_NOT_INITIALIZED") {
      v = LolClashFoundationError::CLASH_NOT_INITIALIZED_e;
      return;
    } 
    if(s == "DESERIALIZATION_FAILED") {
      v = LolClashFoundationError::DESERIALIZATION_FAILED_e;
      return;
    } 
    if(s == "GAMEFLOW_UNAVAILABLE") {
      v = LolClashFoundationError::GAMEFLOW_UNAVAILABLE_e;
      return;
    } 
  } 
  struct LolClashGameflowAvailability { /**/ 
    bool isAvailable;/**/
  };
  static void to_json(json& j, const LolClashGameflowAvailability& v) { 
    j["isAvailable"] = v.isAvailable;
  }
  static void from_json(const json& j, LolClashGameflowAvailability& v) { 
    v.isAvailable = j.at("isAvailable").get<bool>(); 
  } 
  enum class LolClashMatchmakingDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolClashMatchmakingDodgeState& v) {
    switch(v) { 
    case LolClashMatchmakingDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolClashMatchmakingDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolClashMatchmakingDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolClashMatchmakingDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolClashMatchmakingDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolClashMatchmakingDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolClashMatchmakingDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolClashMatchmakingDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolClashMatchmakingDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  struct LolClashGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolClashMatchmakingDodgeState state;/**/
  };
  static void to_json(json& j, const LolClashGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolClashGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolClashMatchmakingDodgeState>(); 
  } 
  enum class LolClashGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolClashGameflowPhase& v) {
    switch(v) { 
    case LolClashGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolClashGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolClashGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolClashGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolClashGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolClashGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolClashGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolClashGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolClashGameflowPhase::None_e:
      j = "None";
    break;
    case LolClashGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolClashGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolClashGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolClashGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolClashGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolClashGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolClashGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolClashGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolClashGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolClashGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolClashGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolClashGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolClashGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolClashGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolClashGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolClashGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolClashGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolClashGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolClashGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolClashGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolClashGameflowSession { /**/ 
    LolClashGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolClashGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolClashGameflowSession& v) { 
    v.phase = j.at("phase").get<LolClashGameflowPhase>(); 
  } 
  struct LolClashInviteSubRequest { /**/ 
    uint64_t replacedSummonerId;/**/
    uint64_t substituteSummonerId;/**/
  };
  static void to_json(json& j, const LolClashInviteSubRequest& v) { 
    j["replacedSummonerId"] = v.replacedSummonerId;
    j["substituteSummonerId"] = v.substituteSummonerId;
  }
  static void from_json(const json& j, LolClashInviteSubRequest& v) { 
    v.replacedSummonerId = j.at("replacedSummonerId").get<uint64_t>(); 
    v.substituteSummonerId = j.at("substituteSummonerId").get<uint64_t>(); 
  } 
  enum class LolClashKdaClassification { /**/ 
    AVERAGE_e = 1, /**/ 
    HIGH_e = 2, /**/ 
    LOW_e = 0, /**/ 
  };
  static void to_json(json& j, const LolClashKdaClassification& v) {
    switch(v) { 
    case LolClashKdaClassification::AVERAGE_e:
      j = "AVERAGE";
    break;
    case LolClashKdaClassification::HIGH_e:
      j = "HIGH";
    break;
    case LolClashKdaClassification::LOW_e:
      j = "LOW";
    break;
    };
  }
  static void from_json(const json& j, LolClashKdaClassification& v) {
    auto s = j.get<std::string>(); 
    if(s == "AVERAGE") {
      v = LolClashKdaClassification::AVERAGE_e;
      return;
    } 
    if(s == "HIGH") {
      v = LolClashKdaClassification::HIGH_e;
      return;
    } 
    if(s == "LOW") {
      v = LolClashKdaClassification::LOW_e;
      return;
    } 
  } 
  struct LolClashKickRequest { /**/ 
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolClashKickRequest& v) { 
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolClashKickRequest& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  enum class LolClashLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolClashLoginSessionState& v) {
    switch(v) { 
    case LolClashLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolClashLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolClashLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolClashLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolClashLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolClashLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolClashLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolClashLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolClashLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolClashLoginSession { /**/ 
    LolClashLoginSessionState state;/**/
    std::optional<uint64_t> summonerId;/**/
  };
  static void to_json(json& j, const LolClashLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolClashLoginSession& v) { 
    v.state = j.at("state").get<LolClashLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<std::optional<uint64_t>>(); 
  } 
  struct LolClashMatchmakingDodgeData { /**/ 
    LolClashMatchmakingDodgeState state;/**/
    uint64_t dodgerId;/**/
  };
  static void to_json(json& j, const LolClashMatchmakingDodgeData& v) { 
    j["state"] = v.state;
    j["dodgerId"] = v.dodgerId;
  }
  static void from_json(const json& j, LolClashMatchmakingDodgeData& v) { 
    v.state = j.at("state").get<LolClashMatchmakingDodgeState>(); 
    v.dodgerId = j.at("dodgerId").get<uint64_t>(); 
  } 
  enum class LolClashMatchmakingDodgeWarning { /**/ 
    None_e = 0, /**/ 
    Penalty_e = 2, /**/ 
    Warning_e = 1, /**/ 
  };
  static void to_json(json& j, const LolClashMatchmakingDodgeWarning& v) {
    switch(v) { 
    case LolClashMatchmakingDodgeWarning::None_e:
      j = "None";
    break;
    case LolClashMatchmakingDodgeWarning::Penalty_e:
      j = "Penalty";
    break;
    case LolClashMatchmakingDodgeWarning::Warning_e:
      j = "Warning";
    break;
    };
  }
  static void from_json(const json& j, LolClashMatchmakingDodgeWarning& v) {
    auto s = j.get<std::string>(); 
    if(s == "None") {
      v = LolClashMatchmakingDodgeWarning::None_e;
      return;
    } 
    if(s == "Penalty") {
      v = LolClashMatchmakingDodgeWarning::Penalty_e;
      return;
    } 
    if(s == "Warning") {
      v = LolClashMatchmakingDodgeWarning::Warning_e;
      return;
    } 
  } 
  enum class LolClashMatchmakingReadyCheckState { /**/ 
    Error_e = 5, /**/ 
    EveryoneReady_e = 2, /**/ 
    InProgress_e = 1, /**/ 
    Invalid_e = 0, /**/ 
    PartyNotReady_e = 4, /**/ 
    StrangerNotReady_e = 3, /**/ 
  };
  static void to_json(json& j, const LolClashMatchmakingReadyCheckState& v) {
    switch(v) { 
    case LolClashMatchmakingReadyCheckState::Error_e:
      j = "Error";
    break;
    case LolClashMatchmakingReadyCheckState::EveryoneReady_e:
      j = "EveryoneReady";
    break;
    case LolClashMatchmakingReadyCheckState::InProgress_e:
      j = "InProgress";
    break;
    case LolClashMatchmakingReadyCheckState::Invalid_e:
      j = "Invalid";
    break;
    case LolClashMatchmakingReadyCheckState::PartyNotReady_e:
      j = "PartyNotReady";
    break;
    case LolClashMatchmakingReadyCheckState::StrangerNotReady_e:
      j = "StrangerNotReady";
    break;
    };
  }
  static void from_json(const json& j, LolClashMatchmakingReadyCheckState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Error") {
      v = LolClashMatchmakingReadyCheckState::Error_e;
      return;
    } 
    if(s == "EveryoneReady") {
      v = LolClashMatchmakingReadyCheckState::EveryoneReady_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolClashMatchmakingReadyCheckState::InProgress_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolClashMatchmakingReadyCheckState::Invalid_e;
      return;
    } 
    if(s == "PartyNotReady") {
      v = LolClashMatchmakingReadyCheckState::PartyNotReady_e;
      return;
    } 
    if(s == "StrangerNotReady") {
      v = LolClashMatchmakingReadyCheckState::StrangerNotReady_e;
      return;
    } 
  } 
  enum class LolClashMatchmakingReadyCheckResponse { /**/ 
    Accepted_e = 49, /**/ 
    Declined_e = 50, /**/ 
    None_e = 48, /**/ 
  };
  static void to_json(json& j, const LolClashMatchmakingReadyCheckResponse& v) {
    switch(v) { 
    case LolClashMatchmakingReadyCheckResponse::Accepted_e:
      j = "Accepted";
    break;
    case LolClashMatchmakingReadyCheckResponse::Declined_e:
      j = "Declined";
    break;
    case LolClashMatchmakingReadyCheckResponse::None_e:
      j = "None";
    break;
    };
  }
  static void from_json(const json& j, LolClashMatchmakingReadyCheckResponse& v) {
    auto s = j.get<std::string>(); 
    if(s == "Accepted") {
      v = LolClashMatchmakingReadyCheckResponse::Accepted_e;
      return;
    } 
    if(s == "Declined") {
      v = LolClashMatchmakingReadyCheckResponse::Declined_e;
      return;
    } 
    if(s == "None") {
      v = LolClashMatchmakingReadyCheckResponse::None_e;
      return;
    } 
  } 
  struct LolClashMatchmakingReadyCheckResource { /**/ 
    LolClashMatchmakingReadyCheckState state;/**/
    LolClashMatchmakingReadyCheckResponse playerResponse;/**/
  };
  static void to_json(json& j, const LolClashMatchmakingReadyCheckResource& v) { 
    j["state"] = v.state;
    j["playerResponse"] = v.playerResponse;
  }
  static void from_json(const json& j, LolClashMatchmakingReadyCheckResource& v) { 
    v.state = j.at("state").get<LolClashMatchmakingReadyCheckState>(); 
    v.playerResponse = j.at("playerResponse").get<LolClashMatchmakingReadyCheckResponse>(); 
  } 
  struct LolClashMatchmakingSearchResource { /**/ 
    int32_t queueId;/**/
    LolClashMatchmakingDodgeData dodgeData;/**/
  };
  static void to_json(json& j, const LolClashMatchmakingSearchResource& v) { 
    j["queueId"] = v.queueId;
    j["dodgeData"] = v.dodgeData;
  }
  static void from_json(const json& j, LolClashMatchmakingSearchResource& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.dodgeData = j.at("dodgeData").get<LolClashMatchmakingDodgeData>(); 
  } 
  enum class LolClashNotifyReason { /**/ 
    ACCEPT_INVITE_e = 17, /**/ 
    ACCEPT_SUGGESTION_e = 2, /**/ 
    ACCEPT_TICKET_e = 26, /**/ 
    CAPTAIN_LEAVE_e = 20, /**/ 
    CHANGE_LOGO_e = 9, /**/ 
    CHANGE_NAME_e = 10, /**/ 
    CHANGE_NAMETAGLOGO_e = 13, /**/ 
    CHANGE_POSITION_e = 12, /**/ 
    CHANGE_SHORTNAME_e = 11, /**/ 
    DECLINE_INVITE_e = 16, /**/ 
    DECLINE_SUGGESTION_e = 1, /**/ 
    DECLINE_TICKET_e = 25, /**/ 
    DISMISS_e = 7, /**/ 
    INVITE_e = 14, /**/ 
    KICK_e = 21, /**/ 
    LEAVE_e = 19, /**/ 
    OFFER_TICKET_e = 23, /**/ 
    OWNER_CLOSE_e = 6, /**/ 
    OWNER_TRANSFER_e = 8, /**/ 
    READY_e = 4, /**/ 
    RESENT_INVITE_e = 15, /**/ 
    REVOKED_TICKET_e = 24, /**/ 
    REVOKE_INVITE_e = 18, /**/ 
    REVOKE_SUGGESTION_e = 3, /**/ 
    SET_TICKET_e = 22, /**/ 
    SUGGESTION_e = 0, /**/ 
    UNREADY_e = 5, /**/ 
  };
  static void to_json(json& j, const LolClashNotifyReason& v) {
    switch(v) { 
    case LolClashNotifyReason::ACCEPT_INVITE_e:
      j = "ACCEPT_INVITE";
    break;
    case LolClashNotifyReason::ACCEPT_SUGGESTION_e:
      j = "ACCEPT_SUGGESTION";
    break;
    case LolClashNotifyReason::ACCEPT_TICKET_e:
      j = "ACCEPT_TICKET";
    break;
    case LolClashNotifyReason::CAPTAIN_LEAVE_e:
      j = "CAPTAIN_LEAVE";
    break;
    case LolClashNotifyReason::CHANGE_LOGO_e:
      j = "CHANGE_LOGO";
    break;
    case LolClashNotifyReason::CHANGE_NAME_e:
      j = "CHANGE_NAME";
    break;
    case LolClashNotifyReason::CHANGE_NAMETAGLOGO_e:
      j = "CHANGE_NAMETAGLOGO";
    break;
    case LolClashNotifyReason::CHANGE_POSITION_e:
      j = "CHANGE_POSITION";
    break;
    case LolClashNotifyReason::CHANGE_SHORTNAME_e:
      j = "CHANGE_SHORTNAME";
    break;
    case LolClashNotifyReason::DECLINE_INVITE_e:
      j = "DECLINE_INVITE";
    break;
    case LolClashNotifyReason::DECLINE_SUGGESTION_e:
      j = "DECLINE_SUGGESTION";
    break;
    case LolClashNotifyReason::DECLINE_TICKET_e:
      j = "DECLINE_TICKET";
    break;
    case LolClashNotifyReason::DISMISS_e:
      j = "DISMISS";
    break;
    case LolClashNotifyReason::INVITE_e:
      j = "INVITE";
    break;
    case LolClashNotifyReason::KICK_e:
      j = "KICK";
    break;
    case LolClashNotifyReason::LEAVE_e:
      j = "LEAVE";
    break;
    case LolClashNotifyReason::OFFER_TICKET_e:
      j = "OFFER_TICKET";
    break;
    case LolClashNotifyReason::OWNER_CLOSE_e:
      j = "OWNER_CLOSE";
    break;
    case LolClashNotifyReason::OWNER_TRANSFER_e:
      j = "OWNER_TRANSFER";
    break;
    case LolClashNotifyReason::READY_e:
      j = "READY";
    break;
    case LolClashNotifyReason::RESENT_INVITE_e:
      j = "RESENT_INVITE";
    break;
    case LolClashNotifyReason::REVOKED_TICKET_e:
      j = "REVOKED_TICKET";
    break;
    case LolClashNotifyReason::REVOKE_INVITE_e:
      j = "REVOKE_INVITE";
    break;
    case LolClashNotifyReason::REVOKE_SUGGESTION_e:
      j = "REVOKE_SUGGESTION";
    break;
    case LolClashNotifyReason::SET_TICKET_e:
      j = "SET_TICKET";
    break;
    case LolClashNotifyReason::SUGGESTION_e:
      j = "SUGGESTION";
    break;
    case LolClashNotifyReason::UNREADY_e:
      j = "UNREADY";
    break;
    };
  }
  static void from_json(const json& j, LolClashNotifyReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "ACCEPT_INVITE") {
      v = LolClashNotifyReason::ACCEPT_INVITE_e;
      return;
    } 
    if(s == "ACCEPT_SUGGESTION") {
      v = LolClashNotifyReason::ACCEPT_SUGGESTION_e;
      return;
    } 
    if(s == "ACCEPT_TICKET") {
      v = LolClashNotifyReason::ACCEPT_TICKET_e;
      return;
    } 
    if(s == "CAPTAIN_LEAVE") {
      v = LolClashNotifyReason::CAPTAIN_LEAVE_e;
      return;
    } 
    if(s == "CHANGE_LOGO") {
      v = LolClashNotifyReason::CHANGE_LOGO_e;
      return;
    } 
    if(s == "CHANGE_NAME") {
      v = LolClashNotifyReason::CHANGE_NAME_e;
      return;
    } 
    if(s == "CHANGE_NAMETAGLOGO") {
      v = LolClashNotifyReason::CHANGE_NAMETAGLOGO_e;
      return;
    } 
    if(s == "CHANGE_POSITION") {
      v = LolClashNotifyReason::CHANGE_POSITION_e;
      return;
    } 
    if(s == "CHANGE_SHORTNAME") {
      v = LolClashNotifyReason::CHANGE_SHORTNAME_e;
      return;
    } 
    if(s == "DECLINE_INVITE") {
      v = LolClashNotifyReason::DECLINE_INVITE_e;
      return;
    } 
    if(s == "DECLINE_SUGGESTION") {
      v = LolClashNotifyReason::DECLINE_SUGGESTION_e;
      return;
    } 
    if(s == "DECLINE_TICKET") {
      v = LolClashNotifyReason::DECLINE_TICKET_e;
      return;
    } 
    if(s == "DISMISS") {
      v = LolClashNotifyReason::DISMISS_e;
      return;
    } 
    if(s == "INVITE") {
      v = LolClashNotifyReason::INVITE_e;
      return;
    } 
    if(s == "KICK") {
      v = LolClashNotifyReason::KICK_e;
      return;
    } 
    if(s == "LEAVE") {
      v = LolClashNotifyReason::LEAVE_e;
      return;
    } 
    if(s == "OFFER_TICKET") {
      v = LolClashNotifyReason::OFFER_TICKET_e;
      return;
    } 
    if(s == "OWNER_CLOSE") {
      v = LolClashNotifyReason::OWNER_CLOSE_e;
      return;
    } 
    if(s == "OWNER_TRANSFER") {
      v = LolClashNotifyReason::OWNER_TRANSFER_e;
      return;
    } 
    if(s == "READY") {
      v = LolClashNotifyReason::READY_e;
      return;
    } 
    if(s == "RESENT_INVITE") {
      v = LolClashNotifyReason::RESENT_INVITE_e;
      return;
    } 
    if(s == "REVOKED_TICKET") {
      v = LolClashNotifyReason::REVOKED_TICKET_e;
      return;
    } 
    if(s == "REVOKE_INVITE") {
      v = LolClashNotifyReason::REVOKE_INVITE_e;
      return;
    } 
    if(s == "REVOKE_SUGGESTION") {
      v = LolClashNotifyReason::REVOKE_SUGGESTION_e;
      return;
    } 
    if(s == "SET_TICKET") {
      v = LolClashNotifyReason::SET_TICKET_e;
      return;
    } 
    if(s == "SUGGESTION") {
      v = LolClashNotifyReason::SUGGESTION_e;
      return;
    } 
    if(s == "UNREADY") {
      v = LolClashNotifyReason::UNREADY_e;
      return;
    } 
  } 
  struct RewardLogo { /**/ 
    int32_t logo;/**/
    int32_t memberOwnedCount;/**/
  };
  static void to_json(json& j, const RewardLogo& v) { 
    j["logo"] = v.logo;
    j["memberOwnedCount"] = v.memberOwnedCount;
  }
  static void from_json(const json& j, RewardLogo& v) { 
    v.logo = j.at("logo").get<int32_t>(); 
    v.memberOwnedCount = j.at("memberOwnedCount").get<int32_t>(); 
  } 
  enum class TicketOfferState { /**/ 
    ACCEPTED_e = 1, /**/ 
    ACTIVE_e = 0, /**/ 
    REJECTED_e = 2, /**/ 
    REVOKED_e = 3, /**/ 
  };
  static void to_json(json& j, const TicketOfferState& v) {
    switch(v) { 
    case TicketOfferState::ACCEPTED_e:
      j = "ACCEPTED";
    break;
    case TicketOfferState::ACTIVE_e:
      j = "ACTIVE";
    break;
    case TicketOfferState::REJECTED_e:
      j = "REJECTED";
    break;
    case TicketOfferState::REVOKED_e:
      j = "REVOKED";
    break;
    };
  }
  static void from_json(const json& j, TicketOfferState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ACCEPTED") {
      v = TicketOfferState::ACCEPTED_e;
      return;
    } 
    if(s == "ACTIVE") {
      v = TicketOfferState::ACTIVE_e;
      return;
    } 
    if(s == "REJECTED") {
      v = TicketOfferState::REJECTED_e;
      return;
    } 
    if(s == "REVOKED") {
      v = TicketOfferState::REVOKED_e;
      return;
    } 
  } 
  struct TicketOfferDTO { /**/ 
    uint64_t offerPlayerId;/**/
    TicketOfferState ticketOfferState;/**/
    int32_t count;/**/
    uint64_t receivePlayerId;/**/
  };
  static void to_json(json& j, const TicketOfferDTO& v) { 
    j["offerPlayerId"] = v.offerPlayerId;
    j["ticketOfferState"] = v.ticketOfferState;
    j["count"] = v.count;
    j["receivePlayerId"] = v.receivePlayerId;
  }
  static void from_json(const json& j, TicketOfferDTO& v) { 
    v.offerPlayerId = j.at("offerPlayerId").get<uint64_t>(); 
    v.ticketOfferState = j.at("ticketOfferState").get<TicketOfferState>(); 
    v.count = j.at("count").get<int32_t>(); 
    v.receivePlayerId = j.at("receivePlayerId").get<uint64_t>(); 
  } 
  enum class PendingRosterInviteeState { /**/ 
    DECLINED_e = 2, /**/ 
    PENDING_e = 1, /**/ 
    REVOKED_e = 3, /**/ 
    SUGGESTED_e = 0, /**/ 
  };
  static void to_json(json& j, const PendingRosterInviteeState& v) {
    switch(v) { 
    case PendingRosterInviteeState::DECLINED_e:
      j = "DECLINED";
    break;
    case PendingRosterInviteeState::PENDING_e:
      j = "PENDING";
    break;
    case PendingRosterInviteeState::REVOKED_e:
      j = "REVOKED";
    break;
    case PendingRosterInviteeState::SUGGESTED_e:
      j = "SUGGESTED";
    break;
    };
  }
  static void from_json(const json& j, PendingRosterInviteeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "DECLINED") {
      v = PendingRosterInviteeState::DECLINED_e;
      return;
    } 
    if(s == "PENDING") {
      v = PendingRosterInviteeState::PENDING_e;
      return;
    } 
    if(s == "REVOKED") {
      v = PendingRosterInviteeState::REVOKED_e;
      return;
    } 
    if(s == "SUGGESTED") {
      v = PendingRosterInviteeState::SUGGESTED_e;
      return;
    } 
  } 
  struct PendingRosterInviteeDTO { /**/ 
    int64_t inviteTime;/**/
    uint64_t inviter;/**/
    uint64_t inviteeId;/**/
    PendingRosterInviteeState inviteeState;/**/
  };
  static void to_json(json& j, const PendingRosterInviteeDTO& v) { 
    j["inviteTime"] = v.inviteTime;
    j["inviter"] = v.inviter;
    j["inviteeId"] = v.inviteeId;
    j["inviteeState"] = v.inviteeState;
  }
  static void from_json(const json& j, PendingRosterInviteeDTO& v) { 
    v.inviteTime = j.at("inviteTime").get<int64_t>(); 
    v.inviter = j.at("inviter").get<uint64_t>(); 
    v.inviteeId = j.at("inviteeId").get<uint64_t>(); 
    v.inviteeState = j.at("inviteeState").get<PendingRosterInviteeState>(); 
  } 
  enum class PendingRosterMemberState { /**/ 
    FORCED_NOT_READY_e = 1, /**/ 
    KICK_e = 4, /**/ 
    LEFT_e = 3, /**/ 
    NOT_READY_e = 0, /**/ 
    READY_e = 2, /**/ 
  };
  static void to_json(json& j, const PendingRosterMemberState& v) {
    switch(v) { 
    case PendingRosterMemberState::FORCED_NOT_READY_e:
      j = "FORCED_NOT_READY";
    break;
    case PendingRosterMemberState::KICK_e:
      j = "KICK";
    break;
    case PendingRosterMemberState::LEFT_e:
      j = "LEFT";
    break;
    case PendingRosterMemberState::NOT_READY_e:
      j = "NOT_READY";
    break;
    case PendingRosterMemberState::READY_e:
      j = "READY";
    break;
    };
  }
  static void from_json(const json& j, PendingRosterMemberState& v) {
    auto s = j.get<std::string>(); 
    if(s == "FORCED_NOT_READY") {
      v = PendingRosterMemberState::FORCED_NOT_READY_e;
      return;
    } 
    if(s == "KICK") {
      v = PendingRosterMemberState::KICK_e;
      return;
    } 
    if(s == "LEFT") {
      v = PendingRosterMemberState::LEFT_e;
      return;
    } 
    if(s == "NOT_READY") {
      v = PendingRosterMemberState::NOT_READY_e;
      return;
    } 
    if(s == "READY") {
      v = PendingRosterMemberState::READY_e;
      return;
    } 
  } 
  enum class Position { /**/ 
    BOTTOM_e = 2, /**/ 
    FILL_e = 5, /**/ 
    JUNGLE_e = 3, /**/ 
    MIDDLE_e = 1, /**/ 
    TOP_e = 0, /**/ 
    UNSELECTED_e = 6, /**/ 
    UTILITY_e = 4, /**/ 
  };
  static void to_json(json& j, const Position& v) {
    switch(v) { 
    case Position::BOTTOM_e:
      j = "BOTTOM";
    break;
    case Position::FILL_e:
      j = "FILL";
    break;
    case Position::JUNGLE_e:
      j = "JUNGLE";
    break;
    case Position::MIDDLE_e:
      j = "MIDDLE";
    break;
    case Position::TOP_e:
      j = "TOP";
    break;
    case Position::UNSELECTED_e:
      j = "UNSELECTED";
    break;
    case Position::UTILITY_e:
      j = "UTILITY";
    break;
    };
  }
  static void from_json(const json& j, Position& v) {
    auto s = j.get<std::string>(); 
    if(s == "BOTTOM") {
      v = Position::BOTTOM_e;
      return;
    } 
    if(s == "FILL") {
      v = Position::FILL_e;
      return;
    } 
    if(s == "JUNGLE") {
      v = Position::JUNGLE_e;
      return;
    } 
    if(s == "MIDDLE") {
      v = Position::MIDDLE_e;
      return;
    } 
    if(s == "TOP") {
      v = Position::TOP_e;
      return;
    } 
    if(s == "UNSELECTED") {
      v = Position::UNSELECTED_e;
      return;
    } 
    if(s == "UTILITY") {
      v = Position::UTILITY_e;
      return;
    } 
  } 
  struct PendingRosterMemberDTO { /**/ 
    uint64_t playerId;/**/
    PendingRosterMemberState memberState;/**/
    int64_t joinTime;/**/
    int32_t pay;/**/
    Position position;/**/
    int32_t bet;/**/
  };
  static void to_json(json& j, const PendingRosterMemberDTO& v) { 
    j["playerId"] = v.playerId;
    j["memberState"] = v.memberState;
    j["joinTime"] = v.joinTime;
    j["pay"] = v.pay;
    j["position"] = v.position;
    j["bet"] = v.bet;
  }
  static void from_json(const json& j, PendingRosterMemberDTO& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.memberState = j.at("memberState").get<PendingRosterMemberState>(); 
    v.joinTime = j.at("joinTime").get<int64_t>(); 
    v.pay = j.at("pay").get<int32_t>(); 
    v.position = j.at("position").get<Position>(); 
    v.bet = j.at("bet").get<int32_t>(); 
  } 
  struct PendingRosterDTO { /**/ 
    int32_t logo;/**/
    std::string shortName;/**/
    std::vector<RewardLogo> rewardLogos;/**/
    std::string name;/**/
    int32_t tier;/**/
    std::vector<TicketOfferDTO> ticketOffers;/**/
    std::vector<FailedInvite> inviteFaileds;/**/
    std::string invitationId;/**/
    std::vector<PendingRosterInviteeDTO> invitees;/**/
    int64_t tournamentId;/**/
    int32_t logoColor;/**/
    uint64_t captainId;/**/
    std::vector<PendingRosterMemberDTO> members;/**/
  };
  static void to_json(json& j, const PendingRosterDTO& v) { 
    j["logo"] = v.logo;
    j["shortName"] = v.shortName;
    j["rewardLogos"] = v.rewardLogos;
    j["name"] = v.name;
    j["tier"] = v.tier;
    j["ticketOffers"] = v.ticketOffers;
    j["inviteFaileds"] = v.inviteFaileds;
    j["invitationId"] = v.invitationId;
    j["invitees"] = v.invitees;
    j["tournamentId"] = v.tournamentId;
    j["logoColor"] = v.logoColor;
    j["captainId"] = v.captainId;
    j["members"] = v.members;
  }
  static void from_json(const json& j, PendingRosterDTO& v) { 
    v.logo = j.at("logo").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.rewardLogos = j.at("rewardLogos").get<std::vector<RewardLogo>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.ticketOffers = j.at("ticketOffers").get<std::vector<TicketOfferDTO>>(); 
    v.inviteFaileds = j.at("inviteFaileds").get<std::vector<FailedInvite>>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.invitees = j.at("invitees").get<std::vector<PendingRosterInviteeDTO>>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.logoColor = j.at("logoColor").get<int32_t>(); 
    v.captainId = j.at("captainId").get<uint64_t>(); 
    v.members = j.at("members").get<std::vector<PendingRosterMemberDTO>>(); 
  } 
  struct LolClashPendingRosterNotification { /**/ 
    uint64_t targetPlayerId;/**/
    uint64_t sourcePlayerId;/**/
    PendingRosterDTO pendingRoster;/**/
    LolClashNotifyReason notifyReason;/**/
  };
  static void to_json(json& j, const LolClashPendingRosterNotification& v) { 
    j["targetPlayerId"] = v.targetPlayerId;
    j["sourcePlayerId"] = v.sourcePlayerId;
    j["pendingRoster"] = v.pendingRoster;
    j["notifyReason"] = v.notifyReason;
  }
  static void from_json(const json& j, LolClashPendingRosterNotification& v) { 
    v.targetPlayerId = j.at("targetPlayerId").get<uint64_t>(); 
    v.sourcePlayerId = j.at("sourcePlayerId").get<uint64_t>(); 
    v.pendingRoster = j.at("pendingRoster").get<PendingRosterDTO>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashNotifyReason>(); 
  } 
  enum class LolClashPlayerState { /**/ 
    BRACKET_ROSTER_e = 2, /**/ 
    ELIMINATED_e = 3, /**/ 
    HAS_ROSTER_e = 1, /**/ 
    NO_ROSTER_e = 0, /**/ 
  };
  static void to_json(json& j, const LolClashPlayerState& v) {
    switch(v) { 
    case LolClashPlayerState::BRACKET_ROSTER_e:
      j = "BRACKET_ROSTER";
    break;
    case LolClashPlayerState::ELIMINATED_e:
      j = "ELIMINATED";
    break;
    case LolClashPlayerState::HAS_ROSTER_e:
      j = "HAS_ROSTER";
    break;
    case LolClashPlayerState::NO_ROSTER_e:
      j = "NO_ROSTER";
    break;
    };
  }
  static void from_json(const json& j, LolClashPlayerState& v) {
    auto s = j.get<std::string>(); 
    if(s == "BRACKET_ROSTER") {
      v = LolClashPlayerState::BRACKET_ROSTER_e;
      return;
    } 
    if(s == "ELIMINATED") {
      v = LolClashPlayerState::ELIMINATED_e;
      return;
    } 
    if(s == "HAS_ROSTER") {
      v = LolClashPlayerState::HAS_ROSTER_e;
      return;
    } 
    if(s == "NO_ROSTER") {
      v = LolClashPlayerState::NO_ROSTER_e;
      return;
    } 
  } 
  enum class LolClashTournamentState { /**/ 
    IDLE_e = 0, /**/ 
    IN_GAME_e = 3, /**/ 
    LOCK_IN_e = 1, /**/ 
    RESULTS_e = 4, /**/ 
    SCOUTING_e = 2, /**/ 
  };
  static void to_json(json& j, const LolClashTournamentState& v) {
    switch(v) { 
    case LolClashTournamentState::IDLE_e:
      j = "IDLE";
    break;
    case LolClashTournamentState::IN_GAME_e:
      j = "IN_GAME";
    break;
    case LolClashTournamentState::LOCK_IN_e:
      j = "LOCK_IN";
    break;
    case LolClashTournamentState::RESULTS_e:
      j = "RESULTS";
    break;
    case LolClashTournamentState::SCOUTING_e:
      j = "SCOUTING";
    break;
    };
  }
  static void from_json(const json& j, LolClashTournamentState& v) {
    auto s = j.get<std::string>(); 
    if(s == "IDLE") {
      v = LolClashTournamentState::IDLE_e;
      return;
    } 
    if(s == "IN_GAME") {
      v = LolClashTournamentState::IN_GAME_e;
      return;
    } 
    if(s == "LOCK_IN") {
      v = LolClashTournamentState::LOCK_IN_e;
      return;
    } 
    if(s == "RESULTS") {
      v = LolClashTournamentState::RESULTS_e;
      return;
    } 
    if(s == "SCOUTING") {
      v = LolClashTournamentState::SCOUTING_e;
      return;
    } 
  } 
  struct LolClashPlayerChatRoster { /**/ 
    bool isRegistered;/**/
    std::string shortName;/**/
    int32_t iconColorId;/**/
    int32_t iconId;/**/
    std::string name;/**/
    int64_t tournamentId;/**/
    int64_t startTimeMs;/**/
    std::string key;/**/
    LolClashPlayerState playerState;/**/
    LolClashTournamentState tournamentState;/**/
    int64_t endTimeMs;/**/
  };
  static void to_json(json& j, const LolClashPlayerChatRoster& v) { 
    j["isRegistered"] = v.isRegistered;
    j["shortName"] = v.shortName;
    j["iconColorId"] = v.iconColorId;
    j["iconId"] = v.iconId;
    j["name"] = v.name;
    j["tournamentId"] = v.tournamentId;
    j["startTimeMs"] = v.startTimeMs;
    j["key"] = v.key;
    j["playerState"] = v.playerState;
    j["tournamentState"] = v.tournamentState;
    j["endTimeMs"] = v.endTimeMs;
  }
  static void from_json(const json& j, LolClashPlayerChatRoster& v) { 
    v.isRegistered = j.at("isRegistered").get<bool>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.iconColorId = j.at("iconColorId").get<int32_t>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.startTimeMs = j.at("startTimeMs").get<int64_t>(); 
    v.key = j.at("key").get<std::string>(); 
    v.playerState = j.at("playerState").get<LolClashPlayerState>(); 
    v.tournamentState = j.at("tournamentState").get<LolClashTournamentState>(); 
    v.endTimeMs = j.at("endTimeMs").get<int64_t>(); 
  } 
  struct LolClashPlayerData { /**/ 
    int32_t tickets;/**/
  };
  static void to_json(json& j, const LolClashPlayerData& v) { 
    j["tickets"] = v.tickets;
  }
  static void from_json(const json& j, LolClashPlayerData& v) { 
    v.tickets = j.at("tickets").get<int32_t>(); 
  } 
  struct LolClashPlayerNotification { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string expires;/**/
    std::string titleKey;/**/
    std::string backgroundUrl;/**/
    std::string state;/**/
    bool critical;/**/
    bool dismissible;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string detailKey;/**/
    std::string created;/**/
  };
  static void to_json(json& j, const LolClashPlayerNotification& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["expires"] = v.expires;
    j["titleKey"] = v.titleKey;
    j["backgroundUrl"] = v.backgroundUrl;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["dismissible"] = v.dismissible;
    j["data"] = v.data;
    j["type"] = v.type;
    j["detailKey"] = v.detailKey;
    j["created"] = v.created;
  }
  static void from_json(const json& j, LolClashPlayerNotification& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.dismissible = j.at("dismissible").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
  } 
  enum class LolClashRosterNotifyReason { /**/ 
    BUYBACK_e = 7, /**/ 
    BUYBACK_READY_e = 6, /**/ 
    BUYBACK_UNREADY_e = 5, /**/ 
    BYE_AUTO_WIN_e = 8, /**/ 
    CHANGE_POSITION_e = 9, /**/ 
    GAME_COMPLETED_e = 15, /**/ 
    GAME_STARTED_e = 16, /**/ 
    GAME_STARTED_ERROR_e = 17, /**/ 
    LOSER_ROUND_COMPLETE_e = 19, /**/ 
    PHASE_CHECKIN_e = 14, /**/ 
    PHASE_READY_e = 13, /**/ 
    PHASE_UNREADY_e = 12, /**/ 
    QUEUE_DODGE_e = 18, /**/ 
    REGISTERED_e = 10, /**/ 
    RESTRICTION_AUTO_WIN_e = 11, /**/ 
    ROSTER_ACCEPT_TICKET_e = 2, /**/ 
    ROSTER_DECLINE_TICKET_e = 3, /**/ 
    ROSTER_OFFER_TICKET_e = 1, /**/ 
    ROSTER_REVOKED_TICKET_e = 4, /**/ 
    ROSTER_SET_TICKET_e = 0, /**/ 
    SUB_ACCEPT_e = 21, /**/ 
    SUB_ACCEPTSUGGEST_e = 25, /**/ 
    SUB_DECLINE_e = 22, /**/ 
    SUB_DECLINESUGGEST_e = 26, /**/ 
    SUB_INVITE_e = 20, /**/ 
    SUB_RECLAIM_e = 27, /**/ 
    SUB_REVOKE_e = 23, /**/ 
    SUB_SUGGEST_e = 24, /**/ 
    VOTE_WITHDRAW_DISMISS_e = 29, /**/ 
    VOTE_WITHDRAW_UPDATE_e = 28, /**/ 
    WINNER_ROUND_COMPLETE_e = 31, /**/ 
    WITHDRAW_e = 30, /**/ 
  };
  static void to_json(json& j, const LolClashRosterNotifyReason& v) {
    switch(v) { 
    case LolClashRosterNotifyReason::BUYBACK_e:
      j = "BUYBACK";
    break;
    case LolClashRosterNotifyReason::BUYBACK_READY_e:
      j = "BUYBACK_READY";
    break;
    case LolClashRosterNotifyReason::BUYBACK_UNREADY_e:
      j = "BUYBACK_UNREADY";
    break;
    case LolClashRosterNotifyReason::BYE_AUTO_WIN_e:
      j = "BYE_AUTO_WIN";
    break;
    case LolClashRosterNotifyReason::CHANGE_POSITION_e:
      j = "CHANGE_POSITION";
    break;
    case LolClashRosterNotifyReason::GAME_COMPLETED_e:
      j = "GAME_COMPLETED";
    break;
    case LolClashRosterNotifyReason::GAME_STARTED_e:
      j = "GAME_STARTED";
    break;
    case LolClashRosterNotifyReason::GAME_STARTED_ERROR_e:
      j = "GAME_STARTED_ERROR";
    break;
    case LolClashRosterNotifyReason::LOSER_ROUND_COMPLETE_e:
      j = "LOSER_ROUND_COMPLETE";
    break;
    case LolClashRosterNotifyReason::PHASE_CHECKIN_e:
      j = "PHASE_CHECKIN";
    break;
    case LolClashRosterNotifyReason::PHASE_READY_e:
      j = "PHASE_READY";
    break;
    case LolClashRosterNotifyReason::PHASE_UNREADY_e:
      j = "PHASE_UNREADY";
    break;
    case LolClashRosterNotifyReason::QUEUE_DODGE_e:
      j = "QUEUE_DODGE";
    break;
    case LolClashRosterNotifyReason::REGISTERED_e:
      j = "REGISTERED";
    break;
    case LolClashRosterNotifyReason::RESTRICTION_AUTO_WIN_e:
      j = "RESTRICTION_AUTO_WIN";
    break;
    case LolClashRosterNotifyReason::ROSTER_ACCEPT_TICKET_e:
      j = "ROSTER_ACCEPT_TICKET";
    break;
    case LolClashRosterNotifyReason::ROSTER_DECLINE_TICKET_e:
      j = "ROSTER_DECLINE_TICKET";
    break;
    case LolClashRosterNotifyReason::ROSTER_OFFER_TICKET_e:
      j = "ROSTER_OFFER_TICKET";
    break;
    case LolClashRosterNotifyReason::ROSTER_REVOKED_TICKET_e:
      j = "ROSTER_REVOKED_TICKET";
    break;
    case LolClashRosterNotifyReason::ROSTER_SET_TICKET_e:
      j = "ROSTER_SET_TICKET";
    break;
    case LolClashRosterNotifyReason::SUB_ACCEPT_e:
      j = "SUB_ACCEPT";
    break;
    case LolClashRosterNotifyReason::SUB_ACCEPTSUGGEST_e:
      j = "SUB_ACCEPTSUGGEST";
    break;
    case LolClashRosterNotifyReason::SUB_DECLINE_e:
      j = "SUB_DECLINE";
    break;
    case LolClashRosterNotifyReason::SUB_DECLINESUGGEST_e:
      j = "SUB_DECLINESUGGEST";
    break;
    case LolClashRosterNotifyReason::SUB_INVITE_e:
      j = "SUB_INVITE";
    break;
    case LolClashRosterNotifyReason::SUB_RECLAIM_e:
      j = "SUB_RECLAIM";
    break;
    case LolClashRosterNotifyReason::SUB_REVOKE_e:
      j = "SUB_REVOKE";
    break;
    case LolClashRosterNotifyReason::SUB_SUGGEST_e:
      j = "SUB_SUGGEST";
    break;
    case LolClashRosterNotifyReason::VOTE_WITHDRAW_DISMISS_e:
      j = "VOTE_WITHDRAW_DISMISS";
    break;
    case LolClashRosterNotifyReason::VOTE_WITHDRAW_UPDATE_e:
      j = "VOTE_WITHDRAW_UPDATE";
    break;
    case LolClashRosterNotifyReason::WINNER_ROUND_COMPLETE_e:
      j = "WINNER_ROUND_COMPLETE";
    break;
    case LolClashRosterNotifyReason::WITHDRAW_e:
      j = "WITHDRAW";
    break;
    };
  }
  static void from_json(const json& j, LolClashRosterNotifyReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "BUYBACK") {
      v = LolClashRosterNotifyReason::BUYBACK_e;
      return;
    } 
    if(s == "BUYBACK_READY") {
      v = LolClashRosterNotifyReason::BUYBACK_READY_e;
      return;
    } 
    if(s == "BUYBACK_UNREADY") {
      v = LolClashRosterNotifyReason::BUYBACK_UNREADY_e;
      return;
    } 
    if(s == "BYE_AUTO_WIN") {
      v = LolClashRosterNotifyReason::BYE_AUTO_WIN_e;
      return;
    } 
    if(s == "CHANGE_POSITION") {
      v = LolClashRosterNotifyReason::CHANGE_POSITION_e;
      return;
    } 
    if(s == "GAME_COMPLETED") {
      v = LolClashRosterNotifyReason::GAME_COMPLETED_e;
      return;
    } 
    if(s == "GAME_STARTED") {
      v = LolClashRosterNotifyReason::GAME_STARTED_e;
      return;
    } 
    if(s == "GAME_STARTED_ERROR") {
      v = LolClashRosterNotifyReason::GAME_STARTED_ERROR_e;
      return;
    } 
    if(s == "LOSER_ROUND_COMPLETE") {
      v = LolClashRosterNotifyReason::LOSER_ROUND_COMPLETE_e;
      return;
    } 
    if(s == "PHASE_CHECKIN") {
      v = LolClashRosterNotifyReason::PHASE_CHECKIN_e;
      return;
    } 
    if(s == "PHASE_READY") {
      v = LolClashRosterNotifyReason::PHASE_READY_e;
      return;
    } 
    if(s == "PHASE_UNREADY") {
      v = LolClashRosterNotifyReason::PHASE_UNREADY_e;
      return;
    } 
    if(s == "QUEUE_DODGE") {
      v = LolClashRosterNotifyReason::QUEUE_DODGE_e;
      return;
    } 
    if(s == "REGISTERED") {
      v = LolClashRosterNotifyReason::REGISTERED_e;
      return;
    } 
    if(s == "RESTRICTION_AUTO_WIN") {
      v = LolClashRosterNotifyReason::RESTRICTION_AUTO_WIN_e;
      return;
    } 
    if(s == "ROSTER_ACCEPT_TICKET") {
      v = LolClashRosterNotifyReason::ROSTER_ACCEPT_TICKET_e;
      return;
    } 
    if(s == "ROSTER_DECLINE_TICKET") {
      v = LolClashRosterNotifyReason::ROSTER_DECLINE_TICKET_e;
      return;
    } 
    if(s == "ROSTER_OFFER_TICKET") {
      v = LolClashRosterNotifyReason::ROSTER_OFFER_TICKET_e;
      return;
    } 
    if(s == "ROSTER_REVOKED_TICKET") {
      v = LolClashRosterNotifyReason::ROSTER_REVOKED_TICKET_e;
      return;
    } 
    if(s == "ROSTER_SET_TICKET") {
      v = LolClashRosterNotifyReason::ROSTER_SET_TICKET_e;
      return;
    } 
    if(s == "SUB_ACCEPT") {
      v = LolClashRosterNotifyReason::SUB_ACCEPT_e;
      return;
    } 
    if(s == "SUB_ACCEPTSUGGEST") {
      v = LolClashRosterNotifyReason::SUB_ACCEPTSUGGEST_e;
      return;
    } 
    if(s == "SUB_DECLINE") {
      v = LolClashRosterNotifyReason::SUB_DECLINE_e;
      return;
    } 
    if(s == "SUB_DECLINESUGGEST") {
      v = LolClashRosterNotifyReason::SUB_DECLINESUGGEST_e;
      return;
    } 
    if(s == "SUB_INVITE") {
      v = LolClashRosterNotifyReason::SUB_INVITE_e;
      return;
    } 
    if(s == "SUB_RECLAIM") {
      v = LolClashRosterNotifyReason::SUB_RECLAIM_e;
      return;
    } 
    if(s == "SUB_REVOKE") {
      v = LolClashRosterNotifyReason::SUB_REVOKE_e;
      return;
    } 
    if(s == "SUB_SUGGEST") {
      v = LolClashRosterNotifyReason::SUB_SUGGEST_e;
      return;
    } 
    if(s == "VOTE_WITHDRAW_DISMISS") {
      v = LolClashRosterNotifyReason::VOTE_WITHDRAW_DISMISS_e;
      return;
    } 
    if(s == "VOTE_WITHDRAW_UPDATE") {
      v = LolClashRosterNotifyReason::VOTE_WITHDRAW_UPDATE_e;
      return;
    } 
    if(s == "WINNER_ROUND_COMPLETE") {
      v = LolClashRosterNotifyReason::WINNER_ROUND_COMPLETE_e;
      return;
    } 
    if(s == "WITHDRAW") {
      v = LolClashRosterNotifyReason::WITHDRAW_e;
      return;
    } 
  } 
  struct LolClashPlayerNotificationData { /**/ 
    uint64_t sourceSummonerId;/**/
    uint64_t targetSummonerId;/**/
    LolClashRosterNotifyReason rosterNotifyReason;/**/
    LolClashPlayerNotification notification;/**/
    LolClashNotifyReason notifyReason;/**/
  };
  static void to_json(json& j, const LolClashPlayerNotificationData& v) { 
    j["sourceSummonerId"] = v.sourceSummonerId;
    j["targetSummonerId"] = v.targetSummonerId;
    j["rosterNotifyReason"] = v.rosterNotifyReason;
    j["notification"] = v.notification;
    j["notifyReason"] = v.notifyReason;
  }
  static void from_json(const json& j, LolClashPlayerNotificationData& v) { 
    v.sourceSummonerId = j.at("sourceSummonerId").get<uint64_t>(); 
    v.targetSummonerId = j.at("targetSummonerId").get<uint64_t>(); 
    v.rosterNotifyReason = j.at("rosterNotifyReason").get<LolClashRosterNotifyReason>(); 
    v.notification = j.at("notification").get<LolClashPlayerNotification>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashNotifyReason>(); 
  } 
  struct LolClashThemeVp { /**/ 
    int32_t themeId;/**/
    int32_t vp;/**/
  };
  static void to_json(json& j, const LolClashThemeVp& v) { 
    j["themeId"] = v.themeId;
    j["vp"] = v.vp;
  }
  static void from_json(const json& j, LolClashThemeVp& v) { 
    v.themeId = j.at("themeId").get<int32_t>(); 
    v.vp = j.at("vp").get<int32_t>(); 
  } 
  struct LolClashPlayerRewards { /**/ 
    std::vector<LolClashThemeVp> themeVp;/**/
    int32_t seasonVp;/**/
  };
  static void to_json(json& j, const LolClashPlayerRewards& v) { 
    j["themeVp"] = v.themeVp;
    j["seasonVp"] = v.seasonVp;
  }
  static void from_json(const json& j, LolClashPlayerRewards& v) { 
    v.themeVp = j.at("themeVp").get<std::vector<LolClashThemeVp>>(); 
    v.seasonVp = j.at("seasonVp").get<int32_t>(); 
  } 
  struct LolClashPlayerTournamentData { /**/ 
    LolClashPlayerState state;/**/
    std::string rosterId;/**/
    int64_t bracketId;/**/
  };
  static void to_json(json& j, const LolClashPlayerTournamentData& v) { 
    j["state"] = v.state;
    j["rosterId"] = v.rosterId;
    j["bracketId"] = v.bracketId;
  }
  static void from_json(const json& j, LolClashPlayerTournamentData& v) { 
    v.state = j.at("state").get<LolClashPlayerState>(); 
    v.rosterId = j.at("rosterId").get<std::string>(); 
    v.bracketId = j.at("bracketId").get<int64_t>(); 
  } 
  enum class LolClashPresenceState { /**/ 
    LOCKED_IN_e = 1, /**/ 
    NONE_e = 0, /**/ 
    SCOUTING_e = 2, /**/ 
  };
  static void to_json(json& j, const LolClashPresenceState& v) {
    switch(v) { 
    case LolClashPresenceState::LOCKED_IN_e:
      j = "LOCKED_IN";
    break;
    case LolClashPresenceState::NONE_e:
      j = "NONE";
    break;
    case LolClashPresenceState::SCOUTING_e:
      j = "SCOUTING";
    break;
    };
  }
  static void from_json(const json& j, LolClashPresenceState& v) {
    auto s = j.get<std::string>(); 
    if(s == "LOCKED_IN") {
      v = LolClashPresenceState::LOCKED_IN_e;
      return;
    } 
    if(s == "NONE") {
      v = LolClashPresenceState::NONE_e;
      return;
    } 
    if(s == "SCOUTING") {
      v = LolClashPresenceState::SCOUTING_e;
      return;
    } 
  } 
  struct LolClashPlaymodeRestrictedInfo { /**/ 
    LolClashPresenceState presenceState;/**/
    bool isRestricted;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashPlaymodeRestrictedInfo& v) { 
    j["presenceState"] = v.presenceState;
    j["isRestricted"] = v.isRestricted;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashPlaymodeRestrictedInfo& v) { 
    v.presenceState = j.at("presenceState").get<LolClashPresenceState>(); 
    v.isRestricted = j.at("isRestricted").get<bool>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashQueueReward { /**/ 
    bool isIpEnabled;/**/
    std::vector<int32_t> partySizeIpRewards;/**/
    bool isXpEnabled;/**/
    bool isChampionPointsEnabled;/**/
  };
  static void to_json(json& j, const LolClashQueueReward& v) { 
    j["isIpEnabled"] = v.isIpEnabled;
    j["partySizeIpRewards"] = v.partySizeIpRewards;
    j["isXpEnabled"] = v.isXpEnabled;
    j["isChampionPointsEnabled"] = v.isChampionPointsEnabled;
  }
  static void from_json(const json& j, LolClashQueueReward& v) { 
    v.isIpEnabled = j.at("isIpEnabled").get<bool>(); 
    v.partySizeIpRewards = j.at("partySizeIpRewards").get<std::vector<int32_t>>(); 
    v.isXpEnabled = j.at("isXpEnabled").get<bool>(); 
    v.isChampionPointsEnabled = j.at("isChampionPointsEnabled").get<bool>(); 
  } 
  enum class LolClashQueueGameCategory { /**/ 
    Custom_e = 1, /**/ 
    None_e = 0, /**/ 
    PvP_e = 2, /**/ 
    VersusAi_e = 3, /**/ 
  };
  static void to_json(json& j, const LolClashQueueGameCategory& v) {
    switch(v) { 
    case LolClashQueueGameCategory::Custom_e:
      j = "Custom";
    break;
    case LolClashQueueGameCategory::None_e:
      j = "None";
    break;
    case LolClashQueueGameCategory::PvP_e:
      j = "PvP";
    break;
    case LolClashQueueGameCategory::VersusAi_e:
      j = "VersusAi";
    break;
    };
  }
  static void from_json(const json& j, LolClashQueueGameCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "Custom") {
      v = LolClashQueueGameCategory::Custom_e;
      return;
    } 
    if(s == "None") {
      v = LolClashQueueGameCategory::None_e;
      return;
    } 
    if(s == "PvP") {
      v = LolClashQueueGameCategory::PvP_e;
      return;
    } 
    if(s == "VersusAi") {
      v = LolClashQueueGameCategory::VersusAi_e;
      return;
    } 
  } 
  enum class LolClashQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolClashQueueAvailability& v) {
    switch(v) { 
    case LolClashQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolClashQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolClashQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolClashQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolClashQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolClashQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolClashQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  struct LolClashQueueGameTypeConfig { /**/ 
    int32_t banTimerDuration;/**/
    bool duplicatePick;/**/
    std::string pickMode;/**/
    bool deathMatch;/**/
    bool advancedLearningQuests;/**/
    std::string name;/**/
    bool learningQuests;/**/
    int32_t mainPickTimerDuration;/**/
    bool onboardCoopBeginner;/**/
    bool doNotRemove;/**/
    int32_t maxAllowableBans;/**/
    int64_t id;/**/
    bool reroll;/**/
    std::string banMode;/**/
    bool crossTeamChampionPool;/**/
    bool allowTrades;/**/
    int32_t postPickTimerDuration;/**/
    bool teamChampionPool;/**/
    bool exclusivePick;/**/
    bool battleBoost;/**/
  };
  static void to_json(json& j, const LolClashQueueGameTypeConfig& v) { 
    j["banTimerDuration"] = v.banTimerDuration;
    j["duplicatePick"] = v.duplicatePick;
    j["pickMode"] = v.pickMode;
    j["deathMatch"] = v.deathMatch;
    j["advancedLearningQuests"] = v.advancedLearningQuests;
    j["name"] = v.name;
    j["learningQuests"] = v.learningQuests;
    j["mainPickTimerDuration"] = v.mainPickTimerDuration;
    j["onboardCoopBeginner"] = v.onboardCoopBeginner;
    j["doNotRemove"] = v.doNotRemove;
    j["maxAllowableBans"] = v.maxAllowableBans;
    j["id"] = v.id;
    j["reroll"] = v.reroll;
    j["banMode"] = v.banMode;
    j["crossTeamChampionPool"] = v.crossTeamChampionPool;
    j["allowTrades"] = v.allowTrades;
    j["postPickTimerDuration"] = v.postPickTimerDuration;
    j["teamChampionPool"] = v.teamChampionPool;
    j["exclusivePick"] = v.exclusivePick;
    j["battleBoost"] = v.battleBoost;
  }
  static void from_json(const json& j, LolClashQueueGameTypeConfig& v) { 
    v.banTimerDuration = j.at("banTimerDuration").get<int32_t>(); 
    v.duplicatePick = j.at("duplicatePick").get<bool>(); 
    v.pickMode = j.at("pickMode").get<std::string>(); 
    v.deathMatch = j.at("deathMatch").get<bool>(); 
    v.advancedLearningQuests = j.at("advancedLearningQuests").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
    v.learningQuests = j.at("learningQuests").get<bool>(); 
    v.mainPickTimerDuration = j.at("mainPickTimerDuration").get<int32_t>(); 
    v.onboardCoopBeginner = j.at("onboardCoopBeginner").get<bool>(); 
    v.doNotRemove = j.at("doNotRemove").get<bool>(); 
    v.maxAllowableBans = j.at("maxAllowableBans").get<int32_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.reroll = j.at("reroll").get<bool>(); 
    v.banMode = j.at("banMode").get<std::string>(); 
    v.crossTeamChampionPool = j.at("crossTeamChampionPool").get<bool>(); 
    v.allowTrades = j.at("allowTrades").get<bool>(); 
    v.postPickTimerDuration = j.at("postPickTimerDuration").get<int32_t>(); 
    v.teamChampionPool = j.at("teamChampionPool").get<bool>(); 
    v.exclusivePick = j.at("exclusivePick").get<bool>(); 
    v.battleBoost = j.at("battleBoost").get<bool>(); 
  } 
  struct LolClashQueue { /**/ 
    int32_t maximumParticipantListSize;/**/
    std::string shortName;/**/
    uint32_t minLevel;/**/
    int32_t id;/**/
    std::string name;/**/
    bool areFreeChampionsAllowed;/**/
    int32_t numPlayersPerTeam;/**/
    int32_t minimumParticipantListSize;/**/
    LolClashQueueReward queueRewards;/**/
    bool isTeamOnly;/**/
    int32_t mapId;/**/
    bool isRanked;/**/
    std::string gameMutator;/**/
    std::string detailedDescription;/**/
    bool isTeamBuilderManaged;/**/
    std::string description;/**/
    bool spectatorEnabled;/**/
    uint32_t maxLevel;/**/
    LolClashQueueGameCategory category;/**/
    LolClashQueueAvailability queueAvailability;/**/
    uint32_t maxSummonerLevelForFirstWinOfTheDay;/**/
    std::string type;/**/
    std::string gameMode;/**/
    LolClashQueueGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolClashQueue& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["shortName"] = v.shortName;
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
    j["name"] = v.name;
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["queueRewards"] = v.queueRewards;
    j["isTeamOnly"] = v.isTeamOnly;
    j["mapId"] = v.mapId;
    j["isRanked"] = v.isRanked;
    j["gameMutator"] = v.gameMutator;
    j["detailedDescription"] = v.detailedDescription;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["description"] = v.description;
    j["spectatorEnabled"] = v.spectatorEnabled;
    j["maxLevel"] = v.maxLevel;
    j["category"] = v.category;
    j["queueAvailability"] = v.queueAvailability;
    j["maxSummonerLevelForFirstWinOfTheDay"] = v.maxSummonerLevelForFirstWinOfTheDay;
    j["type"] = v.type;
    j["gameMode"] = v.gameMode;
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolClashQueue& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<int32_t>(); 
    v.queueRewards = j.at("queueRewards").get<LolClashQueueReward>(); 
    v.isTeamOnly = j.at("isTeamOnly").get<bool>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.isRanked = j.at("isRanked").get<bool>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.detailedDescription = j.at("detailedDescription").get<std::string>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.spectatorEnabled = j.at("spectatorEnabled").get<bool>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.category = j.at("category").get<LolClashQueueGameCategory>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolClashQueueAvailability>(); 
    v.maxSummonerLevelForFirstWinOfTheDay = j.at("maxSummonerLevelForFirstWinOfTheDay").get<uint32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolClashQueueGameTypeConfig>(); 
  } 
  struct LolClashRMSMessage { /**/ 
    int64_t timestamp;/**/
    std::string payload;/**/
  };
  static void to_json(json& j, const LolClashRMSMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["payload"] = v.payload;
  }
  static void from_json(const json& j, LolClashRMSMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
  } 
  struct LolClashRankedScoutingTopChampion { /**/ 
    LolClashKdaClassification kdaClassification;/**/
    std::string kda;/**/
    int32_t rank;/**/
    int32_t winCount;/**/
    int32_t winRate;/**/
    int32_t gameCount;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolClashRankedScoutingTopChampion& v) { 
    j["kdaClassification"] = v.kdaClassification;
    j["kda"] = v.kda;
    j["rank"] = v.rank;
    j["winCount"] = v.winCount;
    j["winRate"] = v.winRate;
    j["gameCount"] = v.gameCount;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolClashRankedScoutingTopChampion& v) { 
    v.kdaClassification = j.at("kdaClassification").get<LolClashKdaClassification>(); 
    v.kda = j.at("kda").get<std::string>(); 
    v.rank = j.at("rank").get<int32_t>(); 
    v.winCount = j.at("winCount").get<int32_t>(); 
    v.winRate = j.at("winRate").get<int32_t>(); 
    v.gameCount = j.at("gameCount").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolClashRankedScoutingMember { /**/ 
    uint64_t playerId;/**/
    std::vector<LolClashRankedScoutingTopChampion> championScoutingData;/**/
  };
  static void to_json(json& j, const LolClashRankedScoutingMember& v) { 
    j["playerId"] = v.playerId;
    j["championScoutingData"] = v.championScoutingData;
  }
  static void from_json(const json& j, LolClashRankedScoutingMember& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.championScoutingData = j.at("championScoutingData").get<std::vector<LolClashRankedScoutingTopChampion>>(); 
  } 
  enum class SubState { /**/ 
    DECLINED_e = 2, /**/ 
    FORCED_NOT_READY_e = 5, /**/ 
    NOT_READY_e = 4, /**/ 
    PENDING_e = 1, /**/ 
    READY_e = 6, /**/ 
    REVOKED_e = 3, /**/ 
    SUGGESTED_e = 0, /**/ 
  };
  static void to_json(json& j, const SubState& v) {
    switch(v) { 
    case SubState::DECLINED_e:
      j = "DECLINED";
    break;
    case SubState::FORCED_NOT_READY_e:
      j = "FORCED_NOT_READY";
    break;
    case SubState::NOT_READY_e:
      j = "NOT_READY";
    break;
    case SubState::PENDING_e:
      j = "PENDING";
    break;
    case SubState::READY_e:
      j = "READY";
    break;
    case SubState::REVOKED_e:
      j = "REVOKED";
    break;
    case SubState::SUGGESTED_e:
      j = "SUGGESTED";
    break;
    };
  }
  static void from_json(const json& j, SubState& v) {
    auto s = j.get<std::string>(); 
    if(s == "DECLINED") {
      v = SubState::DECLINED_e;
      return;
    } 
    if(s == "FORCED_NOT_READY") {
      v = SubState::FORCED_NOT_READY_e;
      return;
    } 
    if(s == "NOT_READY") {
      v = SubState::NOT_READY_e;
      return;
    } 
    if(s == "PENDING") {
      v = SubState::PENDING_e;
      return;
    } 
    if(s == "READY") {
      v = SubState::READY_e;
      return;
    } 
    if(s == "REVOKED") {
      v = SubState::REVOKED_e;
      return;
    } 
    if(s == "SUGGESTED") {
      v = SubState::SUGGESTED_e;
      return;
    } 
  } 
  struct PhaseRosterSubDTO { /**/ 
    uint64_t playerId;/**/
    SubState subState;/**/
    int32_t pay;/**/
    uint64_t replacedPlayerId;/**/
    Position position;/**/
    int32_t bet;/**/
  };
  static void to_json(json& j, const PhaseRosterSubDTO& v) { 
    j["playerId"] = v.playerId;
    j["subState"] = v.subState;
    j["pay"] = v.pay;
    j["replacedPlayerId"] = v.replacedPlayerId;
    j["position"] = v.position;
    j["bet"] = v.bet;
  }
  static void from_json(const json& j, PhaseRosterSubDTO& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.subState = j.at("subState").get<SubState>(); 
    v.pay = j.at("pay").get<int32_t>(); 
    v.replacedPlayerId = j.at("replacedPlayerId").get<uint64_t>(); 
    v.position = j.at("position").get<Position>(); 
    v.bet = j.at("bet").get<int32_t>(); 
  } 
  struct RosterWithdraw { /**/ 
    int64_t initVoteTime;/**/
    uint64_t initVoteMember;/**/
    int64_t lockoutTimeMs;/**/
    int64_t gameStartBufferMs;/**/
    std::vector<int64_t> voteWithdrawMembers;/**/
    std::vector<int64_t> declineWithdrawMembers;/**/
    int64_t voteTimeoutMs;/**/
  };
  static void to_json(json& j, const RosterWithdraw& v) { 
    j["initVoteTime"] = v.initVoteTime;
    j["initVoteMember"] = v.initVoteMember;
    j["lockoutTimeMs"] = v.lockoutTimeMs;
    j["gameStartBufferMs"] = v.gameStartBufferMs;
    j["voteWithdrawMembers"] = v.voteWithdrawMembers;
    j["declineWithdrawMembers"] = v.declineWithdrawMembers;
    j["voteTimeoutMs"] = v.voteTimeoutMs;
  }
  static void from_json(const json& j, RosterWithdraw& v) { 
    v.initVoteTime = j.at("initVoteTime").get<int64_t>(); 
    v.initVoteMember = j.at("initVoteMember").get<uint64_t>(); 
    v.lockoutTimeMs = j.at("lockoutTimeMs").get<int64_t>(); 
    v.gameStartBufferMs = j.at("gameStartBufferMs").get<int64_t>(); 
    v.voteWithdrawMembers = j.at("voteWithdrawMembers").get<std::vector<int64_t>>(); 
    v.declineWithdrawMembers = j.at("declineWithdrawMembers").get<std::vector<int64_t>>(); 
    v.voteTimeoutMs = j.at("voteTimeoutMs").get<int64_t>(); 
  } 
  struct RosterDynamicStateDTO { /**/ 
    std::vector<PhaseRosterSubDTO> phaseRosterSubs;/**/
    int64_t rosterId;/**/
    int64_t tournamentId;/**/
    RosterWithdraw withdraw;/**/
    std::vector<BuybackMember> members;/**/
    std::vector<uint64_t> phaseCheckinStates;/**/
    std::vector<TicketOfferDTO> ticketOffers;/**/
  };
  static void to_json(json& j, const RosterDynamicStateDTO& v) { 
    j["phaseRosterSubs"] = v.phaseRosterSubs;
    j["rosterId"] = v.rosterId;
    j["tournamentId"] = v.tournamentId;
    j["withdraw"] = v.withdraw;
    j["members"] = v.members;
    j["phaseCheckinStates"] = v.phaseCheckinStates;
    j["ticketOffers"] = v.ticketOffers;
  }
  static void from_json(const json& j, RosterDynamicStateDTO& v) { 
    v.phaseRosterSubs = j.at("phaseRosterSubs").get<std::vector<PhaseRosterSubDTO>>(); 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.withdraw = j.at("withdraw").get<RosterWithdraw>(); 
    v.members = j.at("members").get<std::vector<BuybackMember>>(); 
    v.phaseCheckinStates = j.at("phaseCheckinStates").get<std::vector<uint64_t>>(); 
    v.ticketOffers = j.at("ticketOffers").get<std::vector<TicketOfferDTO>>(); 
  } 
  struct PhaseRosterDTO { /**/ 
    std::vector<PhaseRosterSubDTO> phaseRosterSubs;/**/
    int64_t phaseId;/**/
    int32_t period;/**/
    std::optional<Bracket> bracketDTO;/**/
  };
  static void to_json(json& j, const PhaseRosterDTO& v) { 
    j["phaseRosterSubs"] = v.phaseRosterSubs;
    j["phaseId"] = v.phaseId;
    j["period"] = v.period;
    j["bracketDTO"] = v.bracketDTO;
  }
  static void from_json(const json& j, PhaseRosterDTO& v) { 
    v.phaseRosterSubs = j.at("phaseRosterSubs").get<std::vector<PhaseRosterSubDTO>>(); 
    v.phaseId = j.at("phaseId").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
    v.bracketDTO = j.at("bracketDTO").get<std::optional<Bracket>>(); 
  } 
  struct RosterMemberDTO { /**/ 
    int64_t rosterId;/**/
    int64_t tournamentId;/**/
    int64_t joinTime;/**/
    int32_t currentBid;/**/
    uint64_t playerId;/**/
    Position position;/**/
  };
  static void to_json(json& j, const RosterMemberDTO& v) { 
    j["rosterId"] = v.rosterId;
    j["tournamentId"] = v.tournamentId;
    j["joinTime"] = v.joinTime;
    j["currentBid"] = v.currentBid;
    j["playerId"] = v.playerId;
    j["position"] = v.position;
  }
  static void from_json(const json& j, RosterMemberDTO& v) { 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.joinTime = j.at("joinTime").get<int64_t>(); 
    v.currentBid = j.at("currentBid").get<int32_t>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.position = j.at("position").get<Position>(); 
  } 
  struct RosterDTO { /**/ 
    int32_t logo;/**/
    std::string shortName;/**/
    int64_t id;/**/
    std::string name;/**/
    RosterDynamicStateDTO dynamicState;/**/
    int32_t wins;/**/
    int64_t tournamentId;/**/
    int32_t tier;/**/
    std::vector<PhaseRosterDTO> phases;/**/
    bool eliminated;/**/
    int32_t losses;/**/
    int32_t logoColor;/**/
    uint64_t captainId;/**/
    std::vector<RosterMemberDTO> members;/**/
  };
  static void to_json(json& j, const RosterDTO& v) { 
    j["logo"] = v.logo;
    j["shortName"] = v.shortName;
    j["id"] = v.id;
    j["name"] = v.name;
    j["dynamicState"] = v.dynamicState;
    j["wins"] = v.wins;
    j["tournamentId"] = v.tournamentId;
    j["tier"] = v.tier;
    j["phases"] = v.phases;
    j["eliminated"] = v.eliminated;
    j["losses"] = v.losses;
    j["logoColor"] = v.logoColor;
    j["captainId"] = v.captainId;
    j["members"] = v.members;
  }
  static void from_json(const json& j, RosterDTO& v) { 
    v.logo = j.at("logo").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.dynamicState = j.at("dynamicState").get<RosterDynamicStateDTO>(); 
    v.wins = j.at("wins").get<int32_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.phases = j.at("phases").get<std::vector<PhaseRosterDTO>>(); 
    v.eliminated = j.at("eliminated").get<bool>(); 
    v.losses = j.at("losses").get<int32_t>(); 
    v.logoColor = j.at("logoColor").get<int32_t>(); 
    v.captainId = j.at("captainId").get<uint64_t>(); 
    v.members = j.at("members").get<std::vector<RosterMemberDTO>>(); 
  } 
  struct LolClashRegisteredRosterNotification { /**/ 
    RosterDTO roster;/**/
    LolClashRosterNotifyReason notifyReason;/**/
  };
  static void to_json(json& j, const LolClashRegisteredRosterNotification& v) { 
    j["roster"] = v.roster;
    j["notifyReason"] = v.notifyReason;
  }
  static void from_json(const json& j, LolClashRegisteredRosterNotification& v) { 
    v.roster = j.at("roster").get<RosterDTO>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashRosterNotifyReason>(); 
  } 
  struct RewardIcon { /**/ 
    int32_t icon;/**/
    int32_t memberOwnedCount;/**/
  };
  static void to_json(json& j, const RewardIcon& v) { 
    j["icon"] = v.icon;
    j["memberOwnedCount"] = v.memberOwnedCount;
  }
  static void from_json(const json& j, RewardIcon& v) { 
    v.icon = j.at("icon").get<int32_t>(); 
    v.memberOwnedCount = j.at("memberOwnedCount").get<int32_t>(); 
  } 
  struct LolClashRosterPhaseInfo { /**/ 
    int64_t phaseId;/**/
    int32_t period;/**/
    bool isBracketComplete;/**/
  };
  static void to_json(json& j, const LolClashRosterPhaseInfo& v) { 
    j["phaseId"] = v.phaseId;
    j["period"] = v.period;
    j["isBracketComplete"] = v.isBracketComplete;
  }
  static void from_json(const json& j, LolClashRosterPhaseInfo& v) { 
    v.phaseId = j.at("phaseId").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
    v.isBracketComplete = j.at("isBracketComplete").get<bool>(); 
  } 
  struct LolClashSuggestedInvite { /**/ 
    uint64_t summonerId;/**/
    uint64_t suggesterSummonerId;/**/
  };
  static void to_json(json& j, const LolClashSuggestedInvite& v) { 
    j["summonerId"] = v.summonerId;
    j["suggesterSummonerId"] = v.suggesterSummonerId;
  }
  static void from_json(const json& j, LolClashSuggestedInvite& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.suggesterSummonerId = j.at("suggesterSummonerId").get<uint64_t>(); 
  } 
  enum class LolClashRosterMemberState { /**/ 
    FORCED_NOT_READY_e = 2, /**/ 
    NOT_READY_e = 1, /**/ 
    PENDING_e = 0, /**/ 
    READY_e = 3, /**/ 
  };
  static void to_json(json& j, const LolClashRosterMemberState& v) {
    switch(v) { 
    case LolClashRosterMemberState::FORCED_NOT_READY_e:
      j = "FORCED_NOT_READY";
    break;
    case LolClashRosterMemberState::NOT_READY_e:
      j = "NOT_READY";
    break;
    case LolClashRosterMemberState::PENDING_e:
      j = "PENDING";
    break;
    case LolClashRosterMemberState::READY_e:
      j = "READY";
    break;
    };
  }
  static void from_json(const json& j, LolClashRosterMemberState& v) {
    auto s = j.get<std::string>(); 
    if(s == "FORCED_NOT_READY") {
      v = LolClashRosterMemberState::FORCED_NOT_READY_e;
      return;
    } 
    if(s == "NOT_READY") {
      v = LolClashRosterMemberState::NOT_READY_e;
      return;
    } 
    if(s == "PENDING") {
      v = LolClashRosterMemberState::PENDING_e;
      return;
    } 
    if(s == "READY") {
      v = LolClashRosterMemberState::READY_e;
      return;
    } 
  } 
  struct LolClashRosterMember { /**/ 
    LolClashRosterMemberState state;/**/
    uint64_t summonerId;/**/
    uint64_t replacedSummonerId;/**/
    bool isSubbedOut;/**/
    LolClashBiddingData biddingData;/**/
    Position position;/**/
    bool isSubstitute;/**/
  };
  static void to_json(json& j, const LolClashRosterMember& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["replacedSummonerId"] = v.replacedSummonerId;
    j["isSubbedOut"] = v.isSubbedOut;
    j["biddingData"] = v.biddingData;
    j["position"] = v.position;
    j["isSubstitute"] = v.isSubstitute;
  }
  static void from_json(const json& j, LolClashRosterMember& v) { 
    v.state = j.at("state").get<LolClashRosterMemberState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.replacedSummonerId = j.at("replacedSummonerId").get<uint64_t>(); 
    v.isSubbedOut = j.at("isSubbedOut").get<bool>(); 
    v.biddingData = j.at("biddingData").get<LolClashBiddingData>(); 
    v.position = j.at("position").get<Position>(); 
    v.isSubstitute = j.at("isSubstitute").get<bool>(); 
  } 
  struct LolClashRoster { /**/ 
    bool isCurrentBracketComplete;/**/
    int32_t tier;/**/
    std::string shortName;/**/
    int32_t iconId;/**/
    int32_t currentBracketWins;/**/
    std::string name;/**/
    bool isRegistered;/**/
    int32_t wins;/**/
    int32_t iconColorId;/**/
    std::vector<RewardIcon> availableIcons;/**/
    std::vector<LolClashRosterPhaseInfo> phaseInfos;/**/
    bool isActiveInCurrentPhase;/**/
    int32_t losses;/**/
    bool eliminated;/**/
    int64_t tournamentId;/**/
    int32_t numCompletedPeriods;/**/
    std::vector<LolClashSuggestedInvite> suggestedInvites;/**/
    uint64_t captainSummonerId;/**/
    std::vector<LolClashRosterMember> members;/**/
    RosterWithdraw withdraw;/**/
    std::string id;/**/
  };
  static void to_json(json& j, const LolClashRoster& v) { 
    j["isCurrentBracketComplete"] = v.isCurrentBracketComplete;
    j["tier"] = v.tier;
    j["shortName"] = v.shortName;
    j["iconId"] = v.iconId;
    j["currentBracketWins"] = v.currentBracketWins;
    j["name"] = v.name;
    j["isRegistered"] = v.isRegistered;
    j["wins"] = v.wins;
    j["iconColorId"] = v.iconColorId;
    j["availableIcons"] = v.availableIcons;
    j["phaseInfos"] = v.phaseInfos;
    j["isActiveInCurrentPhase"] = v.isActiveInCurrentPhase;
    j["losses"] = v.losses;
    j["eliminated"] = v.eliminated;
    j["tournamentId"] = v.tournamentId;
    j["numCompletedPeriods"] = v.numCompletedPeriods;
    j["suggestedInvites"] = v.suggestedInvites;
    j["captainSummonerId"] = v.captainSummonerId;
    j["members"] = v.members;
    j["withdraw"] = v.withdraw;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolClashRoster& v) { 
    v.isCurrentBracketComplete = j.at("isCurrentBracketComplete").get<bool>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
    v.currentBracketWins = j.at("currentBracketWins").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.isRegistered = j.at("isRegistered").get<bool>(); 
    v.wins = j.at("wins").get<int32_t>(); 
    v.iconColorId = j.at("iconColorId").get<int32_t>(); 
    v.availableIcons = j.at("availableIcons").get<std::vector<RewardIcon>>(); 
    v.phaseInfos = j.at("phaseInfos").get<std::vector<LolClashRosterPhaseInfo>>(); 
    v.isActiveInCurrentPhase = j.at("isActiveInCurrentPhase").get<bool>(); 
    v.losses = j.at("losses").get<int32_t>(); 
    v.eliminated = j.at("eliminated").get<bool>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.numCompletedPeriods = j.at("numCompletedPeriods").get<int32_t>(); 
    v.suggestedInvites = j.at("suggestedInvites").get<std::vector<LolClashSuggestedInvite>>(); 
    v.captainSummonerId = j.at("captainSummonerId").get<uint64_t>(); 
    v.members = j.at("members").get<std::vector<LolClashRosterMember>>(); 
    v.withdraw = j.at("withdraw").get<RosterWithdraw>(); 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct LolClashRosterDetails { /**/ 
    std::string shortName;/**/
    int32_t iconColorId;/**/
    int32_t iconId;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolClashRosterDetails& v) { 
    j["shortName"] = v.shortName;
    j["iconColorId"] = v.iconColorId;
    j["iconId"] = v.iconId;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolClashRosterDetails& v) { 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.iconColorId = j.at("iconColorId").get<int32_t>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolClashRosterDynamicStateNotification { /**/ 
    LolClashRosterNotifyReason notifyReason;/**/
    uint64_t sourcePlayerId;/**/
    RosterDynamicStateDTO rosterDynamicState;/**/
  };
  static void to_json(json& j, const LolClashRosterDynamicStateNotification& v) { 
    j["notifyReason"] = v.notifyReason;
    j["sourcePlayerId"] = v.sourcePlayerId;
    j["rosterDynamicState"] = v.rosterDynamicState;
  }
  static void from_json(const json& j, LolClashRosterDynamicStateNotification& v) { 
    v.notifyReason = j.at("notifyReason").get<LolClashRosterNotifyReason>(); 
    v.sourcePlayerId = j.at("sourcePlayerId").get<uint64_t>(); 
    v.rosterDynamicState = j.at("rosterDynamicState").get<RosterDynamicStateDTO>(); 
  } 
  struct LolClashRosterMatchAggregatedStats { /**/ 
    int32_t opponentIconColorId;/**/
    int64_t durationMs;/**/
    std::string opponentShortName;/**/
    bool loserBracket;/**/
    int32_t round;/**/
    int64_t gameId;/**/
    std::map<std::string, int32_t> playerChampionIds;/**/
    int32_t opponentIconId;/**/
    bool win;/**/
  };
  static void to_json(json& j, const LolClashRosterMatchAggregatedStats& v) { 
    j["opponentIconColorId"] = v.opponentIconColorId;
    j["durationMs"] = v.durationMs;
    j["opponentShortName"] = v.opponentShortName;
    j["loserBracket"] = v.loserBracket;
    j["round"] = v.round;
    j["gameId"] = v.gameId;
    j["playerChampionIds"] = v.playerChampionIds;
    j["opponentIconId"] = v.opponentIconId;
    j["win"] = v.win;
  }
  static void from_json(const json& j, LolClashRosterMatchAggregatedStats& v) { 
    v.opponentIconColorId = j.at("opponentIconColorId").get<int32_t>(); 
    v.durationMs = j.at("durationMs").get<int64_t>(); 
    v.opponentShortName = j.at("opponentShortName").get<std::string>(); 
    v.loserBracket = j.at("loserBracket").get<bool>(); 
    v.round = j.at("round").get<int32_t>(); 
    v.gameId = j.at("gameId").get<int64_t>(); 
    v.playerChampionIds = j.at("playerChampionIds").get<std::map<std::string, int32_t>>(); 
    v.opponentIconId = j.at("opponentIconId").get<int32_t>(); 
    v.win = j.at("win").get<bool>(); 
  } 
  struct LolClashRosterPeriodAggregatedStats { /**/ 
    int32_t bracketSize;/**/
    std::vector<LolClashRosterMatchAggregatedStats> matchStats;/**/
    int64_t time;/**/
    int32_t period;/**/
  };
  static void to_json(json& j, const LolClashRosterPeriodAggregatedStats& v) { 
    j["bracketSize"] = v.bracketSize;
    j["matchStats"] = v.matchStats;
    j["time"] = v.time;
    j["period"] = v.period;
  }
  static void from_json(const json& j, LolClashRosterPeriodAggregatedStats& v) { 
    v.bracketSize = j.at("bracketSize").get<int32_t>(); 
    v.matchStats = j.at("matchStats").get<std::vector<LolClashRosterMatchAggregatedStats>>(); 
    v.time = j.at("time").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
  } 
  struct LolClashRosterPlayerAggregatedStats { /**/ 
    std::map<std::string, int32_t> rawStatsMax;/**/
    std::map<std::string, int32_t> rawStatsSum;/**/
  };
  static void to_json(json& j, const LolClashRosterPlayerAggregatedStats& v) { 
    j["rawStatsMax"] = v.rawStatsMax;
    j["rawStatsSum"] = v.rawStatsSum;
  }
  static void from_json(const json& j, LolClashRosterPlayerAggregatedStats& v) { 
    v.rawStatsMax = j.at("rawStatsMax").get<std::map<std::string, int32_t>>(); 
    v.rawStatsSum = j.at("rawStatsSum").get<std::map<std::string, int32_t>>(); 
  } 
  struct PlayerDTO { /**/ 
    int32_t tickets;/**/
  };
  static void to_json(json& j, const PlayerDTO& v) { 
    j["tickets"] = v.tickets;
  }
  static void from_json(const json& j, PlayerDTO& v) { 
    v.tickets = j.at("tickets").get<int32_t>(); 
  } 
  struct LolClashRosterPlayerNotification { /**/ 
    uint64_t sourcePlayerId;/**/
    PlayerDTO player;/**/
    RosterDTO roster;/**/
    LolClashRosterNotifyReason notifyReason;/**/
  };
  static void to_json(json& j, const LolClashRosterPlayerNotification& v) { 
    j["sourcePlayerId"] = v.sourcePlayerId;
    j["player"] = v.player;
    j["roster"] = v.roster;
    j["notifyReason"] = v.notifyReason;
  }
  static void from_json(const json& j, LolClashRosterPlayerNotification& v) { 
    v.sourcePlayerId = j.at("sourcePlayerId").get<uint64_t>(); 
    v.player = j.at("player").get<PlayerDTO>(); 
    v.roster = j.at("roster").get<RosterDTO>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashRosterNotifyReason>(); 
  } 
  struct LolClashRosterStats { /**/ 
    std::map<std::string, LolClashRosterPlayerAggregatedStats> playerStats;/**/
    int64_t rosterId;/**/
    int32_t tournamentThemeId;/**/
    std::string rosterShortName;/**/
    std::vector<LolClashRosterPeriodAggregatedStats> periodStats;/**/
    int32_t rosterIconId;/**/
    int32_t tournamentPeriods;/**/
    std::string tournamentNameLocKey;/**/
    int32_t rosterIconColorId;/**/
    int32_t tier;/**/
    std::string rosterName;/**/
  };
  static void to_json(json& j, const LolClashRosterStats& v) { 
    j["playerStats"] = v.playerStats;
    j["rosterId"] = v.rosterId;
    j["tournamentThemeId"] = v.tournamentThemeId;
    j["rosterShortName"] = v.rosterShortName;
    j["periodStats"] = v.periodStats;
    j["rosterIconId"] = v.rosterIconId;
    j["tournamentPeriods"] = v.tournamentPeriods;
    j["tournamentNameLocKey"] = v.tournamentNameLocKey;
    j["rosterIconColorId"] = v.rosterIconColorId;
    j["tier"] = v.tier;
    j["rosterName"] = v.rosterName;
  }
  static void from_json(const json& j, LolClashRosterStats& v) { 
    v.playerStats = j.at("playerStats").get<std::map<std::string, LolClashRosterPlayerAggregatedStats>>(); 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.tournamentThemeId = j.at("tournamentThemeId").get<int32_t>(); 
    v.rosterShortName = j.at("rosterShortName").get<std::string>(); 
    v.periodStats = j.at("periodStats").get<std::vector<LolClashRosterPeriodAggregatedStats>>(); 
    v.rosterIconId = j.at("rosterIconId").get<int32_t>(); 
    v.tournamentPeriods = j.at("tournamentPeriods").get<int32_t>(); 
    v.tournamentNameLocKey = j.at("tournamentNameLocKey").get<std::string>(); 
    v.rosterIconColorId = j.at("rosterIconColorId").get<int32_t>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.rosterName = j.at("rosterName").get<std::string>(); 
  } 
  struct LolClashRosterWithdrawNotification { /**/ 
    int64_t rosterId;/**/
    LolClashRosterNotifyReason notifyReason;/**/
    uint64_t sourcePlayerId;/**/
    RosterWithdraw withdraw;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashRosterWithdrawNotification& v) { 
    j["rosterId"] = v.rosterId;
    j["notifyReason"] = v.notifyReason;
    j["sourcePlayerId"] = v.sourcePlayerId;
    j["withdraw"] = v.withdraw;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashRosterWithdrawNotification& v) { 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashRosterNotifyReason>(); 
    v.sourcePlayerId = j.at("sourcePlayerId").get<uint64_t>(); 
    v.withdraw = j.at("withdraw").get<RosterWithdraw>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashSetPositionRequest { /**/ 
    Position position;/**/
  };
  static void to_json(json& j, const LolClashSetPositionRequest& v) { 
    j["position"] = v.position;
  }
  static void from_json(const json& j, LolClashSetPositionRequest& v) { 
    v.position = j.at("position").get<Position>(); 
  } 
  struct LolClashSetTicketRequest { /**/ 
    int32_t ticketAmount;/**/
  };
  static void to_json(json& j, const LolClashSetTicketRequest& v) { 
    j["ticketAmount"] = v.ticketAmount;
  }
  static void from_json(const json& j, LolClashSetTicketRequest& v) { 
    v.ticketAmount = j.at("ticketAmount").get<int32_t>(); 
  } 
  struct LolClashTournamentPhase { /**/ 
    int64_t scoutingStartTime;/**/
    int64_t lockinStartTime;/**/
    int64_t id;/**/
    int32_t period;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashTournamentPhase& v) { 
    j["scoutingStartTime"] = v.scoutingStartTime;
    j["lockinStartTime"] = v.lockinStartTime;
    j["id"] = v.id;
    j["period"] = v.period;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashTournamentPhase& v) { 
    v.scoutingStartTime = j.at("scoutingStartTime").get<int64_t>(); 
    v.lockinStartTime = j.at("lockinStartTime").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashTournament { /**/ 
    bool allowRosterDisband;/**/
    int32_t themeId;/**/
    std::vector<int32_t> buyInOptions;/**/
    int64_t id;/**/
    int64_t scoutingDurationMs;/**/
    int64_t startTimeMs;/**/
    int32_t maxSubstitutes;/**/
    int32_t rosterSize;/**/
    std::string nameLocKey;/**/
    int32_t entryFee;/**/
    std::vector<ClashRewardConfigClient> rewardConfig;/**/
    std::vector<LolClashTournamentPhase> phases;/**/
    bool allowRosterCreation;/**/
    int64_t endTimeMs;/**/
  };
  static void to_json(json& j, const LolClashTournament& v) { 
    j["allowRosterDisband"] = v.allowRosterDisband;
    j["themeId"] = v.themeId;
    j["buyInOptions"] = v.buyInOptions;
    j["id"] = v.id;
    j["scoutingDurationMs"] = v.scoutingDurationMs;
    j["startTimeMs"] = v.startTimeMs;
    j["maxSubstitutes"] = v.maxSubstitutes;
    j["rosterSize"] = v.rosterSize;
    j["nameLocKey"] = v.nameLocKey;
    j["entryFee"] = v.entryFee;
    j["rewardConfig"] = v.rewardConfig;
    j["phases"] = v.phases;
    j["allowRosterCreation"] = v.allowRosterCreation;
    j["endTimeMs"] = v.endTimeMs;
  }
  static void from_json(const json& j, LolClashTournament& v) { 
    v.allowRosterDisband = j.at("allowRosterDisband").get<bool>(); 
    v.themeId = j.at("themeId").get<int32_t>(); 
    v.buyInOptions = j.at("buyInOptions").get<std::vector<int32_t>>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.scoutingDurationMs = j.at("scoutingDurationMs").get<int64_t>(); 
    v.startTimeMs = j.at("startTimeMs").get<int64_t>(); 
    v.maxSubstitutes = j.at("maxSubstitutes").get<int32_t>(); 
    v.rosterSize = j.at("rosterSize").get<int32_t>(); 
    v.nameLocKey = j.at("nameLocKey").get<std::string>(); 
    v.entryFee = j.at("entryFee").get<int32_t>(); 
    v.rewardConfig = j.at("rewardConfig").get<std::vector<ClashRewardConfigClient>>(); 
    v.phases = j.at("phases").get<std::vector<LolClashTournamentPhase>>(); 
    v.allowRosterCreation = j.at("allowRosterCreation").get<bool>(); 
    v.endTimeMs = j.at("endTimeMs").get<int64_t>(); 
  } 
  struct LolClashTournamentGameEnd { /**/ 
    int64_t bracketId;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashTournamentGameEnd& v) { 
    j["bracketId"] = v.bracketId;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashTournamentGameEnd& v) { 
    v.bracketId = j.at("bracketId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashTournamentGameEndNotification { /**/ 
    int64_t timestamp;/**/
    int64_t currentMatchId;/**/
    Bracket bracket;/**/
    LolClashRosterNotifyReason notifyReason;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashTournamentGameEndNotification& v) { 
    j["timestamp"] = v.timestamp;
    j["currentMatchId"] = v.currentMatchId;
    j["bracket"] = v.bracket;
    j["notifyReason"] = v.notifyReason;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashTournamentGameEndNotification& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.currentMatchId = j.at("currentMatchId").get<int64_t>(); 
    v.bracket = j.at("bracket").get<Bracket>(); 
    v.notifyReason = j.at("notifyReason").get<LolClashRosterNotifyReason>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashTournamentWinnerInfo { /**/ 
    int64_t createTime;/**/
    int64_t averageWinDuration;/**/
    int64_t rosterId;/**/
    std::string shortName;/**/
    std::vector<uint64_t> playerIds;/**/
    std::string name;/**/
    int32_t logoColor;/**/
    int32_t tier;/**/
    int32_t logo;/**/
  };
  static void to_json(json& j, const LolClashTournamentWinnerInfo& v) { 
    j["createTime"] = v.createTime;
    j["averageWinDuration"] = v.averageWinDuration;
    j["rosterId"] = v.rosterId;
    j["shortName"] = v.shortName;
    j["playerIds"] = v.playerIds;
    j["name"] = v.name;
    j["logoColor"] = v.logoColor;
    j["tier"] = v.tier;
    j["logo"] = v.logo;
  }
  static void from_json(const json& j, LolClashTournamentWinnerInfo& v) { 
    v.createTime = j.at("createTime").get<int64_t>(); 
    v.averageWinDuration = j.at("averageWinDuration").get<int64_t>(); 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.playerIds = j.at("playerIds").get<std::vector<uint64_t>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.logoColor = j.at("logoColor").get<int32_t>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.logo = j.at("logo").get<int32_t>(); 
  } 
  struct LolClashTournamentWinnerHistory { /**/ 
    std::vector<LolClashTournamentWinnerInfo> winners;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashTournamentWinnerHistory& v) { 
    j["winners"] = v.winners;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashTournamentWinnerHistory& v) { 
    v.winners = j.at("winners").get<std::vector<LolClashTournamentWinnerInfo>>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashTournamentHistoryAndWinners { /**/ 
    LolClashTournamentWinnerHistory tournamentWinners;/**/
    std::vector<LolClashTournament> tournamentHistory;/**/
  };
  static void to_json(json& j, const LolClashTournamentHistoryAndWinners& v) { 
    j["tournamentWinners"] = v.tournamentWinners;
    j["tournamentHistory"] = v.tournamentHistory;
  }
  static void from_json(const json& j, LolClashTournamentHistoryAndWinners& v) { 
    v.tournamentWinners = j.at("tournamentWinners").get<LolClashTournamentWinnerHistory>(); 
    v.tournamentHistory = j.at("tournamentHistory").get<std::vector<LolClashTournament>>(); 
  } 
  struct LolClashTournamentStateInfo { /**/ 
    LolClashTournamentState state;/**/
    int32_t numRemainingPeriods;/**/
    int64_t currentPhaseId;/**/
    int64_t nextPhaseId;/**/
    int64_t tournamentId;/**/
    int64_t nextStateChangeTime;/**/
  };
  static void to_json(json& j, const LolClashTournamentStateInfo& v) { 
    j["state"] = v.state;
    j["numRemainingPeriods"] = v.numRemainingPeriods;
    j["currentPhaseId"] = v.currentPhaseId;
    j["nextPhaseId"] = v.nextPhaseId;
    j["tournamentId"] = v.tournamentId;
    j["nextStateChangeTime"] = v.nextStateChangeTime;
  }
  static void from_json(const json& j, LolClashTournamentStateInfo& v) { 
    v.state = j.at("state").get<LolClashTournamentState>(); 
    v.numRemainingPeriods = j.at("numRemainingPeriods").get<int32_t>(); 
    v.currentPhaseId = j.at("currentPhaseId").get<int64_t>(); 
    v.nextPhaseId = j.at("nextPhaseId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
    v.nextStateChangeTime = j.at("nextStateChangeTime").get<int64_t>(); 
  } 
  struct LolClashTournamentSummary { /**/ 
    LolClashTournamentState state;/**/
    std::string rosterId;/**/
    int64_t bracketId;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const LolClashTournamentSummary& v) { 
    j["state"] = v.state;
    j["rosterId"] = v.rosterId;
    j["bracketId"] = v.bracketId;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, LolClashTournamentSummary& v) { 
    v.state = j.at("state").get<LolClashTournamentState>(); 
    v.rosterId = j.at("rosterId").get<std::string>(); 
    v.bracketId = j.at("bracketId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct LolClashUserResource { /**/ 
    std::map<std::string, std::string> lol;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolClashUserResource& v) { 
    j["lol"] = v.lol;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolClashUserResource& v) { 
    v.lol = j.at("lol").get<std::map<std::string, std::string>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolClubsPublicClubPlayer { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubPlayer& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolClubsPublicClubPlayer& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolClubsPublicClubMemberLists { /**/ 
    std::vector<LolClubsPublicClubPlayer> activeMembers;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubMemberLists& v) { 
    j["activeMembers"] = v.activeMembers;
  }
  static void from_json(const json& j, LolClubsPublicClubMemberLists& v) { 
    v.activeMembers = j.at("activeMembers").get<std::vector<LolClubsPublicClubPlayer>>(); 
  } 
  struct LolClubsPublicClubPreferences { /**/ 
    bool shareClubAffiliation;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubPreferences& v) { 
    j["shareClubAffiliation"] = v.shareClubAffiliation;
  }
  static void from_json(const json& j, LolClubsPublicClubPreferences& v) { 
    v.shareClubAffiliation = j.at("shareClubAffiliation").get<bool>(); 
  } 
  struct LolClubsPublicClubServiceTag { /**/ 
    std::string tag;/**/
    uint64_t summonerId;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubServiceTag& v) { 
    j["tag"] = v.tag;
    j["summonerId"] = v.summonerId;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolClubsPublicClubServiceTag& v) { 
    v.tag = j.at("tag").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolClubsPublicClubTag { /**/ 
    uint64_t summonerId;/**/
    std::string clubTag;/**/
    std::string clubName;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubTag& v) { 
    j["summonerId"] = v.summonerId;
    j["clubTag"] = v.clubTag;
    j["clubName"] = v.clubName;
  }
  static void from_json(const json& j, LolClubsPublicClubTag& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.clubTag = j.at("clubTag").get<std::string>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
  } 
  struct LolClubsPublicClubsPublicData { /**/ 
    LolClubsPublicClubTag tag;/**/
    uint64_t summonerId;/**/
    int32_t summonerIconId;/**/
    std::string summonerName;/**/
    std::string availability;/**/
    std::optional<std::string> lastSeenOnlineTimestamp;/**/
  };
  static void to_json(json& j, const LolClubsPublicClubsPublicData& v) { 
    j["tag"] = v.tag;
    j["summonerId"] = v.summonerId;
    j["summonerIconId"] = v.summonerIconId;
    j["summonerName"] = v.summonerName;
    j["availability"] = v.availability;
    j["lastSeenOnlineTimestamp"] = v.lastSeenOnlineTimestamp;
  }
  static void from_json(const json& j, LolClubsPublicClubsPublicData& v) { 
    v.tag = j.at("tag").get<LolClubsPublicClubTag>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerIconId = j.at("summonerIconId").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.availability = j.at("availability").get<std::string>(); 
    v.lastSeenOnlineTimestamp = j.at("lastSeenOnlineTimestamp").get<std::optional<std::string>>(); 
  } 
  struct LolClubsPublicPlayerClub { /**/ 
    std::string key;/**/
    LolClubsPublicClubMemberLists members;/**/
  };
  static void to_json(json& j, const LolClubsPublicPlayerClub& v) { 
    j["key"] = v.key;
    j["members"] = v.members;
  }
  static void from_json(const json& j, LolClubsPublicPlayerClub& v) { 
    v.key = j.at("key").get<std::string>(); 
    v.members = j.at("members").get<LolClubsPublicClubMemberLists>(); 
  } 
  struct LolClubsPublicPlayerClubMembership { /**/ 
    LolClubsPublicClubPreferences preferences;/**/
    std::vector<LolClubsPublicPlayerClub> activeClubs;/**/
    LolClubsPublicClubPlayer info;/**/
    std::string secureClubPresenceInfoString;/**/
  };
  static void to_json(json& j, const LolClubsPublicPlayerClubMembership& v) { 
    j["preferences"] = v.preferences;
    j["activeClubs"] = v.activeClubs;
    j["info"] = v.info;
    j["secureClubPresenceInfoString"] = v.secureClubPresenceInfoString;
  }
  static void from_json(const json& j, LolClubsPublicPlayerClubMembership& v) { 
    v.preferences = j.at("preferences").get<LolClubsPublicClubPreferences>(); 
    v.activeClubs = j.at("activeClubs").get<std::vector<LolClubsPublicPlayerClub>>(); 
    v.info = j.at("info").get<LolClubsPublicClubPlayer>(); 
    v.secureClubPresenceInfoString = j.at("secureClubPresenceInfoString").get<std::string>(); 
  } 
  struct LolClubsPublicSessionResource { /**/ 
    uint32_t sessionExpire;/**/
    std::string sessionState;/**/
  };
  static void to_json(json& j, const LolClubsPublicSessionResource& v) { 
    j["sessionExpire"] = v.sessionExpire;
    j["sessionState"] = v.sessionState;
  }
  static void from_json(const json& j, LolClubsPublicSessionResource& v) { 
    v.sessionExpire = j.at("sessionExpire").get<uint32_t>(); 
    v.sessionState = j.at("sessionState").get<std::string>(); 
  } 
  struct LolClubsPublicUserResource { /**/ 
    std::optional<std::string> lastSeenOnlineTimestamp;/**/
    uint64_t id;/**/
    std::string name;/**/
    std::map<std::string, std::string> lol;/**/
    int32_t icon;/**/
    std::string availability;/**/
  };
  static void to_json(json& j, const LolClubsPublicUserResource& v) { 
    j["lastSeenOnlineTimestamp"] = v.lastSeenOnlineTimestamp;
    j["id"] = v.id;
    j["name"] = v.name;
    j["lol"] = v.lol;
    j["icon"] = v.icon;
    j["availability"] = v.availability;
  }
  static void from_json(const json& j, LolClubsPublicUserResource& v) { 
    v.lastSeenOnlineTimestamp = j.at("lastSeenOnlineTimestamp").get<std::optional<std::string>>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.lol = j.at("lol").get<std::map<std::string, std::string>>(); 
    v.icon = j.at("icon").get<int32_t>(); 
    v.availability = j.at("availability").get<std::string>(); 
  } 
  struct LolCollectionsAcsChampionGames { /**/ 
    int32_t queue;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolCollectionsAcsChampionGames& v) { 
    j["queue"] = v.queue;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolCollectionsAcsChampionGames& v) { 
    v.queue = j.at("queue").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolCollectionsAcsChampionGamesCollection { /**/ 
    std::vector<LolCollectionsAcsChampionGames> champions;/**/
    uint32_t gameCount;/**/
  };
  static void to_json(json& j, const LolCollectionsAcsChampionGamesCollection& v) { 
    j["champions"] = v.champions;
    j["gameCount"] = v.gameCount;
  }
  static void from_json(const json& j, LolCollectionsAcsChampionGamesCollection& v) { 
    v.champions = j.at("champions").get<std::vector<LolCollectionsAcsChampionGames>>(); 
    v.gameCount = j.at("gameCount").get<uint32_t>(); 
  } 
  struct LolCollectionsSummonerData { /**/ 
    CollectionsLcdsSpellBookDTO spellBook;/**/
    CollectionsLcdsMasteryBookDTO masteryBook;/**/
  };
  static void to_json(json& j, const LolCollectionsSummonerData& v) { 
    j["spellBook"] = v.spellBook;
    j["masteryBook"] = v.masteryBook;
  }
  static void from_json(const json& j, LolCollectionsSummonerData& v) { 
    v.spellBook = j.at("spellBook").get<CollectionsLcdsSpellBookDTO>(); 
    v.masteryBook = j.at("masteryBook").get<CollectionsLcdsMasteryBookDTO>(); 
  } 
  struct LolCollectionsCollectionLoginDataPacket { /**/ 
    LolCollectionsSummonerData allSummonerData;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionLoginDataPacket& v) { 
    j["allSummonerData"] = v.allSummonerData;
  }
  static void from_json(const json& j, LolCollectionsCollectionLoginDataPacket& v) { 
    v.allSummonerData = j.at("allSummonerData").get<LolCollectionsSummonerData>(); 
  } 
  struct LolCollectionsCollectionsChampionMastery { /**/ 
    uint64_t lastPlayTime;/**/
    uint64_t playerId;/**/
    bool chestGranted;/**/
    int32_t championPointsUntilNextLevel;/**/
    int32_t championPointsSinceLastLevel;/**/
    int32_t championLevel;/**/
    int32_t championPoints;/**/
    int32_t championId;/**/
    std::string highestGrade;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsChampionMastery& v) { 
    j["lastPlayTime"] = v.lastPlayTime;
    j["playerId"] = v.playerId;
    j["chestGranted"] = v.chestGranted;
    j["championPointsUntilNextLevel"] = v.championPointsUntilNextLevel;
    j["championPointsSinceLastLevel"] = v.championPointsSinceLastLevel;
    j["championLevel"] = v.championLevel;
    j["championPoints"] = v.championPoints;
    j["championId"] = v.championId;
    j["highestGrade"] = v.highestGrade;
  }
  static void from_json(const json& j, LolCollectionsCollectionsChampionMastery& v) { 
    v.lastPlayTime = j.at("lastPlayTime").get<uint64_t>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.chestGranted = j.at("chestGranted").get<bool>(); 
    v.championPointsUntilNextLevel = j.at("championPointsUntilNextLevel").get<int32_t>(); 
    v.championPointsSinceLastLevel = j.at("championPointsSinceLastLevel").get<int32_t>(); 
    v.championLevel = j.at("championLevel").get<int32_t>(); 
    v.championPoints = j.at("championPoints").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.highestGrade = j.at("highestGrade").get<std::string>(); 
  } 
  struct LolCollectionsCollectionsChestEligibility { /**/ 
    uint32_t maximumChests;/**/
    uint64_t nextChestRechargeTime;/**/
    uint32_t earnableChests;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsChestEligibility& v) { 
    j["maximumChests"] = v.maximumChests;
    j["nextChestRechargeTime"] = v.nextChestRechargeTime;
    j["earnableChests"] = v.earnableChests;
  }
  static void from_json(const json& j, LolCollectionsCollectionsChestEligibility& v) { 
    v.maximumChests = j.at("maximumChests").get<uint32_t>(); 
    v.nextChestRechargeTime = j.at("nextChestRechargeTime").get<uint64_t>(); 
    v.earnableChests = j.at("earnableChests").get<uint32_t>(); 
  } 
  struct LolCollectionsCollectionsMastery { /**/ 
    int32_t rank;/**/
    uint32_t id;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsMastery& v) { 
    j["rank"] = v.rank;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolCollectionsCollectionsMastery& v) { 
    v.rank = j.at("rank").get<int32_t>(); 
    v.id = j.at("id").get<uint32_t>(); 
  } 
  struct LolCollectionsCollectionsMasteryPage { /**/ 
    bool current;/**/
    std::vector<LolCollectionsCollectionsMastery> masteries;/**/
    uint32_t id;/**/
    std::map<std::string, uint32_t> summary;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsMasteryPage& v) { 
    j["current"] = v.current;
    j["masteries"] = v.masteries;
    j["id"] = v.id;
    j["summary"] = v.summary;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolCollectionsCollectionsMasteryPage& v) { 
    v.current = j.at("current").get<bool>(); 
    v.masteries = j.at("masteries").get<std::vector<LolCollectionsCollectionsMastery>>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.summary = j.at("summary").get<std::map<std::string, uint32_t>>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolCollectionsCollectionsMasteryBook { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolCollectionsCollectionsMasteryPage> pages;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsMasteryBook& v) { 
    j["summonerId"] = v.summonerId;
    j["pages"] = v.pages;
  }
  static void from_json(const json& j, LolCollectionsCollectionsMasteryBook& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.pages = j.at("pages").get<std::vector<LolCollectionsCollectionsMasteryPage>>(); 
  } 
  struct LolCollectionsCollectionsRental { /**/ 
    bool rented;/**/
    int32_t winCountRemaining;/**/
    uint64_t endDate;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRental& v) { 
    j["rented"] = v.rented;
    j["winCountRemaining"] = v.winCountRemaining;
    j["endDate"] = v.endDate;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
    v.winCountRemaining = j.at("winCountRemaining").get<int32_t>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct LolCollectionsCollectionsOwnership { /**/ 
    LolCollectionsCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolCollectionsCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolCollectionsCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolCollectionsCollectionsRune { /**/ 
    uint32_t runeSlotId;/**/
    uint32_t runeId;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRune& v) { 
    j["runeSlotId"] = v.runeSlotId;
    j["runeId"] = v.runeId;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRune& v) { 
    v.runeSlotId = j.at("runeSlotId").get<uint32_t>(); 
    v.runeId = j.at("runeId").get<uint32_t>(); 
  } 
  struct LolCollectionsCollectionsRunePage { /**/ 
    std::vector<LolCollectionsCollectionsRune> runes;/**/
    bool current;/**/
    uint32_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRunePage& v) { 
    j["runes"] = v.runes;
    j["current"] = v.current;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRunePage& v) { 
    v.runes = j.at("runes").get<std::vector<LolCollectionsCollectionsRune>>(); 
    v.current = j.at("current").get<bool>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolCollectionsCollectionsRuneBook { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolCollectionsCollectionsRunePage> pages;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRuneBook& v) { 
    j["summonerId"] = v.summonerId;
    j["pages"] = v.pages;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRuneBook& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.pages = j.at("pages").get<std::vector<LolCollectionsCollectionsRunePage>>(); 
  } 
  struct LolCollectionsCollectionsRuneQuantity { /**/ 
    int32_t quantity;/**/
    uint32_t runeId;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRuneQuantity& v) { 
    j["quantity"] = v.quantity;
    j["runeId"] = v.runeId;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRuneQuantity& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.runeId = j.at("runeId").get<uint32_t>(); 
  } 
  struct LolCollectionsCollectionsRuneQuantities { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolCollectionsCollectionsRuneQuantity> runeQuantities;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsRuneQuantities& v) { 
    j["summonerId"] = v.summonerId;
    j["runeQuantities"] = v.runeQuantities;
  }
  static void from_json(const json& j, LolCollectionsCollectionsRuneQuantities& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.runeQuantities = j.at("runeQuantities").get<std::vector<LolCollectionsCollectionsRuneQuantity>>(); 
  } 
  enum class LolCollectionsCollectionsSummonerBackdropType { /**/ 
    default_e = 0, /**/ 
    highest_mastery_e = 3, /**/ 
    recently_played_e = 2, /**/ 
    summoner_icon_e = 1, /**/ 
  };
  static void to_json(json& j, const LolCollectionsCollectionsSummonerBackdropType& v) {
    switch(v) { 
    case LolCollectionsCollectionsSummonerBackdropType::default_e:
      j = "default";
    break;
    case LolCollectionsCollectionsSummonerBackdropType::highest_mastery_e:
      j = "highest-mastery";
    break;
    case LolCollectionsCollectionsSummonerBackdropType::recently_played_e:
      j = "recently-played";
    break;
    case LolCollectionsCollectionsSummonerBackdropType::summoner_icon_e:
      j = "summoner-icon";
    break;
    };
  }
  static void from_json(const json& j, LolCollectionsCollectionsSummonerBackdropType& v) {
    auto s = j.get<std::string>(); 
    if(s == "default") {
      v = LolCollectionsCollectionsSummonerBackdropType::default_e;
      return;
    } 
    if(s == "highest-mastery") {
      v = LolCollectionsCollectionsSummonerBackdropType::highest_mastery_e;
      return;
    } 
    if(s == "recently-played") {
      v = LolCollectionsCollectionsSummonerBackdropType::recently_played_e;
      return;
    } 
    if(s == "summoner-icon") {
      v = LolCollectionsCollectionsSummonerBackdropType::summoner_icon_e;
      return;
    } 
  } 
  struct LolCollectionsCollectionsSummonerBackdrop { /**/ 
    uint64_t summonerId;/**/
    LolCollectionsCollectionsSummonerBackdropType backdropType;/**/
    int32_t profileIconId;/**/
    uint64_t accountId;/**/
    std::string backdropMaskColor;/**/
    std::string backdropVideo;/**/
    std::string backdropImage;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsSummonerBackdrop& v) { 
    j["summonerId"] = v.summonerId;
    j["backdropType"] = v.backdropType;
    j["profileIconId"] = v.profileIconId;
    j["accountId"] = v.accountId;
    j["backdropMaskColor"] = v.backdropMaskColor;
    j["backdropVideo"] = v.backdropVideo;
    j["backdropImage"] = v.backdropImage;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolCollectionsCollectionsSummonerBackdrop& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.backdropType = j.at("backdropType").get<LolCollectionsCollectionsSummonerBackdropType>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.backdropMaskColor = j.at("backdropMaskColor").get<std::string>(); 
    v.backdropVideo = j.at("backdropVideo").get<std::string>(); 
    v.backdropImage = j.at("backdropImage").get<std::string>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolCollectionsCollectionsSummonerIcon { /**/ 
    LolCollectionsCollectionsOwnership ownership;/**/
    int32_t iconId;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsSummonerIcon& v) { 
    j["ownership"] = v.ownership;
    j["iconId"] = v.iconId;
  }
  static void from_json(const json& j, LolCollectionsCollectionsSummonerIcon& v) { 
    v.ownership = j.at("ownership").get<LolCollectionsCollectionsOwnership>(); 
    v.iconId = j.at("iconId").get<int32_t>(); 
  } 
  struct LolCollectionsCollectionsSummonerIcons { /**/ 
    uint64_t summonerId;/**/
    std::vector<int32_t> icons;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsSummonerIcons& v) { 
    j["summonerId"] = v.summonerId;
    j["icons"] = v.icons;
  }
  static void from_json(const json& j, LolCollectionsCollectionsSummonerIcons& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.icons = j.at("icons").get<std::vector<int32_t>>(); 
  } 
  struct LolCollectionsCollectionsSummonerSpells { /**/ 
    std::vector<uint64_t> spells;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsSummonerSpells& v) { 
    j["spells"] = v.spells;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolCollectionsCollectionsSummonerSpells& v) { 
    v.spells = j.at("spells").get<std::vector<uint64_t>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolCollectionsCollectionsTopChampionMasteries { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolCollectionsCollectionsChampionMastery> masteries;/**/
    uint64_t score;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsTopChampionMasteries& v) { 
    j["summonerId"] = v.summonerId;
    j["masteries"] = v.masteries;
    j["score"] = v.score;
  }
  static void from_json(const json& j, LolCollectionsCollectionsTopChampionMasteries& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.masteries = j.at("masteries").get<std::vector<LolCollectionsCollectionsChampionMastery>>(); 
    v.score = j.at("score").get<uint64_t>(); 
  } 
  struct LolCollectionsCollectionsWardSkin { /**/ 
    int64_t id;/**/
    std::string description;/**/
    LolCollectionsCollectionsOwnership ownership;/**/
    std::string name;/**/
    std::string wardImagePath;/**/
    std::string wardShadowImagePath;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsWardSkin& v) { 
    j["id"] = v.id;
    j["description"] = v.description;
    j["ownership"] = v.ownership;
    j["name"] = v.name;
    j["wardImagePath"] = v.wardImagePath;
    j["wardShadowImagePath"] = v.wardShadowImagePath;
  }
  static void from_json(const json& j, LolCollectionsCollectionsWardSkin& v) { 
    v.id = j.at("id").get<int64_t>(); 
    v.description = j.at("description").get<std::string>(); 
    v.ownership = j.at("ownership").get<LolCollectionsCollectionsOwnership>(); 
    v.name = j.at("name").get<std::string>(); 
    v.wardImagePath = j.at("wardImagePath").get<std::string>(); 
    v.wardShadowImagePath = j.at("wardShadowImagePath").get<std::string>(); 
  } 
  struct LolCollectionsCollectionsWardSkinList { /**/ 
    std::vector<int64_t> wardSkinList;/**/
  };
  static void to_json(json& j, const LolCollectionsCollectionsWardSkinList& v) { 
    j["wardSkinList"] = v.wardSkinList;
  }
  static void from_json(const json& j, LolCollectionsCollectionsWardSkinList& v) { 
    v.wardSkinList = j.at("wardSkinList").get<std::vector<int64_t>>(); 
  } 
  struct LolCollectionsGameDataChampionMasteryRow { /**/ 
    std::vector<uint32_t> masteries;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataChampionMasteryRow& v) { 
    j["masteries"] = v.masteries;
  }
  static void from_json(const json& j, LolCollectionsGameDataChampionMasteryRow& v) { 
    v.masteries = j.at("masteries").get<std::vector<uint32_t>>(); 
  } 
  struct LolCollectionsGameDataChampionMasteryGroup { /**/ 
    std::vector<LolCollectionsGameDataChampionMasteryRow> rows;/**/
    uint32_t id;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataChampionMasteryGroup& v) { 
    j["rows"] = v.rows;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolCollectionsGameDataChampionMasteryGroup& v) { 
    v.rows = j.at("rows").get<std::vector<LolCollectionsGameDataChampionMasteryRow>>(); 
    v.id = j.at("id").get<uint32_t>(); 
  } 
  struct LolCollectionsGameDataChampionMasteryTree { /**/ 
    std::vector<LolCollectionsGameDataChampionMasteryGroup> groups;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataChampionMasteryTree& v) { 
    j["groups"] = v.groups;
  }
  static void from_json(const json& j, LolCollectionsGameDataChampionMasteryTree& v) { 
    v.groups = j.at("groups").get<std::vector<LolCollectionsGameDataChampionMasteryGroup>>(); 
  } 
  struct LolCollectionsGameDataChampionMasteries { /**/ 
    LolCollectionsGameDataChampionMasteryTree tree;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataChampionMasteries& v) { 
    j["tree"] = v.tree;
  }
  static void from_json(const json& j, LolCollectionsGameDataChampionMasteries& v) { 
    v.tree = j.at("tree").get<LolCollectionsGameDataChampionMasteryTree>(); 
  } 
  struct LolCollectionsGameDataChampionSummary { /**/ 
    int32_t id;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataChampionSummary& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolCollectionsGameDataChampionSummary& v) { 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolCollectionsGameDataSplashMetadata { /**/ 
    std::string OverrideColor;/**/
    std::string CalculatedColor;/**/
  };
  static void to_json(json& j, const LolCollectionsGameDataSplashMetadata& v) { 
    j["OverrideColor"] = v.OverrideColor;
    j["CalculatedColor"] = v.CalculatedColor;
  }
  static void from_json(const json& j, LolCollectionsGameDataSplashMetadata& v) { 
    v.OverrideColor = j.at("OverrideColor").get<std::string>(); 
    v.CalculatedColor = j.at("CalculatedColor").get<std::string>(); 
  } 
  struct LolCollectionsLcdsDynamicClientConfig { /**/ 
    json DisabledChampions;/**/
  };
  static void to_json(json& j, const LolCollectionsLcdsDynamicClientConfig& v) { 
    j["DisabledChampions"] = v.DisabledChampions;
  }
  static void from_json(const json& j, LolCollectionsLcdsDynamicClientConfig& v) { 
    v.DisabledChampions = j.at("DisabledChampions").get<json>(); 
  } 
  enum class LolCollectionsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolCollectionsLoginSessionStates& v) {
    switch(v) { 
    case LolCollectionsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolCollectionsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolCollectionsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolCollectionsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolCollectionsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolCollectionsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolCollectionsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolCollectionsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolCollectionsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolCollectionsLoginSession { /**/ 
    bool connected;/**/
    LolCollectionsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolCollectionsLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolCollectionsLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolCollectionsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolCollectionsPlayerNotification { /**/ 
    std::string source;/**/
    bool critical;/**/
    std::string backgroundUrl;/**/
    std::string iconUrl;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolCollectionsPlayerNotification& v) { 
    j["source"] = v.source;
    j["critical"] = v.critical;
    j["backgroundUrl"] = v.backgroundUrl;
    j["iconUrl"] = v.iconUrl;
    j["data"] = v.data;
    j["type"] = v.type;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolCollectionsPlayerNotification& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  struct LolCollectionsSummoner { /**/ 
    int32_t profileIconId;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolCollectionsSummoner& v) { 
    j["profileIconId"] = v.profileIconId;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolCollectionsSummoner& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolEmailVerificationAccessToken { /**/ 
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolEmailVerificationAccessToken& v) { 
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolEmailVerificationAccessToken& v) { 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolEmailVerificationEmailUpdate { /**/ 
    std::string email;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolEmailVerificationEmailUpdate& v) { 
    j["email"] = v.email;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolEmailVerificationEmailUpdate& v) { 
    v.email = j.at("email").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolEmailVerificationEmailVerificationSession { /**/ 
    bool emailVerified;/**/
    std::string email;/**/
  };
  static void to_json(json& j, const LolEmailVerificationEmailVerificationSession& v) { 
    j["emailVerified"] = v.emailVerified;
    j["email"] = v.email;
  }
  static void from_json(const json& j, LolEmailVerificationEmailVerificationSession& v) { 
    v.emailVerified = j.at("emailVerified").get<bool>(); 
    v.email = j.at("email").get<std::string>(); 
  } 
  struct LolEmailVerificationRegionLocale { /**/ 
    std::string locale;/**/
    std::string webLanguage;/**/
    std::string webRegion;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolEmailVerificationRegionLocale& v) { 
    j["locale"] = v.locale;
    j["webLanguage"] = v.webLanguage;
    j["webRegion"] = v.webRegion;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolEmailVerificationRegionLocale& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.webLanguage = j.at("webLanguage").get<std::string>(); 
    v.webRegion = j.at("webRegion").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolEmailVerificationValidationStatus { /**/ 
    std::string emailStatus;/**/
  };
  static void to_json(json& j, const LolEmailVerificationValidationStatus& v) { 
    j["emailStatus"] = v.emailStatus;
  }
  static void from_json(const json& j, LolEmailVerificationValidationStatus& v) { 
    v.emailStatus = j.at("emailStatus").get<std::string>(); 
  } 
  struct LolEndOfGameChampionMasteryGrade { /**/ 
    uint64_t playerId;/**/
    std::string grade;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolEndOfGameChampionMasteryGrade& v) { 
    j["playerId"] = v.playerId;
    j["grade"] = v.grade;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolEndOfGameChampionMasteryGrade& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.grade = j.at("grade").get<std::string>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolEndOfGameChampionMasteryMini { /**/ 
    uint64_t playerId;/**/
    int64_t championLevel;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolEndOfGameChampionMasteryMini& v) { 
    j["playerId"] = v.playerId;
    j["championLevel"] = v.championLevel;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolEndOfGameChampionMasteryMini& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.championLevel = j.at("championLevel").get<int64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolEndOfGameChampionMasteryUpdate { /**/ 
    int64_t pointsBeforeGame;/**/
    uint64_t playerId;/**/
    int64_t bonusPointsGained;/**/
    std::string id;/**/
    int32_t championId;/**/
    std::vector<LolEndOfGameChampionMasteryGrade> memberGrades;/**/
    int64_t level;/**/
    std::string grade;/**/
    bool hasLeveledUp;/**/
    int64_t pointsUntilNextLevelBeforeGame;/**/
    int64_t pointsSinceLastLevelBeforeGame;/**/
    std::vector<LolEndOfGameChampionMasteryMini> levelUpList;/**/
    uint64_t gameId;/**/
    int64_t pointsGained;/**/
    int64_t score;/**/
    int64_t pointsGainedIndividualContribution;/**/
    int64_t pointsUntilNextLevelAfterGame;/**/
  };
  static void to_json(json& j, const LolEndOfGameChampionMasteryUpdate& v) { 
    j["pointsBeforeGame"] = v.pointsBeforeGame;
    j["playerId"] = v.playerId;
    j["bonusPointsGained"] = v.bonusPointsGained;
    j["id"] = v.id;
    j["championId"] = v.championId;
    j["memberGrades"] = v.memberGrades;
    j["level"] = v.level;
    j["grade"] = v.grade;
    j["hasLeveledUp"] = v.hasLeveledUp;
    j["pointsUntilNextLevelBeforeGame"] = v.pointsUntilNextLevelBeforeGame;
    j["pointsSinceLastLevelBeforeGame"] = v.pointsSinceLastLevelBeforeGame;
    j["levelUpList"] = v.levelUpList;
    j["gameId"] = v.gameId;
    j["pointsGained"] = v.pointsGained;
    j["score"] = v.score;
    j["pointsGainedIndividualContribution"] = v.pointsGainedIndividualContribution;
    j["pointsUntilNextLevelAfterGame"] = v.pointsUntilNextLevelAfterGame;
  }
  static void from_json(const json& j, LolEndOfGameChampionMasteryUpdate& v) { 
    v.pointsBeforeGame = j.at("pointsBeforeGame").get<int64_t>(); 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.bonusPointsGained = j.at("bonusPointsGained").get<int64_t>(); 
    v.id = j.at("id").get<std::string>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.memberGrades = j.at("memberGrades").get<std::vector<LolEndOfGameChampionMasteryGrade>>(); 
    v.level = j.at("level").get<int64_t>(); 
    v.grade = j.at("grade").get<std::string>(); 
    v.hasLeveledUp = j.at("hasLeveledUp").get<bool>(); 
    v.pointsUntilNextLevelBeforeGame = j.at("pointsUntilNextLevelBeforeGame").get<int64_t>(); 
    v.pointsSinceLastLevelBeforeGame = j.at("pointsSinceLastLevelBeforeGame").get<int64_t>(); 
    v.levelUpList = j.at("levelUpList").get<std::vector<LolEndOfGameChampionMasteryMini>>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.pointsGained = j.at("pointsGained").get<int64_t>(); 
    v.score = j.at("score").get<int64_t>(); 
    v.pointsGainedIndividualContribution = j.at("pointsGainedIndividualContribution").get<int64_t>(); 
    v.pointsUntilNextLevelAfterGame = j.at("pointsUntilNextLevelAfterGame").get<int64_t>(); 
  } 
  struct LolEndOfGameEndOfGamePlayer { /**/ 
    std::vector<int32_t> items;/**/
    int32_t eloChange;/**/
    int32_t leaves;/**/
    int32_t losses;/**/
    std::string skinName;/**/
    uint64_t userId;/**/
    int32_t level;/**/
    uint64_t summonerId;/**/
    int32_t elo;/**/
    int32_t spell2Id;/**/
    std::string summonerName;/**/
    int32_t skinIndex;/**/
    bool isReportingDisabled;/**/
    int32_t profileIconId;/**/
    bool leaver;/**/
    int32_t teamId;/**/
    int32_t spell1Id;/**/
    int32_t championId;/**/
    json stats;/**/
    bool botPlayer;/**/
    uint64_t gameId;/**/
    int32_t wins;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGamePlayer& v) { 
    j["items"] = v.items;
    j["eloChange"] = v.eloChange;
    j["leaves"] = v.leaves;
    j["losses"] = v.losses;
    j["skinName"] = v.skinName;
    j["userId"] = v.userId;
    j["level"] = v.level;
    j["summonerId"] = v.summonerId;
    j["elo"] = v.elo;
    j["spell2Id"] = v.spell2Id;
    j["summonerName"] = v.summonerName;
    j["skinIndex"] = v.skinIndex;
    j["isReportingDisabled"] = v.isReportingDisabled;
    j["profileIconId"] = v.profileIconId;
    j["leaver"] = v.leaver;
    j["teamId"] = v.teamId;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
    j["stats"] = v.stats;
    j["botPlayer"] = v.botPlayer;
    j["gameId"] = v.gameId;
    j["wins"] = v.wins;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGamePlayer& v) { 
    v.items = j.at("items").get<std::vector<int32_t>>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.leaves = j.at("leaves").get<int32_t>(); 
    v.losses = j.at("losses").get<int32_t>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.level = j.at("level").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.isReportingDisabled = j.at("isReportingDisabled").get<bool>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.leaver = j.at("leaver").get<bool>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.stats = j.at("stats").get<json>(); 
    v.botPlayer = j.at("botPlayer").get<bool>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.wins = j.at("wins").get<int32_t>(); 
  } 
  struct LolEndOfGameEndOfGamePlayerComplaintV2 { /**/ 
    uint64_t reportedSummonerId;/**/
    uint64_t gameId;/**/
    std::string offenses;/**/
    std::string comment;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGamePlayerComplaintV2& v) { 
    j["reportedSummonerId"] = v.reportedSummonerId;
    j["gameId"] = v.gameId;
    j["offenses"] = v.offenses;
    j["comment"] = v.comment;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGamePlayerComplaintV2& v) { 
    v.reportedSummonerId = j.at("reportedSummonerId").get<uint64_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.offenses = j.at("offenses").get<std::string>(); 
    v.comment = j.at("comment").get<std::string>(); 
  } 
  struct LolEndOfGameEndOfGamePoints { /**/ 
    int32_t pointsUntilNextReroll;/**/
    int32_t totalPoints;/**/
    int32_t pointChangeFromGameplay;/**/
    int32_t previousPoints;/**/
    int32_t pointsUsed;/**/
    int32_t pointChangeFromChampionsOwned;/**/
    int32_t rerollCount;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGamePoints& v) { 
    j["pointsUntilNextReroll"] = v.pointsUntilNextReroll;
    j["totalPoints"] = v.totalPoints;
    j["pointChangeFromGameplay"] = v.pointChangeFromGameplay;
    j["previousPoints"] = v.previousPoints;
    j["pointsUsed"] = v.pointsUsed;
    j["pointChangeFromChampionsOwned"] = v.pointChangeFromChampionsOwned;
    j["rerollCount"] = v.rerollCount;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGamePoints& v) { 
    v.pointsUntilNextReroll = j.at("pointsUntilNextReroll").get<int32_t>(); 
    v.totalPoints = j.at("totalPoints").get<int32_t>(); 
    v.pointChangeFromGameplay = j.at("pointChangeFromGameplay").get<int32_t>(); 
    v.previousPoints = j.at("previousPoints").get<int32_t>(); 
    v.pointsUsed = j.at("pointsUsed").get<int32_t>(); 
    v.pointChangeFromChampionsOwned = j.at("pointChangeFromChampionsOwned").get<int32_t>(); 
    v.rerollCount = j.at("rerollCount").get<int32_t>(); 
  } 
  struct LolEndOfGameEndOfGameTeamBoost { /**/ 
    int64_t price;/**/
    std::vector<int64_t> availableSkins;/**/
    std::string summonerName;/**/
    bool unlocked;/**/
    int64_t ipReward;/**/
    std::string skinUnlockMode;/**/
    int64_t ipRewardForPurchaser;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGameTeamBoost& v) { 
    j["price"] = v.price;
    j["availableSkins"] = v.availableSkins;
    j["summonerName"] = v.summonerName;
    j["unlocked"] = v.unlocked;
    j["ipReward"] = v.ipReward;
    j["skinUnlockMode"] = v.skinUnlockMode;
    j["ipRewardForPurchaser"] = v.ipRewardForPurchaser;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGameTeamBoost& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.availableSkins = j.at("availableSkins").get<std::vector<int64_t>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.unlocked = j.at("unlocked").get<bool>(); 
    v.ipReward = j.at("ipReward").get<int64_t>(); 
    v.skinUnlockMode = j.at("skinUnlockMode").get<std::string>(); 
    v.ipRewardForPurchaser = j.at("ipRewardForPurchaser").get<int64_t>(); 
  } 
  struct LolEndOfGameEndOfGameTeam { /**/ 
    std::vector<LolEndOfGameEndOfGamePlayer> players;/**/
    std::string memberStatusString;/**/
    std::string fullId;/**/
    bool isPlayerTeam;/**/
    std::vector<int32_t> championBans;/**/
    std::string name;/**/
    int32_t teamId;/**/
    std::string tag;/**/
    bool isWinningTeam;/**/
    json stats;/**/
    bool isBottomTeam;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGameTeam& v) { 
    j["players"] = v.players;
    j["memberStatusString"] = v.memberStatusString;
    j["fullId"] = v.fullId;
    j["isPlayerTeam"] = v.isPlayerTeam;
    j["championBans"] = v.championBans;
    j["name"] = v.name;
    j["teamId"] = v.teamId;
    j["tag"] = v.tag;
    j["isWinningTeam"] = v.isWinningTeam;
    j["stats"] = v.stats;
    j["isBottomTeam"] = v.isBottomTeam;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGameTeam& v) { 
    v.players = j.at("players").get<std::vector<LolEndOfGameEndOfGamePlayer>>(); 
    v.memberStatusString = j.at("memberStatusString").get<std::string>(); 
    v.fullId = j.at("fullId").get<std::string>(); 
    v.isPlayerTeam = j.at("isPlayerTeam").get<bool>(); 
    v.championBans = j.at("championBans").get<std::vector<int32_t>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.tag = j.at("tag").get<std::string>(); 
    v.isWinningTeam = j.at("isWinningTeam").get<bool>(); 
    v.stats = j.at("stats").get<json>(); 
    v.isBottomTeam = j.at("isBottomTeam").get<bool>(); 
  } 
  struct LolEndOfGameEndOfGameStats { /**/ 
    int32_t rpEarned;/**/
    int32_t ipTotal;/**/
    std::vector<int32_t> newSpells;/**/
    int32_t eloChange;/**/
    int32_t loyaltyBoostIpEarned;/**/
    uint64_t userId;/**/
    int32_t gameLength;/**/
    uint64_t currentLevel;/**/
    uint64_t summonerId;/**/
    int32_t elo;/**/
    std::string summonerName;/**/
    bool sendStatsToTournamentProvider;/**/
    bool ranked;/**/
    int32_t coOpVsAiMinutesLeftToday;/**/
    int32_t customMinutesLeftToday;/**/
    uint64_t previousXpTotal;/**/
    std::string myTeamStatus;/**/
    bool gameEndedInEarlySurrender;/**/
    std::optional<LolEndOfGameEndOfGameTeamBoost> teamBoost;/**/
    int32_t boostIpEarned;/**/
    std::string queueType;/**/
    int32_t customMsecsUntilReset;/**/
    std::vector<LolEndOfGameEndOfGameTeam> teams;/**/
    std::vector<std::string> gameMutators;/**/
    int32_t globalBoostXpEarned;/**/
    int32_t championId;/**/
    int32_t boostXpEarned;/**/
    int32_t completionBonusPoints;/**/
    uint64_t previousLevel;/**/
    bool earlySurrenderAccomplice;/**/
    int32_t skinIndex;/**/
    int32_t battleBoostIpEarned;/**/
    uint64_t reportGameId;/**/
    int32_t odinBonusIp;/**/
    int32_t missionsXpEarned;/**/
    std::string gameType;/**/
    int32_t queueBonusEarned;/**/
    int32_t skinId;/**/
    int32_t coOpVsAiMsecsUntilReset;/**/
    int32_t experienceEarned;/**/
    uint64_t accountId;/**/
    std::string roomName;/**/
    LolEndOfGameEndOfGamePoints rerollData;/**/
    bool causedEarlySurrender;/**/
    bool leveledUp;/**/
    int32_t firstWinBonus;/**/
    bool teamEarlySurrendered;/**/
    int32_t talentPointsGained;/**/
    bool imbalancedTeamsNoPoints;/**/
    json pointsPenalties;/**/
    std::string difficulty;/**/
    uint64_t nextLevelXp;/**/
    int32_t experienceTotal;/**/
    std::string roomPassword;/**/
    int32_t ipEarned;/**/
    int32_t timeUntilNextFirstWinBonus;/**/
    uint64_t gameId;/**/
    std::string gameMode;/**/
    bool invalid;/**/
    int32_t loyaltyBoostXpEarned;/**/
    int32_t basePoints;/**/
    int32_t partyRewardsBonusIpEarned;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGameStats& v) { 
    j["rpEarned"] = v.rpEarned;
    j["ipTotal"] = v.ipTotal;
    j["newSpells"] = v.newSpells;
    j["eloChange"] = v.eloChange;
    j["loyaltyBoostIpEarned"] = v.loyaltyBoostIpEarned;
    j["userId"] = v.userId;
    j["gameLength"] = v.gameLength;
    j["currentLevel"] = v.currentLevel;
    j["summonerId"] = v.summonerId;
    j["elo"] = v.elo;
    j["summonerName"] = v.summonerName;
    j["sendStatsToTournamentProvider"] = v.sendStatsToTournamentProvider;
    j["ranked"] = v.ranked;
    j["coOpVsAiMinutesLeftToday"] = v.coOpVsAiMinutesLeftToday;
    j["customMinutesLeftToday"] = v.customMinutesLeftToday;
    j["previousXpTotal"] = v.previousXpTotal;
    j["myTeamStatus"] = v.myTeamStatus;
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender;
    j["teamBoost"] = v.teamBoost;
    j["boostIpEarned"] = v.boostIpEarned;
    j["queueType"] = v.queueType;
    j["customMsecsUntilReset"] = v.customMsecsUntilReset;
    j["teams"] = v.teams;
    j["gameMutators"] = v.gameMutators;
    j["globalBoostXpEarned"] = v.globalBoostXpEarned;
    j["championId"] = v.championId;
    j["boostXpEarned"] = v.boostXpEarned;
    j["completionBonusPoints"] = v.completionBonusPoints;
    j["previousLevel"] = v.previousLevel;
    j["earlySurrenderAccomplice"] = v.earlySurrenderAccomplice;
    j["skinIndex"] = v.skinIndex;
    j["battleBoostIpEarned"] = v.battleBoostIpEarned;
    j["reportGameId"] = v.reportGameId;
    j["odinBonusIp"] = v.odinBonusIp;
    j["missionsXpEarned"] = v.missionsXpEarned;
    j["gameType"] = v.gameType;
    j["queueBonusEarned"] = v.queueBonusEarned;
    j["skinId"] = v.skinId;
    j["coOpVsAiMsecsUntilReset"] = v.coOpVsAiMsecsUntilReset;
    j["experienceEarned"] = v.experienceEarned;
    j["accountId"] = v.accountId;
    j["roomName"] = v.roomName;
    j["rerollData"] = v.rerollData;
    j["causedEarlySurrender"] = v.causedEarlySurrender;
    j["leveledUp"] = v.leveledUp;
    j["firstWinBonus"] = v.firstWinBonus;
    j["teamEarlySurrendered"] = v.teamEarlySurrendered;
    j["talentPointsGained"] = v.talentPointsGained;
    j["imbalancedTeamsNoPoints"] = v.imbalancedTeamsNoPoints;
    j["pointsPenalties"] = v.pointsPenalties;
    j["difficulty"] = v.difficulty;
    j["nextLevelXp"] = v.nextLevelXp;
    j["experienceTotal"] = v.experienceTotal;
    j["roomPassword"] = v.roomPassword;
    j["ipEarned"] = v.ipEarned;
    j["timeUntilNextFirstWinBonus"] = v.timeUntilNextFirstWinBonus;
    j["gameId"] = v.gameId;
    j["gameMode"] = v.gameMode;
    j["invalid"] = v.invalid;
    j["loyaltyBoostXpEarned"] = v.loyaltyBoostXpEarned;
    j["basePoints"] = v.basePoints;
    j["partyRewardsBonusIpEarned"] = v.partyRewardsBonusIpEarned;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGameStats& v) { 
    v.rpEarned = j.at("rpEarned").get<int32_t>(); 
    v.ipTotal = j.at("ipTotal").get<int32_t>(); 
    v.newSpells = j.at("newSpells").get<std::vector<int32_t>>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.loyaltyBoostIpEarned = j.at("loyaltyBoostIpEarned").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.gameLength = j.at("gameLength").get<int32_t>(); 
    v.currentLevel = j.at("currentLevel").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.sendStatsToTournamentProvider = j.at("sendStatsToTournamentProvider").get<bool>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.coOpVsAiMinutesLeftToday = j.at("coOpVsAiMinutesLeftToday").get<int32_t>(); 
    v.customMinutesLeftToday = j.at("customMinutesLeftToday").get<int32_t>(); 
    v.previousXpTotal = j.at("previousXpTotal").get<uint64_t>(); 
    v.myTeamStatus = j.at("myTeamStatus").get<std::string>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.teamBoost = j.at("teamBoost").get<std::optional<LolEndOfGameEndOfGameTeamBoost>>(); 
    v.boostIpEarned = j.at("boostIpEarned").get<int32_t>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.customMsecsUntilReset = j.at("customMsecsUntilReset").get<int32_t>(); 
    v.teams = j.at("teams").get<std::vector<LolEndOfGameEndOfGameTeam>>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.globalBoostXpEarned = j.at("globalBoostXpEarned").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.boostXpEarned = j.at("boostXpEarned").get<int32_t>(); 
    v.completionBonusPoints = j.at("completionBonusPoints").get<int32_t>(); 
    v.previousLevel = j.at("previousLevel").get<uint64_t>(); 
    v.earlySurrenderAccomplice = j.at("earlySurrenderAccomplice").get<bool>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.battleBoostIpEarned = j.at("battleBoostIpEarned").get<int32_t>(); 
    v.reportGameId = j.at("reportGameId").get<uint64_t>(); 
    v.odinBonusIp = j.at("odinBonusIp").get<int32_t>(); 
    v.missionsXpEarned = j.at("missionsXpEarned").get<int32_t>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.queueBonusEarned = j.at("queueBonusEarned").get<int32_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.coOpVsAiMsecsUntilReset = j.at("coOpVsAiMsecsUntilReset").get<int32_t>(); 
    v.experienceEarned = j.at("experienceEarned").get<int32_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.rerollData = j.at("rerollData").get<LolEndOfGameEndOfGamePoints>(); 
    v.causedEarlySurrender = j.at("causedEarlySurrender").get<bool>(); 
    v.leveledUp = j.at("leveledUp").get<bool>(); 
    v.firstWinBonus = j.at("firstWinBonus").get<int32_t>(); 
    v.teamEarlySurrendered = j.at("teamEarlySurrendered").get<bool>(); 
    v.talentPointsGained = j.at("talentPointsGained").get<int32_t>(); 
    v.imbalancedTeamsNoPoints = j.at("imbalancedTeamsNoPoints").get<bool>(); 
    v.pointsPenalties = j.at("pointsPenalties").get<json>(); 
    v.difficulty = j.at("difficulty").get<std::string>(); 
    v.nextLevelXp = j.at("nextLevelXp").get<uint64_t>(); 
    v.experienceTotal = j.at("experienceTotal").get<int32_t>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.ipEarned = j.at("ipEarned").get<int32_t>(); 
    v.timeUntilNextFirstWinBonus = j.at("timeUntilNextFirstWinBonus").get<int32_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.invalid = j.at("invalid").get<bool>(); 
    v.loyaltyBoostXpEarned = j.at("loyaltyBoostXpEarned").get<int32_t>(); 
    v.basePoints = j.at("basePoints").get<int32_t>(); 
    v.partyRewardsBonusIpEarned = j.at("partyRewardsBonusIpEarned").get<int32_t>(); 
  } 
  struct LolEndOfGameEndOfGameVictoriousComrade { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolEndOfGameEndOfGameVictoriousComrade& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolEndOfGameEndOfGameVictoriousComrade& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolEndOfGameGameDataChampionSummary { /**/ 
    std::string alias;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameDataChampionSummary& v) { 
    j["alias"] = v.alias;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolEndOfGameGameDataChampionSummary& v) { 
    v.alias = j.at("alias").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolEndOfGameGameflowAvailability { /**/ 
    std::string state;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameflowAvailability& v) { 
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolEndOfGameGameflowAvailability& v) { 
    v.state = j.at("state").get<std::string>(); 
  } 
  struct LolEndOfGameGameflowClient { /**/ 
    bool running;/**/
    uint16_t observerServerPort;/**/
    std::string observerServerIp;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameflowClient& v) { 
    j["running"] = v.running;
    j["observerServerPort"] = v.observerServerPort;
    j["observerServerIp"] = v.observerServerIp;
  }
  static void from_json(const json& j, LolEndOfGameGameflowClient& v) { 
    v.running = j.at("running").get<bool>(); 
    v.observerServerPort = j.at("observerServerPort").get<uint16_t>(); 
    v.observerServerIp = j.at("observerServerIp").get<std::string>(); 
  } 
  struct LolEndOfGameGameflowGameData { /**/ 
    uint64_t gameId;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameflowGameData& v) { 
    j["gameId"] = v.gameId;
  }
  static void from_json(const json& j, LolEndOfGameGameflowGameData& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
  } 
  enum class LolEndOfGameGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolEndOfGameGameflowPhase& v) {
    switch(v) { 
    case LolEndOfGameGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolEndOfGameGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolEndOfGameGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolEndOfGameGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolEndOfGameGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolEndOfGameGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolEndOfGameGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolEndOfGameGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolEndOfGameGameflowPhase::None_e:
      j = "None";
    break;
    case LolEndOfGameGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolEndOfGameGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolEndOfGameGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolEndOfGameGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolEndOfGameGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolEndOfGameGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolEndOfGameGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolEndOfGameGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolEndOfGameGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolEndOfGameGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolEndOfGameGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolEndOfGameGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolEndOfGameGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolEndOfGameGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolEndOfGameGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolEndOfGameGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolEndOfGameGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolEndOfGameGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolEndOfGameGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolEndOfGameGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolEndOfGameGameflowSession { /**/ 
    LolEndOfGameGameflowPhase phase;/**/
    LolEndOfGameGameflowGameData gameData;/**/
    LolEndOfGameGameflowClient gameClient;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolEndOfGameGameflowSession& v) { 
    v.phase = j.at("phase").get<LolEndOfGameGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolEndOfGameGameflowGameData>(); 
    v.gameClient = j.at("gameClient").get<LolEndOfGameGameflowClient>(); 
  } 
  struct LolEndOfGameRerollDataBagForClientV1 { /**/ 
    uint32_t maximumRerolls;/**/
    int64_t pointCostOfReroll;/**/
    int64_t pointsGainedLastGame;/**/
    int64_t pointsUntilNextReroll;/**/
    int64_t totalPoints;/**/
    int32_t rerollCount;/**/
  };
  static void to_json(json& j, const LolEndOfGameRerollDataBagForClientV1& v) { 
    j["maximumRerolls"] = v.maximumRerolls;
    j["pointCostOfReroll"] = v.pointCostOfReroll;
    j["pointsGainedLastGame"] = v.pointsGainedLastGame;
    j["pointsUntilNextReroll"] = v.pointsUntilNextReroll;
    j["totalPoints"] = v.totalPoints;
    j["rerollCount"] = v.rerollCount;
  }
  static void from_json(const json& j, LolEndOfGameRerollDataBagForClientV1& v) { 
    v.maximumRerolls = j.at("maximumRerolls").get<uint32_t>(); 
    v.pointCostOfReroll = j.at("pointCostOfReroll").get<int64_t>(); 
    v.pointsGainedLastGame = j.at("pointsGainedLastGame").get<int64_t>(); 
    v.pointsUntilNextReroll = j.at("pointsUntilNextReroll").get<int64_t>(); 
    v.totalPoints = j.at("totalPoints").get<int64_t>(); 
    v.rerollCount = j.at("rerollCount").get<int32_t>(); 
  } 
  struct LolEndOfGameGameloopPlayerInfoV1 { /**/ 
    LolEndOfGameRerollDataBagForClientV1 rerollDataBag;/**/
  };
  static void to_json(json& j, const LolEndOfGameGameloopPlayerInfoV1& v) { 
    j["rerollDataBag"] = v.rerollDataBag;
  }
  static void from_json(const json& j, LolEndOfGameGameloopPlayerInfoV1& v) { 
    v.rerollDataBag = j.at("rerollDataBag").get<LolEndOfGameRerollDataBagForClientV1>(); 
  } 
  struct LolEndOfGameLobbyInvitation { /**/ 
    std::string state;/**/
  };
  static void to_json(json& j, const LolEndOfGameLobbyInvitation& v) { 
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolEndOfGameLobbyInvitation& v) { 
    v.state = j.at("state").get<std::string>(); 
  } 
  struct LolEndOfGameLoginSummonerLevelAndPoints { /**/ 
    uint64_t expPoints;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolEndOfGameLoginSummonerLevelAndPoints& v) { 
    j["expPoints"] = v.expPoints;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolEndOfGameLoginSummonerLevelAndPoints& v) { 
    v.expPoints = j.at("expPoints").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolEndOfGameLoginSummonerData { /**/ 
    LolEndOfGameLoginSummonerLevelAndPoints summonerLevelAndPoints;/**/
  };
  static void to_json(json& j, const LolEndOfGameLoginSummonerData& v) { 
    j["summonerLevelAndPoints"] = v.summonerLevelAndPoints;
  }
  static void from_json(const json& j, LolEndOfGameLoginSummonerData& v) { 
    v.summonerLevelAndPoints = j.at("summonerLevelAndPoints").get<LolEndOfGameLoginSummonerLevelAndPoints>(); 
  } 
  struct LolEndOfGameSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolEndOfGameSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolEndOfGameSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolEndOfGameLoginDataPacket { /**/ 
    LolEndOfGameLoginSummonerData allSummonerData;/**/
    std::vector<LolEndOfGameSimpleMessage> simpleMessages;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const LolEndOfGameLoginDataPacket& v) { 
    j["allSummonerData"] = v.allSummonerData;
    j["simpleMessages"] = v.simpleMessages;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, LolEndOfGameLoginDataPacket& v) { 
    v.allSummonerData = j.at("allSummonerData").get<LolEndOfGameLoginSummonerData>(); 
    v.simpleMessages = j.at("simpleMessages").get<std::vector<LolEndOfGameSimpleMessage>>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  enum class LolEndOfGameLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolEndOfGameLoginSessionStates& v) {
    switch(v) { 
    case LolEndOfGameLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolEndOfGameLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolEndOfGameLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolEndOfGameLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolEndOfGameLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolEndOfGameLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolEndOfGameLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolEndOfGameLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolEndOfGameLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolEndOfGameLoginSession { /**/ 
    LolEndOfGameLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolEndOfGameLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolEndOfGameLoginSession& v) { 
    v.state = j.at("state").get<LolEndOfGameLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolEndOfGameRMSMessage { /**/ 
    int64_t timestamp;/**/
    std::string payload;/**/
  };
  static void to_json(json& j, const LolEndOfGameRMSMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["payload"] = v.payload;
  }
  static void from_json(const json& j, LolEndOfGameRMSMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsESportStreamNotificationsConfig { /**/ 
    std::string notificationsStreamURL;/**/
    bool notificationsEnabled;/**/
    int64_t beappFailureLongPollMinutes;/**/
    std::string notificationsServiceEndpoint;/**/
    std::string notificationsServiceEndpointV2;/**/
    bool useServiceEndpointV2;/**/
    int64_t notificationsShortPollMinutes;/**/
    std::string notificationsAssetMagickURL;/**/
    int64_t notificationsLongPollMinutes;/**/
    std::string notificationsStreamGroupSlug;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsESportStreamNotificationsConfig& v) { 
    j["notificationsStreamURL"] = v.notificationsStreamURL;
    j["notificationsEnabled"] = v.notificationsEnabled;
    j["beappFailureLongPollMinutes"] = v.beappFailureLongPollMinutes;
    j["notificationsServiceEndpoint"] = v.notificationsServiceEndpoint;
    j["notificationsServiceEndpointV2"] = v.notificationsServiceEndpointV2;
    j["useServiceEndpointV2"] = v.useServiceEndpointV2;
    j["notificationsShortPollMinutes"] = v.notificationsShortPollMinutes;
    j["notificationsAssetMagickURL"] = v.notificationsAssetMagickURL;
    j["notificationsLongPollMinutes"] = v.notificationsLongPollMinutes;
    j["notificationsStreamGroupSlug"] = v.notificationsStreamGroupSlug;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsESportStreamNotificationsConfig& v) { 
    v.notificationsStreamURL = j.at("notificationsStreamURL").get<std::string>(); 
    v.notificationsEnabled = j.at("notificationsEnabled").get<bool>(); 
    v.beappFailureLongPollMinutes = j.at("beappFailureLongPollMinutes").get<int64_t>(); 
    v.notificationsServiceEndpoint = j.at("notificationsServiceEndpoint").get<std::string>(); 
    v.notificationsServiceEndpointV2 = j.at("notificationsServiceEndpointV2").get<std::string>(); 
    v.useServiceEndpointV2 = j.at("useServiceEndpointV2").get<bool>(); 
    v.notificationsShortPollMinutes = j.at("notificationsShortPollMinutes").get<int64_t>(); 
    v.notificationsAssetMagickURL = j.at("notificationsAssetMagickURL").get<std::string>(); 
    v.notificationsLongPollMinutes = j.at("notificationsLongPollMinutes").get<int64_t>(); 
    v.notificationsStreamGroupSlug = j.at("notificationsStreamGroupSlug").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsESportsAPI_streamgroups { /**/ 
    bool live;/**/
    std::string title;/**/
    std::string content;/**/
    int64_t id;/**/
    std::string slug;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsESportsAPI_streamgroups& v) { 
    j["live"] = v.live;
    j["title"] = v.title;
    j["content"] = v.content;
    j["id"] = v.id;
    j["slug"] = v.slug;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsESportsAPI_streamgroups& v) { 
    v.live = j.at("live").get<bool>(); 
    v.title = j.at("title").get<std::string>(); 
    v.content = j.at("content").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.slug = j.at("slug").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_teams { /**/ 
    std::string acronym;/**/
    std::string logoUrl;/**/
    int64_t id;/**/
    std::string name;/**/
    std::string guid;/**/
    std::string slug;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_teams& v) { 
    j["acronym"] = v.acronym;
    j["logoUrl"] = v.logoUrl;
    j["id"] = v.id;
    j["name"] = v.name;
    j["guid"] = v.guid;
    j["slug"] = v.slug;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_teams& v) { 
    v.acronym = j.at("acronym").get<std::string>(); 
    v.logoUrl = j.at("logoUrl").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.guid = j.at("guid").get<std::string>(); 
    v.slug = j.at("slug").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_roster { /**/ 
    std::string roster;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_roster& v) { 
    j["roster"] = v.roster;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_roster& v) { 
    v.roster = j.at("roster").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_matches { /**/ 
    std::string id;/**/
    std::vector<LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_roster> input;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_matches& v) { 
    j["id"] = v.id;
    j["input"] = v.input;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_matches& v) { 
    v.id = j.at("id").get<std::string>(); 
    v.input = j.at("input").get<std::vector<LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_roster>>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets { /**/ 
    std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_matches> matches;/**/
    std::string id;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets& v) { 
    j["matches"] = v.matches;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets& v) { 
    v.matches = j.at("matches").get<std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_matches>>(); 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_rosters { /**/ 
    int64_t team;/**/
    std::string id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_rosters& v) { 
    j["team"] = v.team;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_rosters& v) { 
    v.team = j.at("team").get<int64_t>(); 
    v.id = j.at("id").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsEsportsAPI_highlanderTournaments { /**/ 
    std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets> brackets;/**/
    std::string title;/**/
    std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_rosters> rosters;/**/
    std::string id;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsEsportsAPI_highlanderTournaments& v) { 
    j["brackets"] = v.brackets;
    j["title"] = v.title;
    j["rosters"] = v.rosters;
    j["id"] = v.id;
    j["description"] = v.description;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments& v) { 
    v.brackets = j.at("brackets").get<std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_brackets>>(); 
    v.title = j.at("title").get<std::string>(); 
    v.rosters = j.at("rosters").get<std::map<std::string, LolEsportStreamNotificationsEsportsAPI_highlanderTournaments_rosters>>(); 
    v.id = j.at("id").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsESportsAPI_streamgroups_root { /**/ 
    std::vector<LolEsportStreamNotificationsESportsAPI_streamgroups> streamgroups;/**/
    std::vector<LolEsportStreamNotificationsEsportsAPI_teams> teams;/**/
    std::vector<LolEsportStreamNotificationsEsportsAPI_highlanderTournaments> highlanderTournaments;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsESportsAPI_streamgroups_root& v) { 
    j["streamgroups"] = v.streamgroups;
    j["teams"] = v.teams;
    j["highlanderTournaments"] = v.highlanderTournaments;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsESportsAPI_streamgroups_root& v) { 
    v.streamgroups = j.at("streamgroups").get<std::vector<LolEsportStreamNotificationsESportsAPI_streamgroups>>(); 
    v.teams = j.at("teams").get<std::vector<LolEsportStreamNotificationsEsportsAPI_teams>>(); 
    v.highlanderTournaments = j.at("highlanderTournaments").get<std::vector<LolEsportStreamNotificationsEsportsAPI_highlanderTournaments>>(); 
  } 
  struct LolEsportStreamNotificationsESportsStreams { /**/ 
    std::string teamBName;/**/
    std::string teamAGuid;/**/
    std::string teamAName;/**/
    std::string teamAAcronym;/**/
    std::string teamBAcronym;/**/
    std::string teamBGuid;/**/
    std::string teamALogoUrl;/**/
    std::string tournamentDescription;/**/
    std::string teamBLogoUrl;/**/
    std::string title;/**/
    int64_t teamAId;/**/
    int64_t teamBId;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsESportsStreams& v) { 
    j["teamBName"] = v.teamBName;
    j["teamAGuid"] = v.teamAGuid;
    j["teamAName"] = v.teamAName;
    j["teamAAcronym"] = v.teamAAcronym;
    j["teamBAcronym"] = v.teamBAcronym;
    j["teamBGuid"] = v.teamBGuid;
    j["teamALogoUrl"] = v.teamALogoUrl;
    j["tournamentDescription"] = v.tournamentDescription;
    j["teamBLogoUrl"] = v.teamBLogoUrl;
    j["title"] = v.title;
    j["teamAId"] = v.teamAId;
    j["teamBId"] = v.teamBId;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsESportsStreams& v) { 
    v.teamBName = j.at("teamBName").get<std::string>(); 
    v.teamAGuid = j.at("teamAGuid").get<std::string>(); 
    v.teamAName = j.at("teamAName").get<std::string>(); 
    v.teamAAcronym = j.at("teamAAcronym").get<std::string>(); 
    v.teamBAcronym = j.at("teamBAcronym").get<std::string>(); 
    v.teamBGuid = j.at("teamBGuid").get<std::string>(); 
    v.teamALogoUrl = j.at("teamALogoUrl").get<std::string>(); 
    v.tournamentDescription = j.at("tournamentDescription").get<std::string>(); 
    v.teamBLogoUrl = j.at("teamBLogoUrl").get<std::string>(); 
    v.title = j.at("title").get<std::string>(); 
    v.teamAId = j.at("teamAId").get<int64_t>(); 
    v.teamBId = j.at("teamBId").get<int64_t>(); 
  } 
  struct LolEsportStreamNotificationsESportsLiveStreams { /**/ 
    std::vector<LolEsportStreamNotificationsESportsStreams> liveStreams;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsESportsLiveStreams& v) { 
    j["liveStreams"] = v.liveStreams;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsESportsLiveStreams& v) { 
    v.liveStreams = j.at("liveStreams").get<std::vector<LolEsportStreamNotificationsESportsStreams>>(); 
  } 
  enum class LolEsportStreamNotificationsGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolEsportStreamNotificationsGameflowPhase& v) {
    switch(v) { 
    case LolEsportStreamNotificationsGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolEsportStreamNotificationsGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolEsportStreamNotificationsGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolEsportStreamNotificationsGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolEsportStreamNotificationsGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolEsportStreamNotificationsGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolEsportStreamNotificationsGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolEsportStreamNotificationsGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolEsportStreamNotificationsGameflowPhase::None_e:
      j = "None";
    break;
    case LolEsportStreamNotificationsGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolEsportStreamNotificationsGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolEsportStreamNotificationsGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolEsportStreamNotificationsGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolEsportStreamNotificationsGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolEsportStreamNotificationsGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolEsportStreamNotificationsGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolEsportStreamNotificationsGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolEsportStreamNotificationsGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolEsportStreamNotificationsGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolEsportStreamNotificationsGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolEsportStreamNotificationsGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolEsportStreamNotificationsGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolEsportStreamNotificationsGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolEsportStreamNotificationsGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolEsportStreamNotificationsGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolEsportStreamNotificationsGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolEsportStreamNotificationsGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolEsportStreamNotificationsGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolEsportStreamNotificationsGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolEsportStreamNotificationsGameflowSession { /**/ 
    LolEsportStreamNotificationsGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsGameflowSession& v) { 
    v.phase = j.at("phase").get<LolEsportStreamNotificationsGameflowPhase>(); 
  } 
  struct LolEsportStreamNotificationsLiveMatchTeam { /**/ 
    std::string acronym;/**/
    std::string name;/**/
    std::string logoUrl;/**/
    std::string guid;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsLiveMatchTeam& v) { 
    j["acronym"] = v.acronym;
    j["name"] = v.name;
    j["logoUrl"] = v.logoUrl;
    j["guid"] = v.guid;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsLiveMatchTeam& v) { 
    v.acronym = j.at("acronym").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.logoUrl = j.at("logoUrl").get<std::string>(); 
    v.guid = j.at("guid").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsLiveMatch { /**/ 
    std::vector<LolEsportStreamNotificationsLiveMatchTeam> teams;/**/
    std::string title;/**/
    std::string id;/**/
    std::string tournamentDescription;/**/
    std::string streamGroup;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsLiveMatch& v) { 
    j["teams"] = v.teams;
    j["title"] = v.title;
    j["id"] = v.id;
    j["tournamentDescription"] = v.tournamentDescription;
    j["streamGroup"] = v.streamGroup;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsLiveMatch& v) { 
    v.teams = j.at("teams").get<std::vector<LolEsportStreamNotificationsLiveMatchTeam>>(); 
    v.title = j.at("title").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.tournamentDescription = j.at("tournamentDescription").get<std::string>(); 
    v.streamGroup = j.at("streamGroup").get<std::string>(); 
  } 
  struct LolEsportStreamNotificationsPlayerNotificationResource { /**/ 
    std::string source;/**/
    bool critical;/**/
    std::string state;/**/
    std::string backgroundUrl;/**/
    std::string iconUrl;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string expires;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolEsportStreamNotificationsPlayerNotificationResource& v) { 
    j["source"] = v.source;
    j["critical"] = v.critical;
    j["state"] = v.state;
    j["backgroundUrl"] = v.backgroundUrl;
    j["iconUrl"] = v.iconUrl;
    j["data"] = v.data;
    j["type"] = v.type;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["expires"] = v.expires;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolEsportStreamNotificationsPlayerNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.state = j.at("state").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  struct LolFeaturedModesEligibility { /**/ 
    int32_t queueId;/**/
    bool eligible;/**/
  };
  static void to_json(json& j, const LolFeaturedModesEligibility& v) { 
    j["queueId"] = v.queueId;
    j["eligible"] = v.eligible;
  }
  static void from_json(const json& j, LolFeaturedModesEligibility& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.eligible = j.at("eligible").get<bool>(); 
  } 
  struct LolFeaturedModesFeaturedModesConfig { /**/ 
    uint32_t MaxNotificationSaveDelayMinutes;/**/
    bool NotificationsEnabled;/**/
    uint32_t QueueToggleNotificationMinutesThreshold;/**/
  };
  static void to_json(json& j, const LolFeaturedModesFeaturedModesConfig& v) { 
    j["MaxNotificationSaveDelayMinutes"] = v.MaxNotificationSaveDelayMinutes;
    j["NotificationsEnabled"] = v.NotificationsEnabled;
    j["QueueToggleNotificationMinutesThreshold"] = v.QueueToggleNotificationMinutesThreshold;
  }
  static void from_json(const json& j, LolFeaturedModesFeaturedModesConfig& v) { 
    v.MaxNotificationSaveDelayMinutes = j.at("MaxNotificationSaveDelayMinutes").get<uint32_t>(); 
    v.NotificationsEnabled = j.at("NotificationsEnabled").get<bool>(); 
    v.QueueToggleNotificationMinutesThreshold = j.at("QueueToggleNotificationMinutesThreshold").get<uint32_t>(); 
  } 
  enum class LolFeaturedModesGameflowAvailabilityState { /**/ 
    Available_e = 0, /**/ 
    Configuration_e = 5, /**/ 
    InGameFlow_e = 4, /**/ 
    Initializing_e = 1, /**/ 
    Patching_e = 2, /**/ 
    PlayerBanned_e = 3, /**/ 
  };
  static void to_json(json& j, const LolFeaturedModesGameflowAvailabilityState& v) {
    switch(v) { 
    case LolFeaturedModesGameflowAvailabilityState::Available_e:
      j = "Available";
    break;
    case LolFeaturedModesGameflowAvailabilityState::Configuration_e:
      j = "Configuration";
    break;
    case LolFeaturedModesGameflowAvailabilityState::InGameFlow_e:
      j = "InGameFlow";
    break;
    case LolFeaturedModesGameflowAvailabilityState::Initializing_e:
      j = "Initializing";
    break;
    case LolFeaturedModesGameflowAvailabilityState::Patching_e:
      j = "Patching";
    break;
    case LolFeaturedModesGameflowAvailabilityState::PlayerBanned_e:
      j = "PlayerBanned";
    break;
    };
  }
  static void from_json(const json& j, LolFeaturedModesGameflowAvailabilityState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolFeaturedModesGameflowAvailabilityState::Available_e;
      return;
    } 
    if(s == "Configuration") {
      v = LolFeaturedModesGameflowAvailabilityState::Configuration_e;
      return;
    } 
    if(s == "InGameFlow") {
      v = LolFeaturedModesGameflowAvailabilityState::InGameFlow_e;
      return;
    } 
    if(s == "Initializing") {
      v = LolFeaturedModesGameflowAvailabilityState::Initializing_e;
      return;
    } 
    if(s == "Patching") {
      v = LolFeaturedModesGameflowAvailabilityState::Patching_e;
      return;
    } 
    if(s == "PlayerBanned") {
      v = LolFeaturedModesGameflowAvailabilityState::PlayerBanned_e;
      return;
    } 
  } 
  struct LolFeaturedModesGameflowAvailability { /**/ 
    LolFeaturedModesGameflowAvailabilityState state;/**/
    bool isAvailable;/**/
  };
  static void to_json(json& j, const LolFeaturedModesGameflowAvailability& v) { 
    j["state"] = v.state;
    j["isAvailable"] = v.isAvailable;
  }
  static void from_json(const json& j, LolFeaturedModesGameflowAvailability& v) { 
    v.state = j.at("state").get<LolFeaturedModesGameflowAvailabilityState>(); 
    v.isAvailable = j.at("isAvailable").get<bool>(); 
  } 
  enum class LolFeaturedModesGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolFeaturedModesGameflowPhase& v) {
    switch(v) { 
    case LolFeaturedModesGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolFeaturedModesGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolFeaturedModesGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolFeaturedModesGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolFeaturedModesGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolFeaturedModesGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolFeaturedModesGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolFeaturedModesGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolFeaturedModesGameflowPhase::None_e:
      j = "None";
    break;
    case LolFeaturedModesGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolFeaturedModesGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolFeaturedModesGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolFeaturedModesGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolFeaturedModesGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolFeaturedModesGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolFeaturedModesGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolFeaturedModesGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolFeaturedModesGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolFeaturedModesGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolFeaturedModesGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolFeaturedModesGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolFeaturedModesGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolFeaturedModesGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolFeaturedModesGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolFeaturedModesGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolFeaturedModesGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolFeaturedModesGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolFeaturedModesGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolFeaturedModesGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolFeaturedModesGameflowSession { /**/ 
    LolFeaturedModesGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolFeaturedModesGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolFeaturedModesGameflowSession& v) { 
    v.phase = j.at("phase").get<LolFeaturedModesGameflowPhase>(); 
  } 
  enum class LolFeaturedModesLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolFeaturedModesLoginSessionStates& v) {
    switch(v) { 
    case LolFeaturedModesLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolFeaturedModesLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolFeaturedModesLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolFeaturedModesLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolFeaturedModesLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolFeaturedModesLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolFeaturedModesLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolFeaturedModesLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolFeaturedModesLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolFeaturedModesLoginSession { /**/ 
    LolFeaturedModesLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolFeaturedModesLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolFeaturedModesLoginSession& v) { 
    v.state = j.at("state").get<LolFeaturedModesLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolFeaturedModesMaps { /**/ 
    bool isRGM;/**/
    std::string gameModeName;/**/
    std::map<std::string, std::string> assets;/**/
  };
  static void to_json(json& j, const LolFeaturedModesMaps& v) { 
    j["isRGM"] = v.isRGM;
    j["gameModeName"] = v.gameModeName;
    j["assets"] = v.assets;
  }
  static void from_json(const json& j, LolFeaturedModesMaps& v) { 
    v.isRGM = j.at("isRGM").get<bool>(); 
    v.gameModeName = j.at("gameModeName").get<std::string>(); 
    v.assets = j.at("assets").get<std::map<std::string, std::string>>(); 
  } 
  struct LolFeaturedModesPlayerNotificationResource { /**/ 
    std::string source;/**/
    bool critical;/**/
    std::string state;/**/
    std::string backgroundUrl;/**/
    std::string iconUrl;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string expires;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolFeaturedModesPlayerNotificationResource& v) { 
    j["source"] = v.source;
    j["critical"] = v.critical;
    j["state"] = v.state;
    j["backgroundUrl"] = v.backgroundUrl;
    j["iconUrl"] = v.iconUrl;
    j["data"] = v.data;
    j["type"] = v.type;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["expires"] = v.expires;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolFeaturedModesPlayerNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.state = j.at("state").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  enum class LolFeaturedModesQueueGameCategory { /**/ 
    Custom_e = 1, /**/ 
    None_e = 0, /**/ 
    PvP_e = 2, /**/ 
    VersusAi_e = 3, /**/ 
  };
  static void to_json(json& j, const LolFeaturedModesQueueGameCategory& v) {
    switch(v) { 
    case LolFeaturedModesQueueGameCategory::Custom_e:
      j = "Custom";
    break;
    case LolFeaturedModesQueueGameCategory::None_e:
      j = "None";
    break;
    case LolFeaturedModesQueueGameCategory::PvP_e:
      j = "PvP";
    break;
    case LolFeaturedModesQueueGameCategory::VersusAi_e:
      j = "VersusAi";
    break;
    };
  }
  static void from_json(const json& j, LolFeaturedModesQueueGameCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "Custom") {
      v = LolFeaturedModesQueueGameCategory::Custom_e;
      return;
    } 
    if(s == "None") {
      v = LolFeaturedModesQueueGameCategory::None_e;
      return;
    } 
    if(s == "PvP") {
      v = LolFeaturedModesQueueGameCategory::PvP_e;
      return;
    } 
    if(s == "VersusAi") {
      v = LolFeaturedModesQueueGameCategory::VersusAi_e;
      return;
    } 
  } 
  enum class LolFeaturedModesQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolFeaturedModesQueueAvailability& v) {
    switch(v) { 
    case LolFeaturedModesQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolFeaturedModesQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolFeaturedModesQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolFeaturedModesQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolFeaturedModesQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolFeaturedModesQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolFeaturedModesQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  struct LolFeaturedModesQueue { /**/ 
    LolFeaturedModesQueueGameCategory category;/**/
    std::string gameMutator;/**/
    uint64_t lastToggledOffTime;/**/
    int32_t id;/**/
    std::string name;/**/
    LolFeaturedModesQueueAvailability queueAvailability;/**/
    int32_t mapId;/**/
    uint64_t lastToggledOnTime;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolFeaturedModesQueue& v) { 
    j["category"] = v.category;
    j["gameMutator"] = v.gameMutator;
    j["lastToggledOffTime"] = v.lastToggledOffTime;
    j["id"] = v.id;
    j["name"] = v.name;
    j["queueAvailability"] = v.queueAvailability;
    j["mapId"] = v.mapId;
    j["lastToggledOnTime"] = v.lastToggledOnTime;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolFeaturedModesQueue& v) { 
    v.category = j.at("category").get<LolFeaturedModesQueueGameCategory>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.lastToggledOffTime = j.at("lastToggledOffTime").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolFeaturedModesQueueAvailability>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.lastToggledOnTime = j.at("lastToggledOnTime").get<uint64_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolGameQueuesQueueGameTypeConfig { /**/ 
    int32_t banTimerDuration;/**/
    bool duplicatePick;/**/
    std::string pickMode;/**/
    bool battleBoost;/**/
    int64_t id;/**/
    bool advancedLearningQuests;/**/
    std::string name;/**/
    int32_t mainPickTimerDuration;/**/
    bool onboardCoopBeginner;/**/
    int32_t maxAllowableBans;/**/
    bool allowTrades;/**/
    int32_t postPickTimerDuration;/**/
    bool learningQuests;/**/
    bool crossTeamChampionPool;/**/
    bool deathMatch;/**/
    bool teamChampionPool;/**/
    bool doNotRemove;/**/
    std::optional<int32_t> numPlayersPerTeamOverride;/**/
    std::string banMode;/**/
    bool reroll;/**/
    std::optional<std::string> gameModeOverride;/**/
    bool exclusivePick;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueueGameTypeConfig& v) { 
    j["banTimerDuration"] = v.banTimerDuration;
    j["duplicatePick"] = v.duplicatePick;
    j["pickMode"] = v.pickMode;
    j["battleBoost"] = v.battleBoost;
    j["id"] = v.id;
    j["advancedLearningQuests"] = v.advancedLearningQuests;
    j["name"] = v.name;
    j["mainPickTimerDuration"] = v.mainPickTimerDuration;
    j["onboardCoopBeginner"] = v.onboardCoopBeginner;
    j["maxAllowableBans"] = v.maxAllowableBans;
    j["allowTrades"] = v.allowTrades;
    j["postPickTimerDuration"] = v.postPickTimerDuration;
    j["learningQuests"] = v.learningQuests;
    j["crossTeamChampionPool"] = v.crossTeamChampionPool;
    j["deathMatch"] = v.deathMatch;
    j["teamChampionPool"] = v.teamChampionPool;
    j["doNotRemove"] = v.doNotRemove;
    j["numPlayersPerTeamOverride"] = v.numPlayersPerTeamOverride;
    j["banMode"] = v.banMode;
    j["reroll"] = v.reroll;
    j["gameModeOverride"] = v.gameModeOverride;
    j["exclusivePick"] = v.exclusivePick;
  }
  static void from_json(const json& j, LolGameQueuesQueueGameTypeConfig& v) { 
    v.banTimerDuration = j.at("banTimerDuration").get<int32_t>(); 
    v.duplicatePick = j.at("duplicatePick").get<bool>(); 
    v.pickMode = j.at("pickMode").get<std::string>(); 
    v.battleBoost = j.at("battleBoost").get<bool>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.advancedLearningQuests = j.at("advancedLearningQuests").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
    v.mainPickTimerDuration = j.at("mainPickTimerDuration").get<int32_t>(); 
    v.onboardCoopBeginner = j.at("onboardCoopBeginner").get<bool>(); 
    v.maxAllowableBans = j.at("maxAllowableBans").get<int32_t>(); 
    v.allowTrades = j.at("allowTrades").get<bool>(); 
    v.postPickTimerDuration = j.at("postPickTimerDuration").get<int32_t>(); 
    v.learningQuests = j.at("learningQuests").get<bool>(); 
    v.crossTeamChampionPool = j.at("crossTeamChampionPool").get<bool>(); 
    v.deathMatch = j.at("deathMatch").get<bool>(); 
    v.teamChampionPool = j.at("teamChampionPool").get<bool>(); 
    v.doNotRemove = j.at("doNotRemove").get<bool>(); 
    v.numPlayersPerTeamOverride = j.at("numPlayersPerTeamOverride").get<std::optional<int32_t>>(); 
    v.banMode = j.at("banMode").get<std::string>(); 
    v.reroll = j.at("reroll").get<bool>(); 
    v.gameModeOverride = j.at("gameModeOverride").get<std::optional<std::string>>(); 
    v.exclusivePick = j.at("exclusivePick").get<bool>(); 
  } 
  struct LolGameQueuesLoginDataPacket { /**/ 
    std::vector<LolGameQueuesQueueGameTypeConfig> gameTypeConfigs;/**/
  };
  static void to_json(json& j, const LolGameQueuesLoginDataPacket& v) { 
    j["gameTypeConfigs"] = v.gameTypeConfigs;
  }
  static void from_json(const json& j, LolGameQueuesLoginDataPacket& v) { 
    v.gameTypeConfigs = j.at("gameTypeConfigs").get<std::vector<LolGameQueuesQueueGameTypeConfig>>(); 
  } 
  enum class LolGameQueuesLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameQueuesLoginSessionStates& v) {
    switch(v) { 
    case LolGameQueuesLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolGameQueuesLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolGameQueuesLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolGameQueuesLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolGameQueuesLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolGameQueuesLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolGameQueuesLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolGameQueuesLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolGameQueuesLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolGameQueuesLoginSession { /**/ 
    bool connected;/**/
    LolGameQueuesLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolGameQueuesLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolGameQueuesLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolGameQueuesLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolGameQueuesPlatformConfigEnabledMap { /**/ 
    int32_t minPlayers;/**/
    int32_t gameMapId;/**/
  };
  static void to_json(json& j, const LolGameQueuesPlatformConfigEnabledMap& v) { 
    j["minPlayers"] = v.minPlayers;
    j["gameMapId"] = v.gameMapId;
  }
  static void from_json(const json& j, LolGameQueuesPlatformConfigEnabledMap& v) { 
    v.minPlayers = j.at("minPlayers").get<int32_t>(); 
    v.gameMapId = j.at("gameMapId").get<int32_t>(); 
  } 
  struct LolGameQueuesQueueReward { /**/ 
    bool isIpEnabled;/**/
    std::vector<int32_t> partySizeIpRewards;/**/
    bool isXpEnabled;/**/
    bool isChampionPointsEnabled;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueueReward& v) { 
    j["isIpEnabled"] = v.isIpEnabled;
    j["partySizeIpRewards"] = v.partySizeIpRewards;
    j["isXpEnabled"] = v.isXpEnabled;
    j["isChampionPointsEnabled"] = v.isChampionPointsEnabled;
  }
  static void from_json(const json& j, LolGameQueuesQueueReward& v) { 
    v.isIpEnabled = j.at("isIpEnabled").get<bool>(); 
    v.partySizeIpRewards = j.at("partySizeIpRewards").get<std::vector<int32_t>>(); 
    v.isXpEnabled = j.at("isXpEnabled").get<bool>(); 
    v.isChampionPointsEnabled = j.at("isChampionPointsEnabled").get<bool>(); 
  } 
  enum class LolGameQueuesQueueGameCategory { /**/ 
    Custom_e = 1, /**/ 
    None_e = 0, /**/ 
    PvP_e = 2, /**/ 
    VersusAi_e = 3, /**/ 
  };
  static void to_json(json& j, const LolGameQueuesQueueGameCategory& v) {
    switch(v) { 
    case LolGameQueuesQueueGameCategory::Custom_e:
      j = "Custom";
    break;
    case LolGameQueuesQueueGameCategory::None_e:
      j = "None";
    break;
    case LolGameQueuesQueueGameCategory::PvP_e:
      j = "PvP";
    break;
    case LolGameQueuesQueueGameCategory::VersusAi_e:
      j = "VersusAi";
    break;
    };
  }
  static void from_json(const json& j, LolGameQueuesQueueGameCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "Custom") {
      v = LolGameQueuesQueueGameCategory::Custom_e;
      return;
    } 
    if(s == "None") {
      v = LolGameQueuesQueueGameCategory::None_e;
      return;
    } 
    if(s == "PvP") {
      v = LolGameQueuesQueueGameCategory::PvP_e;
      return;
    } 
    if(s == "VersusAi") {
      v = LolGameQueuesQueueGameCategory::VersusAi_e;
      return;
    } 
  } 
  enum class LolGameQueuesQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameQueuesQueueAvailability& v) {
    switch(v) { 
    case LolGameQueuesQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolGameQueuesQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolGameQueuesQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolGameQueuesQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolGameQueuesQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolGameQueuesQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolGameQueuesQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  struct LolGameQueuesQueue { /**/ 
    int32_t maximumParticipantListSize;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
    std::string shortName;/**/
    uint32_t minLevel;/**/
    int32_t id;/**/
    std::string name;/**/
    bool areFreeChampionsAllowed;/**/
    int32_t numPlayersPerTeam;/**/
    int32_t minimumParticipantListSize;/**/
    LolGameQueuesQueueReward queueRewards;/**/
    bool isTeamOnly;/**/
    uint64_t lastToggledOffTime;/**/
    int32_t mapId;/**/
    bool isRanked;/**/
    std::string gameMutator;/**/
    bool showPositionSelector;/**/
    std::string detailedDescription;/**/
    bool isTeamBuilderManaged;/**/
    std::string description;/**/
    bool spectatorEnabled;/**/
    uint32_t maxLevel;/**/
    uint32_t championsRequiredToPlay;/**/
    LolGameQueuesQueueGameCategory category;/**/
    LolGameQueuesQueueAvailability queueAvailability;/**/
    std::string assetMutator;/**/
    uint32_t maxSummonerLevelForFirstWinOfTheDay;/**/
    std::string type;/**/
    std::string gameMode;/**/
    uint64_t lastToggledOnTime;/**/
    LolGameQueuesQueueGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueue& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
    j["shortName"] = v.shortName;
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
    j["name"] = v.name;
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["queueRewards"] = v.queueRewards;
    j["isTeamOnly"] = v.isTeamOnly;
    j["lastToggledOffTime"] = v.lastToggledOffTime;
    j["mapId"] = v.mapId;
    j["isRanked"] = v.isRanked;
    j["gameMutator"] = v.gameMutator;
    j["showPositionSelector"] = v.showPositionSelector;
    j["detailedDescription"] = v.detailedDescription;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["description"] = v.description;
    j["spectatorEnabled"] = v.spectatorEnabled;
    j["maxLevel"] = v.maxLevel;
    j["championsRequiredToPlay"] = v.championsRequiredToPlay;
    j["category"] = v.category;
    j["queueAvailability"] = v.queueAvailability;
    j["assetMutator"] = v.assetMutator;
    j["maxSummonerLevelForFirstWinOfTheDay"] = v.maxSummonerLevelForFirstWinOfTheDay;
    j["type"] = v.type;
    j["gameMode"] = v.gameMode;
    j["lastToggledOnTime"] = v.lastToggledOnTime;
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolGameQueuesQueue& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<int32_t>(); 
    v.queueRewards = j.at("queueRewards").get<LolGameQueuesQueueReward>(); 
    v.isTeamOnly = j.at("isTeamOnly").get<bool>(); 
    v.lastToggledOffTime = j.at("lastToggledOffTime").get<uint64_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.isRanked = j.at("isRanked").get<bool>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.detailedDescription = j.at("detailedDescription").get<std::string>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.spectatorEnabled = j.at("spectatorEnabled").get<bool>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.championsRequiredToPlay = j.at("championsRequiredToPlay").get<uint32_t>(); 
    v.category = j.at("category").get<LolGameQueuesQueueGameCategory>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolGameQueuesQueueAvailability>(); 
    v.assetMutator = j.at("assetMutator").get<std::string>(); 
    v.maxSummonerLevelForFirstWinOfTheDay = j.at("maxSummonerLevelForFirstWinOfTheDay").get<uint32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.lastToggledOnTime = j.at("lastToggledOnTime").get<uint64_t>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolGameQueuesQueueGameTypeConfig>(); 
  } 
  enum class LolGameQueuesQueueCustomGameSpectatorPolicy { /**/ 
    AllAllowed_e = 3, /**/ 
    FriendsAllowed_e = 2, /**/ 
    LobbyAllowed_e = 1, /**/ 
    NotAllowed_e = 0, /**/ 
  };
  static void to_json(json& j, const LolGameQueuesQueueCustomGameSpectatorPolicy& v) {
    switch(v) { 
    case LolGameQueuesQueueCustomGameSpectatorPolicy::AllAllowed_e:
      j = "AllAllowed";
    break;
    case LolGameQueuesQueueCustomGameSpectatorPolicy::FriendsAllowed_e:
      j = "FriendsAllowed";
    break;
    case LolGameQueuesQueueCustomGameSpectatorPolicy::LobbyAllowed_e:
      j = "LobbyAllowed";
    break;
    case LolGameQueuesQueueCustomGameSpectatorPolicy::NotAllowed_e:
      j = "NotAllowed";
    break;
    };
  }
  static void from_json(const json& j, LolGameQueuesQueueCustomGameSpectatorPolicy& v) {
    auto s = j.get<std::string>(); 
    if(s == "AllAllowed") {
      v = LolGameQueuesQueueCustomGameSpectatorPolicy::AllAllowed_e;
      return;
    } 
    if(s == "FriendsAllowed") {
      v = LolGameQueuesQueueCustomGameSpectatorPolicy::FriendsAllowed_e;
      return;
    } 
    if(s == "LobbyAllowed") {
      v = LolGameQueuesQueueCustomGameSpectatorPolicy::LobbyAllowed_e;
      return;
    } 
    if(s == "NotAllowed") {
      v = LolGameQueuesQueueCustomGameSpectatorPolicy::NotAllowed_e;
      return;
    } 
  } 
  struct LolGameQueuesQueueCustomGameSubcategory { /**/ 
    int32_t numPlayersPerTeam;/**/
    std::string gameMutator;/**/
    LolGameQueuesQueueAvailability queueAvailability;/**/
    int32_t maxPlayerCount;/**/
    uint32_t maxLevel;/**/
    int32_t minimumParticipantListSize;/**/
    std::vector<LolGameQueuesQueueGameTypeConfig> mutators;/**/
    uint32_t minLevel;/**/
    int32_t mapId;/**/
    int32_t maximumParticipantListSize;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueueCustomGameSubcategory& v) { 
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["gameMutator"] = v.gameMutator;
    j["queueAvailability"] = v.queueAvailability;
    j["maxPlayerCount"] = v.maxPlayerCount;
    j["maxLevel"] = v.maxLevel;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["mutators"] = v.mutators;
    j["minLevel"] = v.minLevel;
    j["mapId"] = v.mapId;
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolGameQueuesQueueCustomGameSubcategory& v) { 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolGameQueuesQueueAvailability>(); 
    v.maxPlayerCount = j.at("maxPlayerCount").get<int32_t>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<int32_t>(); 
    v.mutators = j.at("mutators").get<std::vector<LolGameQueuesQueueGameTypeConfig>>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolGameQueuesQueueCustomGame { /**/ 
    std::vector<LolGameQueuesQueueCustomGameSpectatorPolicy> spectatorPolicies;/**/
    LolGameQueuesQueueAvailability queueAvailability;/**/
    std::vector<LolGameQueuesQueueCustomGameSubcategory> subcategories;/**/
    std::optional<std::vector<std::string>> gameServerRegions;/**/
    uint32_t spectatorSlotLimit;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueueCustomGame& v) { 
    j["spectatorPolicies"] = v.spectatorPolicies;
    j["queueAvailability"] = v.queueAvailability;
    j["subcategories"] = v.subcategories;
    j["gameServerRegions"] = v.gameServerRegions;
    j["spectatorSlotLimit"] = v.spectatorSlotLimit;
  }
  static void from_json(const json& j, LolGameQueuesQueueCustomGame& v) { 
    v.spectatorPolicies = j.at("spectatorPolicies").get<std::vector<LolGameQueuesQueueCustomGameSpectatorPolicy>>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolGameQueuesQueueAvailability>(); 
    v.subcategories = j.at("subcategories").get<std::vector<LolGameQueuesQueueCustomGameSubcategory>>(); 
    v.gameServerRegions = j.at("gameServerRegions").get<std::optional<std::vector<std::string>>>(); 
    v.spectatorSlotLimit = j.at("spectatorSlotLimit").get<uint32_t>(); 
  } 
  struct LolGameQueuesQueueTranslation { /**/ 
    std::string detailedDescription;/**/
    std::string shortName;/**/
    std::string description;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolGameQueuesQueueTranslation& v) { 
    j["detailedDescription"] = v.detailedDescription;
    j["shortName"] = v.shortName;
    j["description"] = v.description;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolGameQueuesQueueTranslation& v) { 
    v.detailedDescription = j.at("detailedDescription").get<std::string>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class LolGameSettingsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameSettingsLoginSessionStates& v) {
    switch(v) { 
    case LolGameSettingsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolGameSettingsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolGameSettingsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolGameSettingsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolGameSettingsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolGameSettingsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolGameSettingsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolGameSettingsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolGameSettingsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolGameSettingsLoginSession { /**/ 
    LolGameSettingsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolGameSettingsLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolGameSettingsLoginSession& v) { 
    v.state = j.at("state").get<LolGameSettingsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolGameSettingsgamesettingsgameclient { /**/ 
    bool running;/**/
  };
  static void to_json(json& j, const LolGameSettingsgamesettingsgameclient& v) { 
    j["running"] = v.running;
  }
  static void from_json(const json& j, LolGameSettingsgamesettingsgameclient& v) { 
    v.running = j.at("running").get<bool>(); 
  } 
  struct LolGameSettingsgamesettingsgameflowsession { /**/ 
    LolGameSettingsgamesettingsgameclient gameClient;/**/
  };
  static void to_json(json& j, const LolGameSettingsgamesettingsgameflowsession& v) { 
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolGameSettingsgamesettingsgameflowsession& v) { 
    v.gameClient = j.at("gameClient").get<LolGameSettingsgamesettingsgameclient>(); 
  } 
  enum class LolGameflowGameflowAvailabilityState { /**/ 
    Available_e = 0, /**/ 
    Configuration_e = 5, /**/ 
    InGameFlow_e = 4, /**/ 
    Initializing_e = 1, /**/ 
    Patching_e = 2, /**/ 
    PlayerBanned_e = 3, /**/ 
  };
  static void to_json(json& j, const LolGameflowGameflowAvailabilityState& v) {
    switch(v) { 
    case LolGameflowGameflowAvailabilityState::Available_e:
      j = "Available";
    break;
    case LolGameflowGameflowAvailabilityState::Configuration_e:
      j = "Configuration";
    break;
    case LolGameflowGameflowAvailabilityState::InGameFlow_e:
      j = "InGameFlow";
    break;
    case LolGameflowGameflowAvailabilityState::Initializing_e:
      j = "Initializing";
    break;
    case LolGameflowGameflowAvailabilityState::Patching_e:
      j = "Patching";
    break;
    case LolGameflowGameflowAvailabilityState::PlayerBanned_e:
      j = "PlayerBanned";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowGameflowAvailabilityState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolGameflowGameflowAvailabilityState::Available_e;
      return;
    } 
    if(s == "Configuration") {
      v = LolGameflowGameflowAvailabilityState::Configuration_e;
      return;
    } 
    if(s == "InGameFlow") {
      v = LolGameflowGameflowAvailabilityState::InGameFlow_e;
      return;
    } 
    if(s == "Initializing") {
      v = LolGameflowGameflowAvailabilityState::Initializing_e;
      return;
    } 
    if(s == "Patching") {
      v = LolGameflowGameflowAvailabilityState::Patching_e;
      return;
    } 
    if(s == "PlayerBanned") {
      v = LolGameflowGameflowAvailabilityState::PlayerBanned_e;
      return;
    } 
  } 
  struct LolGameflowGameflowAvailability { /**/ 
    LolGameflowGameflowAvailabilityState state;/**/
    bool isAvailable;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowAvailability& v) { 
    j["state"] = v.state;
    j["isAvailable"] = v.isAvailable;
  }
  static void from_json(const json& j, LolGameflowGameflowAvailability& v) { 
    v.state = j.at("state").get<LolGameflowGameflowAvailabilityState>(); 
    v.isAvailable = j.at("isAvailable").get<bool>(); 
  } 
  struct LolGameflowGameflowGameClient { /**/ 
    bool running;/**/
    bool visible;/**/
    uint16_t observerServerPort;/**/
    std::string observerServerIp;/**/
    uint16_t serverPort;/**/
    std::string serverIp;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowGameClient& v) { 
    j["running"] = v.running;
    j["visible"] = v.visible;
    j["observerServerPort"] = v.observerServerPort;
    j["observerServerIp"] = v.observerServerIp;
    j["serverPort"] = v.serverPort;
    j["serverIp"] = v.serverIp;
  }
  static void from_json(const json& j, LolGameflowGameflowGameClient& v) { 
    v.running = j.at("running").get<bool>(); 
    v.visible = j.at("visible").get<bool>(); 
    v.observerServerPort = j.at("observerServerPort").get<uint16_t>(); 
    v.observerServerIp = j.at("observerServerIp").get<std::string>(); 
    v.serverPort = j.at("serverPort").get<uint16_t>(); 
    v.serverIp = j.at("serverIp").get<std::string>(); 
  } 
  struct LolGameflowQueueReward { /**/ 
    bool isIpEnabled;/**/
    std::vector<int32_t> partySizeIpRewards;/**/
    bool isXpEnabled;/**/
    bool isChampionPointsEnabled;/**/
  };
  static void to_json(json& j, const LolGameflowQueueReward& v) { 
    j["isIpEnabled"] = v.isIpEnabled;
    j["partySizeIpRewards"] = v.partySizeIpRewards;
    j["isXpEnabled"] = v.isXpEnabled;
    j["isChampionPointsEnabled"] = v.isChampionPointsEnabled;
  }
  static void from_json(const json& j, LolGameflowQueueReward& v) { 
    v.isIpEnabled = j.at("isIpEnabled").get<bool>(); 
    v.partySizeIpRewards = j.at("partySizeIpRewards").get<std::vector<int32_t>>(); 
    v.isXpEnabled = j.at("isXpEnabled").get<bool>(); 
    v.isChampionPointsEnabled = j.at("isChampionPointsEnabled").get<bool>(); 
  } 
  enum class LolGameflowQueueGameCategory { /**/ 
    Custom_e = 1, /**/ 
    None_e = 0, /**/ 
    PvP_e = 2, /**/ 
    VersusAi_e = 3, /**/ 
  };
  static void to_json(json& j, const LolGameflowQueueGameCategory& v) {
    switch(v) { 
    case LolGameflowQueueGameCategory::Custom_e:
      j = "Custom";
    break;
    case LolGameflowQueueGameCategory::None_e:
      j = "None";
    break;
    case LolGameflowQueueGameCategory::PvP_e:
      j = "PvP";
    break;
    case LolGameflowQueueGameCategory::VersusAi_e:
      j = "VersusAi";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowQueueGameCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "Custom") {
      v = LolGameflowQueueGameCategory::Custom_e;
      return;
    } 
    if(s == "None") {
      v = LolGameflowQueueGameCategory::None_e;
      return;
    } 
    if(s == "PvP") {
      v = LolGameflowQueueGameCategory::PvP_e;
      return;
    } 
    if(s == "VersusAi") {
      v = LolGameflowQueueGameCategory::VersusAi_e;
      return;
    } 
  } 
  enum class LolGameflowQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameflowQueueAvailability& v) {
    switch(v) { 
    case LolGameflowQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolGameflowQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolGameflowQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolGameflowQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolGameflowQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolGameflowQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  struct LolGameflowQueueGameTypeConfig { /**/ 
    int32_t banTimerDuration;/**/
    bool duplicatePick;/**/
    std::string pickMode;/**/
    bool deathMatch;/**/
    bool advancedLearningQuests;/**/
    std::string name;/**/
    bool learningQuests;/**/
    int32_t mainPickTimerDuration;/**/
    bool onboardCoopBeginner;/**/
    bool doNotRemove;/**/
    int32_t maxAllowableBans;/**/
    int64_t id;/**/
    bool reroll;/**/
    std::string banMode;/**/
    bool crossTeamChampionPool;/**/
    bool allowTrades;/**/
    int32_t postPickTimerDuration;/**/
    bool teamChampionPool;/**/
    bool exclusivePick;/**/
    bool battleBoost;/**/
  };
  static void to_json(json& j, const LolGameflowQueueGameTypeConfig& v) { 
    j["banTimerDuration"] = v.banTimerDuration;
    j["duplicatePick"] = v.duplicatePick;
    j["pickMode"] = v.pickMode;
    j["deathMatch"] = v.deathMatch;
    j["advancedLearningQuests"] = v.advancedLearningQuests;
    j["name"] = v.name;
    j["learningQuests"] = v.learningQuests;
    j["mainPickTimerDuration"] = v.mainPickTimerDuration;
    j["onboardCoopBeginner"] = v.onboardCoopBeginner;
    j["doNotRemove"] = v.doNotRemove;
    j["maxAllowableBans"] = v.maxAllowableBans;
    j["id"] = v.id;
    j["reroll"] = v.reroll;
    j["banMode"] = v.banMode;
    j["crossTeamChampionPool"] = v.crossTeamChampionPool;
    j["allowTrades"] = v.allowTrades;
    j["postPickTimerDuration"] = v.postPickTimerDuration;
    j["teamChampionPool"] = v.teamChampionPool;
    j["exclusivePick"] = v.exclusivePick;
    j["battleBoost"] = v.battleBoost;
  }
  static void from_json(const json& j, LolGameflowQueueGameTypeConfig& v) { 
    v.banTimerDuration = j.at("banTimerDuration").get<int32_t>(); 
    v.duplicatePick = j.at("duplicatePick").get<bool>(); 
    v.pickMode = j.at("pickMode").get<std::string>(); 
    v.deathMatch = j.at("deathMatch").get<bool>(); 
    v.advancedLearningQuests = j.at("advancedLearningQuests").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
    v.learningQuests = j.at("learningQuests").get<bool>(); 
    v.mainPickTimerDuration = j.at("mainPickTimerDuration").get<int32_t>(); 
    v.onboardCoopBeginner = j.at("onboardCoopBeginner").get<bool>(); 
    v.doNotRemove = j.at("doNotRemove").get<bool>(); 
    v.maxAllowableBans = j.at("maxAllowableBans").get<int32_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.reroll = j.at("reroll").get<bool>(); 
    v.banMode = j.at("banMode").get<std::string>(); 
    v.crossTeamChampionPool = j.at("crossTeamChampionPool").get<bool>(); 
    v.allowTrades = j.at("allowTrades").get<bool>(); 
    v.postPickTimerDuration = j.at("postPickTimerDuration").get<int32_t>(); 
    v.teamChampionPool = j.at("teamChampionPool").get<bool>(); 
    v.exclusivePick = j.at("exclusivePick").get<bool>(); 
    v.battleBoost = j.at("battleBoost").get<bool>(); 
  } 
  struct LolGameflowQueue { /**/ 
    int32_t maximumParticipantListSize;/**/
    std::string shortName;/**/
    uint32_t minLevel;/**/
    int32_t id;/**/
    std::string name;/**/
    bool areFreeChampionsAllowed;/**/
    int32_t numPlayersPerTeam;/**/
    int32_t minimumParticipantListSize;/**/
    LolGameflowQueueReward queueRewards;/**/
    bool isTeamOnly;/**/
    int32_t mapId;/**/
    bool isRanked;/**/
    std::string gameMutator;/**/
    std::string detailedDescription;/**/
    bool isTeamBuilderManaged;/**/
    std::string description;/**/
    bool spectatorEnabled;/**/
    uint32_t maxLevel;/**/
    LolGameflowQueueGameCategory category;/**/
    LolGameflowQueueAvailability queueAvailability;/**/
    std::string assetMutator;/**/
    uint32_t maxSummonerLevelForFirstWinOfTheDay;/**/
    std::string type;/**/
    std::string gameMode;/**/
    LolGameflowQueueGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolGameflowQueue& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["shortName"] = v.shortName;
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
    j["name"] = v.name;
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["queueRewards"] = v.queueRewards;
    j["isTeamOnly"] = v.isTeamOnly;
    j["mapId"] = v.mapId;
    j["isRanked"] = v.isRanked;
    j["gameMutator"] = v.gameMutator;
    j["detailedDescription"] = v.detailedDescription;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["description"] = v.description;
    j["spectatorEnabled"] = v.spectatorEnabled;
    j["maxLevel"] = v.maxLevel;
    j["category"] = v.category;
    j["queueAvailability"] = v.queueAvailability;
    j["assetMutator"] = v.assetMutator;
    j["maxSummonerLevelForFirstWinOfTheDay"] = v.maxSummonerLevelForFirstWinOfTheDay;
    j["type"] = v.type;
    j["gameMode"] = v.gameMode;
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolGameflowQueue& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<int32_t>(); 
    v.queueRewards = j.at("queueRewards").get<LolGameflowQueueReward>(); 
    v.isTeamOnly = j.at("isTeamOnly").get<bool>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.isRanked = j.at("isRanked").get<bool>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.detailedDescription = j.at("detailedDescription").get<std::string>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.spectatorEnabled = j.at("spectatorEnabled").get<bool>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.category = j.at("category").get<LolGameflowQueueGameCategory>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolGameflowQueueAvailability>(); 
    v.assetMutator = j.at("assetMutator").get<std::string>(); 
    v.maxSummonerLevelForFirstWinOfTheDay = j.at("maxSummonerLevelForFirstWinOfTheDay").get<uint32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolGameflowQueueGameTypeConfig>(); 
  } 
  struct LolGameflowGameflowGameData { /**/ 
    std::vector<json> playerChampionSelections;/**/
    std::vector<json> teamOne;/**/
    bool isCustomGame;/**/
    std::string gameName;/**/
    LolGameflowQueue queue;/**/
    uint64_t gameId;/**/
    std::vector<json> teamTwo;/**/
    bool spectatorsAllowed;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowGameData& v) { 
    j["playerChampionSelections"] = v.playerChampionSelections;
    j["teamOne"] = v.teamOne;
    j["isCustomGame"] = v.isCustomGame;
    j["gameName"] = v.gameName;
    j["queue"] = v.queue;
    j["gameId"] = v.gameId;
    j["teamTwo"] = v.teamTwo;
    j["spectatorsAllowed"] = v.spectatorsAllowed;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolGameflowGameflowGameData& v) { 
    v.playerChampionSelections = j.at("playerChampionSelections").get<std::vector<json>>(); 
    v.teamOne = j.at("teamOne").get<std::vector<json>>(); 
    v.isCustomGame = j.at("isCustomGame").get<bool>(); 
    v.gameName = j.at("gameName").get<std::string>(); 
    v.queue = j.at("queue").get<LolGameflowQueue>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<json>>(); 
    v.spectatorsAllowed = j.at("spectatorsAllowed").get<bool>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  enum class LolGameflowGameflowGameDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolGameflowGameflowGameDodgeState& v) {
    switch(v) { 
    case LolGameflowGameflowGameDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolGameflowGameflowGameDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolGameflowGameflowGameDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolGameflowGameflowGameDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowGameflowGameDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolGameflowGameflowGameDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolGameflowGameflowGameDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolGameflowGameflowGameDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolGameflowGameflowGameDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  enum class LolGameflowGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolGameflowGameflowPhase& v) {
    switch(v) { 
    case LolGameflowGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolGameflowGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolGameflowGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolGameflowGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolGameflowGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolGameflowGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolGameflowGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolGameflowGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolGameflowGameflowPhase::None_e:
      j = "None";
    break;
    case LolGameflowGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolGameflowGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolGameflowGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolGameflowGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolGameflowGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolGameflowGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolGameflowGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolGameflowGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolGameflowGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolGameflowGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolGameflowGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolGameflowGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolGameflowGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolGameflowGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolGameflowGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolGameflowGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolGameflowGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolGameflowGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolGameflowGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolGameflowGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolGameflowGameflowGameDodgeState state;/**/
    LolGameflowGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolGameflowGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolGameflowGameflowGameDodgeState>(); 
    v.phase = j.at("phase").get<LolGameflowGameflowPhase>(); 
  } 
  struct LolGameflowGameflowGameMap { /**/ 
    std::string gameMutator;/**/
    json properties;/**/
    int64_t id;/**/
    json assets;/**/
    std::string platformId;/**/
    std::string name;/**/
    std::string gameModeShortName;/**/
    std::string platformName;/**/
    bool isRGM;/**/
    std::string gameMode;/**/
    std::string description;/**/
    std::string gameModeName;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowGameMap& v) { 
    j["gameMutator"] = v.gameMutator;
    j["properties"] = v.properties;
    j["id"] = v.id;
    j["assets"] = v.assets;
    j["platformId"] = v.platformId;
    j["name"] = v.name;
    j["gameModeShortName"] = v.gameModeShortName;
    j["platformName"] = v.platformName;
    j["isRGM"] = v.isRGM;
    j["gameMode"] = v.gameMode;
    j["description"] = v.description;
    j["gameModeName"] = v.gameModeName;
  }
  static void from_json(const json& j, LolGameflowGameflowGameMap& v) { 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.properties = j.at("properties").get<json>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.assets = j.at("assets").get<json>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.gameModeShortName = j.at("gameModeShortName").get<std::string>(); 
    v.platformName = j.at("platformName").get<std::string>(); 
    v.isRGM = j.at("isRGM").get<bool>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.gameModeName = j.at("gameModeName").get<std::string>(); 
  } 
  struct LolGameflowGameflowProcessInfo { /**/ 
    uint32_t pid;/**/
    std::vector<std::string> rawArgs;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowProcessInfo& v) { 
    j["pid"] = v.pid;
    j["rawArgs"] = v.rawArgs;
  }
  static void from_json(const json& j, LolGameflowGameflowProcessInfo& v) { 
    v.pid = j.at("pid").get<uint32_t>(); 
    v.rawArgs = j.at("rawArgs").get<std::vector<std::string>>(); 
  } 
  struct LolGameflowGameflowSession { /**/ 
    LolGameflowGameflowGameMap map;/**/
    LolGameflowGameflowPhase phase;/**/
    LolGameflowGameflowGameClient gameClient;/**/
    LolGameflowGameflowGameData gameData;/**/
    LolGameflowGameflowGameDodge gameDodge;/**/
  };
  static void to_json(json& j, const LolGameflowGameflowSession& v) { 
    j["map"] = v.map;
    j["phase"] = v.phase;
    j["gameClient"] = v.gameClient;
    j["gameData"] = v.gameData;
    j["gameDodge"] = v.gameDodge;
  }
  static void from_json(const json& j, LolGameflowGameflowSession& v) { 
    v.map = j.at("map").get<LolGameflowGameflowGameMap>(); 
    v.phase = j.at("phase").get<LolGameflowGameflowPhase>(); 
    v.gameClient = j.at("gameClient").get<LolGameflowGameflowGameClient>(); 
    v.gameData = j.at("gameData").get<LolGameflowGameflowGameData>(); 
    v.gameDodge = j.at("gameDodge").get<LolGameflowGameflowGameDodge>(); 
  } 
  enum class LolGameflowGameflowWatchPhase { /**/ 
    None_e = 0, /**/ 
    WatchFailedToLaunch_e = 3, /**/ 
    WatchInProgress_e = 2, /**/ 
    WatchStarted_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameflowGameflowWatchPhase& v) {
    switch(v) { 
    case LolGameflowGameflowWatchPhase::None_e:
      j = "None";
    break;
    case LolGameflowGameflowWatchPhase::WatchFailedToLaunch_e:
      j = "WatchFailedToLaunch";
    break;
    case LolGameflowGameflowWatchPhase::WatchInProgress_e:
      j = "WatchInProgress";
    break;
    case LolGameflowGameflowWatchPhase::WatchStarted_e:
      j = "WatchStarted";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowGameflowWatchPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "None") {
      v = LolGameflowGameflowWatchPhase::None_e;
      return;
    } 
    if(s == "WatchFailedToLaunch") {
      v = LolGameflowGameflowWatchPhase::WatchFailedToLaunch_e;
      return;
    } 
    if(s == "WatchInProgress") {
      v = LolGameflowGameflowWatchPhase::WatchInProgress_e;
      return;
    } 
    if(s == "WatchStarted") {
      v = LolGameflowGameflowWatchPhase::WatchStarted_e;
      return;
    } 
  } 
  enum class LolGameflowQueueCustomGameSpectatorPolicy { /**/ 
    AllAllowed_e = 3, /**/ 
    FriendsAllowed_e = 2, /**/ 
    LobbyAllowed_e = 1, /**/ 
    NotAllowed_e = 0, /**/ 
  };
  static void to_json(json& j, const LolGameflowQueueCustomGameSpectatorPolicy& v) {
    switch(v) { 
    case LolGameflowQueueCustomGameSpectatorPolicy::AllAllowed_e:
      j = "AllAllowed";
    break;
    case LolGameflowQueueCustomGameSpectatorPolicy::FriendsAllowed_e:
      j = "FriendsAllowed";
    break;
    case LolGameflowQueueCustomGameSpectatorPolicy::LobbyAllowed_e:
      j = "LobbyAllowed";
    break;
    case LolGameflowQueueCustomGameSpectatorPolicy::NotAllowed_e:
      j = "NotAllowed";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowQueueCustomGameSpectatorPolicy& v) {
    auto s = j.get<std::string>(); 
    if(s == "AllAllowed") {
      v = LolGameflowQueueCustomGameSpectatorPolicy::AllAllowed_e;
      return;
    } 
    if(s == "FriendsAllowed") {
      v = LolGameflowQueueCustomGameSpectatorPolicy::FriendsAllowed_e;
      return;
    } 
    if(s == "LobbyAllowed") {
      v = LolGameflowQueueCustomGameSpectatorPolicy::LobbyAllowed_e;
      return;
    } 
    if(s == "NotAllowed") {
      v = LolGameflowQueueCustomGameSpectatorPolicy::NotAllowed_e;
      return;
    } 
  } 
  struct LolGameflowLobbyStatus { /**/ 
    int32_t queueId;/**/
    bool isSpectator;/**/
    std::vector<uint64_t> invitedSummonerIds;/**/
    bool allowedPlayAgain;/**/
    bool isPracticeTool;/**/
    std::optional<std::string> lobbyId;/**/
    std::vector<uint64_t> memberSummonerIds;/**/
    bool isCustom;/**/
    bool isLeader;/**/
    LolGameflowQueueCustomGameSpectatorPolicy customSpectatorPolicy;/**/
  };
  static void to_json(json& j, const LolGameflowLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["isSpectator"] = v.isSpectator;
    j["invitedSummonerIds"] = v.invitedSummonerIds;
    j["allowedPlayAgain"] = v.allowedPlayAgain;
    j["isPracticeTool"] = v.isPracticeTool;
    j["lobbyId"] = v.lobbyId;
    j["memberSummonerIds"] = v.memberSummonerIds;
    j["isCustom"] = v.isCustom;
    j["isLeader"] = v.isLeader;
    j["customSpectatorPolicy"] = v.customSpectatorPolicy;
  }
  static void from_json(const json& j, LolGameflowLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.invitedSummonerIds = j.at("invitedSummonerIds").get<std::vector<uint64_t>>(); 
    v.allowedPlayAgain = j.at("allowedPlayAgain").get<bool>(); 
    v.isPracticeTool = j.at("isPracticeTool").get<bool>(); 
    v.lobbyId = j.at("lobbyId").get<std::optional<std::string>>(); 
    v.memberSummonerIds = j.at("memberSummonerIds").get<std::vector<uint64_t>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
    v.customSpectatorPolicy = j.at("customSpectatorPolicy").get<LolGameflowQueueCustomGameSpectatorPolicy>(); 
  } 
  enum class LolGameflowLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGameflowLoginSessionStates& v) {
    switch(v) { 
    case LolGameflowLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolGameflowLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolGameflowLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolGameflowLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolGameflowLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolGameflowLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolGameflowLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolGameflowLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolGameflowLoginSession { /**/ 
    bool connected;/**/
    LolGameflowLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolGameflowLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolGameflowLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolGameflowLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolGameflowPatcherProductStateAction { /**/ 
    CheckingForUpdates_e = 1, /**/ 
    Idle_e = 0, /**/ 
    Patching_e = 2, /**/ 
    Repairing_e = 3, /**/ 
  };
  static void to_json(json& j, const LolGameflowPatcherProductStateAction& v) {
    switch(v) { 
    case LolGameflowPatcherProductStateAction::CheckingForUpdates_e:
      j = "CheckingForUpdates";
    break;
    case LolGameflowPatcherProductStateAction::Idle_e:
      j = "Idle";
    break;
    case LolGameflowPatcherProductStateAction::Patching_e:
      j = "Patching";
    break;
    case LolGameflowPatcherProductStateAction::Repairing_e:
      j = "Repairing";
    break;
    };
  }
  static void from_json(const json& j, LolGameflowPatcherProductStateAction& v) {
    auto s = j.get<std::string>(); 
    if(s == "CheckingForUpdates") {
      v = LolGameflowPatcherProductStateAction::CheckingForUpdates_e;
      return;
    } 
    if(s == "Idle") {
      v = LolGameflowPatcherProductStateAction::Idle_e;
      return;
    } 
    if(s == "Patching") {
      v = LolGameflowPatcherProductStateAction::Patching_e;
      return;
    } 
    if(s == "Repairing") {
      v = LolGameflowPatcherProductStateAction::Repairing_e;
      return;
    } 
  } 
  struct LolGameflowPatcherProductState { /**/ 
    bool isCorrupted;/**/
    LolGameflowPatcherProductStateAction action;/**/
    bool isUpdateAvailable;/**/
    bool isUpToDate;/**/
    bool isStopped;/**/
  };
  static void to_json(json& j, const LolGameflowPatcherProductState& v) { 
    j["isCorrupted"] = v.isCorrupted;
    j["action"] = v.action;
    j["isUpdateAvailable"] = v.isUpdateAvailable;
    j["isUpToDate"] = v.isUpToDate;
    j["isStopped"] = v.isStopped;
  }
  static void from_json(const json& j, LolGameflowPatcherProductState& v) { 
    v.isCorrupted = j.at("isCorrupted").get<bool>(); 
    v.action = j.at("action").get<LolGameflowPatcherProductStateAction>(); 
    v.isUpdateAvailable = j.at("isUpdateAvailable").get<bool>(); 
    v.isUpToDate = j.at("isUpToDate").get<bool>(); 
    v.isStopped = j.at("isStopped").get<bool>(); 
  } 
  struct LolGameflowPlayerStatus { /**/ 
    std::optional<LolGameflowLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolGameflowLobbyStatus> lastQueuedLobbyStatus;/**/
    bool canInviteOthersAtEog;/**/
  };
  static void to_json(json& j, const LolGameflowPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
    j["canInviteOthersAtEog"] = v.canInviteOthersAtEog;
  }
  static void from_json(const json& j, LolGameflowPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolGameflowLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolGameflowLobbyStatus>>(); 
    v.canInviteOthersAtEog = j.at("canInviteOthersAtEog").get<bool>(); 
  } 
  struct LolGameflowRegionLocale { /**/ 
    std::string locale;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolGameflowRegionLocale& v) { 
    j["locale"] = v.locale;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolGameflowRegionLocale& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolGameflowReplaysSettingsData { /**/ 
    std::string highlights_folder_path;/**/
  };
  static void to_json(json& j, const LolGameflowReplaysSettingsData& v) { 
    j["highlights_folder_path"] = v.highlights_folder_path;
  }
  static void from_json(const json& j, LolGameflowReplaysSettingsData& v) { 
    v.highlights_folder_path = j.at("highlights_folder_path").get<std::string>(); 
  } 
  struct LolGameflowReplaysSettingsResource { /**/ 
    LolGameflowReplaysSettingsData data;/**/
  };
  static void to_json(json& j, const LolGameflowReplaysSettingsResource& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolGameflowReplaysSettingsResource& v) { 
    v.data = j.at("data").get<LolGameflowReplaysSettingsData>(); 
  } 
  struct LolGeoinfoGeoInfo { /**/ 
    std::string country;/**/
    std::string city;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolGeoinfoGeoInfo& v) { 
    j["country"] = v.country;
    j["city"] = v.city;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolGeoinfoGeoInfo& v) { 
    v.country = j.at("country").get<std::string>(); 
    v.city = j.at("city").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolGeoinfoGeoInfoConfig { /**/ 
    bool Enabled;/**/
  };
  static void to_json(json& j, const LolGeoinfoGeoInfoConfig& v) { 
    j["Enabled"] = v.Enabled;
  }
  static void from_json(const json& j, LolGeoinfoGeoInfoConfig& v) { 
    v.Enabled = j.at("Enabled").get<bool>(); 
  } 
  struct LolGeoinfoGeoInfoResponse { /**/ 
    std::string errorMessage;/**/
    LolGeoinfoGeoInfo geoInfo;/**/
    bool isLatest;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolGeoinfoGeoInfoResponse& v) { 
    j["errorMessage"] = v.errorMessage;
    j["geoInfo"] = v.geoInfo;
    j["isLatest"] = v.isLatest;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolGeoinfoGeoInfoResponse& v) { 
    v.errorMessage = j.at("errorMessage").get<std::string>(); 
    v.geoInfo = j.at("geoInfo").get<LolGeoinfoGeoInfo>(); 
    v.isLatest = j.at("isLatest").get<bool>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  enum class LolGeoinfoLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolGeoinfoLoginSessionState& v) {
    switch(v) { 
    case LolGeoinfoLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolGeoinfoLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolGeoinfoLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolGeoinfoLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolGeoinfoLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolGeoinfoLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolGeoinfoLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolGeoinfoLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolGeoinfoLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolGeoinfoLoginSession { /**/ 
    LolGeoinfoLoginSessionState state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolGeoinfoLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolGeoinfoLoginSession& v) { 
    v.state = j.at("state").get<LolGeoinfoLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolGeoinfoWhereAmIRequest { /**/ 
    std::string ipAddress;/**/
  };
  static void to_json(json& j, const LolGeoinfoWhereAmIRequest& v) { 
    j["ipAddress"] = v.ipAddress;
  }
  static void from_json(const json& j, LolGeoinfoWhereAmIRequest& v) { 
    v.ipAddress = j.at("ipAddress").get<std::string>(); 
  } 
  struct LolGeoinfoWhereAmIResponse { /**/ 
    std::string country;/**/
    std::string city;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolGeoinfoWhereAmIResponse& v) { 
    j["country"] = v.country;
    j["city"] = v.city;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolGeoinfoWhereAmIResponse& v) { 
    v.country = j.at("country").get<std::string>(); 
    v.city = j.at("city").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolHonorV2ApiHonorPlayerServerRequest { /**/ 
    std::string honorCategory;/**/
    uint64_t gameId;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolHonorV2ApiHonorPlayerServerRequest& v) { 
    j["honorCategory"] = v.honorCategory;
    j["gameId"] = v.gameId;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolHonorV2ApiHonorPlayerServerRequest& v) { 
    v.honorCategory = j.at("honorCategory").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolHonorV2EligiblePlayer { /**/ 
    std::string summonerName;/**/
    int32_t skinIndex;/**/
    uint64_t summonerId;/**/
    int32_t championId;/**/
    std::string skinName;/**/
  };
  static void to_json(json& j, const LolHonorV2EligiblePlayer& v) { 
    j["summonerName"] = v.summonerName;
    j["skinIndex"] = v.skinIndex;
    j["summonerId"] = v.summonerId;
    j["championId"] = v.championId;
    j["skinName"] = v.skinName;
  }
  static void from_json(const json& j, LolHonorV2EligiblePlayer& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
  } 
  struct LolHonorV2Ballot { /**/ 
    uint64_t gameId;/**/
    std::vector<LolHonorV2EligiblePlayer> eligiblePlayers;/**/
  };
  static void to_json(json& j, const LolHonorV2Ballot& v) { 
    j["gameId"] = v.gameId;
    j["eligiblePlayers"] = v.eligiblePlayers;
  }
  static void from_json(const json& j, LolHonorV2Ballot& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.eligiblePlayers = j.at("eligiblePlayers").get<std::vector<LolHonorV2EligiblePlayer>>(); 
  } 
  struct LolHonorV2EndOfGamePlayer { /**/ 
    bool isReportingDisabled;/**/
    int32_t profileIconId;/**/
    bool leaver;/**/
    int32_t teamId;/**/
    int32_t wins;/**/
    uint64_t userId;/**/
    int32_t championId;/**/
    int32_t skinIndex;/**/
    bool botPlayer;/**/
    uint64_t summonerId;/**/
    std::string skinName;/**/
    std::string summonerName;/**/
    uint64_t gameId;/**/
    json stats;/**/
  };
  static void to_json(json& j, const LolHonorV2EndOfGamePlayer& v) { 
    j["isReportingDisabled"] = v.isReportingDisabled;
    j["profileIconId"] = v.profileIconId;
    j["leaver"] = v.leaver;
    j["teamId"] = v.teamId;
    j["wins"] = v.wins;
    j["userId"] = v.userId;
    j["championId"] = v.championId;
    j["skinIndex"] = v.skinIndex;
    j["botPlayer"] = v.botPlayer;
    j["summonerId"] = v.summonerId;
    j["skinName"] = v.skinName;
    j["summonerName"] = v.summonerName;
    j["gameId"] = v.gameId;
    j["stats"] = v.stats;
  }
  static void from_json(const json& j, LolHonorV2EndOfGamePlayer& v) { 
    v.isReportingDisabled = j.at("isReportingDisabled").get<bool>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.leaver = j.at("leaver").get<bool>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.wins = j.at("wins").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.botPlayer = j.at("botPlayer").get<bool>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.stats = j.at("stats").get<json>(); 
  } 
  struct LolHonorV2EndOfGameTeam { /**/ 
    std::vector<LolHonorV2EndOfGamePlayer> players;/**/
    std::string memberStatusString;/**/
    std::string fullId;/**/
    bool isPlayerTeam;/**/
    std::vector<int32_t> championBans;/**/
    std::string name;/**/
    int32_t teamId;/**/
    std::string tag;/**/
    bool isWinningTeam;/**/
    json stats;/**/
    bool isBottomTeam;/**/
  };
  static void to_json(json& j, const LolHonorV2EndOfGameTeam& v) { 
    j["players"] = v.players;
    j["memberStatusString"] = v.memberStatusString;
    j["fullId"] = v.fullId;
    j["isPlayerTeam"] = v.isPlayerTeam;
    j["championBans"] = v.championBans;
    j["name"] = v.name;
    j["teamId"] = v.teamId;
    j["tag"] = v.tag;
    j["isWinningTeam"] = v.isWinningTeam;
    j["stats"] = v.stats;
    j["isBottomTeam"] = v.isBottomTeam;
  }
  static void from_json(const json& j, LolHonorV2EndOfGameTeam& v) { 
    v.players = j.at("players").get<std::vector<LolHonorV2EndOfGamePlayer>>(); 
    v.memberStatusString = j.at("memberStatusString").get<std::string>(); 
    v.fullId = j.at("fullId").get<std::string>(); 
    v.isPlayerTeam = j.at("isPlayerTeam").get<bool>(); 
    v.championBans = j.at("championBans").get<std::vector<int32_t>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.tag = j.at("tag").get<std::string>(); 
    v.isWinningTeam = j.at("isWinningTeam").get<bool>(); 
    v.stats = j.at("stats").get<json>(); 
    v.isBottomTeam = j.at("isBottomTeam").get<bool>(); 
  } 
  struct LolHonorV2EndOfGameStats { /**/ 
    std::string gameType;/**/
    std::string summonerName;/**/
    bool imbalancedTeamsNoPoints;/**/
    std::string queueType;/**/
    std::string difficulty;/**/
    std::vector<std::string> gameMutators;/**/
    int32_t championId;/**/
    int32_t gameLength;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::vector<LolHonorV2EndOfGameTeam> teams;/**/
    bool ranked;/**/
    uint64_t gameId;/**/
    bool gameEndedInEarlySurrender;/**/
    bool invalid;/**/
    uint64_t reportGameId;/**/
    std::string myTeamStatus;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolHonorV2EndOfGameStats& v) { 
    j["gameType"] = v.gameType;
    j["summonerName"] = v.summonerName;
    j["imbalancedTeamsNoPoints"] = v.imbalancedTeamsNoPoints;
    j["queueType"] = v.queueType;
    j["difficulty"] = v.difficulty;
    j["gameMutators"] = v.gameMutators;
    j["championId"] = v.championId;
    j["gameLength"] = v.gameLength;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["teams"] = v.teams;
    j["ranked"] = v.ranked;
    j["gameId"] = v.gameId;
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender;
    j["invalid"] = v.invalid;
    j["reportGameId"] = v.reportGameId;
    j["myTeamStatus"] = v.myTeamStatus;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolHonorV2EndOfGameStats& v) { 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.imbalancedTeamsNoPoints = j.at("imbalancedTeamsNoPoints").get<bool>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.difficulty = j.at("difficulty").get<std::string>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.gameLength = j.at("gameLength").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.teams = j.at("teams").get<std::vector<LolHonorV2EndOfGameTeam>>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.invalid = j.at("invalid").get<bool>(); 
    v.reportGameId = j.at("reportGameId").get<uint64_t>(); 
    v.myTeamStatus = j.at("myTeamStatus").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolHonorV2FullTeamVote { /**/ 
    uint64_t gameId;/**/
  };
  static void to_json(json& j, const LolHonorV2FullTeamVote& v) { 
    j["gameId"] = v.gameId;
  }
  static void from_json(const json& j, LolHonorV2FullTeamVote& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
  } 
  enum class LolHonorV2GameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolHonorV2GameflowPhase& v) {
    switch(v) { 
    case LolHonorV2GameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolHonorV2GameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolHonorV2GameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolHonorV2GameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolHonorV2GameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolHonorV2GameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolHonorV2GameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolHonorV2GameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolHonorV2GameflowPhase::None_e:
      j = "None";
    break;
    case LolHonorV2GameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolHonorV2GameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolHonorV2GameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolHonorV2GameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolHonorV2GameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolHonorV2GameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolHonorV2GameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolHonorV2GameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolHonorV2GameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolHonorV2GameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolHonorV2GameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolHonorV2GameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolHonorV2GameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolHonorV2GameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolHonorV2GameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolHonorV2GameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolHonorV2GameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolHonorV2GameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolHonorV2GameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolHonorV2GameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolHonorV2GameflowSession { /**/ 
    LolHonorV2GameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolHonorV2GameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolHonorV2GameflowSession& v) { 
    v.phase = j.at("phase").get<LolHonorV2GameflowPhase>(); 
  } 
  struct LolHonorV2Honor { /**/ 
    std::string honorCategory;/**/
    std::string voterRelationship;/**/
  };
  static void to_json(json& j, const LolHonorV2Honor& v) { 
    j["honorCategory"] = v.honorCategory;
    j["voterRelationship"] = v.voterRelationship;
  }
  static void from_json(const json& j, LolHonorV2Honor& v) { 
    v.honorCategory = j.at("honorCategory").get<std::string>(); 
    v.voterRelationship = j.at("voterRelationship").get<std::string>(); 
  } 
  struct LolHonorV2HonorConfig { /**/ 
    bool DayOneModalEnabled;/**/
    bool Enabled;/**/
    int32_t SecondsToVote;/**/
    bool Honor2018Enabled;/**/
  };
  static void to_json(json& j, const LolHonorV2HonorConfig& v) { 
    j["DayOneModalEnabled"] = v.DayOneModalEnabled;
    j["Enabled"] = v.Enabled;
    j["SecondsToVote"] = v.SecondsToVote;
    j["Honor2018Enabled"] = v.Honor2018Enabled;
  }
  static void from_json(const json& j, LolHonorV2HonorConfig& v) { 
    v.DayOneModalEnabled = j.at("DayOneModalEnabled").get<bool>(); 
    v.Enabled = j.at("Enabled").get<bool>(); 
    v.SecondsToVote = j.at("SecondsToVote").get<int32_t>(); 
    v.Honor2018Enabled = j.at("Honor2018Enabled").get<bool>(); 
  } 
  struct LolHonorV2HonorRecipient { /**/ 
    uint64_t gameId;/**/
    uint64_t summonerId;/**/
    std::vector<LolHonorV2Honor> honors;/**/
  };
  static void to_json(json& j, const LolHonorV2HonorRecipient& v) { 
    j["gameId"] = v.gameId;
    j["summonerId"] = v.summonerId;
    j["honors"] = v.honors;
  }
  static void from_json(const json& j, LolHonorV2HonorRecipient& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.honors = j.at("honors").get<std::vector<LolHonorV2Honor>>(); 
  } 
  enum class LolHonorV2LoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolHonorV2LoginSessionStates& v) {
    switch(v) { 
    case LolHonorV2LoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolHonorV2LoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolHonorV2LoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolHonorV2LoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolHonorV2LoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolHonorV2LoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolHonorV2LoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolHonorV2LoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolHonorV2LoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolHonorV2LoginSession { /**/ 
    LolHonorV2LoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolHonorV2LoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolHonorV2LoginSession& v) { 
    v.state = j.at("state").get<LolHonorV2LoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolHonorV2ProfileInfo { /**/ 
    int32_t checkpoint;/**/
    int32_t honorLevel;/**/
    bool rewardsLocked;/**/
  };
  static void to_json(json& j, const LolHonorV2ProfileInfo& v) { 
    j["checkpoint"] = v.checkpoint;
    j["honorLevel"] = v.honorLevel;
    j["rewardsLocked"] = v.rewardsLocked;
  }
  static void from_json(const json& j, LolHonorV2ProfileInfo& v) { 
    v.checkpoint = j.at("checkpoint").get<int32_t>(); 
    v.honorLevel = j.at("honorLevel").get<int32_t>(); 
    v.rewardsLocked = j.at("rewardsLocked").get<bool>(); 
  } 
  struct LolHonorV2Reward { /**/ 
    int32_t quantity;/**/
    std::string rewardType;/**/
    std::string message;/**/
  };
  static void to_json(json& j, const LolHonorV2Reward& v) { 
    j["quantity"] = v.quantity;
    j["rewardType"] = v.rewardType;
    j["message"] = v.message;
  }
  static void from_json(const json& j, LolHonorV2Reward& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.rewardType = j.at("rewardType").get<std::string>(); 
    v.message = j.at("message").get<std::string>(); 
  } 
  struct LolHonorV2RiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const LolHonorV2RiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, LolHonorV2RiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct LolHonorV2SequenceEvent { /**/ 
    int32_t priority;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolHonorV2SequenceEvent& v) { 
    j["priority"] = v.priority;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolHonorV2SequenceEvent& v) { 
    v.priority = j.at("priority").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolHonorV2ServiceProxyHonorPlayerServerRequest { /**/ 
    uint64_t gameId;/**/
    uint64_t summonerId;/**/
    std::string honorType;/**/
  };
  static void to_json(json& j, const LolHonorV2ServiceProxyHonorPlayerServerRequest& v) { 
    j["gameId"] = v.gameId;
    j["summonerId"] = v.summonerId;
    j["honorType"] = v.honorType;
  }
  static void from_json(const json& j, LolHonorV2ServiceProxyHonorPlayerServerRequest& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.honorType = j.at("honorType").get<std::string>(); 
  } 
  struct LolHonorV2ServiceProxyRetrieveProfileResponse { /**/ 
    int32_t checkpoint;/**/
    int32_t honorLevel;/**/
    bool rewardsLocked;/**/
  };
  static void to_json(json& j, const LolHonorV2ServiceProxyRetrieveProfileResponse& v) { 
    j["checkpoint"] = v.checkpoint;
    j["honorLevel"] = v.honorLevel;
    j["rewardsLocked"] = v.rewardsLocked;
  }
  static void from_json(const json& j, LolHonorV2ServiceProxyRetrieveProfileResponse& v) { 
    v.checkpoint = j.at("checkpoint").get<int32_t>(); 
    v.honorLevel = j.at("honorLevel").get<int32_t>(); 
    v.rewardsLocked = j.at("rewardsLocked").get<bool>(); 
  } 
  struct LolHonorV2VendedHonorState { /**/ 
    int32_t level;/**/
    int32_t checkpoint;/**/
    bool rewardsLocked;/**/
  };
  static void to_json(json& j, const LolHonorV2VendedHonorState& v) { 
    j["level"] = v.level;
    j["checkpoint"] = v.checkpoint;
    j["rewardsLocked"] = v.rewardsLocked;
  }
  static void from_json(const json& j, LolHonorV2VendedHonorState& v) { 
    v.level = j.at("level").get<int32_t>(); 
    v.checkpoint = j.at("checkpoint").get<int32_t>(); 
    v.rewardsLocked = j.at("rewardsLocked").get<bool>(); 
  } 
  struct LolHonorV2VendedHonorChange { /**/ 
    LolHonorV2VendedHonorState currentState;/**/
    std::string actionType;/**/
    LolHonorV2Reward reward;/**/
    LolHonorV2VendedHonorState previousState;/**/
  };
  static void to_json(json& j, const LolHonorV2VendedHonorChange& v) { 
    j["currentState"] = v.currentState;
    j["actionType"] = v.actionType;
    j["reward"] = v.reward;
    j["previousState"] = v.previousState;
  }
  static void from_json(const json& j, LolHonorV2VendedHonorChange& v) { 
    v.currentState = j.at("currentState").get<LolHonorV2VendedHonorState>(); 
    v.actionType = j.at("actionType").get<std::string>(); 
    v.reward = j.at("reward").get<LolHonorV2Reward>(); 
    v.previousState = j.at("previousState").get<LolHonorV2VendedHonorState>(); 
  } 
  struct LolHonorV2VoteCompletion { /**/ 
    uint64_t gameId;/**/
    bool fullTeamVote;/**/
  };
  static void to_json(json& j, const LolHonorV2VoteCompletion& v) { 
    j["gameId"] = v.gameId;
    j["fullTeamVote"] = v.fullTeamVote;
  }
  static void from_json(const json& j, LolHonorV2VoteCompletion& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.fullTeamVote = j.at("fullTeamVote").get<bool>(); 
  } 
  struct LolInventoryAccessTokenResource { /**/ 
    std::vector<std::string> scopes;/**/
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolInventoryAccessTokenResource& v) { 
    j["scopes"] = v.scopes;
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolInventoryAccessTokenResource& v) { 
    v.scopes = j.at("scopes").get<std::vector<std::string>>(); 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolInventoryCacheEntry { /**/ 
    bool valid;/**/
    std::string signedInventoryJwt;/**/
    uint64_t expirationMS;/**/
  };
  static void to_json(json& j, const LolInventoryCacheEntry& v) { 
    j["valid"] = v.valid;
    j["signedInventoryJwt"] = v.signedInventoryJwt;
    j["expirationMS"] = v.expirationMS;
  }
  static void from_json(const json& j, LolInventoryCacheEntry& v) { 
    v.valid = j.at("valid").get<bool>(); 
    v.signedInventoryJwt = j.at("signedInventoryJwt").get<std::string>(); 
    v.expirationMS = j.at("expirationMS").get<uint64_t>(); 
  } 
  struct LolInventoryCatalogItem { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
    std::optional<std::string> itemInstanceId;/**/
  };
  static void to_json(json& j, const LolInventoryCatalogItem& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
    j["itemInstanceId"] = v.itemInstanceId;
  }
  static void from_json(const json& j, LolInventoryCatalogItem& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.itemInstanceId = j.at("itemInstanceId").get<std::optional<std::string>>(); 
  } 
  struct LolInventoryInventoryDTO { /**/ 
    uint64_t summonerId;/**/
    std::map<std::string, json> items;/**/
    std::string puuid;/**/
    std::string expires;/**/
    std::string itemsJwt;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolInventoryInventoryDTO& v) { 
    j["summonerId"] = v.summonerId;
    j["items"] = v.items;
    j["puuid"] = v.puuid;
    j["expires"] = v.expires;
    j["itemsJwt"] = v.itemsJwt;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolInventoryInventoryDTO& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.items = j.at("items").get<std::map<std::string, json>>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.itemsJwt = j.at("itemsJwt").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolInventoryItemOwnershipType { /**/ 
    F2P_e = 2, /**/ 
    OWNED_e = 0, /**/ 
    RENTED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolInventoryItemOwnershipType& v) {
    switch(v) { 
    case LolInventoryItemOwnershipType::F2P_e:
      j = "F2P";
    break;
    case LolInventoryItemOwnershipType::OWNED_e:
      j = "OWNED";
    break;
    case LolInventoryItemOwnershipType::RENTED_e:
      j = "RENTED";
    break;
    };
  }
  static void from_json(const json& j, LolInventoryItemOwnershipType& v) {
    auto s = j.get<std::string>(); 
    if(s == "F2P") {
      v = LolInventoryItemOwnershipType::F2P_e;
      return;
    } 
    if(s == "OWNED") {
      v = LolInventoryItemOwnershipType::OWNED_e;
      return;
    } 
    if(s == "RENTED") {
      v = LolInventoryItemOwnershipType::RENTED_e;
      return;
    } 
  } 
  struct LolInventoryInventoryItem { /**/ 
    int32_t itemId;/**/
    LolInventoryItemOwnershipType ownershipType;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const LolInventoryInventoryItem& v) { 
    j["itemId"] = v.itemId;
    j["ownershipType"] = v.ownershipType;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, LolInventoryInventoryItem& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.ownershipType = j.at("ownershipType").get<LolInventoryItemOwnershipType>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LolInventoryInventoryItemDTO { /**/ 
    int32_t itemId;/**/
    std::string expirationDate;/**/
    std::string entitlementId;/**/
    uint64_t wins;/**/
    std::string instanceTypeId;/**/
    std::string eneitlementTypeId;/**/
    bool rental;/**/
    uint64_t quantity;/**/
    bool f2p;/**/
    std::string usedInGameDate;/**/
    std::string instanceId;/**/
    bool lsb;/**/
    std::string inventoryType;/**/
    std::string purchaseDate;/**/
  };
  static void to_json(json& j, const LolInventoryInventoryItemDTO& v) { 
    j["itemId"] = v.itemId;
    j["expirationDate"] = v.expirationDate;
    j["entitlementId"] = v.entitlementId;
    j["wins"] = v.wins;
    j["instanceTypeId"] = v.instanceTypeId;
    j["eneitlementTypeId"] = v.eneitlementTypeId;
    j["rental"] = v.rental;
    j["quantity"] = v.quantity;
    j["f2p"] = v.f2p;
    j["usedInGameDate"] = v.usedInGameDate;
    j["instanceId"] = v.instanceId;
    j["lsb"] = v.lsb;
    j["inventoryType"] = v.inventoryType;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, LolInventoryInventoryItemDTO& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.expirationDate = j.at("expirationDate").get<std::string>(); 
    v.entitlementId = j.at("entitlementId").get<std::string>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.instanceTypeId = j.at("instanceTypeId").get<std::string>(); 
    v.eneitlementTypeId = j.at("eneitlementTypeId").get<std::string>(); 
    v.rental = j.at("rental").get<bool>(); 
    v.quantity = j.at("quantity").get<uint64_t>(); 
    v.f2p = j.at("f2p").get<bool>(); 
    v.usedInGameDate = j.at("usedInGameDate").get<std::string>(); 
    v.instanceId = j.at("instanceId").get<std::string>(); 
    v.lsb = j.at("lsb").get<bool>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.purchaseDate = j.at("purchaseDate").get<std::string>(); 
  } 
  struct LolInventoryInventoryResponseDTO { /**/ 
    LolInventoryInventoryDTO data;/**/
  };
  static void to_json(json& j, const LolInventoryInventoryResponseDTO& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolInventoryInventoryResponseDTO& v) { 
    v.data = j.at("data").get<LolInventoryInventoryDTO>(); 
  } 
  enum class LolInventoryLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolInventoryLoginSessionStates& v) {
    switch(v) { 
    case LolInventoryLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolInventoryLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolInventoryLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolInventoryLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolInventoryLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolInventoryLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolInventoryLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolInventoryLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolInventoryLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolInventoryLoginSession { /**/ 
    LolInventoryLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string idToken;/**/
    json gasToken;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolInventoryLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["idToken"] = v.idToken;
    j["gasToken"] = v.gasToken;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolInventoryLoginSession& v) { 
    v.state = j.at("state").get<LolInventoryLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolInventoryRiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const LolInventoryRiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, LolInventoryRiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct LolInventoryRmsEntitlementPayload { /**/ 
    std::string itemId;/**/
    std::string itemTypeId;/**/
  };
  static void to_json(json& j, const LolInventoryRmsEntitlementPayload& v) { 
    j["itemId"] = v.itemId;
    j["itemTypeId"] = v.itemTypeId;
  }
  static void from_json(const json& j, LolInventoryRmsEntitlementPayload& v) { 
    v.itemId = j.at("itemId").get<std::string>(); 
    v.itemTypeId = j.at("itemTypeId").get<std::string>(); 
  } 
  struct LolItemSetsGameDataChampion { /**/ 
    std::string alias;/**/
  };
  static void to_json(json& j, const LolItemSetsGameDataChampion& v) { 
    j["alias"] = v.alias;
  }
  static void from_json(const json& j, LolItemSetsGameDataChampion& v) { 
    v.alias = j.at("alias").get<std::string>(); 
  } 
  struct LolItemSetsItemSetItem { /**/ 
    uint16_t count;/**/
    std::string id;/**/
  };
  static void to_json(json& j, const LolItemSetsItemSetItem& v) { 
    j["count"] = v.count;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolItemSetsItemSetItem& v) { 
    v.count = j.at("count").get<uint16_t>(); 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct LolItemSetsItemSetBlock { /**/ 
    std::string type;/**/
    std::string showIfSummonerSpell;/**/
    std::vector<LolItemSetsItemSetItem> items;/**/
    std::string hideIfSummonerSpell;/**/
  };
  static void to_json(json& j, const LolItemSetsItemSetBlock& v) { 
    j["type"] = v.type;
    j["showIfSummonerSpell"] = v.showIfSummonerSpell;
    j["items"] = v.items;
    j["hideIfSummonerSpell"] = v.hideIfSummonerSpell;
  }
  static void from_json(const json& j, LolItemSetsItemSetBlock& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.showIfSummonerSpell = j.at("showIfSummonerSpell").get<std::string>(); 
    v.items = j.at("items").get<std::vector<LolItemSetsItemSetItem>>(); 
    v.hideIfSummonerSpell = j.at("hideIfSummonerSpell").get<std::string>(); 
  } 
  struct LolItemSetsPreferredItemSlot { /**/ 
    int16_t preferredItemSlot;/**/
    std::string id;/**/
  };
  static void to_json(json& j, const LolItemSetsPreferredItemSlot& v) { 
    j["preferredItemSlot"] = v.preferredItemSlot;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolItemSetsPreferredItemSlot& v) { 
    v.preferredItemSlot = j.at("preferredItemSlot").get<int16_t>(); 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct LolItemSetsItemSet { /**/ 
    std::string mode;/**/
    std::string map;/**/
    std::vector<LolItemSetsItemSetBlock> blocks;/**/
    std::string startedFrom;/**/
    std::string uid;/**/
    std::vector<LolItemSetsPreferredItemSlot> preferredItemSlots;/**/
    std::vector<int32_t> associatedMaps;/**/
    std::string type;/**/
    int32_t sortrank;/**/
    std::string title;/**/
    std::vector<int32_t> associatedChampions;/**/
  };
  static void to_json(json& j, const LolItemSetsItemSet& v) { 
    j["mode"] = v.mode;
    j["map"] = v.map;
    j["blocks"] = v.blocks;
    j["startedFrom"] = v.startedFrom;
    j["uid"] = v.uid;
    j["preferredItemSlots"] = v.preferredItemSlots;
    j["associatedMaps"] = v.associatedMaps;
    j["type"] = v.type;
    j["sortrank"] = v.sortrank;
    j["title"] = v.title;
    j["associatedChampions"] = v.associatedChampions;
  }
  static void from_json(const json& j, LolItemSetsItemSet& v) { 
    v.mode = j.at("mode").get<std::string>(); 
    v.map = j.at("map").get<std::string>(); 
    v.blocks = j.at("blocks").get<std::vector<LolItemSetsItemSetBlock>>(); 
    v.startedFrom = j.at("startedFrom").get<std::string>(); 
    v.uid = j.at("uid").get<std::string>(); 
    v.preferredItemSlots = j.at("preferredItemSlots").get<std::vector<LolItemSetsPreferredItemSlot>>(); 
    v.associatedMaps = j.at("associatedMaps").get<std::vector<int32_t>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.sortrank = j.at("sortrank").get<int32_t>(); 
    v.title = j.at("title").get<std::string>(); 
    v.associatedChampions = j.at("associatedChampions").get<std::vector<int32_t>>(); 
  } 
  struct LolItemSetsItemSets { /**/ 
    uint64_t timestamp;/**/
    std::vector<LolItemSetsItemSet> itemSets;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolItemSetsItemSets& v) { 
    j["timestamp"] = v.timestamp;
    j["itemSets"] = v.itemSets;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolItemSetsItemSets& v) { 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.itemSets = j.at("itemSets").get<std::vector<LolItemSetsItemSet>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolItemSetsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolItemSetsLoginSessionStates& v) {
    switch(v) { 
    case LolItemSetsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolItemSetsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolItemSetsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolItemSetsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolItemSetsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolItemSetsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolItemSetsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolItemSetsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolItemSetsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolItemSetsLoginSession { /**/ 
    LolItemSetsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolItemSetsLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolItemSetsLoginSession& v) { 
    v.state = j.at("state").get<LolItemSetsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolKrShutdownLawAllQueueShutdownStatus { /**/ 
    bool isAllQueuesDisabled;/**/
  };
  static void to_json(json& j, const LolKrShutdownLawAllQueueShutdownStatus& v) { 
    j["isAllQueuesDisabled"] = v.isAllQueuesDisabled;
  }
  static void from_json(const json& j, LolKrShutdownLawAllQueueShutdownStatus& v) { 
    v.isAllQueuesDisabled = j.at("isAllQueuesDisabled").get<bool>(); 
  } 
  struct LolKrShutdownLawQueueShutdownStatus { /**/ 
    bool isDisabled;/**/
  };
  static void to_json(json& j, const LolKrShutdownLawQueueShutdownStatus& v) { 
    j["isDisabled"] = v.isDisabled;
  }
  static void from_json(const json& j, LolKrShutdownLawQueueShutdownStatus& v) { 
    v.isDisabled = j.at("isDisabled").get<bool>(); 
  } 
  enum class LolKrShutdownLawShutdownLawStatus { /**/ 
    CUT_OFF_e = 2, /**/ 
    NONE_e = 0, /**/ 
    WARNING_e = 1, /**/ 
  };
  static void to_json(json& j, const LolKrShutdownLawShutdownLawStatus& v) {
    switch(v) { 
    case LolKrShutdownLawShutdownLawStatus::CUT_OFF_e:
      j = "CUT_OFF";
    break;
    case LolKrShutdownLawShutdownLawStatus::NONE_e:
      j = "NONE";
    break;
    case LolKrShutdownLawShutdownLawStatus::WARNING_e:
      j = "WARNING";
    break;
    };
  }
  static void from_json(const json& j, LolKrShutdownLawShutdownLawStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "CUT_OFF") {
      v = LolKrShutdownLawShutdownLawStatus::CUT_OFF_e;
      return;
    } 
    if(s == "NONE") {
      v = LolKrShutdownLawShutdownLawStatus::NONE_e;
      return;
    } 
    if(s == "WARNING") {
      v = LolKrShutdownLawShutdownLawStatus::WARNING_e;
      return;
    } 
  } 
  struct LolKrShutdownLawShutdownLawNotification { /**/ 
    LolKrShutdownLawShutdownLawStatus type;/**/
  };
  static void to_json(json& j, const LolKrShutdownLawShutdownLawNotification& v) { 
    j["type"] = v.type;
  }
  static void from_json(const json& j, LolKrShutdownLawShutdownLawNotification& v) { 
    v.type = j.at("type").get<LolKrShutdownLawShutdownLawStatus>(); 
  } 
  enum class LolLeaguesLeagueTier { /**/ 
    BRONZE_e = 1, /**/ 
    CHALLENGER_e = 7, /**/ 
    DIAMOND_e = 5, /**/ 
    GOLD_e = 3, /**/ 
    MASTER_e = 6, /**/ 
    NONE_e = 0, /**/ 
    PLATINUM_e = 4, /**/ 
    SILVER_e = 2, /**/ 
  };
  static void to_json(json& j, const LolLeaguesLeagueTier& v) {
    switch(v) { 
    case LolLeaguesLeagueTier::BRONZE_e:
      j = "BRONZE";
    break;
    case LolLeaguesLeagueTier::CHALLENGER_e:
      j = "CHALLENGER";
    break;
    case LolLeaguesLeagueTier::DIAMOND_e:
      j = "DIAMOND";
    break;
    case LolLeaguesLeagueTier::GOLD_e:
      j = "GOLD";
    break;
    case LolLeaguesLeagueTier::MASTER_e:
      j = "MASTER";
    break;
    case LolLeaguesLeagueTier::NONE_e:
      j = "NONE";
    break;
    case LolLeaguesLeagueTier::PLATINUM_e:
      j = "PLATINUM";
    break;
    case LolLeaguesLeagueTier::SILVER_e:
      j = "SILVER";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesLeagueTier& v) {
    auto s = j.get<std::string>(); 
    if(s == "BRONZE") {
      v = LolLeaguesLeagueTier::BRONZE_e;
      return;
    } 
    if(s == "CHALLENGER") {
      v = LolLeaguesLeagueTier::CHALLENGER_e;
      return;
    } 
    if(s == "DIAMOND") {
      v = LolLeaguesLeagueTier::DIAMOND_e;
      return;
    } 
    if(s == "GOLD") {
      v = LolLeaguesLeagueTier::GOLD_e;
      return;
    } 
    if(s == "MASTER") {
      v = LolLeaguesLeagueTier::MASTER_e;
      return;
    } 
    if(s == "NONE") {
      v = LolLeaguesLeagueTier::NONE_e;
      return;
    } 
    if(s == "PLATINUM") {
      v = LolLeaguesLeagueTier::PLATINUM_e;
      return;
    } 
    if(s == "SILVER") {
      v = LolLeaguesLeagueTier::SILVER_e;
      return;
    } 
  } 
  enum class LolLeaguesLeagueQueueType { /**/ 
    FLEXSR_e = 3, /**/ 
    FLEXTT_e = 2, /**/ 
    NONE_e = 0, /**/ 
    SOLO5V5_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLeaguesLeagueQueueType& v) {
    switch(v) { 
    case LolLeaguesLeagueQueueType::FLEXSR_e:
      j = "FLEXSR";
    break;
    case LolLeaguesLeagueQueueType::FLEXTT_e:
      j = "FLEXTT";
    break;
    case LolLeaguesLeagueQueueType::NONE_e:
      j = "NONE";
    break;
    case LolLeaguesLeagueQueueType::SOLO5V5_e:
      j = "SOLO5V5";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesLeagueQueueType& v) {
    auto s = j.get<std::string>(); 
    if(s == "FLEXSR") {
      v = LolLeaguesLeagueQueueType::FLEXSR_e;
      return;
    } 
    if(s == "FLEXTT") {
      v = LolLeaguesLeagueQueueType::FLEXTT_e;
      return;
    } 
    if(s == "NONE") {
      v = LolLeaguesLeagueQueueType::NONE_e;
      return;
    } 
    if(s == "SOLO5V5") {
      v = LolLeaguesLeagueQueueType::SOLO5V5_e;
      return;
    } 
  } 
  struct LolLeaguesAchievedTier { /**/ 
    LolLeaguesLeagueTier tier;/**/
    uint64_t division;/**/
    LolLeaguesLeagueQueueType queueType;/**/
  };
  static void to_json(json& j, const LolLeaguesAchievedTier& v) { 
    j["tier"] = v.tier;
    j["division"] = v.division;
    j["queueType"] = v.queueType;
  }
  static void from_json(const json& j, LolLeaguesAchievedTier& v) { 
    v.tier = j.at("tier").get<LolLeaguesLeagueTier>(); 
    v.division = j.at("division").get<uint64_t>(); 
    v.queueType = j.at("queueType").get<LolLeaguesLeagueQueueType>(); 
  } 
  enum class LolLeaguesLeagueEmblem { /**/ 
    FRESHBLOOD_e = 2, /**/ 
    HOTSTREAK_e = 1, /**/ 
    VETERAN_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLeaguesLeagueEmblem& v) {
    switch(v) { 
    case LolLeaguesLeagueEmblem::FRESHBLOOD_e:
      j = "FRESHBLOOD";
    break;
    case LolLeaguesLeagueEmblem::HOTSTREAK_e:
      j = "HOTSTREAK";
    break;
    case LolLeaguesLeagueEmblem::VETERAN_e:
      j = "VETERAN";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesLeagueEmblem& v) {
    auto s = j.get<std::string>(); 
    if(s == "FRESHBLOOD") {
      v = LolLeaguesLeagueEmblem::FRESHBLOOD_e;
      return;
    } 
    if(s == "HOTSTREAK") {
      v = LolLeaguesLeagueEmblem::HOTSTREAK_e;
      return;
    } 
    if(s == "VETERAN") {
      v = LolLeaguesLeagueEmblem::VETERAN_e;
      return;
    } 
  } 
  enum class LolLeaguesMiniseries { /**/ 
    L_e = 1, /**/ 
    N_e = 2, /**/ 
    W_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLeaguesMiniseries& v) {
    switch(v) { 
    case LolLeaguesMiniseries::L_e:
      j = "L";
    break;
    case LolLeaguesMiniseries::N_e:
      j = "N";
    break;
    case LolLeaguesMiniseries::W_e:
      j = "W";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesMiniseries& v) {
    auto s = j.get<std::string>(); 
    if(s == "L") {
      v = LolLeaguesMiniseries::L_e;
      return;
    } 
    if(s == "N") {
      v = LolLeaguesMiniseries::N_e;
      return;
    } 
    if(s == "W") {
      v = LolLeaguesMiniseries::W_e;
      return;
    } 
  } 
  struct LolLeaguesLeagueStanding { /**/ 
    bool inactive;/**/
    int64_t apexDaysUntilDecay;/**/
    std::string id;/**/
    uint64_t previousPosition;/**/
    std::string name;/**/
    std::vector<LolLeaguesLeagueEmblem> emblems;/**/
    uint64_t wins;/**/
    uint64_t losses;/**/
    bool pendingDemotion;/**/
    uint64_t position;/**/
    int64_t positionDelta;/**/
    bool pendingPromotion;/**/
    int64_t points;/**/
    std::string inactivityStatus;/**/
    std::vector<LolLeaguesMiniseries> miniseriesResults;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueStanding& v) { 
    j["inactive"] = v.inactive;
    j["apexDaysUntilDecay"] = v.apexDaysUntilDecay;
    j["id"] = v.id;
    j["previousPosition"] = v.previousPosition;
    j["name"] = v.name;
    j["emblems"] = v.emblems;
    j["wins"] = v.wins;
    j["losses"] = v.losses;
    j["pendingDemotion"] = v.pendingDemotion;
    j["position"] = v.position;
    j["positionDelta"] = v.positionDelta;
    j["pendingPromotion"] = v.pendingPromotion;
    j["points"] = v.points;
    j["inactivityStatus"] = v.inactivityStatus;
    j["miniseriesResults"] = v.miniseriesResults;
  }
  static void from_json(const json& j, LolLeaguesLeagueStanding& v) { 
    v.inactive = j.at("inactive").get<bool>(); 
    v.apexDaysUntilDecay = j.at("apexDaysUntilDecay").get<int64_t>(); 
    v.id = j.at("id").get<std::string>(); 
    v.previousPosition = j.at("previousPosition").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.emblems = j.at("emblems").get<std::vector<LolLeaguesLeagueEmblem>>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
    v.pendingDemotion = j.at("pendingDemotion").get<bool>(); 
    v.position = j.at("position").get<uint64_t>(); 
    v.positionDelta = j.at("positionDelta").get<int64_t>(); 
    v.pendingPromotion = j.at("pendingPromotion").get<bool>(); 
    v.points = j.at("points").get<int64_t>(); 
    v.inactivityStatus = j.at("inactivityStatus").get<std::string>(); 
    v.miniseriesResults = j.at("miniseriesResults").get<std::vector<LolLeaguesMiniseries>>(); 
  } 
  enum class LolLeaguesLeagueRank { /**/ 
    I_e = 0, /**/ 
    II_e = 1, /**/ 
    III_e = 2, /**/ 
    IV_e = 3, /**/ 
    NA_e = 5, /**/ 
    V_e = 4, /**/ 
  };
  static void to_json(json& j, const LolLeaguesLeagueRank& v) {
    switch(v) { 
    case LolLeaguesLeagueRank::I_e:
      j = "I";
    break;
    case LolLeaguesLeagueRank::II_e:
      j = "II";
    break;
    case LolLeaguesLeagueRank::III_e:
      j = "III";
    break;
    case LolLeaguesLeagueRank::IV_e:
      j = "IV";
    break;
    case LolLeaguesLeagueRank::NA_e:
      j = "NA";
    break;
    case LolLeaguesLeagueRank::V_e:
      j = "V";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesLeagueRank& v) {
    auto s = j.get<std::string>(); 
    if(s == "I") {
      v = LolLeaguesLeagueRank::I_e;
      return;
    } 
    if(s == "II") {
      v = LolLeaguesLeagueRank::II_e;
      return;
    } 
    if(s == "III") {
      v = LolLeaguesLeagueRank::III_e;
      return;
    } 
    if(s == "IV") {
      v = LolLeaguesLeagueRank::IV_e;
      return;
    } 
    if(s == "NA") {
      v = LolLeaguesLeagueRank::NA_e;
      return;
    } 
    if(s == "V") {
      v = LolLeaguesLeagueRank::V_e;
      return;
    } 
  } 
  struct LolLeaguesLeagueDivision { /**/ 
    std::vector<LolLeaguesLeagueStanding> standings;/**/
    LolLeaguesLeagueRank leagueRank;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueDivision& v) { 
    j["standings"] = v.standings;
    j["leagueRank"] = v.leagueRank;
  }
  static void from_json(const json& j, LolLeaguesLeagueDivision& v) { 
    v.standings = j.at("standings").get<std::vector<LolLeaguesLeagueStanding>>(); 
    v.leagueRank = j.at("leagueRank").get<LolLeaguesLeagueRank>(); 
  } 
  struct LolLeaguesLeague { /**/ 
    std::string leagueName;/**/
    std::vector<LolLeaguesLeagueDivision> leagues;/**/
    LolLeaguesLeagueQueueType queueType;/**/
    std::string name;/**/
    LolLeaguesLeagueRank requesterLeagueRank;/**/
    LolLeaguesLeagueTier leagueTier;/**/
    uint64_t challengerNextPromotionUpdateInMs;/**/
  };
  static void to_json(json& j, const LolLeaguesLeague& v) { 
    j["leagueName"] = v.leagueName;
    j["leagues"] = v.leagues;
    j["queueType"] = v.queueType;
    j["name"] = v.name;
    j["requesterLeagueRank"] = v.requesterLeagueRank;
    j["leagueTier"] = v.leagueTier;
    j["challengerNextPromotionUpdateInMs"] = v.challengerNextPromotionUpdateInMs;
  }
  static void from_json(const json& j, LolLeaguesLeague& v) { 
    v.leagueName = j.at("leagueName").get<std::string>(); 
    v.leagues = j.at("leagues").get<std::vector<LolLeaguesLeagueDivision>>(); 
    v.queueType = j.at("queueType").get<LolLeaguesLeagueQueueType>(); 
    v.name = j.at("name").get<std::string>(); 
    v.requesterLeagueRank = j.at("requesterLeagueRank").get<LolLeaguesLeagueRank>(); 
    v.leagueTier = j.at("leagueTier").get<LolLeaguesLeagueTier>(); 
    v.challengerNextPromotionUpdateInMs = j.at("challengerNextPromotionUpdateInMs").get<uint64_t>(); 
  } 
  struct LolLeaguesApexLeagues { /**/ 
    std::vector<LolLeaguesLeague> challengers;/**/
    std::vector<LolLeaguesLeague> masters;/**/
  };
  static void to_json(json& j, const LolLeaguesApexLeagues& v) { 
    j["challengers"] = v.challengers;
    j["masters"] = v.masters;
  }
  static void from_json(const json& j, LolLeaguesApexLeagues& v) { 
    v.challengers = j.at("challengers").get<std::vector<LolLeaguesLeague>>(); 
    v.masters = j.at("masters").get<std::vector<LolLeaguesLeague>>(); 
  } 
  struct LolLeaguesQueue { /**/ 
    json type;/**/
  };
  static void to_json(json& j, const LolLeaguesQueue& v) { 
    j["type"] = v.type;
  }
  static void from_json(const json& j, LolLeaguesQueue& v) { 
    v.type = j.at("type").get<json>(); 
  } 
  struct LolLeaguesGameflowGameData { /**/ 
    LolLeaguesQueue queue;/**/
  };
  static void to_json(json& j, const LolLeaguesGameflowGameData& v) { 
    j["queue"] = v.queue;
  }
  static void from_json(const json& j, LolLeaguesGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolLeaguesQueue>(); 
  } 
  enum class LolLeaguesGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolLeaguesGameflowPhase& v) {
    switch(v) { 
    case LolLeaguesGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolLeaguesGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolLeaguesGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolLeaguesGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolLeaguesGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolLeaguesGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolLeaguesGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolLeaguesGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolLeaguesGameflowPhase::None_e:
      j = "None";
    break;
    case LolLeaguesGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolLeaguesGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolLeaguesGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolLeaguesGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolLeaguesGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolLeaguesGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolLeaguesGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolLeaguesGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolLeaguesGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolLeaguesGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolLeaguesGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolLeaguesGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolLeaguesGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolLeaguesGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolLeaguesGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolLeaguesGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolLeaguesGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolLeaguesGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolLeaguesGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolLeaguesGameflowSession { /**/ 
    LolLeaguesGameflowPhase phase;/**/
    LolLeaguesGameflowGameData gameData;/**/
  };
  static void to_json(json& j, const LolLeaguesGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
  }
  static void from_json(const json& j, LolLeaguesGameflowSession& v) { 
    v.phase = j.at("phase").get<LolLeaguesGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolLeaguesGameflowGameData>(); 
  } 
  struct LolLeaguesLeagueChampAndStat { /**/ 
    int64_t totalGamePlayed;/**/
    float winRate;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueChampAndStat& v) { 
    j["totalGamePlayed"] = v.totalGamePlayed;
    j["winRate"] = v.winRate;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLeaguesLeagueChampAndStat& v) { 
    v.totalGamePlayed = j.at("totalGamePlayed").get<int64_t>(); 
    v.winRate = j.at("winRate").get<float>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolLeaguesLeagueNotificationItem { /**/ 
    uint64_t lastPlayed;/**/
    std::string leagueName;/**/
    int64_t minGamesForSeeding;/**/
    uint64_t miniseriesTimeLeftToPlayMillis;/**/
    std::string rank;/**/
    uint64_t wins;/**/
    int64_t points;/**/
    uint64_t timeUntilInactivityStatusChanges;/**/
    int64_t timeUntilDecay;/**/
    std::string playerOrTeamName;/**/
    uint64_t miniseriesWins;/**/
    uint64_t losses;/**/
    uint64_t totalPlayed;/**/
    uint64_t seasonEndApexPosition;/**/
    std::string inactivityStatus;/**/
    bool inactive;/**/
    std::string tier;/**/
    std::string queueType;/**/
    uint64_t previousPosition;/**/
    std::vector<LolLeaguesLeagueEmblem> emblems;/**/
    std::string seasonEndRank;/**/
    std::string seasonEndTier;/**/
    int64_t leaguePointsDelta;/**/
    uint64_t timeLastDecayMessageShown;/**/
    bool displayDecayWarning;/**/
    std::string playerOrTeamId;/**/
    uint64_t gameId;/**/
    int64_t demotionWarning;/**/
    std::vector<LolLeaguesMiniseries> miniseriesResults;/**/
    std::string notifyReason;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueNotificationItem& v) { 
    j["lastPlayed"] = v.lastPlayed;
    j["leagueName"] = v.leagueName;
    j["minGamesForSeeding"] = v.minGamesForSeeding;
    j["miniseriesTimeLeftToPlayMillis"] = v.miniseriesTimeLeftToPlayMillis;
    j["rank"] = v.rank;
    j["wins"] = v.wins;
    j["points"] = v.points;
    j["timeUntilInactivityStatusChanges"] = v.timeUntilInactivityStatusChanges;
    j["timeUntilDecay"] = v.timeUntilDecay;
    j["playerOrTeamName"] = v.playerOrTeamName;
    j["miniseriesWins"] = v.miniseriesWins;
    j["losses"] = v.losses;
    j["totalPlayed"] = v.totalPlayed;
    j["seasonEndApexPosition"] = v.seasonEndApexPosition;
    j["inactivityStatus"] = v.inactivityStatus;
    j["inactive"] = v.inactive;
    j["tier"] = v.tier;
    j["queueType"] = v.queueType;
    j["previousPosition"] = v.previousPosition;
    j["emblems"] = v.emblems;
    j["seasonEndRank"] = v.seasonEndRank;
    j["seasonEndTier"] = v.seasonEndTier;
    j["leaguePointsDelta"] = v.leaguePointsDelta;
    j["timeLastDecayMessageShown"] = v.timeLastDecayMessageShown;
    j["displayDecayWarning"] = v.displayDecayWarning;
    j["playerOrTeamId"] = v.playerOrTeamId;
    j["gameId"] = v.gameId;
    j["demotionWarning"] = v.demotionWarning;
    j["miniseriesResults"] = v.miniseriesResults;
    j["notifyReason"] = v.notifyReason;
  }
  static void from_json(const json& j, LolLeaguesLeagueNotificationItem& v) { 
    v.lastPlayed = j.at("lastPlayed").get<uint64_t>(); 
    v.leagueName = j.at("leagueName").get<std::string>(); 
    v.minGamesForSeeding = j.at("minGamesForSeeding").get<int64_t>(); 
    v.miniseriesTimeLeftToPlayMillis = j.at("miniseriesTimeLeftToPlayMillis").get<uint64_t>(); 
    v.rank = j.at("rank").get<std::string>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.points = j.at("points").get<int64_t>(); 
    v.timeUntilInactivityStatusChanges = j.at("timeUntilInactivityStatusChanges").get<uint64_t>(); 
    v.timeUntilDecay = j.at("timeUntilDecay").get<int64_t>(); 
    v.playerOrTeamName = j.at("playerOrTeamName").get<std::string>(); 
    v.miniseriesWins = j.at("miniseriesWins").get<uint64_t>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
    v.totalPlayed = j.at("totalPlayed").get<uint64_t>(); 
    v.seasonEndApexPosition = j.at("seasonEndApexPosition").get<uint64_t>(); 
    v.inactivityStatus = j.at("inactivityStatus").get<std::string>(); 
    v.inactive = j.at("inactive").get<bool>(); 
    v.tier = j.at("tier").get<std::string>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.previousPosition = j.at("previousPosition").get<uint64_t>(); 
    v.emblems = j.at("emblems").get<std::vector<LolLeaguesLeagueEmblem>>(); 
    v.seasonEndRank = j.at("seasonEndRank").get<std::string>(); 
    v.seasonEndTier = j.at("seasonEndTier").get<std::string>(); 
    v.leaguePointsDelta = j.at("leaguePointsDelta").get<int64_t>(); 
    v.timeLastDecayMessageShown = j.at("timeLastDecayMessageShown").get<uint64_t>(); 
    v.displayDecayWarning = j.at("displayDecayWarning").get<bool>(); 
    v.playerOrTeamId = j.at("playerOrTeamId").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.demotionWarning = j.at("demotionWarning").get<int64_t>(); 
    v.miniseriesResults = j.at("miniseriesResults").get<std::vector<LolLeaguesMiniseries>>(); 
    v.notifyReason = j.at("notifyReason").get<std::string>(); 
  } 
  struct LolLeaguesLeagueTeamMember { /**/ 
    uint64_t totalGamePlayed;/**/
    float winRate;/**/
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueTeamMember& v) { 
    j["totalGamePlayed"] = v.totalGamePlayed;
    j["winRate"] = v.winRate;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLeaguesLeagueTeamMember& v) { 
    v.totalGamePlayed = j.at("totalGamePlayed").get<uint64_t>(); 
    v.winRate = j.at("winRate").get<float>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLeaguesLeagueTeam { /**/ 
    std::vector<LolLeaguesLeagueTeamMember> members;/**/
    std::string id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLeaguesLeagueTeam& v) { 
    j["members"] = v.members;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLeaguesLeagueTeam& v) { 
    v.members = j.at("members").get<std::vector<LolLeaguesLeagueTeamMember>>(); 
    v.id = j.at("id").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLeaguesSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolLeaguesSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolLeaguesSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolLeaguesLeaguesLoginDataPacket { /**/ 
    std::vector<LolLeaguesSimpleMessage> simpleMessages;/**/
  };
  static void to_json(json& j, const LolLeaguesLeaguesLoginDataPacket& v) { 
    j["simpleMessages"] = v.simpleMessages;
  }
  static void from_json(const json& j, LolLeaguesLeaguesLoginDataPacket& v) { 
    v.simpleMessages = j.at("simpleMessages").get<std::vector<LolLeaguesSimpleMessage>>(); 
  } 
  enum class LolLeaguesSeverity { /**/ 
    ALERT_e = 1, /**/ 
    WARNING_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLeaguesSeverity& v) {
    switch(v) { 
    case LolLeaguesSeverity::ALERT_e:
      j = "ALERT";
    break;
    case LolLeaguesSeverity::WARNING_e:
      j = "WARNING";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesSeverity& v) {
    auto s = j.get<std::string>(); 
    if(s == "ALERT") {
      v = LolLeaguesSeverity::ALERT_e;
      return;
    } 
    if(s == "WARNING") {
      v = LolLeaguesSeverity::WARNING_e;
      return;
    } 
  } 
  struct LolLeaguesLeaguesNotification { /**/ 
    std::string titleType;/**/
    uint64_t priority;/**/
    uint64_t id;/**/
    LolLeaguesLeagueNotificationItem data;/**/
    std::string type;/**/
    bool acknowledgedByPlayer;/**/
    LolLeaguesSeverity severity;/**/
  };
  static void to_json(json& j, const LolLeaguesLeaguesNotification& v) { 
    j["titleType"] = v.titleType;
    j["priority"] = v.priority;
    j["id"] = v.id;
    j["data"] = v.data;
    j["type"] = v.type;
    j["acknowledgedByPlayer"] = v.acknowledgedByPlayer;
    j["severity"] = v.severity;
  }
  static void from_json(const json& j, LolLeaguesLeaguesNotification& v) { 
    v.titleType = j.at("titleType").get<std::string>(); 
    v.priority = j.at("priority").get<uint64_t>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.data = j.at("data").get<LolLeaguesLeagueNotificationItem>(); 
    v.type = j.at("type").get<std::string>(); 
    v.acknowledgedByPlayer = j.at("acknowledgedByPlayer").get<bool>(); 
    v.severity = j.at("severity").get<LolLeaguesSeverity>(); 
  } 
  struct LolLeaguesLeaguesSeasonRewardConfig { /**/ 
    bool QualificationWarningEnabled;/**/
  };
  static void to_json(json& j, const LolLeaguesLeaguesSeasonRewardConfig& v) { 
    j["QualificationWarningEnabled"] = v.QualificationWarningEnabled;
  }
  static void from_json(const json& j, LolLeaguesLeaguesSeasonRewardConfig& v) { 
    v.QualificationWarningEnabled = j.at("QualificationWarningEnabled").get<bool>(); 
  } 
  struct LolLeaguesLeaguesSummoner { /**/ 
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLeaguesLeaguesSummoner& v) { 
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLeaguesLeaguesSummoner& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolLeaguesLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLeaguesLoginSessionStates& v) {
    switch(v) { 
    case LolLeaguesLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolLeaguesLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLeaguesLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLeaguesLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLeaguesLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLeaguesLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLeaguesLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLeaguesLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLeaguesLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLeaguesLoginSession { /**/ 
    LolLeaguesLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLeaguesLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLeaguesLoginSession& v) { 
    v.state = j.at("state").get<LolLeaguesLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolLeaguesParticipantTiers { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolLeaguesAchievedTier> achievedTiers;/**/
  };
  static void to_json(json& j, const LolLeaguesParticipantTiers& v) { 
    j["summonerId"] = v.summonerId;
    j["achievedTiers"] = v.achievedTiers;
  }
  static void from_json(const json& j, LolLeaguesParticipantTiers& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.achievedTiers = j.at("achievedTiers").get<std::vector<LolLeaguesAchievedTier>>(); 
  } 
  struct LolLeaguesSignedLeagueItemDTO { /**/ 
    bool inactive;/**/
    LeaguesLcdsLeagueTier tier;/**/
    int32_t leaguePoints;/**/
    LeaguesLcdsQueueType queueType;/**/
    LeaguesLcdsMiniSeriesDTO miniSeries;/**/
    uint64_t previousDayLeaguePosition;/**/
    uint64_t wins;/**/
    int32_t apexDaysUntilDecay;/**/
    uint64_t timeUntilInactivityStatusChanges;/**/
    std::string playerOrTeamName;/**/
    bool freshBlood;/**/
    std::string jwt;/**/
    bool hotStreak;/**/
    uint64_t losses;/**/
    bool displayDecayWarning;/**/
    std::string playerOrTeamId;/**/
    uint64_t demotionWarning;/**/
    LeaguesLcdsLeagueRank rank;/**/
    bool veteran;/**/
    std::string inactivityStatus;/**/
  };
  static void to_json(json& j, const LolLeaguesSignedLeagueItemDTO& v) { 
    j["inactive"] = v.inactive;
    j["tier"] = v.tier;
    j["leaguePoints"] = v.leaguePoints;
    j["queueType"] = v.queueType;
    j["miniSeries"] = v.miniSeries;
    j["previousDayLeaguePosition"] = v.previousDayLeaguePosition;
    j["wins"] = v.wins;
    j["apexDaysUntilDecay"] = v.apexDaysUntilDecay;
    j["timeUntilInactivityStatusChanges"] = v.timeUntilInactivityStatusChanges;
    j["playerOrTeamName"] = v.playerOrTeamName;
    j["freshBlood"] = v.freshBlood;
    j["jwt"] = v.jwt;
    j["hotStreak"] = v.hotStreak;
    j["losses"] = v.losses;
    j["displayDecayWarning"] = v.displayDecayWarning;
    j["playerOrTeamId"] = v.playerOrTeamId;
    j["demotionWarning"] = v.demotionWarning;
    j["rank"] = v.rank;
    j["veteran"] = v.veteran;
    j["inactivityStatus"] = v.inactivityStatus;
  }
  static void from_json(const json& j, LolLeaguesSignedLeagueItemDTO& v) { 
    v.inactive = j.at("inactive").get<bool>(); 
    v.tier = j.at("tier").get<LeaguesLcdsLeagueTier>(); 
    v.leaguePoints = j.at("leaguePoints").get<int32_t>(); 
    v.queueType = j.at("queueType").get<LeaguesLcdsQueueType>(); 
    v.miniSeries = j.at("miniSeries").get<LeaguesLcdsMiniSeriesDTO>(); 
    v.previousDayLeaguePosition = j.at("previousDayLeaguePosition").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.apexDaysUntilDecay = j.at("apexDaysUntilDecay").get<int32_t>(); 
    v.timeUntilInactivityStatusChanges = j.at("timeUntilInactivityStatusChanges").get<uint64_t>(); 
    v.playerOrTeamName = j.at("playerOrTeamName").get<std::string>(); 
    v.freshBlood = j.at("freshBlood").get<bool>(); 
    v.jwt = j.at("jwt").get<std::string>(); 
    v.hotStreak = j.at("hotStreak").get<bool>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
    v.displayDecayWarning = j.at("displayDecayWarning").get<bool>(); 
    v.playerOrTeamId = j.at("playerOrTeamId").get<std::string>(); 
    v.demotionWarning = j.at("demotionWarning").get<uint64_t>(); 
    v.rank = j.at("rank").get<LeaguesLcdsLeagueRank>(); 
    v.veteran = j.at("veteran").get<bool>(); 
    v.inactivityStatus = j.at("inactivityStatus").get<std::string>(); 
  } 
  struct LolLeaguesSignedSummonerLeagueItemsDTO { /**/ 
    std::vector<LolLeaguesSignedLeagueItemDTO> summonerLeagues;/**/
  };
  static void to_json(json& j, const LolLeaguesSignedSummonerLeagueItemsDTO& v) { 
    j["summonerLeagues"] = v.summonerLeagues;
  }
  static void from_json(const json& j, LolLeaguesSignedSummonerLeagueItemsDTO& v) { 
    v.summonerLeagues = j.at("summonerLeagues").get<std::vector<LolLeaguesSignedLeagueItemDTO>>(); 
  } 
  enum class LolLicenseAgreementLicenseAgreementType { /**/ 
    Eula_e = 0, /**/ 
    TermsOfUse_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLicenseAgreementLicenseAgreementType& v) {
    switch(v) { 
    case LolLicenseAgreementLicenseAgreementType::Eula_e:
      j = "Eula";
    break;
    case LolLicenseAgreementLicenseAgreementType::TermsOfUse_e:
      j = "TermsOfUse";
    break;
    };
  }
  static void from_json(const json& j, LolLicenseAgreementLicenseAgreementType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Eula") {
      v = LolLicenseAgreementLicenseAgreementType::Eula_e;
      return;
    } 
    if(s == "TermsOfUse") {
      v = LolLicenseAgreementLicenseAgreementType::TermsOfUse_e;
      return;
    } 
  } 
  struct LolLicenseAgreementLicenseAgreement { /**/ 
    LolLicenseAgreementLicenseAgreementType licenseType;/**/
    std::string id;/**/
    std::string text;/**/
  };
  static void to_json(json& j, const LolLicenseAgreementLicenseAgreement& v) { 
    j["licenseType"] = v.licenseType;
    j["id"] = v.id;
    j["text"] = v.text;
  }
  static void from_json(const json& j, LolLicenseAgreementLicenseAgreement& v) { 
    v.licenseType = j.at("licenseType").get<LolLicenseAgreementLicenseAgreementType>(); 
    v.id = j.at("id").get<std::string>(); 
    v.text = j.at("text").get<std::string>(); 
  } 
  struct LolLicenseAgreementPluginRegionLocaleChangedEvent { /**/ 
    std::string locale;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const LolLicenseAgreementPluginRegionLocaleChangedEvent& v) { 
    j["locale"] = v.locale;
    j["region"] = v.region;
  }
  static void from_json(const json& j, LolLicenseAgreementPluginRegionLocaleChangedEvent& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct LolLoadoutsAccessTokenResource { /**/ 
    std::vector<std::string> scopes;/**/
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolLoadoutsAccessTokenResource& v) { 
    j["scopes"] = v.scopes;
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolLoadoutsAccessTokenResource& v) { 
    v.scopes = j.at("scopes").get<std::vector<std::string>>(); 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolLoadoutsCreateOrUpdateItemsRequest { /**/ 
    std::map<std::string, json> items;/**/
    std::vector<std::string> inventoryJWTs;/**/
    uint32_t id;/**/
  };
  static void to_json(json& j, const LolLoadoutsCreateOrUpdateItemsRequest& v) { 
    j["items"] = v.items;
    j["inventoryJWTs"] = v.inventoryJWTs;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLoadoutsCreateOrUpdateItemsRequest& v) { 
    v.items = j.at("items").get<std::map<std::string, json>>(); 
    v.inventoryJWTs = j.at("inventoryJWTs").get<std::vector<std::string>>(); 
    v.id = j.at("id").get<uint32_t>(); 
  } 
  struct LolLoadoutsItemKey { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const LolLoadoutsItemKey& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, LolLoadoutsItemKey& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LolLoadoutsFrontendInventoryResponse { /**/ 
    std::vector<LolLoadoutsItemKey> entitlements;/**/
  };
  static void to_json(json& j, const LolLoadoutsFrontendInventoryResponse& v) { 
    j["entitlements"] = v.entitlements;
  }
  static void from_json(const json& j, LolLoadoutsFrontendInventoryResponse& v) { 
    v.entitlements = j.at("entitlements").get<std::vector<LolLoadoutsItemKey>>(); 
  } 
  struct LolLoadoutsQueue { /**/ 
    bool isTeamBuilderManaged;/**/
  };
  static void to_json(json& j, const LolLoadoutsQueue& v) { 
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
  }
  static void from_json(const json& j, LolLoadoutsQueue& v) { 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
  } 
  struct LolLoadoutsGameflowGameData { /**/ 
    LolLoadoutsQueue queue;/**/
  };
  static void to_json(json& j, const LolLoadoutsGameflowGameData& v) { 
    j["queue"] = v.queue;
  }
  static void from_json(const json& j, LolLoadoutsGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolLoadoutsQueue>(); 
  } 
  enum class LolLoadoutsGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolLoadoutsGameflowPhase& v) {
    switch(v) { 
    case LolLoadoutsGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolLoadoutsGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolLoadoutsGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolLoadoutsGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolLoadoutsGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolLoadoutsGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolLoadoutsGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolLoadoutsGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolLoadoutsGameflowPhase::None_e:
      j = "None";
    break;
    case LolLoadoutsGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolLoadoutsGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolLoadoutsGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolLoadoutsGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolLoadoutsGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolLoadoutsGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolLoadoutsGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolLoadoutsGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolLoadoutsGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolLoadoutsGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolLoadoutsGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolLoadoutsGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolLoadoutsGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolLoadoutsGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolLoadoutsGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolLoadoutsGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolLoadoutsGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolLoadoutsGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolLoadoutsGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolLoadoutsGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolLoadoutsGameflowSession { /**/ 
    LolLoadoutsGameflowPhase phase;/**/
    LolLoadoutsGameflowGameData gameData;/**/
  };
  static void to_json(json& j, const LolLoadoutsGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
  }
  static void from_json(const json& j, LolLoadoutsGameflowSession& v) { 
    v.phase = j.at("phase").get<LolLoadoutsGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolLoadoutsGameflowGameData>(); 
  } 
  struct LolLoadoutsGetItemsRequest { /**/ 
    std::vector<std::string> inventoryJWTs;/**/
    uint32_t id;/**/
    std::vector<std::string> inventoryTypes;/**/
  };
  static void to_json(json& j, const LolLoadoutsGetItemsRequest& v) { 
    j["inventoryJWTs"] = v.inventoryJWTs;
    j["id"] = v.id;
    j["inventoryTypes"] = v.inventoryTypes;
  }
  static void from_json(const json& j, LolLoadoutsGetItemsRequest& v) { 
    v.inventoryJWTs = j.at("inventoryJWTs").get<std::vector<std::string>>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.inventoryTypes = j.at("inventoryTypes").get<std::vector<std::string>>(); 
  } 
  struct LolLoadoutsInventoryDTO { /**/ 
    uint64_t summonerId;/**/
    std::map<std::string, json> items;/**/
    std::string puuid;/**/
    std::string expires;/**/
    std::optional<std::string> itemsJwt;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLoadoutsInventoryDTO& v) { 
    j["summonerId"] = v.summonerId;
    j["items"] = v.items;
    j["puuid"] = v.puuid;
    j["expires"] = v.expires;
    j["itemsJwt"] = v.itemsJwt;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLoadoutsInventoryDTO& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.items = j.at("items").get<std::map<std::string, json>>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.itemsJwt = j.at("itemsJwt").get<std::optional<std::string>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolLoadoutsInventoryItemDTO { /**/ 
    int32_t itemId;/**/
    std::string expirationDate;/**/
    std::string entitlementId;/**/
    uint64_t wins;/**/
    std::string instanceTypeId;/**/
    std::string eneitlementTypeId;/**/
    bool rental;/**/
    uint64_t quantity;/**/
    bool f2p;/**/
    std::string usedInGameDate;/**/
    std::string instanceId;/**/
    bool lsb;/**/
    std::string inventoryType;/**/
    std::string purchaseDate;/**/
  };
  static void to_json(json& j, const LolLoadoutsInventoryItemDTO& v) { 
    j["itemId"] = v.itemId;
    j["expirationDate"] = v.expirationDate;
    j["entitlementId"] = v.entitlementId;
    j["wins"] = v.wins;
    j["instanceTypeId"] = v.instanceTypeId;
    j["eneitlementTypeId"] = v.eneitlementTypeId;
    j["rental"] = v.rental;
    j["quantity"] = v.quantity;
    j["f2p"] = v.f2p;
    j["usedInGameDate"] = v.usedInGameDate;
    j["instanceId"] = v.instanceId;
    j["lsb"] = v.lsb;
    j["inventoryType"] = v.inventoryType;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, LolLoadoutsInventoryItemDTO& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.expirationDate = j.at("expirationDate").get<std::string>(); 
    v.entitlementId = j.at("entitlementId").get<std::string>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.instanceTypeId = j.at("instanceTypeId").get<std::string>(); 
    v.eneitlementTypeId = j.at("eneitlementTypeId").get<std::string>(); 
    v.rental = j.at("rental").get<bool>(); 
    v.quantity = j.at("quantity").get<uint64_t>(); 
    v.f2p = j.at("f2p").get<bool>(); 
    v.usedInGameDate = j.at("usedInGameDate").get<std::string>(); 
    v.instanceId = j.at("instanceId").get<std::string>(); 
    v.lsb = j.at("lsb").get<bool>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.purchaseDate = j.at("purchaseDate").get<std::string>(); 
  } 
  struct LolLoadoutsInventoryResponseDTO { /**/ 
    LolLoadoutsInventoryDTO data;/**/
  };
  static void to_json(json& j, const LolLoadoutsInventoryResponseDTO& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolLoadoutsInventoryResponseDTO& v) { 
    v.data = j.at("data").get<LolLoadoutsInventoryDTO>(); 
  } 
  struct LolLoadoutsLoadout { /**/ 
    std::map<std::string, json> items;/**/
    uint32_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLoadoutsLoadout& v) { 
    j["items"] = v.items;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLoadoutsLoadout& v) { 
    v.items = j.at("items").get<std::map<std::string, json>>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class LolLoadoutsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLoadoutsLoginSessionStates& v) {
    switch(v) { 
    case LolLoadoutsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolLoadoutsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLoadoutsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLoadoutsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLoadoutsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLoadoutsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLoadoutsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLoadoutsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLoadoutsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLoadoutsLoginSession { /**/ 
    LolLoadoutsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string idToken;/**/
    json gasToken;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolLoadoutsLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["idToken"] = v.idToken;
    j["gasToken"] = v.gasToken;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolLoadoutsLoginSession& v) { 
    v.state = j.at("state").get<LolLoadoutsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolLobbyAmbassadorMessage { /**/ 
    json payload;/**/
    std::string message;/**/
    std::string errorCode;/**/
    std::string implementationDetails;/**/
    int32_t httpStatus;/**/
  };
  static void to_json(json& j, const LolLobbyAmbassadorMessage& v) { 
    j["payload"] = v.payload;
    j["message"] = v.message;
    j["errorCode"] = v.errorCode;
    j["implementationDetails"] = v.implementationDetails;
    j["httpStatus"] = v.httpStatus;
  }
  static void from_json(const json& j, LolLobbyAmbassadorMessage& v) { 
    v.payload = j.at("payload").get<json>(); 
    v.message = j.at("message").get<std::string>(); 
    v.errorCode = j.at("errorCode").get<std::string>(); 
    v.implementationDetails = j.at("implementationDetails").get<std::string>(); 
    v.httpStatus = j.at("httpStatus").get<int32_t>(); 
  } 
  struct LolLobbyAutoFillQueueDto { /**/ 
    int32_t queueId;/**/
    bool autoFillEligible;/**/
    bool autoFillProtectedForPromos;/**/
    bool autoFillProtectedForStreaking;/**/
  };
  static void to_json(json& j, const LolLobbyAutoFillQueueDto& v) { 
    j["queueId"] = v.queueId;
    j["autoFillEligible"] = v.autoFillEligible;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
  }
  static void from_json(const json& j, LolLobbyAutoFillQueueDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
  } 
  struct LolLobbyAutoFillDto { /**/ 
    std::vector<LolLobbyAutoFillQueueDto> autoFillQueues;/**/
  };
  static void to_json(json& j, const LolLobbyAutoFillDto& v) { 
    j["autoFillQueues"] = v.autoFillQueues;
  }
  static void from_json(const json& j, LolLobbyAutoFillDto& v) { 
    v.autoFillQueues = j.at("autoFillQueues").get<std::vector<LolLobbyAutoFillQueueDto>>(); 
  } 
  struct LolLobbyChampCounts { /**/ 
    uint32_t championsFreeToPlayReward;/**/
    uint32_t championsFreeToPlay;/**/
    uint32_t championsOwned;/**/
    uint32_t championsRented;/**/
  };
  static void to_json(json& j, const LolLobbyChampCounts& v) { 
    j["championsFreeToPlayReward"] = v.championsFreeToPlayReward;
    j["championsFreeToPlay"] = v.championsFreeToPlay;
    j["championsOwned"] = v.championsOwned;
    j["championsRented"] = v.championsRented;
  }
  static void from_json(const json& j, LolLobbyChampCounts& v) { 
    v.championsFreeToPlayReward = j.at("championsFreeToPlayReward").get<uint32_t>(); 
    v.championsFreeToPlay = j.at("championsFreeToPlay").get<uint32_t>(); 
    v.championsOwned = j.at("championsOwned").get<uint32_t>(); 
    v.championsRented = j.at("championsRented").get<uint32_t>(); 
  } 
  struct LolLobbyChatBlockedPlayerResource { /**/ 
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLobbyChatBlockedPlayerResource& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLobbyChatBlockedPlayerResource& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLobbyCollectionsChampion { /**/ 
    std::string name;/**/
    bool botEnabled;/**/
    bool active;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLobbyCollectionsChampion& v) { 
    j["name"] = v.name;
    j["botEnabled"] = v.botEnabled;
    j["active"] = v.active;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyCollectionsChampion& v) { 
    v.name = j.at("name").get<std::string>(); 
    v.botEnabled = j.at("botEnabled").get<bool>(); 
    v.active = j.at("active").get<bool>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolLobbyEligibilityRestrictionCode { /**/ 
    PlayerAvailableChampionRestriction_e = 5, /**/ 
    PlayerBannedRestriction_e = 4, /**/ 
    PlayerBingeRestriction_e = 9, /**/ 
    PlayerDodgeRestriction_e = 10, /**/ 
    PlayerInGameRestriction_e = 11, /**/ 
    PlayerLeaverBustedRestriction_e = 12, /**/ 
    PlayerLeaverTaintedWarningRestriction_e = 13, /**/ 
    PlayerLevelRestriction_e = 2, /**/ 
    PlayerMaxLevelRestriction_e = 14, /**/ 
    PlayerMinLevelRestriction_e = 15, /**/ 
    PlayerMinorRestriction_e = 16, /**/ 
    PlayerRankedSuspensionRestriction_e = 17, /**/ 
    PlayerTimedRestriction_e = 3, /**/ 
    PrerequisiteQueuesNotPlayedRestriction_e = 19, /**/ 
    QueueDisabled_e = 0, /**/ 
    QueueUnsupported_e = 1, /**/ 
    TeamDivisionRestriction_e = 6, /**/ 
    TeamHighMMRMaxSizeRestriction_e = 18, /**/ 
    TeamMaxSizeRestriction_e = 7, /**/ 
    TeamMinSizeRestriction_e = 8, /**/ 
    UnknownRestriction_e = 20, /**/ 
  };
  static void to_json(json& j, const LolLobbyEligibilityRestrictionCode& v) {
    switch(v) { 
    case LolLobbyEligibilityRestrictionCode::PlayerAvailableChampionRestriction_e:
      j = "PlayerAvailableChampionRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerBannedRestriction_e:
      j = "PlayerBannedRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerBingeRestriction_e:
      j = "PlayerBingeRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerDodgeRestriction_e:
      j = "PlayerDodgeRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerInGameRestriction_e:
      j = "PlayerInGameRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerLeaverBustedRestriction_e:
      j = "PlayerLeaverBustedRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerLeaverTaintedWarningRestriction_e:
      j = "PlayerLeaverTaintedWarningRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerLevelRestriction_e:
      j = "PlayerLevelRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerMaxLevelRestriction_e:
      j = "PlayerMaxLevelRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerMinLevelRestriction_e:
      j = "PlayerMinLevelRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerMinorRestriction_e:
      j = "PlayerMinorRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerRankedSuspensionRestriction_e:
      j = "PlayerRankedSuspensionRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PlayerTimedRestriction_e:
      j = "PlayerTimedRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::PrerequisiteQueuesNotPlayedRestriction_e:
      j = "PrerequisiteQueuesNotPlayedRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::QueueDisabled_e:
      j = "QueueDisabled";
    break;
    case LolLobbyEligibilityRestrictionCode::QueueUnsupported_e:
      j = "QueueUnsupported";
    break;
    case LolLobbyEligibilityRestrictionCode::TeamDivisionRestriction_e:
      j = "TeamDivisionRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::TeamHighMMRMaxSizeRestriction_e:
      j = "TeamHighMMRMaxSizeRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::TeamMaxSizeRestriction_e:
      j = "TeamMaxSizeRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::TeamMinSizeRestriction_e:
      j = "TeamMinSizeRestriction";
    break;
    case LolLobbyEligibilityRestrictionCode::UnknownRestriction_e:
      j = "UnknownRestriction";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyEligibilityRestrictionCode& v) {
    auto s = j.get<std::string>(); 
    if(s == "PlayerAvailableChampionRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerAvailableChampionRestriction_e;
      return;
    } 
    if(s == "PlayerBannedRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerBannedRestriction_e;
      return;
    } 
    if(s == "PlayerBingeRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerBingeRestriction_e;
      return;
    } 
    if(s == "PlayerDodgeRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerDodgeRestriction_e;
      return;
    } 
    if(s == "PlayerInGameRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerInGameRestriction_e;
      return;
    } 
    if(s == "PlayerLeaverBustedRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerLeaverBustedRestriction_e;
      return;
    } 
    if(s == "PlayerLeaverTaintedWarningRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerLeaverTaintedWarningRestriction_e;
      return;
    } 
    if(s == "PlayerLevelRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMaxLevelRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerMaxLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMinLevelRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerMinLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMinorRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerMinorRestriction_e;
      return;
    } 
    if(s == "PlayerRankedSuspensionRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerRankedSuspensionRestriction_e;
      return;
    } 
    if(s == "PlayerTimedRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PlayerTimedRestriction_e;
      return;
    } 
    if(s == "PrerequisiteQueuesNotPlayedRestriction") {
      v = LolLobbyEligibilityRestrictionCode::PrerequisiteQueuesNotPlayedRestriction_e;
      return;
    } 
    if(s == "QueueDisabled") {
      v = LolLobbyEligibilityRestrictionCode::QueueDisabled_e;
      return;
    } 
    if(s == "QueueUnsupported") {
      v = LolLobbyEligibilityRestrictionCode::QueueUnsupported_e;
      return;
    } 
    if(s == "TeamDivisionRestriction") {
      v = LolLobbyEligibilityRestrictionCode::TeamDivisionRestriction_e;
      return;
    } 
    if(s == "TeamHighMMRMaxSizeRestriction") {
      v = LolLobbyEligibilityRestrictionCode::TeamHighMMRMaxSizeRestriction_e;
      return;
    } 
    if(s == "TeamMaxSizeRestriction") {
      v = LolLobbyEligibilityRestrictionCode::TeamMaxSizeRestriction_e;
      return;
    } 
    if(s == "TeamMinSizeRestriction") {
      v = LolLobbyEligibilityRestrictionCode::TeamMinSizeRestriction_e;
      return;
    } 
    if(s == "UnknownRestriction") {
      v = LolLobbyEligibilityRestrictionCode::UnknownRestriction_e;
      return;
    } 
  } 
  struct LolLobbyEligibilityRestriction { /**/ 
    std::map<std::string, std::string> restrictionArgs;/**/
    std::vector<uint64_t> summonerIds;/**/
    uint64_t expiredTimestamp;/**/
    LolLobbyEligibilityRestrictionCode restrictionCode;/**/
  };
  static void to_json(json& j, const LolLobbyEligibilityRestriction& v) { 
    j["restrictionArgs"] = v.restrictionArgs;
    j["summonerIds"] = v.summonerIds;
    j["expiredTimestamp"] = v.expiredTimestamp;
    j["restrictionCode"] = v.restrictionCode;
  }
  static void from_json(const json& j, LolLobbyEligibilityRestriction& v) { 
    v.restrictionArgs = j.at("restrictionArgs").get<std::map<std::string, std::string>>(); 
    v.summonerIds = j.at("summonerIds").get<std::vector<uint64_t>>(); 
    v.expiredTimestamp = j.at("expiredTimestamp").get<uint64_t>(); 
    v.restrictionCode = j.at("restrictionCode").get<LolLobbyEligibilityRestrictionCode>(); 
  } 
  struct LolLobbyEligibility { /**/ 
    int32_t queueId;/**/
    std::vector<LolLobbyEligibilityRestriction> restrictions;/**/
    bool eligible;/**/
  };
  static void to_json(json& j, const LolLobbyEligibility& v) { 
    j["queueId"] = v.queueId;
    j["restrictions"] = v.restrictions;
    j["eligible"] = v.eligible;
  }
  static void from_json(const json& j, LolLobbyEligibility& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.restrictions = j.at("restrictions").get<std::vector<LolLobbyEligibilityRestriction>>(); 
    v.eligible = j.at("eligible").get<bool>(); 
  } 
  struct LolLobbyGameDataChampionSummary { /**/ 
    std::string alias;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLobbyGameDataChampionSummary& v) { 
    j["alias"] = v.alias;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyGameDataChampionSummary& v) { 
    v.alias = j.at("alias").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolLobbyGameModeDto { /**/ 
    int32_t queueId;/**/
    std::optional<std::string> botDifficulty;/**/
    std::string gameType;/**/
    int32_t maxPartySize;/**/
  };
  static void to_json(json& j, const LolLobbyGameModeDto& v) { 
    j["queueId"] = v.queueId;
    j["botDifficulty"] = v.botDifficulty;
    j["gameType"] = v.gameType;
    j["maxPartySize"] = v.maxPartySize;
  }
  static void from_json(const json& j, LolLobbyGameModeDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.botDifficulty = j.at("botDifficulty").get<std::optional<std::string>>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.maxPartySize = j.at("maxPartySize").get<int32_t>(); 
  } 
  struct LolLobbyGameflowGameClient { /**/ 
    bool running;/**/
  };
  static void to_json(json& j, const LolLobbyGameflowGameClient& v) { 
    j["running"] = v.running;
  }
  static void from_json(const json& j, LolLobbyGameflowGameClient& v) { 
    v.running = j.at("running").get<bool>(); 
  } 
  enum class LolLobbyMatchmakingDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
  };
  static void to_json(json& j, const LolLobbyMatchmakingDodgeState& v) {
    switch(v) { 
    case LolLobbyMatchmakingDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolLobbyMatchmakingDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolLobbyMatchmakingDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyMatchmakingDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolLobbyMatchmakingDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolLobbyMatchmakingDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolLobbyMatchmakingDodgeState::StrangerDodged_e;
      return;
    } 
  } 
  enum class LolLobbyGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolLobbyGameflowPhase& v) {
    switch(v) { 
    case LolLobbyGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolLobbyGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolLobbyGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolLobbyGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolLobbyGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolLobbyGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolLobbyGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolLobbyGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolLobbyGameflowPhase::None_e:
      j = "None";
    break;
    case LolLobbyGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolLobbyGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolLobbyGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolLobbyGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolLobbyGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolLobbyGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolLobbyGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolLobbyGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolLobbyGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolLobbyGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolLobbyGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolLobbyGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolLobbyGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolLobbyGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolLobbyGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolLobbyGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolLobbyGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolLobbyGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolLobbyGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolLobbyMatchmakingDodgeState state;/**/
    LolLobbyGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolLobbyGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolLobbyGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolLobbyMatchmakingDodgeState>(); 
    v.phase = j.at("phase").get<LolLobbyGameflowPhase>(); 
  } 
  struct LolLobbyGameflowSession { /**/ 
    LolLobbyGameflowPhase phase;/**/
    LolLobbyGameflowGameDodge gameDodge;/**/
    LolLobbyGameflowGameClient gameClient;/**/
  };
  static void to_json(json& j, const LolLobbyGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameDodge"] = v.gameDodge;
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolLobbyGameflowSession& v) { 
    v.phase = j.at("phase").get<LolLobbyGameflowPhase>(); 
    v.gameDodge = j.at("gameDodge").get<LolLobbyGameflowGameDodge>(); 
    v.gameClient = j.at("gameClient").get<LolLobbyGameflowGameClient>(); 
  } 
  struct LolLobbyGatekeeperRestrictionDto { /**/ 
    int32_t queueId;/**/
    std::string payload;/**/
    std::string reason;/**/
    uint64_t accountId;/**/
    int64_t remainingMillis;/**/
  };
  static void to_json(json& j, const LolLobbyGatekeeperRestrictionDto& v) { 
    j["queueId"] = v.queueId;
    j["payload"] = v.payload;
    j["reason"] = v.reason;
    j["accountId"] = v.accountId;
    j["remainingMillis"] = v.remainingMillis;
  }
  static void from_json(const json& j, LolLobbyGatekeeperRestrictionDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.remainingMillis = j.at("remainingMillis").get<int64_t>(); 
  } 
  enum class LolLobbyInvitationType { /**/ 
    invalid_e = 0, /**/ 
    lobby_e = 1, /**/ 
    party_e = 2, /**/ 
  };
  static void to_json(json& j, const LolLobbyInvitationType& v) {
    switch(v) { 
    case LolLobbyInvitationType::invalid_e:
      j = "invalid";
    break;
    case LolLobbyInvitationType::lobby_e:
      j = "lobby";
    break;
    case LolLobbyInvitationType::party_e:
      j = "party";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyInvitationType& v) {
    auto s = j.get<std::string>(); 
    if(s == "invalid") {
      v = LolLobbyInvitationType::invalid_e;
      return;
    } 
    if(s == "lobby") {
      v = LolLobbyInvitationType::lobby_e;
      return;
    } 
    if(s == "party") {
      v = LolLobbyInvitationType::party_e;
      return;
    } 
  } 
  struct LolLobbyLcdsPartyRewardsConfig { /**/ 
    bool Enabled;/**/
  };
  static void to_json(json& j, const LolLobbyLcdsPartyRewardsConfig& v) { 
    j["Enabled"] = v.Enabled;
  }
  static void from_json(const json& j, LolLobbyLcdsPartyRewardsConfig& v) { 
    v.Enabled = j.at("Enabled").get<bool>(); 
  } 
  struct LolLobbyLcdsDynamicClientConfig { /**/ 
    LolLobbyLcdsPartyRewardsConfig PartyRewards;/**/
  };
  static void to_json(json& j, const LolLobbyLcdsDynamicClientConfig& v) { 
    j["PartyRewards"] = v.PartyRewards;
  }
  static void from_json(const json& j, LolLobbyLcdsDynamicClientConfig& v) { 
    v.PartyRewards = j.at("PartyRewards").get<LolLobbyLcdsPartyRewardsConfig>(); 
  } 
  struct LolLobbyLcdsGameMetaData { /**/ 
    uint64_t gameId;/**/
    int32_t mapId;/**/
  };
  static void to_json(json& j, const LolLobbyLcdsGameMetaData& v) { 
    j["gameId"] = v.gameId;
    j["mapId"] = v.mapId;
  }
  static void from_json(const json& j, LolLobbyLcdsGameMetaData& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
  } 
  struct LolLobbyLeague { /**/ 
    std::string leagueTier;/**/
    std::string queueType;/**/
  };
  static void to_json(json& j, const LolLobbyLeague& v) { 
    j["leagueTier"] = v.leagueTier;
    j["queueType"] = v.queueType;
  }
  static void from_json(const json& j, LolLobbyLeague& v) { 
    v.leagueTier = j.at("leagueTier").get<std::string>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
  } 
  struct LolLobbyLobbyPositionPreferences { /**/ 
    std::string firstPreference;/**/
    std::string secondPreference;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyPositionPreferences& v) { 
    j["firstPreference"] = v.firstPreference;
    j["secondPreference"] = v.secondPreference;
  }
  static void from_json(const json& j, LolLobbyLobbyPositionPreferences& v) { 
    v.firstPreference = j.at("firstPreference").get<std::string>(); 
    v.secondPreference = j.at("secondPreference").get<std::string>(); 
  } 
  enum class LolLobbyLobbyBotDifficulty { /**/ 
    EASY_e = 0, /**/ 
    HARD_e = 2, /**/ 
    INTRO_e = 5, /**/ 
    MEDIUM_e = 1, /**/ 
    NONE_e = -1, /**/ 
    TUTORIAL_e = 4, /**/ 
    UBER_e = 3, /**/ 
  };
  static void to_json(json& j, const LolLobbyLobbyBotDifficulty& v) {
    switch(v) { 
    case LolLobbyLobbyBotDifficulty::EASY_e:
      j = "EASY";
    break;
    case LolLobbyLobbyBotDifficulty::HARD_e:
      j = "HARD";
    break;
    case LolLobbyLobbyBotDifficulty::INTRO_e:
      j = "INTRO";
    break;
    case LolLobbyLobbyBotDifficulty::MEDIUM_e:
      j = "MEDIUM";
    break;
    case LolLobbyLobbyBotDifficulty::NONE_e:
      j = "NONE";
    break;
    case LolLobbyLobbyBotDifficulty::TUTORIAL_e:
      j = "TUTORIAL";
    break;
    case LolLobbyLobbyBotDifficulty::UBER_e:
      j = "UBER";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLobbyBotDifficulty& v) {
    auto s = j.get<std::string>(); 
    if(s == "EASY") {
      v = LolLobbyLobbyBotDifficulty::EASY_e;
      return;
    } 
    if(s == "HARD") {
      v = LolLobbyLobbyBotDifficulty::HARD_e;
      return;
    } 
    if(s == "INTRO") {
      v = LolLobbyLobbyBotDifficulty::INTRO_e;
      return;
    } 
    if(s == "MEDIUM") {
      v = LolLobbyLobbyBotDifficulty::MEDIUM_e;
      return;
    } 
    if(s == "NONE") {
      v = LolLobbyLobbyBotDifficulty::NONE_e;
      return;
    } 
    if(s == "TUTORIAL") {
      v = LolLobbyLobbyBotDifficulty::TUTORIAL_e;
      return;
    } 
    if(s == "UBER") {
      v = LolLobbyLobbyBotDifficulty::UBER_e;
      return;
    } 
  } 
  struct LolLobbyLobbyMember { /**/ 
    bool isSpectator;/**/
    bool autoFillProtectedForStreaking;/**/
    bool autoFillProtectedForPromos;/**/
    uint64_t id;/**/
    bool canInviteOthers;/**/
    std::optional<std::string> excludedPositionPreference;/**/
    bool isBot;/**/
    std::string summonerInternalName;/**/
    int32_t botChampionId;/**/
    LolLobbyLobbyPositionPreferences positionPreferences;/**/
    LolLobbyLobbyBotDifficulty botDifficulty;/**/
    bool autoFillEligible;/**/
    bool autoFillProtectedForSoloing;/**/
    bool isOwner;/**/
    bool showPositionExcluder;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyMember& v) { 
    j["isSpectator"] = v.isSpectator;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["id"] = v.id;
    j["canInviteOthers"] = v.canInviteOthers;
    j["excludedPositionPreference"] = v.excludedPositionPreference;
    j["isBot"] = v.isBot;
    j["summonerInternalName"] = v.summonerInternalName;
    j["botChampionId"] = v.botChampionId;
    j["positionPreferences"] = v.positionPreferences;
    j["botDifficulty"] = v.botDifficulty;
    j["autoFillEligible"] = v.autoFillEligible;
    j["autoFillProtectedForSoloing"] = v.autoFillProtectedForSoloing;
    j["isOwner"] = v.isOwner;
    j["showPositionExcluder"] = v.showPositionExcluder;
  }
  static void from_json(const json& j, LolLobbyLobbyMember& v) { 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.canInviteOthers = j.at("canInviteOthers").get<bool>(); 
    v.excludedPositionPreference = j.at("excludedPositionPreference").get<std::optional<std::string>>(); 
    v.isBot = j.at("isBot").get<bool>(); 
    v.summonerInternalName = j.at("summonerInternalName").get<std::string>(); 
    v.botChampionId = j.at("botChampionId").get<int32_t>(); 
    v.positionPreferences = j.at("positionPreferences").get<LolLobbyLobbyPositionPreferences>(); 
    v.botDifficulty = j.at("botDifficulty").get<LolLobbyLobbyBotDifficulty>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.autoFillProtectedForSoloing = j.at("autoFillProtectedForSoloing").get<bool>(); 
    v.isOwner = j.at("isOwner").get<bool>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
  } 
  enum class LolLobbyQueueCustomGameSpectatorPolicy { /**/ 
    AllAllowed_e = 3, /**/ 
    FriendsAllowed_e = 2, /**/ 
    LobbyAllowed_e = 1, /**/ 
    NotAllowed_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLobbyQueueCustomGameSpectatorPolicy& v) {
    switch(v) { 
    case LolLobbyQueueCustomGameSpectatorPolicy::AllAllowed_e:
      j = "AllAllowed";
    break;
    case LolLobbyQueueCustomGameSpectatorPolicy::FriendsAllowed_e:
      j = "FriendsAllowed";
    break;
    case LolLobbyQueueCustomGameSpectatorPolicy::LobbyAllowed_e:
      j = "LobbyAllowed";
    break;
    case LolLobbyQueueCustomGameSpectatorPolicy::NotAllowed_e:
      j = "NotAllowed";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyQueueCustomGameSpectatorPolicy& v) {
    auto s = j.get<std::string>(); 
    if(s == "AllAllowed") {
      v = LolLobbyQueueCustomGameSpectatorPolicy::AllAllowed_e;
      return;
    } 
    if(s == "FriendsAllowed") {
      v = LolLobbyQueueCustomGameSpectatorPolicy::FriendsAllowed_e;
      return;
    } 
    if(s == "LobbyAllowed") {
      v = LolLobbyQueueCustomGameSpectatorPolicy::LobbyAllowed_e;
      return;
    } 
    if(s == "NotAllowed") {
      v = LolLobbyQueueCustomGameSpectatorPolicy::NotAllowed_e;
      return;
    } 
  } 
  struct LolLobbyQueueGameTypeConfig { /**/ 
    int32_t banTimerDuration;/**/
    bool duplicatePick;/**/
    std::string pickMode;/**/
    bool battleBoost;/**/
    int64_t id;/**/
    bool advancedLearningQuests;/**/
    std::string name;/**/
    int32_t mainPickTimerDuration;/**/
    bool onboardCoopBeginner;/**/
    int32_t maxAllowableBans;/**/
    bool allowTrades;/**/
    int32_t postPickTimerDuration;/**/
    bool learningQuests;/**/
    bool crossTeamChampionPool;/**/
    bool deathMatch;/**/
    bool teamChampionPool;/**/
    bool doNotRemove;/**/
    std::optional<int32_t> numPlayersPerTeamOverride;/**/
    std::string banMode;/**/
    bool reroll;/**/
    std::optional<std::string> gameModeOverride;/**/
    bool exclusivePick;/**/
  };
  static void to_json(json& j, const LolLobbyQueueGameTypeConfig& v) { 
    j["banTimerDuration"] = v.banTimerDuration;
    j["duplicatePick"] = v.duplicatePick;
    j["pickMode"] = v.pickMode;
    j["battleBoost"] = v.battleBoost;
    j["id"] = v.id;
    j["advancedLearningQuests"] = v.advancedLearningQuests;
    j["name"] = v.name;
    j["mainPickTimerDuration"] = v.mainPickTimerDuration;
    j["onboardCoopBeginner"] = v.onboardCoopBeginner;
    j["maxAllowableBans"] = v.maxAllowableBans;
    j["allowTrades"] = v.allowTrades;
    j["postPickTimerDuration"] = v.postPickTimerDuration;
    j["learningQuests"] = v.learningQuests;
    j["crossTeamChampionPool"] = v.crossTeamChampionPool;
    j["deathMatch"] = v.deathMatch;
    j["teamChampionPool"] = v.teamChampionPool;
    j["doNotRemove"] = v.doNotRemove;
    j["numPlayersPerTeamOverride"] = v.numPlayersPerTeamOverride;
    j["banMode"] = v.banMode;
    j["reroll"] = v.reroll;
    j["gameModeOverride"] = v.gameModeOverride;
    j["exclusivePick"] = v.exclusivePick;
  }
  static void from_json(const json& j, LolLobbyQueueGameTypeConfig& v) { 
    v.banTimerDuration = j.at("banTimerDuration").get<int32_t>(); 
    v.duplicatePick = j.at("duplicatePick").get<bool>(); 
    v.pickMode = j.at("pickMode").get<std::string>(); 
    v.battleBoost = j.at("battleBoost").get<bool>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.advancedLearningQuests = j.at("advancedLearningQuests").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
    v.mainPickTimerDuration = j.at("mainPickTimerDuration").get<int32_t>(); 
    v.onboardCoopBeginner = j.at("onboardCoopBeginner").get<bool>(); 
    v.maxAllowableBans = j.at("maxAllowableBans").get<int32_t>(); 
    v.allowTrades = j.at("allowTrades").get<bool>(); 
    v.postPickTimerDuration = j.at("postPickTimerDuration").get<int32_t>(); 
    v.learningQuests = j.at("learningQuests").get<bool>(); 
    v.crossTeamChampionPool = j.at("crossTeamChampionPool").get<bool>(); 
    v.deathMatch = j.at("deathMatch").get<bool>(); 
    v.teamChampionPool = j.at("teamChampionPool").get<bool>(); 
    v.doNotRemove = j.at("doNotRemove").get<bool>(); 
    v.numPlayersPerTeamOverride = j.at("numPlayersPerTeamOverride").get<std::optional<int32_t>>(); 
    v.banMode = j.at("banMode").get<std::string>(); 
    v.reroll = j.at("reroll").get<bool>(); 
    v.gameModeOverride = j.at("gameModeOverride").get<std::optional<std::string>>(); 
    v.exclusivePick = j.at("exclusivePick").get<bool>(); 
  } 
  struct LolLobbyLobbyCustomGameConfiguration { /**/ 
    std::string gameMutator;/**/
    LolLobbyQueueCustomGameSpectatorPolicy spectatorPolicy;/**/
    std::string tournamentGameMode;/**/
    std::string gameServerRegion;/**/
    std::string tournamentPassbackDataPacket;/**/
    std::string tournamentPassbackUrl;/**/
    LolLobbyQueueGameTypeConfig gameTypeConfig;/**/
    LolLobbyQueueGameTypeConfig mutators;/**/
    uint32_t maxPlayerCount;/**/
    int32_t teamSize;/**/
    int32_t mapId;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomGameConfiguration& v) { 
    j["gameMutator"] = v.gameMutator;
    j["spectatorPolicy"] = v.spectatorPolicy;
    j["tournamentGameMode"] = v.tournamentGameMode;
    j["gameServerRegion"] = v.gameServerRegion;
    j["tournamentPassbackDataPacket"] = v.tournamentPassbackDataPacket;
    j["tournamentPassbackUrl"] = v.tournamentPassbackUrl;
    j["gameTypeConfig"] = v.gameTypeConfig;
    j["mutators"] = v.mutators;
    j["maxPlayerCount"] = v.maxPlayerCount;
    j["teamSize"] = v.teamSize;
    j["mapId"] = v.mapId;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomGameConfiguration& v) { 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.spectatorPolicy = j.at("spectatorPolicy").get<LolLobbyQueueCustomGameSpectatorPolicy>(); 
    v.tournamentGameMode = j.at("tournamentGameMode").get<std::string>(); 
    v.gameServerRegion = j.at("gameServerRegion").get<std::string>(); 
    v.tournamentPassbackDataPacket = j.at("tournamentPassbackDataPacket").get<std::string>(); 
    v.tournamentPassbackUrl = j.at("tournamentPassbackUrl").get<std::string>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolLobbyQueueGameTypeConfig>(); 
    v.mutators = j.at("mutators").get<LolLobbyQueueGameTypeConfig>(); 
    v.maxPlayerCount = j.at("maxPlayerCount").get<uint32_t>(); 
    v.teamSize = j.at("teamSize").get<int32_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolLobbyLobbyCustomGameLobby { /**/ 
    std::vector<LolLobbyLobbyMember> spectators;/**/
    std::vector<LolLobbyLobbyMember> teamOne;/**/
    uint64_t gameId;/**/
    std::string lobbyName;/**/
    std::string lobbyPassword;/**/
    std::vector<std::string> practiceGameRewardsDisabledReasons;/**/
    LolLobbyLobbyCustomGameConfiguration configuration;/**/
    std::vector<LolLobbyLobbyMember> teamTwo;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomGameLobby& v) { 
    j["spectators"] = v.spectators;
    j["teamOne"] = v.teamOne;
    j["gameId"] = v.gameId;
    j["lobbyName"] = v.lobbyName;
    j["lobbyPassword"] = v.lobbyPassword;
    j["practiceGameRewardsDisabledReasons"] = v.practiceGameRewardsDisabledReasons;
    j["configuration"] = v.configuration;
    j["teamTwo"] = v.teamTwo;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomGameLobby& v) { 
    v.spectators = j.at("spectators").get<std::vector<LolLobbyLobbyMember>>(); 
    v.teamOne = j.at("teamOne").get<std::vector<LolLobbyLobbyMember>>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.lobbyName = j.at("lobbyName").get<std::string>(); 
    v.lobbyPassword = j.at("lobbyPassword").get<std::string>(); 
    v.practiceGameRewardsDisabledReasons = j.at("practiceGameRewardsDisabledReasons").get<std::vector<std::string>>(); 
    v.configuration = j.at("configuration").get<LolLobbyLobbyCustomGameConfiguration>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<LolLobbyLobbyMember>>(); 
  } 
  enum class LolLobbyQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLobbyQueueAvailability& v) {
    switch(v) { 
    case LolLobbyQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolLobbyQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolLobbyQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolLobbyQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolLobbyQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolLobbyQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  enum class LolLobbyLobbyInvitationState { /**/ 
    Accepted_e = 2, /**/ 
    Declined_e = 4, /**/ 
    Error_e = 7, /**/ 
    Joined_e = 3, /**/ 
    Kicked_e = 5, /**/ 
    OnHold_e = 6, /**/ 
    Pending_e = 1, /**/ 
    Requested_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLobbyLobbyInvitationState& v) {
    switch(v) { 
    case LolLobbyLobbyInvitationState::Accepted_e:
      j = "Accepted";
    break;
    case LolLobbyLobbyInvitationState::Declined_e:
      j = "Declined";
    break;
    case LolLobbyLobbyInvitationState::Error_e:
      j = "Error";
    break;
    case LolLobbyLobbyInvitationState::Joined_e:
      j = "Joined";
    break;
    case LolLobbyLobbyInvitationState::Kicked_e:
      j = "Kicked";
    break;
    case LolLobbyLobbyInvitationState::OnHold_e:
      j = "OnHold";
    break;
    case LolLobbyLobbyInvitationState::Pending_e:
      j = "Pending";
    break;
    case LolLobbyLobbyInvitationState::Requested_e:
      j = "Requested";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLobbyInvitationState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Accepted") {
      v = LolLobbyLobbyInvitationState::Accepted_e;
      return;
    } 
    if(s == "Declined") {
      v = LolLobbyLobbyInvitationState::Declined_e;
      return;
    } 
    if(s == "Error") {
      v = LolLobbyLobbyInvitationState::Error_e;
      return;
    } 
    if(s == "Joined") {
      v = LolLobbyLobbyInvitationState::Joined_e;
      return;
    } 
    if(s == "Kicked") {
      v = LolLobbyLobbyInvitationState::Kicked_e;
      return;
    } 
    if(s == "OnHold") {
      v = LolLobbyLobbyInvitationState::OnHold_e;
      return;
    } 
    if(s == "Pending") {
      v = LolLobbyLobbyInvitationState::Pending_e;
      return;
    } 
    if(s == "Requested") {
      v = LolLobbyLobbyInvitationState::Requested_e;
      return;
    } 
  } 
  struct LolLobbyLobbyInvitation { /**/ 
    std::string errorType;/**/
    LolLobbyLobbyInvitationState state;/**/
    LolLobbyEligibility eligibility;/**/
    std::string id;/**/
    uint64_t toSummonerId;/**/
    std::string toSummonerName;/**/
    std::string fromSummonerName;/**/
    std::string timestamp;/**/
    json invitationMetaData;/**/
    uint64_t fromSummonerId;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyInvitation& v) { 
    j["errorType"] = v.errorType;
    j["state"] = v.state;
    j["eligibility"] = v.eligibility;
    j["id"] = v.id;
    j["toSummonerId"] = v.toSummonerId;
    j["toSummonerName"] = v.toSummonerName;
    j["fromSummonerName"] = v.fromSummonerName;
    j["timestamp"] = v.timestamp;
    j["invitationMetaData"] = v.invitationMetaData;
    j["fromSummonerId"] = v.fromSummonerId;
  }
  static void from_json(const json& j, LolLobbyLobbyInvitation& v) { 
    v.errorType = j.at("errorType").get<std::string>(); 
    v.state = j.at("state").get<LolLobbyLobbyInvitationState>(); 
    v.eligibility = j.at("eligibility").get<LolLobbyEligibility>(); 
    v.id = j.at("id").get<std::string>(); 
    v.toSummonerId = j.at("toSummonerId").get<uint64_t>(); 
    v.toSummonerName = j.at("toSummonerName").get<std::string>(); 
    v.fromSummonerName = j.at("fromSummonerName").get<std::string>(); 
    v.timestamp = j.at("timestamp").get<std::string>(); 
    v.invitationMetaData = j.at("invitationMetaData").get<json>(); 
    v.fromSummonerId = j.at("fromSummonerId").get<uint64_t>(); 
  } 
  enum class LolLobbyLobbyRemovedFromGameReason { /**/ 
    Disbanded_e = 2, /**/ 
    GameStartError_e = 7, /**/ 
    Kicked_e = 1, /**/ 
    Left_e = 3, /**/ 
    None_e = 0, /**/ 
    Other_e = 5, /**/ 
    ServiceError_e = 4, /**/ 
    ServiceShutdown_e = 8, /**/ 
    Timeout_e = 6, /**/ 
  };
  static void to_json(json& j, const LolLobbyLobbyRemovedFromGameReason& v) {
    switch(v) { 
    case LolLobbyLobbyRemovedFromGameReason::Disbanded_e:
      j = "Disbanded";
    break;
    case LolLobbyLobbyRemovedFromGameReason::GameStartError_e:
      j = "GameStartError";
    break;
    case LolLobbyLobbyRemovedFromGameReason::Kicked_e:
      j = "Kicked";
    break;
    case LolLobbyLobbyRemovedFromGameReason::Left_e:
      j = "Left";
    break;
    case LolLobbyLobbyRemovedFromGameReason::None_e:
      j = "None";
    break;
    case LolLobbyLobbyRemovedFromGameReason::Other_e:
      j = "Other";
    break;
    case LolLobbyLobbyRemovedFromGameReason::ServiceError_e:
      j = "ServiceError";
    break;
    case LolLobbyLobbyRemovedFromGameReason::ServiceShutdown_e:
      j = "ServiceShutdown";
    break;
    case LolLobbyLobbyRemovedFromGameReason::Timeout_e:
      j = "Timeout";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLobbyRemovedFromGameReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "Disbanded") {
      v = LolLobbyLobbyRemovedFromGameReason::Disbanded_e;
      return;
    } 
    if(s == "GameStartError") {
      v = LolLobbyLobbyRemovedFromGameReason::GameStartError_e;
      return;
    } 
    if(s == "Kicked") {
      v = LolLobbyLobbyRemovedFromGameReason::Kicked_e;
      return;
    } 
    if(s == "Left") {
      v = LolLobbyLobbyRemovedFromGameReason::Left_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyLobbyRemovedFromGameReason::None_e;
      return;
    } 
    if(s == "Other") {
      v = LolLobbyLobbyRemovedFromGameReason::Other_e;
      return;
    } 
    if(s == "ServiceError") {
      v = LolLobbyLobbyRemovedFromGameReason::ServiceError_e;
      return;
    } 
    if(s == "ServiceShutdown") {
      v = LolLobbyLobbyRemovedFromGameReason::ServiceShutdown_e;
      return;
    } 
    if(s == "Timeout") {
      v = LolLobbyLobbyRemovedFromGameReason::Timeout_e;
      return;
    } 
  } 
  struct LolLobbyLobby { /**/ 
    uint32_t maximumParticipantListSize;/**/
    bool autoFillProtectedForStreaking;/**/
    bool autoFillProtectedForPromos;/**/
    bool isTeamBuilderManaged;/**/
    std::optional<LolLobbyLobbyCustomGameLobby> customGameLobby;/**/
    bool canStartMatchmaking;/**/
    int32_t queueId;/**/
    bool autoFillEligible;/**/
    std::string invitationId;/**/
    std::string chatRoomKey;/**/
    bool isCustom;/**/
    std::vector<LolLobbyLobbyMember> members;/**/
    int32_t mapId;/**/
    bool showPositionExcluder;/**/
    std::string chatRoomId;/**/
    bool showPositionSelector;/**/
    bool premadeSizeAllowed;/**/
    bool wasKicked;/**/
    LolLobbyQueueAvailability queueAvailability;/**/
    std::vector<std::string> specifiablePositionPreferences;/**/
    LolLobbyLobbyMember localMember;/**/
    std::vector<LolLobbyLobbyInvitation> invitations;/**/
    LolLobbyLobbyRemovedFromGameReason removalReason;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
    bool requiredPositionCoverageMet;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolLobbyLobby& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["customGameLobby"] = v.customGameLobby;
    j["canStartMatchmaking"] = v.canStartMatchmaking;
    j["queueId"] = v.queueId;
    j["autoFillEligible"] = v.autoFillEligible;
    j["invitationId"] = v.invitationId;
    j["chatRoomKey"] = v.chatRoomKey;
    j["isCustom"] = v.isCustom;
    j["members"] = v.members;
    j["mapId"] = v.mapId;
    j["showPositionExcluder"] = v.showPositionExcluder;
    j["chatRoomId"] = v.chatRoomId;
    j["showPositionSelector"] = v.showPositionSelector;
    j["premadeSizeAllowed"] = v.premadeSizeAllowed;
    j["wasKicked"] = v.wasKicked;
    j["queueAvailability"] = v.queueAvailability;
    j["specifiablePositionPreferences"] = v.specifiablePositionPreferences;
    j["localMember"] = v.localMember;
    j["invitations"] = v.invitations;
    j["removalReason"] = v.removalReason;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
    j["requiredPositionCoverageMet"] = v.requiredPositionCoverageMet;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolLobbyLobby& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<uint32_t>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.customGameLobby = j.at("customGameLobby").get<std::optional<LolLobbyLobbyCustomGameLobby>>(); 
    v.canStartMatchmaking = j.at("canStartMatchmaking").get<bool>(); 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.chatRoomKey = j.at("chatRoomKey").get<std::string>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.members = j.at("members").get<std::vector<LolLobbyLobbyMember>>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
    v.chatRoomId = j.at("chatRoomId").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.premadeSizeAllowed = j.at("premadeSizeAllowed").get<bool>(); 
    v.wasKicked = j.at("wasKicked").get<bool>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolLobbyQueueAvailability>(); 
    v.specifiablePositionPreferences = j.at("specifiablePositionPreferences").get<std::vector<std::string>>(); 
    v.localMember = j.at("localMember").get<LolLobbyLobbyMember>(); 
    v.invitations = j.at("invitations").get<std::vector<LolLobbyLobbyInvitation>>(); 
    v.removalReason = j.at("removalReason").get<LolLobbyLobbyRemovedFromGameReason>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
    v.requiredPositionCoverageMet = j.at("requiredPositionCoverageMet").get<bool>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolLobbyLobbyBotChampion { /**/ 
    std::vector<LolLobbyLobbyBotDifficulty> botDifficulties;/**/
    int32_t id;/**/
    bool active;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyBotChampion& v) { 
    j["botDifficulties"] = v.botDifficulties;
    j["id"] = v.id;
    j["active"] = v.active;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLobbyLobbyBotChampion& v) { 
    v.botDifficulties = j.at("botDifficulties").get<std::vector<LolLobbyLobbyBotDifficulty>>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.active = j.at("active").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLobbyLobbyBotParams { /**/ 
    std::string teamId;/**/
    LolLobbyLobbyBotDifficulty botDifficulty;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyBotParams& v) { 
    j["teamId"] = v.teamId;
    j["botDifficulty"] = v.botDifficulty;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLobbyLobbyBotParams& v) { 
    v.teamId = j.at("teamId").get<std::string>(); 
    v.botDifficulty = j.at("botDifficulty").get<LolLobbyLobbyBotDifficulty>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolLobbyLobbyChangeGameDto { /**/ 
    int32_t queueId;/**/
    std::optional<LolLobbyLobbyCustomGameLobby> customGameLobby;/**/
    bool isCustom;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyChangeGameDto& v) { 
    j["queueId"] = v.queueId;
    j["customGameLobby"] = v.customGameLobby;
    j["isCustom"] = v.isCustom;
  }
  static void from_json(const json& j, LolLobbyLobbyChangeGameDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.customGameLobby = j.at("customGameLobby").get<std::optional<LolLobbyLobbyCustomGameLobby>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
  } 
  struct LolLobbyLobbyChangeQueue { /**/ 
    int32_t queueId;/**/
    std::optional<LolLobbyLobbyCustomGameLobby> customGameLobby;/**/
    bool isCustom;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyChangeQueue& v) { 
    j["queueId"] = v.queueId;
    j["customGameLobby"] = v.customGameLobby;
    j["isCustom"] = v.isCustom;
  }
  static void from_json(const json& j, LolLobbyLobbyChangeQueue& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.customGameLobby = j.at("customGameLobby").get<std::optional<LolLobbyLobbyCustomGameLobby>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
  } 
  struct LolLobbyLobbyCustomFailedPlayer { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    std::string reason;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomFailedPlayer& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["reason"] = v.reason;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomFailedPlayer& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.reason = j.at("reason").get<std::string>(); 
  } 
  struct LolLobbyLobbyCustomChampSelectStartResponse { /**/ 
    std::vector<LolLobbyLobbyCustomFailedPlayer> failedPlayers;/**/
    bool success;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomChampSelectStartResponse& v) { 
    j["failedPlayers"] = v.failedPlayers;
    j["success"] = v.success;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomChampSelectStartResponse& v) { 
    v.failedPlayers = j.at("failedPlayers").get<std::vector<LolLobbyLobbyCustomFailedPlayer>>(); 
    v.success = j.at("success").get<bool>(); 
  } 
  struct LolLobbyLobbyCustomGame { /**/ 
    int32_t filledPlayerSlots;/**/
    std::string gameType;/**/
    std::string spectatorPolicy;/**/
    uint64_t id;/**/
    uint64_t maxSpectatorSlots;/**/
    std::string lobbyName;/**/
    std::string ownerSummonerName;/**/
    int32_t filledSpectatorSlots;/**/
    std::string passbackUrl;/**/
    int32_t maxPlayerSlots;/**/
    int32_t mapId;/**/
    bool hasPassword;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomGame& v) { 
    j["filledPlayerSlots"] = v.filledPlayerSlots;
    j["gameType"] = v.gameType;
    j["spectatorPolicy"] = v.spectatorPolicy;
    j["id"] = v.id;
    j["maxSpectatorSlots"] = v.maxSpectatorSlots;
    j["lobbyName"] = v.lobbyName;
    j["ownerSummonerName"] = v.ownerSummonerName;
    j["filledSpectatorSlots"] = v.filledSpectatorSlots;
    j["passbackUrl"] = v.passbackUrl;
    j["maxPlayerSlots"] = v.maxPlayerSlots;
    j["mapId"] = v.mapId;
    j["hasPassword"] = v.hasPassword;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomGame& v) { 
    v.filledPlayerSlots = j.at("filledPlayerSlots").get<int32_t>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.spectatorPolicy = j.at("spectatorPolicy").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.maxSpectatorSlots = j.at("maxSpectatorSlots").get<uint64_t>(); 
    v.lobbyName = j.at("lobbyName").get<std::string>(); 
    v.ownerSummonerName = j.at("ownerSummonerName").get<std::string>(); 
    v.filledSpectatorSlots = j.at("filledSpectatorSlots").get<int32_t>(); 
    v.passbackUrl = j.at("passbackUrl").get<std::string>(); 
    v.maxPlayerSlots = j.at("maxPlayerSlots").get<int32_t>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.hasPassword = j.at("hasPassword").get<bool>(); 
  } 
  struct LolLobbyLobbyCustomJoinParameters { /**/ 
    std::optional<bool> asSpectator;/**/
    std::optional<std::string> password;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyCustomJoinParameters& v) { 
    j["asSpectator"] = v.asSpectator;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolLobbyLobbyCustomJoinParameters& v) { 
    v.asSpectator = j.at("asSpectator").get<std::optional<bool>>(); 
    v.password = j.at("password").get<std::optional<std::string>>(); 
  } 
  struct LolLobbyLobbyParticipantDto { /**/ 
    bool isSpectator;/**/
    bool autoFillProtectedForStreaking;/**/
    bool autoFillProtectedForPromos;/**/
    bool allowedInviteOthers;/**/
    bool isBot;/**/
    bool autoFillEligible;/**/
    uint64_t summonerId;/**/
    std::string puuid;/**/
    int32_t summonerIconId;/**/
    bool autoFillProtectedForSoloing;/**/
    bool showGhostedBanner;/**/
    std::string summonerName;/**/
    bool allowedKickOthers;/**/
    int32_t botChampionId;/**/
    std::string secondPositionPreference;/**/
    int32_t teamId;/**/
    LolLobbyLobbyBotDifficulty botDifficulty;/**/
    bool allowedStartActivity;/**/
    std::string firstPositionPreference;/**/
    bool allowedToggleInvite;/**/
    bool allowedChangeActivity;/**/
    std::string botId;/**/
    bool isLeader;/**/
    bool ready;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyParticipantDto& v) { 
    j["isSpectator"] = v.isSpectator;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["allowedInviteOthers"] = v.allowedInviteOthers;
    j["isBot"] = v.isBot;
    j["autoFillEligible"] = v.autoFillEligible;
    j["summonerId"] = v.summonerId;
    j["puuid"] = v.puuid;
    j["summonerIconId"] = v.summonerIconId;
    j["autoFillProtectedForSoloing"] = v.autoFillProtectedForSoloing;
    j["showGhostedBanner"] = v.showGhostedBanner;
    j["summonerName"] = v.summonerName;
    j["allowedKickOthers"] = v.allowedKickOthers;
    j["botChampionId"] = v.botChampionId;
    j["secondPositionPreference"] = v.secondPositionPreference;
    j["teamId"] = v.teamId;
    j["botDifficulty"] = v.botDifficulty;
    j["allowedStartActivity"] = v.allowedStartActivity;
    j["firstPositionPreference"] = v.firstPositionPreference;
    j["allowedToggleInvite"] = v.allowedToggleInvite;
    j["allowedChangeActivity"] = v.allowedChangeActivity;
    j["botId"] = v.botId;
    j["isLeader"] = v.isLeader;
    j["ready"] = v.ready;
  }
  static void from_json(const json& j, LolLobbyLobbyParticipantDto& v) { 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.allowedInviteOthers = j.at("allowedInviteOthers").get<bool>(); 
    v.isBot = j.at("isBot").get<bool>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.summonerIconId = j.at("summonerIconId").get<int32_t>(); 
    v.autoFillProtectedForSoloing = j.at("autoFillProtectedForSoloing").get<bool>(); 
    v.showGhostedBanner = j.at("showGhostedBanner").get<bool>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.allowedKickOthers = j.at("allowedKickOthers").get<bool>(); 
    v.botChampionId = j.at("botChampionId").get<int32_t>(); 
    v.secondPositionPreference = j.at("secondPositionPreference").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.botDifficulty = j.at("botDifficulty").get<LolLobbyLobbyBotDifficulty>(); 
    v.allowedStartActivity = j.at("allowedStartActivity").get<bool>(); 
    v.firstPositionPreference = j.at("firstPositionPreference").get<std::string>(); 
    v.allowedToggleInvite = j.at("allowedToggleInvite").get<bool>(); 
    v.allowedChangeActivity = j.at("allowedChangeActivity").get<bool>(); 
    v.botId = j.at("botId").get<std::string>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
    v.ready = j.at("ready").get<bool>(); 
  } 
  struct LolLobbyLobbyGameConfigDto { /**/ 
    int32_t maxLobbySize;/**/
    std::string gameMutator;/**/
    bool showPositionSelector;/**/
    bool isCustom;/**/
    bool premadeSizeAllowed;/**/
    bool isTeamBuilderManaged;/**/
    std::vector<std::string> customRewardsDisabledReasons;/**/
    LolLobbyQueueCustomGameSpectatorPolicy customSpectatorPolicy;/**/
    std::vector<LolLobbyLobbyParticipantDto> customTeam100;/**/
    std::string pickType;/**/
    std::vector<LolLobbyLobbyParticipantDto> customTeam200;/**/
    int32_t queueId;/**/
    std::string customMutatorName;/**/
    std::vector<LolLobbyLobbyParticipantDto> customSpectators;/**/
    int32_t maxTeamSize;/**/
    std::string customLobbyName;/**/
    bool isLobbyFull;/**/
    std::string gameMode;/**/
    int32_t mapId;/**/
    int32_t maxHumanPlayers;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyGameConfigDto& v) { 
    j["maxLobbySize"] = v.maxLobbySize;
    j["gameMutator"] = v.gameMutator;
    j["showPositionSelector"] = v.showPositionSelector;
    j["isCustom"] = v.isCustom;
    j["premadeSizeAllowed"] = v.premadeSizeAllowed;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["customRewardsDisabledReasons"] = v.customRewardsDisabledReasons;
    j["customSpectatorPolicy"] = v.customSpectatorPolicy;
    j["customTeam100"] = v.customTeam100;
    j["pickType"] = v.pickType;
    j["customTeam200"] = v.customTeam200;
    j["queueId"] = v.queueId;
    j["customMutatorName"] = v.customMutatorName;
    j["customSpectators"] = v.customSpectators;
    j["maxTeamSize"] = v.maxTeamSize;
    j["customLobbyName"] = v.customLobbyName;
    j["isLobbyFull"] = v.isLobbyFull;
    j["gameMode"] = v.gameMode;
    j["mapId"] = v.mapId;
    j["maxHumanPlayers"] = v.maxHumanPlayers;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
  }
  static void from_json(const json& j, LolLobbyLobbyGameConfigDto& v) { 
    v.maxLobbySize = j.at("maxLobbySize").get<int32_t>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.premadeSizeAllowed = j.at("premadeSizeAllowed").get<bool>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.customRewardsDisabledReasons = j.at("customRewardsDisabledReasons").get<std::vector<std::string>>(); 
    v.customSpectatorPolicy = j.at("customSpectatorPolicy").get<LolLobbyQueueCustomGameSpectatorPolicy>(); 
    v.customTeam100 = j.at("customTeam100").get<std::vector<LolLobbyLobbyParticipantDto>>(); 
    v.pickType = j.at("pickType").get<std::string>(); 
    v.customTeam200 = j.at("customTeam200").get<std::vector<LolLobbyLobbyParticipantDto>>(); 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.customMutatorName = j.at("customMutatorName").get<std::string>(); 
    v.customSpectators = j.at("customSpectators").get<std::vector<LolLobbyLobbyParticipantDto>>(); 
    v.maxTeamSize = j.at("maxTeamSize").get<int32_t>(); 
    v.customLobbyName = j.at("customLobbyName").get<std::string>(); 
    v.isLobbyFull = j.at("isLobbyFull").get<bool>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.maxHumanPlayers = j.at("maxHumanPlayers").get<int32_t>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyLobbyInvitationDto { /**/ 
    std::string timestamp;/**/
    LolLobbyLobbyInvitationState state;/**/
    std::string invitationId;/**/
    uint64_t toSummonerId;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyInvitationDto& v) { 
    j["timestamp"] = v.timestamp;
    j["state"] = v.state;
    j["invitationId"] = v.invitationId;
    j["toSummonerId"] = v.toSummonerId;
  }
  static void from_json(const json& j, LolLobbyLobbyInvitationDto& v) { 
    v.timestamp = j.at("timestamp").get<std::string>(); 
    v.state = j.at("state").get<LolLobbyLobbyInvitationState>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.toSummonerId = j.at("toSummonerId").get<uint64_t>(); 
  } 
  struct LolLobbyLobbyDto { /**/ 
    std::string chatRoomId;/**/
    bool canStartActivity;/**/
    LolLobbyLobbyGameConfigDto gameConfig;/**/
    LolLobbyLobbyParticipantDto localMember;/**/
    std::vector<LolLobbyLobbyInvitationDto> invitations;/**/
    std::optional<std::vector<LolLobbyEligibilityRestriction>> restrictions;/**/
    std::string partyId;/**/
    std::string chatRoomKey;/**/
    std::vector<LolLobbyLobbyParticipantDto> members;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyDto& v) { 
    j["chatRoomId"] = v.chatRoomId;
    j["canStartActivity"] = v.canStartActivity;
    j["gameConfig"] = v.gameConfig;
    j["localMember"] = v.localMember;
    j["invitations"] = v.invitations;
    j["restrictions"] = v.restrictions;
    j["partyId"] = v.partyId;
    j["chatRoomKey"] = v.chatRoomKey;
    j["members"] = v.members;
  }
  static void from_json(const json& j, LolLobbyLobbyDto& v) { 
    v.chatRoomId = j.at("chatRoomId").get<std::string>(); 
    v.canStartActivity = j.at("canStartActivity").get<bool>(); 
    v.gameConfig = j.at("gameConfig").get<LolLobbyLobbyGameConfigDto>(); 
    v.localMember = j.at("localMember").get<LolLobbyLobbyParticipantDto>(); 
    v.invitations = j.at("invitations").get<std::vector<LolLobbyLobbyInvitationDto>>(); 
    v.restrictions = j.at("restrictions").get<std::optional<std::vector<LolLobbyEligibilityRestriction>>>(); 
    v.partyId = j.at("partyId").get<std::string>(); 
    v.chatRoomKey = j.at("chatRoomKey").get<std::string>(); 
    v.members = j.at("members").get<std::vector<LolLobbyLobbyParticipantDto>>(); 
  } 
  struct LolLobbyLobbyLastQueuedMember { /**/ 
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyLastQueuedMember& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyLobbyLastQueuedMember& v) { 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  struct LolLobbyLobbyLastQueuedLobby { /**/ 
    int32_t queueId;/**/
    bool wasOwner;/**/
    bool canPlayAgain;/**/
    std::vector<LolLobbyLobbyLastQueuedMember> members;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyLastQueuedLobby& v) { 
    j["queueId"] = v.queueId;
    j["wasOwner"] = v.wasOwner;
    j["canPlayAgain"] = v.canPlayAgain;
    j["members"] = v.members;
  }
  static void from_json(const json& j, LolLobbyLobbyLastQueuedLobby& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.wasOwner = j.at("wasOwner").get<bool>(); 
    v.canPlayAgain = j.at("canPlayAgain").get<bool>(); 
    v.members = j.at("members").get<std::vector<LolLobbyLobbyLastQueuedMember>>(); 
  } 
  struct LolLobbyLobbyMatchmakingLowPriorityDataResource { /**/ 
    double penaltyTimeRemaining;/**/
    double penaltyTime;/**/
    std::vector<uint64_t> penalizedSummonerIds;/**/
    std::string bustedLeaverAccessToken;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyMatchmakingLowPriorityDataResource& v) { 
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["penaltyTime"] = v.penaltyTime;
    j["penalizedSummonerIds"] = v.penalizedSummonerIds;
    j["bustedLeaverAccessToken"] = v.bustedLeaverAccessToken;
  }
  static void from_json(const json& j, LolLobbyLobbyMatchmakingLowPriorityDataResource& v) { 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.penaltyTime = j.at("penaltyTime").get<double>(); 
    v.penalizedSummonerIds = j.at("penalizedSummonerIds").get<std::vector<uint64_t>>(); 
    v.bustedLeaverAccessToken = j.at("bustedLeaverAccessToken").get<std::string>(); 
  } 
  struct LolLobbyLobbyMatchmakingSearchErrorResource { /**/ 
    std::string errorType;/**/
    double penaltyTimeRemaining;/**/
    std::string message;/**/
    uint64_t penalizedSummonerId;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyMatchmakingSearchErrorResource& v) { 
    j["errorType"] = v.errorType;
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["message"] = v.message;
    j["penalizedSummonerId"] = v.penalizedSummonerId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyLobbyMatchmakingSearchErrorResource& v) { 
    v.errorType = j.at("errorType").get<std::string>(); 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.message = j.at("message").get<std::string>(); 
    v.penalizedSummonerId = j.at("penalizedSummonerId").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolLobbyLobbyMatchmakingSearchState { /**/ 
    AbandonedLowPriorityQueue_e = 1, /**/ 
    Canceled_e = 2, /**/ 
    Error_e = 5, /**/ 
    Found_e = 4, /**/ 
    Invalid_e = 0, /**/ 
    Searching_e = 3, /**/ 
    ServiceError_e = 6, /**/ 
    ServiceShutdown_e = 7, /**/ 
  };
  static void to_json(json& j, const LolLobbyLobbyMatchmakingSearchState& v) {
    switch(v) { 
    case LolLobbyLobbyMatchmakingSearchState::AbandonedLowPriorityQueue_e:
      j = "AbandonedLowPriorityQueue";
    break;
    case LolLobbyLobbyMatchmakingSearchState::Canceled_e:
      j = "Canceled";
    break;
    case LolLobbyLobbyMatchmakingSearchState::Error_e:
      j = "Error";
    break;
    case LolLobbyLobbyMatchmakingSearchState::Found_e:
      j = "Found";
    break;
    case LolLobbyLobbyMatchmakingSearchState::Invalid_e:
      j = "Invalid";
    break;
    case LolLobbyLobbyMatchmakingSearchState::Searching_e:
      j = "Searching";
    break;
    case LolLobbyLobbyMatchmakingSearchState::ServiceError_e:
      j = "ServiceError";
    break;
    case LolLobbyLobbyMatchmakingSearchState::ServiceShutdown_e:
      j = "ServiceShutdown";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLobbyMatchmakingSearchState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AbandonedLowPriorityQueue") {
      v = LolLobbyLobbyMatchmakingSearchState::AbandonedLowPriorityQueue_e;
      return;
    } 
    if(s == "Canceled") {
      v = LolLobbyLobbyMatchmakingSearchState::Canceled_e;
      return;
    } 
    if(s == "Error") {
      v = LolLobbyLobbyMatchmakingSearchState::Error_e;
      return;
    } 
    if(s == "Found") {
      v = LolLobbyLobbyMatchmakingSearchState::Found_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolLobbyLobbyMatchmakingSearchState::Invalid_e;
      return;
    } 
    if(s == "Searching") {
      v = LolLobbyLobbyMatchmakingSearchState::Searching_e;
      return;
    } 
    if(s == "ServiceError") {
      v = LolLobbyLobbyMatchmakingSearchState::ServiceError_e;
      return;
    } 
    if(s == "ServiceShutdown") {
      v = LolLobbyLobbyMatchmakingSearchState::ServiceShutdown_e;
      return;
    } 
  } 
  struct LolLobbyLobbyMatchmakingSearchResource { /**/ 
    LolLobbyLobbyMatchmakingSearchState searchState;/**/
    LolLobbyLobbyMatchmakingLowPriorityDataResource lowPriorityData;/**/
    std::vector<LolLobbyLobbyMatchmakingSearchErrorResource> errors;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyMatchmakingSearchResource& v) { 
    j["searchState"] = v.searchState;
    j["lowPriorityData"] = v.lowPriorityData;
    j["errors"] = v.errors;
  }
  static void from_json(const json& j, LolLobbyLobbyMatchmakingSearchResource& v) { 
    v.searchState = j.at("searchState").get<LolLobbyLobbyMatchmakingSearchState>(); 
    v.lowPriorityData = j.at("lowPriorityData").get<LolLobbyLobbyMatchmakingLowPriorityDataResource>(); 
    v.errors = j.at("errors").get<std::vector<LolLobbyLobbyMatchmakingSearchErrorResource>>(); 
  } 
  struct LolLobbyLobbyNotification { /**/ 
    uint64_t timestamp;/**/
    std::string notificationId;/**/
    std::string notificationReason;/**/
    std::vector<uint64_t> summonerIds;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyNotification& v) { 
    j["timestamp"] = v.timestamp;
    j["notificationId"] = v.notificationId;
    j["notificationReason"] = v.notificationReason;
    j["summonerIds"] = v.summonerIds;
  }
  static void from_json(const json& j, LolLobbyLobbyNotification& v) { 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.notificationId = j.at("notificationId").get<std::string>(); 
    v.notificationReason = j.at("notificationReason").get<std::string>(); 
    v.summonerIds = j.at("summonerIds").get<std::vector<uint64_t>>(); 
  } 
  enum class LolLobbyLobbyPartyRewardType { /**/ 
    Icon_e = 2, /**/ 
    Ip_e = 1, /**/ 
    None_e = 9999, /**/ 
  };
  static void to_json(json& j, const LolLobbyLobbyPartyRewardType& v) {
    switch(v) { 
    case LolLobbyLobbyPartyRewardType::Icon_e:
      j = "Icon";
    break;
    case LolLobbyLobbyPartyRewardType::Ip_e:
      j = "Ip";
    break;
    case LolLobbyLobbyPartyRewardType::None_e:
      j = "None";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLobbyPartyRewardType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Icon") {
      v = LolLobbyLobbyPartyRewardType::Icon_e;
      return;
    } 
    if(s == "Ip") {
      v = LolLobbyLobbyPartyRewardType::Ip_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyLobbyPartyRewardType::None_e;
      return;
    } 
  } 
  struct LolLobbyPartyReward { /**/ 
    LolLobbyLobbyPartyRewardType type;/**/
    int32_t premadeSize;/**/
    std::string value;/**/
  };
  static void to_json(json& j, const LolLobbyPartyReward& v) { 
    j["type"] = v.type;
    j["premadeSize"] = v.premadeSize;
    j["value"] = v.value;
  }
  static void from_json(const json& j, LolLobbyPartyReward& v) { 
    v.type = j.at("type").get<LolLobbyLobbyPartyRewardType>(); 
    v.premadeSize = j.at("premadeSize").get<int32_t>(); 
    v.value = j.at("value").get<std::string>(); 
  } 
  struct LolLobbyLobbyPartyRewards { /**/ 
    int32_t queueId;/**/
    std::vector<LolLobbyPartyReward> partyRewards;/**/
    bool isCustom;/**/
    bool isEnabled;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyPartyRewards& v) { 
    j["queueId"] = v.queueId;
    j["partyRewards"] = v.partyRewards;
    j["isCustom"] = v.isCustom;
    j["isEnabled"] = v.isEnabled;
  }
  static void from_json(const json& j, LolLobbyLobbyPartyRewards& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.partyRewards = j.at("partyRewards").get<std::vector<LolLobbyPartyReward>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isEnabled = j.at("isEnabled").get<bool>(); 
  } 
  struct LolLobbyLobbyStatus { /**/ 
    int32_t queueId;/**/
    bool isSpectator;/**/
    std::vector<uint64_t> invitedSummonerIds;/**/
    bool allowedPlayAgain;/**/
    bool isPracticeTool;/**/
    std::optional<std::string> lobbyId;/**/
    std::vector<uint64_t> memberSummonerIds;/**/
    bool isCustom;/**/
    bool isLeader;/**/
    LolLobbyQueueCustomGameSpectatorPolicy customSpectatorPolicy;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["isSpectator"] = v.isSpectator;
    j["invitedSummonerIds"] = v.invitedSummonerIds;
    j["allowedPlayAgain"] = v.allowedPlayAgain;
    j["isPracticeTool"] = v.isPracticeTool;
    j["lobbyId"] = v.lobbyId;
    j["memberSummonerIds"] = v.memberSummonerIds;
    j["isCustom"] = v.isCustom;
    j["isLeader"] = v.isLeader;
    j["customSpectatorPolicy"] = v.customSpectatorPolicy;
  }
  static void from_json(const json& j, LolLobbyLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.invitedSummonerIds = j.at("invitedSummonerIds").get<std::vector<uint64_t>>(); 
    v.allowedPlayAgain = j.at("allowedPlayAgain").get<bool>(); 
    v.isPracticeTool = j.at("isPracticeTool").get<bool>(); 
    v.lobbyId = j.at("lobbyId").get<std::optional<std::string>>(); 
    v.memberSummonerIds = j.at("memberSummonerIds").get<std::vector<uint64_t>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
    v.customSpectatorPolicy = j.at("customSpectatorPolicy").get<LolLobbyQueueCustomGameSpectatorPolicy>(); 
  } 
  struct LolLobbyLobbyTimer { /**/ 
    bool enabled;/**/
    int64_t countdown;/**/
  };
  static void to_json(json& j, const LolLobbyLobbyTimer& v) { 
    j["enabled"] = v.enabled;
    j["countdown"] = v.countdown;
  }
  static void from_json(const json& j, LolLobbyLobbyTimer& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.countdown = j.at("countdown").get<int64_t>(); 
  } 
  enum class LolLobbyLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLobbyLoginSessionStates& v) {
    switch(v) { 
    case LolLobbyLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolLobbyLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLobbyLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLobbyLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLobbyLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLobbyLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLobbyLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLobbyLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLobbyLoginSession { /**/ 
    bool connected;/**/
    LolLobbyLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    bool isNewPlayer;/**/
    std::string username;/**/
    std::string idToken;/**/
    std::string userAuthToken;/**/
    json gasToken;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolLobbyLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["isNewPlayer"] = v.isNewPlayer;
    j["username"] = v.username;
    j["idToken"] = v.idToken;
    j["userAuthToken"] = v.userAuthToken;
    j["gasToken"] = v.gasToken;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolLobbyLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolLobbyLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.isNewPlayer = j.at("isNewPlayer").get<bool>(); 
    v.username = j.at("username").get<std::string>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.userAuthToken = j.at("userAuthToken").get<std::string>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolLobbyPartyChatDto { /**/ 
    std::string jid;/**/
  };
  static void to_json(json& j, const LolLobbyPartyChatDto& v) { 
    j["jid"] = v.jid;
  }
  static void from_json(const json& j, LolLobbyPartyChatDto& v) { 
    v.jid = j.at("jid").get<std::string>(); 
  } 
  struct LolLobbyPartyMemberMetadataDto { /**/ 
    std::vector<std::string> positionPref;/**/
  };
  static void to_json(json& j, const LolLobbyPartyMemberMetadataDto& v) { 
    j["positionPref"] = v.positionPref;
  }
  static void from_json(const json& j, LolLobbyPartyMemberMetadataDto& v) { 
    v.positionPref = j.at("positionPref").get<std::vector<std::string>>(); 
  } 
  enum class LolLobbyPartyMemberRoleEnum { /**/ 
    DECLINED_e = 5, /**/ 
    HOLD_e = 3, /**/ 
    INVITED_e = 2, /**/ 
    KICKED_e = 4, /**/ 
    LEADER_e = 0, /**/ 
    MEMBER_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLobbyPartyMemberRoleEnum& v) {
    switch(v) { 
    case LolLobbyPartyMemberRoleEnum::DECLINED_e:
      j = "DECLINED";
    break;
    case LolLobbyPartyMemberRoleEnum::HOLD_e:
      j = "HOLD";
    break;
    case LolLobbyPartyMemberRoleEnum::INVITED_e:
      j = "INVITED";
    break;
    case LolLobbyPartyMemberRoleEnum::KICKED_e:
      j = "KICKED";
    break;
    case LolLobbyPartyMemberRoleEnum::LEADER_e:
      j = "LEADER";
    break;
    case LolLobbyPartyMemberRoleEnum::MEMBER_e:
      j = "MEMBER";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyPartyMemberRoleEnum& v) {
    auto s = j.get<std::string>(); 
    if(s == "DECLINED") {
      v = LolLobbyPartyMemberRoleEnum::DECLINED_e;
      return;
    } 
    if(s == "HOLD") {
      v = LolLobbyPartyMemberRoleEnum::HOLD_e;
      return;
    } 
    if(s == "INVITED") {
      v = LolLobbyPartyMemberRoleEnum::INVITED_e;
      return;
    } 
    if(s == "KICKED") {
      v = LolLobbyPartyMemberRoleEnum::KICKED_e;
      return;
    } 
    if(s == "LEADER") {
      v = LolLobbyPartyMemberRoleEnum::LEADER_e;
      return;
    } 
    if(s == "MEMBER") {
      v = LolLobbyPartyMemberRoleEnum::MEMBER_e;
      return;
    } 
  } 
  struct LolLobbyPartyMemberDto { /**/ 
    LolLobbyPartyMemberMetadataDto metadata;/**/
    std::string platformId;/**/
    std::optional<bool> canInvite;/**/
    LolLobbyPartyMemberRoleEnum role;/**/
    std::optional<uint64_t> inviteTimestamp;/**/
    std::optional<bool> ready;/**/
    std::optional<uint64_t> invitedBySummonerId;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string partyId;/**/
    std::string puuid;/**/
    std::optional<LolLobbyGameModeDto> gameMode;/**/
  };
  static void to_json(json& j, const LolLobbyPartyMemberDto& v) { 
    j["metadata"] = v.metadata;
    j["platformId"] = v.platformId;
    j["canInvite"] = v.canInvite;
    j["role"] = v.role;
    j["inviteTimestamp"] = v.inviteTimestamp;
    j["ready"] = v.ready;
    j["invitedBySummonerId"] = v.invitedBySummonerId;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["partyId"] = v.partyId;
    j["puuid"] = v.puuid;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolLobbyPartyMemberDto& v) { 
    v.metadata = j.at("metadata").get<LolLobbyPartyMemberMetadataDto>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.canInvite = j.at("canInvite").get<std::optional<bool>>(); 
    v.role = j.at("role").get<LolLobbyPartyMemberRoleEnum>(); 
    v.inviteTimestamp = j.at("inviteTimestamp").get<std::optional<uint64_t>>(); 
    v.ready = j.at("ready").get<std::optional<bool>>(); 
    v.invitedBySummonerId = j.at("invitedBySummonerId").get<std::optional<uint64_t>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.partyId = j.at("partyId").get<std::string>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::optional<LolLobbyGameModeDto>>(); 
  } 
  struct LolLobbyQueueRestrictionDto { /**/ 
    std::vector<LolLobbyGatekeeperRestrictionDto> gatekeeperRestrictions;/**/
  };
  static void to_json(json& j, const LolLobbyQueueRestrictionDto& v) { 
    j["gatekeeperRestrictions"] = v.gatekeeperRestrictions;
  }
  static void from_json(const json& j, LolLobbyQueueRestrictionDto& v) { 
    v.gatekeeperRestrictions = j.at("gatekeeperRestrictions").get<std::vector<LolLobbyGatekeeperRestrictionDto>>(); 
  } 
  struct LolLobbyPartyDto { /**/ 
    std::vector<LolLobbyPartyMemberDto> players;/**/
    LolLobbyPartyChatDto chat;/**/
    std::optional<std::vector<LolLobbyGatekeeperRestrictionDto>> eligibilityRestrictions;/**/
    uint64_t version;/**/
    uint64_t activityStartedUtcMillis;/**/
    std::string platformId;/**/
    LolLobbyQueueRestrictionDto activeRestrictions;/**/
    int32_t maxPartySize;/**/
    bool activityLocked;/**/
    std::string partyId;/**/
    int64_t eligibilityHash;/**/
    LolLobbyGameModeDto gameMode;/**/
    std::string partyType;/**/
    uint64_t activityResumeUtcMillis;/**/
  };
  static void to_json(json& j, const LolLobbyPartyDto& v) { 
    j["players"] = v.players;
    j["chat"] = v.chat;
    j["eligibilityRestrictions"] = v.eligibilityRestrictions;
    j["version"] = v.version;
    j["activityStartedUtcMillis"] = v.activityStartedUtcMillis;
    j["platformId"] = v.platformId;
    j["activeRestrictions"] = v.activeRestrictions;
    j["maxPartySize"] = v.maxPartySize;
    j["activityLocked"] = v.activityLocked;
    j["partyId"] = v.partyId;
    j["eligibilityHash"] = v.eligibilityHash;
    j["gameMode"] = v.gameMode;
    j["partyType"] = v.partyType;
    j["activityResumeUtcMillis"] = v.activityResumeUtcMillis;
  }
  static void from_json(const json& j, LolLobbyPartyDto& v) { 
    v.players = j.at("players").get<std::vector<LolLobbyPartyMemberDto>>(); 
    v.chat = j.at("chat").get<LolLobbyPartyChatDto>(); 
    v.eligibilityRestrictions = j.at("eligibilityRestrictions").get<std::optional<std::vector<LolLobbyGatekeeperRestrictionDto>>>(); 
    v.version = j.at("version").get<uint64_t>(); 
    v.activityStartedUtcMillis = j.at("activityStartedUtcMillis").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.activeRestrictions = j.at("activeRestrictions").get<LolLobbyQueueRestrictionDto>(); 
    v.maxPartySize = j.at("maxPartySize").get<int32_t>(); 
    v.activityLocked = j.at("activityLocked").get<bool>(); 
    v.partyId = j.at("partyId").get<std::string>(); 
    v.eligibilityHash = j.at("eligibilityHash").get<int64_t>(); 
    v.gameMode = j.at("gameMode").get<LolLobbyGameModeDto>(); 
    v.partyType = j.at("partyType").get<std::string>(); 
    v.activityResumeUtcMillis = j.at("activityResumeUtcMillis").get<uint64_t>(); 
  } 
  struct LolLobbyPartyInviteDto { /**/ 
    std::string partyId;/**/
    LolLobbyGameModeDto gameMode;/**/
    std::string invitedByPuuid;/**/
    int32_t partyVersion;/**/
    std::string state;/**/
  };
  static void to_json(json& j, const LolLobbyPartyInviteDto& v) { 
    j["partyId"] = v.partyId;
    j["gameMode"] = v.gameMode;
    j["invitedByPuuid"] = v.invitedByPuuid;
    j["partyVersion"] = v.partyVersion;
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolLobbyPartyInviteDto& v) { 
    v.partyId = j.at("partyId").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<LolLobbyGameModeDto>(); 
    v.invitedByPuuid = j.at("invitedByPuuid").get<std::string>(); 
    v.partyVersion = j.at("partyVersion").get<int32_t>(); 
    v.state = j.at("state").get<std::string>(); 
  } 
  struct LolLobbyPlayerDto { /**/ 
    int64_t eligibilityHash;/**/
    uint64_t version;/**/
    std::string platformId;/**/
    std::optional<std::string> inventoryToken;/**/
    int64_t serverUtcMillis;/**/
    std::optional<std::string> leaguesToken;/**/
    uint64_t createdAt;/**/
    uint64_t summonerId;/**/
    std::optional<LolLobbyPartyDto> currentParty;/**/
    uint64_t accountId;/**/
    std::optional<std::string> summonerToken;/**/
    std::optional<std::string> accountToken;/**/
    std::optional<std::vector<LolLobbyPartyMemberDto>> parties;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolLobbyPlayerDto& v) { 
    j["eligibilityHash"] = v.eligibilityHash;
    j["version"] = v.version;
    j["platformId"] = v.platformId;
    j["inventoryToken"] = v.inventoryToken;
    j["serverUtcMillis"] = v.serverUtcMillis;
    j["leaguesToken"] = v.leaguesToken;
    j["createdAt"] = v.createdAt;
    j["summonerId"] = v.summonerId;
    j["currentParty"] = v.currentParty;
    j["accountId"] = v.accountId;
    j["summonerToken"] = v.summonerToken;
    j["accountToken"] = v.accountToken;
    j["parties"] = v.parties;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolLobbyPlayerDto& v) { 
    v.eligibilityHash = j.at("eligibilityHash").get<int64_t>(); 
    v.version = j.at("version").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.inventoryToken = j.at("inventoryToken").get<std::optional<std::string>>(); 
    v.serverUtcMillis = j.at("serverUtcMillis").get<int64_t>(); 
    v.leaguesToken = j.at("leaguesToken").get<std::optional<std::string>>(); 
    v.createdAt = j.at("createdAt").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.currentParty = j.at("currentParty").get<std::optional<LolLobbyPartyDto>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerToken = j.at("summonerToken").get<std::optional<std::string>>(); 
    v.accountToken = j.at("accountToken").get<std::optional<std::string>>(); 
    v.parties = j.at("parties").get<std::optional<std::vector<LolLobbyPartyMemberDto>>>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolLobbyPartyNotificationEnvelopeDto { /**/ 
    std::optional<LolLobbyPlayerDto> player;/**/
    std::optional<LolLobbyQueueRestrictionDto> queueRestriction;/**/
  };
  static void to_json(json& j, const LolLobbyPartyNotificationEnvelopeDto& v) { 
    j["player"] = v.player;
    j["queueRestriction"] = v.queueRestriction;
  }
  static void from_json(const json& j, LolLobbyPartyNotificationEnvelopeDto& v) { 
    v.player = j.at("player").get<std::optional<LolLobbyPlayerDto>>(); 
    v.queueRestriction = j.at("queueRestriction").get<std::optional<LolLobbyQueueRestrictionDto>>(); 
  } 
  struct LolLobbyPlayerCollectionDto { /**/ 
    std::vector<LolLobbyPlayerDto> players;/**/
  };
  static void to_json(json& j, const LolLobbyPlayerCollectionDto& v) { 
    j["players"] = v.players;
  }
  static void from_json(const json& j, LolLobbyPlayerCollectionDto& v) { 
    v.players = j.at("players").get<std::vector<LolLobbyPlayerDto>>(); 
  } 
  struct LolLobbyPlayerStatus { /**/ 
    std::optional<LolLobbyLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolLobbyLobbyStatus> lastQueuedLobbyStatus;/**/
    bool canInviteOthersAtEog;/**/
  };
  static void to_json(json& j, const LolLobbyPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
    j["canInviteOthersAtEog"] = v.canInviteOthersAtEog;
  }
  static void from_json(const json& j, LolLobbyPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolLobbyLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolLobbyLobbyStatus>>(); 
    v.canInviteOthersAtEog = j.at("canInviteOthersAtEog").get<bool>(); 
  } 
  enum class LolLobbyPlayerUpdateType { /**/ 
    Direct_e = 1, /**/ 
    None_e = 0, /**/ 
    RMS_e = 3, /**/ 
    ServiceProxy_e = 2, /**/ 
  };
  static void to_json(json& j, const LolLobbyPlayerUpdateType& v) {
    switch(v) { 
    case LolLobbyPlayerUpdateType::Direct_e:
      j = "Direct";
    break;
    case LolLobbyPlayerUpdateType::None_e:
      j = "None";
    break;
    case LolLobbyPlayerUpdateType::RMS_e:
      j = "RMS";
    break;
    case LolLobbyPlayerUpdateType::ServiceProxy_e:
      j = "ServiceProxy";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyPlayerUpdateType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Direct") {
      v = LolLobbyPlayerUpdateType::Direct_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyPlayerUpdateType::None_e;
      return;
    } 
    if(s == "RMS") {
      v = LolLobbyPlayerUpdateType::RMS_e;
      return;
    } 
    if(s == "ServiceProxy") {
      v = LolLobbyPlayerUpdateType::ServiceProxy_e;
      return;
    } 
  } 
  struct LolLobbyPremadeMemberDto { /**/ 
    std::string partyId;/**/
    uint64_t summonerId;/**/
    LolLobbyPartyMemberRoleEnum role;/**/
    std::string puuid;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolLobbyPremadeMemberDto& v) { 
    j["partyId"] = v.partyId;
    j["summonerId"] = v.summonerId;
    j["role"] = v.role;
    j["puuid"] = v.puuid;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolLobbyPremadeMemberDto& v) { 
    v.partyId = j.at("partyId").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.role = j.at("role").get<LolLobbyPartyMemberRoleEnum>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolLobbyPremadePartyDto { /**/ 
    std::map<std::string, LolLobbyPremadeMemberDto> players;/**/
    std::string partyId;/**/
  };
  static void to_json(json& j, const LolLobbyPremadePartyDto& v) { 
    j["players"] = v.players;
    j["partyId"] = v.partyId;
  }
  static void from_json(const json& j, LolLobbyPremadePartyDto& v) { 
    v.players = j.at("players").get<std::map<std::string, LolLobbyPremadeMemberDto>>(); 
    v.partyId = j.at("partyId").get<std::string>(); 
  } 
  struct LolLobbyQueueReward { /**/ 
    bool isIpEnabled;/**/
    std::vector<int32_t> partySizeIpRewards;/**/
    bool isXpEnabled;/**/
    bool isChampionPointsEnabled;/**/
  };
  static void to_json(json& j, const LolLobbyQueueReward& v) { 
    j["isIpEnabled"] = v.isIpEnabled;
    j["partySizeIpRewards"] = v.partySizeIpRewards;
    j["isXpEnabled"] = v.isXpEnabled;
    j["isChampionPointsEnabled"] = v.isChampionPointsEnabled;
  }
  static void from_json(const json& j, LolLobbyQueueReward& v) { 
    v.isIpEnabled = j.at("isIpEnabled").get<bool>(); 
    v.partySizeIpRewards = j.at("partySizeIpRewards").get<std::vector<int32_t>>(); 
    v.isXpEnabled = j.at("isXpEnabled").get<bool>(); 
    v.isChampionPointsEnabled = j.at("isChampionPointsEnabled").get<bool>(); 
  } 
  enum class LolLobbyQueueGameCategory { /**/ 
    Custom_e = 1, /**/ 
    None_e = 0, /**/ 
    PvP_e = 2, /**/ 
    VersusAi_e = 3, /**/ 
  };
  static void to_json(json& j, const LolLobbyQueueGameCategory& v) {
    switch(v) { 
    case LolLobbyQueueGameCategory::Custom_e:
      j = "Custom";
    break;
    case LolLobbyQueueGameCategory::None_e:
      j = "None";
    break;
    case LolLobbyQueueGameCategory::PvP_e:
      j = "PvP";
    break;
    case LolLobbyQueueGameCategory::VersusAi_e:
      j = "VersusAi";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyQueueGameCategory& v) {
    auto s = j.get<std::string>(); 
    if(s == "Custom") {
      v = LolLobbyQueueGameCategory::Custom_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyQueueGameCategory::None_e;
      return;
    } 
    if(s == "PvP") {
      v = LolLobbyQueueGameCategory::PvP_e;
      return;
    } 
    if(s == "VersusAi") {
      v = LolLobbyQueueGameCategory::VersusAi_e;
      return;
    } 
  } 
  struct LolLobbyQueue { /**/ 
    int32_t maximumParticipantListSize;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
    std::string shortName;/**/
    uint32_t minLevel;/**/
    int32_t id;/**/
    std::string name;/**/
    bool areFreeChampionsAllowed;/**/
    int32_t numPlayersPerTeam;/**/
    int32_t minimumParticipantListSize;/**/
    LolLobbyQueueReward queueRewards;/**/
    bool isTeamOnly;/**/
    int32_t mapId;/**/
    bool isRanked;/**/
    std::string gameMutator;/**/
    bool showPositionSelector;/**/
    std::string detailedDescription;/**/
    bool isTeamBuilderManaged;/**/
    std::string description;/**/
    bool spectatorEnabled;/**/
    uint32_t championsRequiredToPlay;/**/
    LolLobbyQueueGameCategory category;/**/
    LolLobbyQueueAvailability queueAvailability;/**/
    std::string assetMutator;/**/
    uint32_t maxSummonerLevelForFirstWinOfTheDay;/**/
    std::string type;/**/
    std::string gameMode;/**/
    LolLobbyQueueGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolLobbyQueue& v) { 
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
    j["shortName"] = v.shortName;
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
    j["name"] = v.name;
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["minimumParticipantListSize"] = v.minimumParticipantListSize;
    j["queueRewards"] = v.queueRewards;
    j["isTeamOnly"] = v.isTeamOnly;
    j["mapId"] = v.mapId;
    j["isRanked"] = v.isRanked;
    j["gameMutator"] = v.gameMutator;
    j["showPositionSelector"] = v.showPositionSelector;
    j["detailedDescription"] = v.detailedDescription;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["description"] = v.description;
    j["spectatorEnabled"] = v.spectatorEnabled;
    j["championsRequiredToPlay"] = v.championsRequiredToPlay;
    j["category"] = v.category;
    j["queueAvailability"] = v.queueAvailability;
    j["assetMutator"] = v.assetMutator;
    j["maxSummonerLevelForFirstWinOfTheDay"] = v.maxSummonerLevelForFirstWinOfTheDay;
    j["type"] = v.type;
    j["gameMode"] = v.gameMode;
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolLobbyQueue& v) { 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.minimumParticipantListSize = j.at("minimumParticipantListSize").get<int32_t>(); 
    v.queueRewards = j.at("queueRewards").get<LolLobbyQueueReward>(); 
    v.isTeamOnly = j.at("isTeamOnly").get<bool>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.isRanked = j.at("isRanked").get<bool>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.detailedDescription = j.at("detailedDescription").get<std::string>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.spectatorEnabled = j.at("spectatorEnabled").get<bool>(); 
    v.championsRequiredToPlay = j.at("championsRequiredToPlay").get<uint32_t>(); 
    v.category = j.at("category").get<LolLobbyQueueGameCategory>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolLobbyQueueAvailability>(); 
    v.assetMutator = j.at("assetMutator").get<std::string>(); 
    v.maxSummonerLevelForFirstWinOfTheDay = j.at("maxSummonerLevelForFirstWinOfTheDay").get<uint32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolLobbyQueueGameTypeConfig>(); 
  } 
  struct LolLobbyQueueCustomGame { /**/ 
    LolLobbyQueueAvailability queueAvailability;/**/
  };
  static void to_json(json& j, const LolLobbyQueueCustomGame& v) { 
    j["queueAvailability"] = v.queueAvailability;
  }
  static void from_json(const json& j, LolLobbyQueueCustomGame& v) { 
    v.queueAvailability = j.at("queueAvailability").get<LolLobbyQueueAvailability>(); 
  } 
  struct LolLobbyReadyDto { /**/ 
    bool ready;/**/
  };
  static void to_json(json& j, const LolLobbyReadyDto& v) { 
    j["ready"] = v.ready;
  }
  static void from_json(const json& j, LolLobbyReadyDto& v) { 
    v.ready = j.at("ready").get<bool>(); 
  } 
  struct LolLobbyReceivedInvitationGameConfigDto { /**/ 
    int32_t queueId;/**/
    std::string gameMutator;/**/
    int32_t mapId;/**/
    std::string inviteGameType;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolLobbyReceivedInvitationGameConfigDto& v) { 
    j["queueId"] = v.queueId;
    j["gameMutator"] = v.gameMutator;
    j["mapId"] = v.mapId;
    j["inviteGameType"] = v.inviteGameType;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolLobbyReceivedInvitationGameConfigDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.mapId = j.at("mapId").get<int32_t>(); 
    v.inviteGameType = j.at("inviteGameType").get<std::string>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolLobbyReceivedInvitationDto { /**/ 
    std::string timestamp;/**/
    LolLobbyLobbyInvitationState state;/**/
    std::string invitationId;/**/
    LolLobbyReceivedInvitationGameConfigDto gameConfig;/**/
    bool canAcceptInvitation;/**/
    std::vector<LolLobbyEligibilityRestriction> restrictions;/**/
    std::string fromSummonerName;/**/
    uint64_t fromSummonerId;/**/
  };
  static void to_json(json& j, const LolLobbyReceivedInvitationDto& v) { 
    j["timestamp"] = v.timestamp;
    j["state"] = v.state;
    j["invitationId"] = v.invitationId;
    j["gameConfig"] = v.gameConfig;
    j["canAcceptInvitation"] = v.canAcceptInvitation;
    j["restrictions"] = v.restrictions;
    j["fromSummonerName"] = v.fromSummonerName;
    j["fromSummonerId"] = v.fromSummonerId;
  }
  static void from_json(const json& j, LolLobbyReceivedInvitationDto& v) { 
    v.timestamp = j.at("timestamp").get<std::string>(); 
    v.state = j.at("state").get<LolLobbyLobbyInvitationState>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.gameConfig = j.at("gameConfig").get<LolLobbyReceivedInvitationGameConfigDto>(); 
    v.canAcceptInvitation = j.at("canAcceptInvitation").get<bool>(); 
    v.restrictions = j.at("restrictions").get<std::vector<LolLobbyEligibilityRestriction>>(); 
    v.fromSummonerName = j.at("fromSummonerName").get<std::string>(); 
    v.fromSummonerId = j.at("fromSummonerId").get<uint64_t>(); 
  } 
  struct LolLobbyRiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const LolLobbyRiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, LolLobbyRiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct LolLobbyServiceProxyPayload { /**/ 
    std::string method;/**/
    std::string url;/**/
    std::string body;/**/
  };
  static void to_json(json& j, const LolLobbyServiceProxyPayload& v) { 
    j["method"] = v.method;
    j["url"] = v.url;
    j["body"] = v.body;
  }
  static void from_json(const json& j, LolLobbyServiceProxyPayload& v) { 
    v.method = j.at("method").get<std::string>(); 
    v.url = j.at("url").get<std::string>(); 
    v.body = j.at("body").get<std::string>(); 
  } 
  struct LolLobbySummoner { /**/ 
    uint64_t summonerId;/**/
    std::string displayName;/**/
    int32_t profileIconId;/**/
    std::string puuid;/**/
    uint32_t summonerLevel;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLobbySummoner& v) { 
    j["summonerId"] = v.summonerId;
    j["displayName"] = v.displayName;
    j["profileIconId"] = v.profileIconId;
    j["puuid"] = v.puuid;
    j["summonerLevel"] = v.summonerLevel;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLobbySummoner& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolLobbyTeamBuilderActionV1 { /**/ 
    int64_t duration;/**/
    std::string type;/**/
    int32_t actionId;/**/
    bool completed;/**/
    int32_t actorCellId;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderActionV1& v) { 
    j["duration"] = v.duration;
    j["type"] = v.type;
    j["actionId"] = v.actionId;
    j["completed"] = v.completed;
    j["actorCellId"] = v.actorCellId;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderActionV1& v) { 
    v.duration = j.at("duration").get<int64_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.actionId = j.at("actionId").get<int32_t>(); 
    v.completed = j.at("completed").get<bool>(); 
    v.actorCellId = j.at("actorCellId").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderTbdInventory { /**/ 
    std::vector<int32_t> initialSpellIds;/**/
    std::vector<int32_t> spellIds;/**/
    std::vector<int32_t> skinIds;/**/
    std::vector<int32_t> disabledChampionIds;/**/
    std::map<std::string, int32_t> lastSelectedSkinIdByChampionId;/**/
    std::vector<int32_t> allChampionIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbdInventory& v) { 
    j["initialSpellIds"] = v.initialSpellIds;
    j["spellIds"] = v.spellIds;
    j["skinIds"] = v.skinIds;
    j["disabledChampionIds"] = v.disabledChampionIds;
    j["lastSelectedSkinIdByChampionId"] = v.lastSelectedSkinIdByChampionId;
    j["allChampionIds"] = v.allChampionIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbdInventory& v) { 
    v.initialSpellIds = j.at("initialSpellIds").get<std::vector<int32_t>>(); 
    v.spellIds = j.at("spellIds").get<std::vector<int32_t>>(); 
    v.skinIds = j.at("skinIds").get<std::vector<int32_t>>(); 
    v.disabledChampionIds = j.at("disabledChampionIds").get<std::vector<int32_t>>(); 
    v.lastSelectedSkinIdByChampionId = j.at("lastSelectedSkinIdByChampionId").get<std::map<std::string, int32_t>>(); 
    v.allChampionIds = j.at("allChampionIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderAfkCheckStateV1 { /**/ 
    uint32_t maxAfkMillis;/**/
    bool afkReady;/**/
    int32_t remainingAfkMillis;/**/
    LolLobbyTeamBuilderTbdInventory inventoryDraft;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderAfkCheckStateV1& v) { 
    j["maxAfkMillis"] = v.maxAfkMillis;
    j["afkReady"] = v.afkReady;
    j["remainingAfkMillis"] = v.remainingAfkMillis;
    j["inventoryDraft"] = v.inventoryDraft;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderAfkCheckStateV1& v) { 
    v.maxAfkMillis = j.at("maxAfkMillis").get<uint32_t>(); 
    v.afkReady = j.at("afkReady").get<bool>(); 
    v.remainingAfkMillis = j.at("remainingAfkMillis").get<int32_t>(); 
    v.inventoryDraft = j.at("inventoryDraft").get<LolLobbyTeamBuilderTbdInventory>(); 
  } 
  struct LolLobbyTeamBuilderBackwardsTransitionInfoV1 { /**/ 
    std::vector<uint64_t> initiatorSummonerIds;/**/
    std::string backwardsTransitionReason;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderBackwardsTransitionInfoV1& v) { 
    j["initiatorSummonerIds"] = v.initiatorSummonerIds;
    j["backwardsTransitionReason"] = v.backwardsTransitionReason;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderBackwardsTransitionInfoV1& v) { 
    v.initiatorSummonerIds = j.at("initiatorSummonerIds").get<std::vector<uint64_t>>(); 
    v.backwardsTransitionReason = j.at("backwardsTransitionReason").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderCellV1 { /**/ 
    int32_t spell2Id;/**/
    int32_t skinId;/**/
    uint64_t summonerId;/**/
    int32_t championPickIntent;/**/
    std::string assignedPosition;/**/
    int32_t teamId;/**/
    std::string summonerName;/**/
    int32_t cellId;/**/
    int32_t spell1Id;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderCellV1& v) { 
    j["spell2Id"] = v.spell2Id;
    j["skinId"] = v.skinId;
    j["summonerId"] = v.summonerId;
    j["championPickIntent"] = v.championPickIntent;
    j["assignedPosition"] = v.assignedPosition;
    j["teamId"] = v.teamId;
    j["summonerName"] = v.summonerName;
    j["cellId"] = v.cellId;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderCellV1& v) { 
    v.spell2Id = j.at("spell2Id").get<int32_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.championPickIntent = j.at("championPickIntent").get<int32_t>(); 
    v.assignedPosition = j.at("assignedPosition").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.cellId = j.at("cellId").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderCellsV1 { /**/ 
    std::vector<LolLobbyTeamBuilderCellV1> alliedTeam;/**/
    std::vector<LolLobbyTeamBuilderCellV1> enemyTeam;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderCellsV1& v) { 
    j["alliedTeam"] = v.alliedTeam;
    j["enemyTeam"] = v.enemyTeam;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderCellsV1& v) { 
    v.alliedTeam = j.at("alliedTeam").get<std::vector<LolLobbyTeamBuilderCellV1>>(); 
    v.enemyTeam = j.at("enemyTeam").get<std::vector<LolLobbyTeamBuilderCellV1>>(); 
  } 
  struct LolLobbyTeamBuilderCeremonyV1 { /**/ 
    int64_t duration;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderCeremonyV1& v) { 
    j["duration"] = v.duration;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderCeremonyV1& v) { 
    v.duration = j.at("duration").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectAction { /**/ 
    std::string type;/**/
    int64_t actorCellId;/**/
    bool completed;/**/
    int64_t id;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectAction& v) { 
    j["type"] = v.type;
    j["actorCellId"] = v.actorCellId;
    j["completed"] = v.completed;
    j["id"] = v.id;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectAction& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.actorCellId = j.at("actorCellId").get<int64_t>(); 
    v.completed = j.at("completed").get<bool>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectBannableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectBannableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectBannableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectChatRoomDetails { /**/ 
    std::optional<std::string> chatRoomPassword;/**/
    std::string chatRoomName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectChatRoomDetails& v) { 
    j["chatRoomPassword"] = v.chatRoomPassword;
    j["chatRoomName"] = v.chatRoomName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectChatRoomDetails& v) { 
    v.chatRoomPassword = j.at("chatRoomPassword").get<std::optional<std::string>>(); 
    v.chatRoomName = j.at("chatRoomName").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectDisabledChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectDisabledChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectDisabledChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectMySelection { /**/ 
    std::optional<int64_t> wardSkinId;/**/
    std::optional<uint64_t> spell1Id;/**/
    std::optional<int32_t> selectedSkinId;/**/
    std::optional<uint64_t> spell2Id;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectMySelection& v) { 
    j["wardSkinId"] = v.wardSkinId;
    j["spell1Id"] = v.spell1Id;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectMySelection& v) { 
    v.wardSkinId = j.at("wardSkinId").get<std::optional<int64_t>>(); 
    v.spell1Id = j.at("spell1Id").get<std::optional<uint64_t>>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<std::optional<int32_t>>(); 
    v.spell2Id = j.at("spell2Id").get<std::optional<uint64_t>>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectPickableChampions { /**/ 
    std::vector<int32_t> championIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectPickableChampions& v) { 
    j["championIds"] = v.championIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectPickableChampions& v) { 
    v.championIds = j.at("championIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectPickableSkins { /**/ 
    std::vector<int32_t> skinIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectPickableSkins& v) { 
    j["skinIds"] = v.skinIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectPickableSkins& v) { 
    v.skinIds = j.at("skinIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectPlayerSelection { /**/ 
    std::string assignedPosition;/**/
    std::string playerType;/**/
    int32_t championPickIntent;/**/
    uint64_t spell1Id;/**/
    int32_t championId;/**/
    int64_t wardSkinId;/**/
    int32_t team;/**/
    uint64_t summonerId;/**/
    int32_t selectedSkinId;/**/
    uint64_t spell2Id;/**/
    int64_t cellId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectPlayerSelection& v) { 
    j["assignedPosition"] = v.assignedPosition;
    j["playerType"] = v.playerType;
    j["championPickIntent"] = v.championPickIntent;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
    j["wardSkinId"] = v.wardSkinId;
    j["team"] = v.team;
    j["summonerId"] = v.summonerId;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
    j["cellId"] = v.cellId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectPlayerSelection& v) { 
    v.assignedPosition = j.at("assignedPosition").get<std::string>(); 
    v.playerType = j.at("playerType").get<std::string>(); 
    v.championPickIntent = j.at("championPickIntent").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.wardSkinId = j.at("wardSkinId").get<int64_t>(); 
    v.team = j.at("team").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<uint64_t>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  enum class LolLobbyTeamBuilderChampSelectTradeState { /**/ 
    AVAILABLE_e = 1, /**/ 
    BUSY_e = 2, /**/ 
    INVALID_e = 3, /**/ 
    RECEIVED_e = 4, /**/ 
    SENT_e = 5, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectTradeState& v) {
    switch(v) { 
    case LolLobbyTeamBuilderChampSelectTradeState::AVAILABLE_e:
      j = "AVAILABLE";
    break;
    case LolLobbyTeamBuilderChampSelectTradeState::BUSY_e:
      j = "BUSY";
    break;
    case LolLobbyTeamBuilderChampSelectTradeState::INVALID_e:
      j = "INVALID";
    break;
    case LolLobbyTeamBuilderChampSelectTradeState::RECEIVED_e:
      j = "RECEIVED";
    break;
    case LolLobbyTeamBuilderChampSelectTradeState::SENT_e:
      j = "SENT";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectTradeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AVAILABLE") {
      v = LolLobbyTeamBuilderChampSelectTradeState::AVAILABLE_e;
      return;
    } 
    if(s == "BUSY") {
      v = LolLobbyTeamBuilderChampSelectTradeState::BUSY_e;
      return;
    } 
    if(s == "INVALID") {
      v = LolLobbyTeamBuilderChampSelectTradeState::INVALID_e;
      return;
    } 
    if(s == "RECEIVED") {
      v = LolLobbyTeamBuilderChampSelectTradeState::RECEIVED_e;
      return;
    } 
    if(s == "SENT") {
      v = LolLobbyTeamBuilderChampSelectTradeState::SENT_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderChampSelectTradeContract { /**/ 
    LolLobbyTeamBuilderChampSelectTradeState state;/**/
    int64_t cellId;/**/
    int64_t id;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectTradeContract& v) { 
    j["state"] = v.state;
    j["cellId"] = v.cellId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectTradeContract& v) { 
    v.state = j.at("state").get<LolLobbyTeamBuilderChampSelectTradeState>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectTimer { /**/ 
    int64_t adjustedTimeLeftInPhase;/**/
    bool isInfinite;/**/
    uint64_t internalNowInEpochMs;/**/
    int64_t timeLeftInPhase;/**/
    int64_t totalTimeInPhase;/**/
    std::string phase;/**/
    int32_t adjustedTimeLeftInPhaseInSec;/**/
    int32_t timeLeftInPhaseInSec;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectTimer& v) { 
    j["adjustedTimeLeftInPhase"] = v.adjustedTimeLeftInPhase;
    j["isInfinite"] = v.isInfinite;
    j["internalNowInEpochMs"] = v.internalNowInEpochMs;
    j["timeLeftInPhase"] = v.timeLeftInPhase;
    j["totalTimeInPhase"] = v.totalTimeInPhase;
    j["phase"] = v.phase;
    j["adjustedTimeLeftInPhaseInSec"] = v.adjustedTimeLeftInPhaseInSec;
    j["timeLeftInPhaseInSec"] = v.timeLeftInPhaseInSec;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectTimer& v) { 
    v.adjustedTimeLeftInPhase = j.at("adjustedTimeLeftInPhase").get<int64_t>(); 
    v.isInfinite = j.at("isInfinite").get<bool>(); 
    v.internalNowInEpochMs = j.at("internalNowInEpochMs").get<uint64_t>(); 
    v.timeLeftInPhase = j.at("timeLeftInPhase").get<int64_t>(); 
    v.totalTimeInPhase = j.at("totalTimeInPhase").get<int64_t>(); 
    v.phase = j.at("phase").get<std::string>(); 
    v.adjustedTimeLeftInPhaseInSec = j.at("adjustedTimeLeftInPhaseInSec").get<int32_t>(); 
    v.timeLeftInPhaseInSec = j.at("timeLeftInPhaseInSec").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderChampSelectSession { /**/ 
    std::vector<LolLobbyTeamBuilderChampSelectTradeContract> trades;/**/
    std::vector<LolLobbyTeamBuilderChampSelectPlayerSelection> theirTeam;/**/
    bool allowSkinSelection;/**/
    std::vector<json> actions;/**/
    int64_t localPlayerCellId;/**/
    LolLobbyTeamBuilderChampSelectTimer timer;/**/
    bool allowBattleBoost;/**/
    LolLobbyTeamBuilderChampSelectChatRoomDetails chatDetails;/**/
    std::vector<LolLobbyTeamBuilderChampSelectPlayerSelection> myTeam;/**/
    uint32_t rerollsRemaining;/**/
    bool allowRerolling;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampSelectSession& v) { 
    j["trades"] = v.trades;
    j["theirTeam"] = v.theirTeam;
    j["allowSkinSelection"] = v.allowSkinSelection;
    j["actions"] = v.actions;
    j["localPlayerCellId"] = v.localPlayerCellId;
    j["timer"] = v.timer;
    j["allowBattleBoost"] = v.allowBattleBoost;
    j["chatDetails"] = v.chatDetails;
    j["myTeam"] = v.myTeam;
    j["rerollsRemaining"] = v.rerollsRemaining;
    j["allowRerolling"] = v.allowRerolling;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampSelectSession& v) { 
    v.trades = j.at("trades").get<std::vector<LolLobbyTeamBuilderChampSelectTradeContract>>(); 
    v.theirTeam = j.at("theirTeam").get<std::vector<LolLobbyTeamBuilderChampSelectPlayerSelection>>(); 
    v.allowSkinSelection = j.at("allowSkinSelection").get<bool>(); 
    v.actions = j.at("actions").get<std::vector<json>>(); 
    v.localPlayerCellId = j.at("localPlayerCellId").get<int64_t>(); 
    v.timer = j.at("timer").get<LolLobbyTeamBuilderChampSelectTimer>(); 
    v.allowBattleBoost = j.at("allowBattleBoost").get<bool>(); 
    v.chatDetails = j.at("chatDetails").get<LolLobbyTeamBuilderChampSelectChatRoomDetails>(); 
    v.myTeam = j.at("myTeam").get<std::vector<LolLobbyTeamBuilderChampSelectPlayerSelection>>(); 
    v.rerollsRemaining = j.at("rerollsRemaining").get<uint32_t>(); 
    v.allowRerolling = j.at("allowRerolling").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderRerollStateV1 { /**/ 
    bool allowRerolling;/**/
    uint32_t rerollsRemaining;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderRerollStateV1& v) { 
    j["allowRerolling"] = v.allowRerolling;
    j["rerollsRemaining"] = v.rerollsRemaining;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderRerollStateV1& v) { 
    v.allowRerolling = j.at("allowRerolling").get<bool>(); 
    v.rerollsRemaining = j.at("rerollsRemaining").get<uint32_t>(); 
  } 
  struct LolLobbyTeamBuilderTradeV1 { /**/ 
    std::string state;/**/
    int32_t cellId;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTradeV1& v) { 
    j["state"] = v.state;
    j["cellId"] = v.cellId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTradeV1& v) { 
    v.state = j.at("state").get<std::string>(); 
    v.cellId = j.at("cellId").get<int32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderTeamBuilderBoostInfo { /**/ 
    bool allowBattleBoost;/**/
    bool battleBoostActivated;/**/
    std::vector<int64_t> unlockedSkinIds;/**/
    int64_t cost;/**/
    int64_t activatorCellId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTeamBuilderBoostInfo& v) { 
    j["allowBattleBoost"] = v.allowBattleBoost;
    j["battleBoostActivated"] = v.battleBoostActivated;
    j["unlockedSkinIds"] = v.unlockedSkinIds;
    j["cost"] = v.cost;
    j["activatorCellId"] = v.activatorCellId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTeamBuilderBoostInfo& v) { 
    v.allowBattleBoost = j.at("allowBattleBoost").get<bool>(); 
    v.battleBoostActivated = j.at("battleBoostActivated").get<bool>(); 
    v.unlockedSkinIds = j.at("unlockedSkinIds").get<std::vector<int64_t>>(); 
    v.cost = j.at("cost").get<int64_t>(); 
    v.activatorCellId = j.at("activatorCellId").get<int64_t>(); 
  } 
  struct LolLobbyTeamBuilderChampionSelectStateV1 { /**/ 
    std::string teamChatRoomId;/**/
    std::string subphase;/**/
    int32_t localPlayerCellId;/**/
    std::map<std::string, json> ceremoniesByActionSetIndex;/**/
    std::string teamId;/**/
    bool allowSkinSelection;/**/
    int32_t currentActionSetIndex;/**/
    std::string pickIntentClearedReason;/**/
    int64_t currentTotalTimeMillis;/**/
    LolLobbyTeamBuilderRerollStateV1 rerollState;/**/
    std::vector<LolLobbyTeamBuilderTradeV1> trades;/**/
    LolLobbyTeamBuilderCellsV1 cells;/**/
    LolLobbyTeamBuilderTeamBuilderBoostInfo battleBoostState;/**/
    std::vector<json> actionSetList;/**/
    int64_t currentTimeRemainingMillis;/**/
    bool allowOptingOutOfBanning;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderChampionSelectStateV1& v) { 
    j["teamChatRoomId"] = v.teamChatRoomId;
    j["subphase"] = v.subphase;
    j["localPlayerCellId"] = v.localPlayerCellId;
    j["ceremoniesByActionSetIndex"] = v.ceremoniesByActionSetIndex;
    j["teamId"] = v.teamId;
    j["allowSkinSelection"] = v.allowSkinSelection;
    j["currentActionSetIndex"] = v.currentActionSetIndex;
    j["pickIntentClearedReason"] = v.pickIntentClearedReason;
    j["currentTotalTimeMillis"] = v.currentTotalTimeMillis;
    j["rerollState"] = v.rerollState;
    j["trades"] = v.trades;
    j["cells"] = v.cells;
    j["battleBoostState"] = v.battleBoostState;
    j["actionSetList"] = v.actionSetList;
    j["currentTimeRemainingMillis"] = v.currentTimeRemainingMillis;
    j["allowOptingOutOfBanning"] = v.allowOptingOutOfBanning;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderChampionSelectStateV1& v) { 
    v.teamChatRoomId = j.at("teamChatRoomId").get<std::string>(); 
    v.subphase = j.at("subphase").get<std::string>(); 
    v.localPlayerCellId = j.at("localPlayerCellId").get<int32_t>(); 
    v.ceremoniesByActionSetIndex = j.at("ceremoniesByActionSetIndex").get<std::map<std::string, json>>(); 
    v.teamId = j.at("teamId").get<std::string>(); 
    v.allowSkinSelection = j.at("allowSkinSelection").get<bool>(); 
    v.currentActionSetIndex = j.at("currentActionSetIndex").get<int32_t>(); 
    v.pickIntentClearedReason = j.at("pickIntentClearedReason").get<std::string>(); 
    v.currentTotalTimeMillis = j.at("currentTotalTimeMillis").get<int64_t>(); 
    v.rerollState = j.at("rerollState").get<LolLobbyTeamBuilderRerollStateV1>(); 
    v.trades = j.at("trades").get<std::vector<LolLobbyTeamBuilderTradeV1>>(); 
    v.cells = j.at("cells").get<LolLobbyTeamBuilderCellsV1>(); 
    v.battleBoostState = j.at("battleBoostState").get<LolLobbyTeamBuilderTeamBuilderBoostInfo>(); 
    v.actionSetList = j.at("actionSetList").get<std::vector<json>>(); 
    v.currentTimeRemainingMillis = j.at("currentTimeRemainingMillis").get<int64_t>(); 
    v.allowOptingOutOfBanning = j.at("allowOptingOutOfBanning").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderCountdownTimer { /**/ 
    int32_t counter;/**/
    int64_t timer;/**/
    std::string phaseName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderCountdownTimer& v) { 
    j["counter"] = v.counter;
    j["timer"] = v.timer;
    j["phaseName"] = v.phaseName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderCountdownTimer& v) { 
    v.counter = j.at("counter").get<int32_t>(); 
    v.timer = j.at("timer").get<int64_t>(); 
    v.phaseName = j.at("phaseName").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderCreatePremadeV1 { /**/ 
    int32_t queueId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderCreatePremadeV1& v) { 
    j["queueId"] = v.queueId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderCreatePremadeV1& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
  } 
  struct LolLobbyTeamBuilderGameflowGameClient { /**/ 
    bool running;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderGameflowGameClient& v) { 
    j["running"] = v.running;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderGameflowGameClient& v) { 
    v.running = j.at("running").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderGameflowSession { /**/ 
    LolLobbyTeamBuilderGameflowGameClient gameClient;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderGameflowSession& v) { 
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderGameflowSession& v) { 
    v.gameClient = j.at("gameClient").get<LolLobbyTeamBuilderGameflowGameClient>(); 
  } 
  struct LolLobbyTeamBuilderGatekeeperRestriction { /**/ 
    int32_t queueId;/**/
    std::string reason;/**/
    uint64_t summonerId;/**/
    std::string payload;/**/
    uint32_t remainingMillis;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderGatekeeperRestriction& v) { 
    j["queueId"] = v.queueId;
    j["reason"] = v.reason;
    j["summonerId"] = v.summonerId;
    j["payload"] = v.payload;
    j["remainingMillis"] = v.remainingMillis;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderGatekeeperRestriction& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.remainingMillis = j.at("remainingMillis").get<uint32_t>(); 
  } 
  struct LolLobbyTeamBuilderGatekeeperRestricted { /**/ 
    std::vector<LolLobbyTeamBuilderGatekeeperRestriction> gatekeeperRestrictions;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderGatekeeperRestricted& v) { 
    j["gatekeeperRestrictions"] = v.gatekeeperRestrictions;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderGatekeeperRestricted& v) { 
    v.gatekeeperRestrictions = j.at("gatekeeperRestrictions").get<std::vector<LolLobbyTeamBuilderGatekeeperRestriction>>(); 
  } 
  struct LolLobbyTeamBuilderLeaverBusterAbandoned { /**/ 
    std::string abandonerName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLeaverBusterAbandoned& v) { 
    j["abandonerName"] = v.abandonerName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLeaverBusterAbandoned& v) { 
    v.abandonerName = j.at("abandonerName").get<std::string>(); 
  } 
  enum class LolLobbyTeamBuilderLobbyRemovedFromGameReason { /**/ 
    Disbanded_e = 2, /**/ 
    GameStartError_e = 7, /**/ 
    Kicked_e = 1, /**/ 
    Left_e = 3, /**/ 
    None_e = 0, /**/ 
    Other_e = 5, /**/ 
    ServiceError_e = 4, /**/ 
    ServiceShutdown_e = 8, /**/ 
    Timeout_e = 6, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyRemovedFromGameReason& v) {
    switch(v) { 
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::Disbanded_e:
      j = "Disbanded";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::GameStartError_e:
      j = "GameStartError";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::Kicked_e:
      j = "Kicked";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::Left_e:
      j = "Left";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::None_e:
      j = "None";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::Other_e:
      j = "Other";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::ServiceError_e:
      j = "ServiceError";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::ServiceShutdown_e:
      j = "ServiceShutdown";
    break;
    case LolLobbyTeamBuilderLobbyRemovedFromGameReason::Timeout_e:
      j = "Timeout";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyRemovedFromGameReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "Disbanded") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::Disbanded_e;
      return;
    } 
    if(s == "GameStartError") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::GameStartError_e;
      return;
    } 
    if(s == "Kicked") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::Kicked_e;
      return;
    } 
    if(s == "Left") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::Left_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::None_e;
      return;
    } 
    if(s == "Other") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::Other_e;
      return;
    } 
    if(s == "ServiceError") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::ServiceError_e;
      return;
    } 
    if(s == "ServiceShutdown") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::ServiceShutdown_e;
      return;
    } 
    if(s == "Timeout") {
      v = LolLobbyTeamBuilderLobbyRemovedFromGameReason::Timeout_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderLobbyPositionPreferences { /**/ 
    std::string firstPreference;/**/
    std::string secondPreference;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyPositionPreferences& v) { 
    j["firstPreference"] = v.firstPreference;
    j["secondPreference"] = v.secondPreference;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyPositionPreferences& v) { 
    v.firstPreference = j.at("firstPreference").get<std::string>(); 
    v.secondPreference = j.at("secondPreference").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderLobbyMember { /**/ 
    LolLobbyTeamBuilderLobbyPositionPreferences positionPreferences;/**/
    std::optional<std::string> excludedPositionPreference;/**/
    bool autoFillEligible;/**/
    bool autoFillProtectedForPromos;/**/
    uint64_t id;/**/
    bool canInviteOthers;/**/
    bool autoFillProtectedForSoloing;/**/
    bool isOwner;/**/
    bool autoFillProtectedForStreaking;/**/
    bool showPositionExcluder;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyMember& v) { 
    j["positionPreferences"] = v.positionPreferences;
    j["excludedPositionPreference"] = v.excludedPositionPreference;
    j["autoFillEligible"] = v.autoFillEligible;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["id"] = v.id;
    j["canInviteOthers"] = v.canInviteOthers;
    j["autoFillProtectedForSoloing"] = v.autoFillProtectedForSoloing;
    j["isOwner"] = v.isOwner;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["showPositionExcluder"] = v.showPositionExcluder;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyMember& v) { 
    v.positionPreferences = j.at("positionPreferences").get<LolLobbyTeamBuilderLobbyPositionPreferences>(); 
    v.excludedPositionPreference = j.at("excludedPositionPreference").get<std::optional<std::string>>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.canInviteOthers = j.at("canInviteOthers").get<bool>(); 
    v.autoFillProtectedForSoloing = j.at("autoFillProtectedForSoloing").get<bool>(); 
    v.isOwner = j.at("isOwner").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderLobbyInvitation { /**/ 
    json invitationMetaData;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyInvitation& v) { 
    j["invitationMetaData"] = v.invitationMetaData;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyInvitation& v) { 
    v.invitationMetaData = j.at("invitationMetaData").get<json>(); 
  } 
  struct LolLobbyTeamBuilderLobby { /**/ 
    std::string chatRoomId;/**/
    bool showPositionSelector;/**/
    bool autoFillProtectedForPromos;/**/
    bool premadeSizeAllowed;/**/
    bool isTeamBuilderManaged;/**/
    bool wasKicked;/**/
    std::vector<std::string> specifiablePositionPreferences;/**/
    bool canStartMatchmaking;/**/
    bool autoFillProtectedForStreaking;/**/
    int32_t queueId;/**/
    bool autoFillEligible;/**/
    std::string invitationId;/**/
    LolLobbyTeamBuilderLobbyRemovedFromGameReason removalReason;/**/
    LolLobbyTeamBuilderLobbyMember localMember;/**/
    std::vector<LolLobbyTeamBuilderLobbyInvitation> invitations;/**/
    std::string chatRoomKey;/**/
    std::vector<LolLobbyTeamBuilderLobbyMember> members;/**/
    bool requiredPositionCoverageMet;/**/
    bool showPositionExcluder;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobby& v) { 
    j["chatRoomId"] = v.chatRoomId;
    j["showPositionSelector"] = v.showPositionSelector;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["premadeSizeAllowed"] = v.premadeSizeAllowed;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
    j["wasKicked"] = v.wasKicked;
    j["specifiablePositionPreferences"] = v.specifiablePositionPreferences;
    j["canStartMatchmaking"] = v.canStartMatchmaking;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["queueId"] = v.queueId;
    j["autoFillEligible"] = v.autoFillEligible;
    j["invitationId"] = v.invitationId;
    j["removalReason"] = v.removalReason;
    j["localMember"] = v.localMember;
    j["invitations"] = v.invitations;
    j["chatRoomKey"] = v.chatRoomKey;
    j["members"] = v.members;
    j["requiredPositionCoverageMet"] = v.requiredPositionCoverageMet;
    j["showPositionExcluder"] = v.showPositionExcluder;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobby& v) { 
    v.chatRoomId = j.at("chatRoomId").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.premadeSizeAllowed = j.at("premadeSizeAllowed").get<bool>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
    v.wasKicked = j.at("wasKicked").get<bool>(); 
    v.specifiablePositionPreferences = j.at("specifiablePositionPreferences").get<std::vector<std::string>>(); 
    v.canStartMatchmaking = j.at("canStartMatchmaking").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.invitationId = j.at("invitationId").get<std::string>(); 
    v.removalReason = j.at("removalReason").get<LolLobbyTeamBuilderLobbyRemovedFromGameReason>(); 
    v.localMember = j.at("localMember").get<LolLobbyTeamBuilderLobbyMember>(); 
    v.invitations = j.at("invitations").get<std::vector<LolLobbyTeamBuilderLobbyInvitation>>(); 
    v.chatRoomKey = j.at("chatRoomKey").get<std::string>(); 
    v.members = j.at("members").get<std::vector<LolLobbyTeamBuilderLobbyMember>>(); 
    v.requiredPositionCoverageMet = j.at("requiredPositionCoverageMet").get<bool>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderLobbyCountdownTimer { /**/ 
    int32_t counter;/**/
    int64_t timer;/**/
    std::string phaseName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyCountdownTimer& v) { 
    j["counter"] = v.counter;
    j["timer"] = v.timer;
    j["phaseName"] = v.phaseName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyCountdownTimer& v) { 
    v.counter = j.at("counter").get<int32_t>(); 
    v.timer = j.at("timer").get<int64_t>(); 
    v.phaseName = j.at("phaseName").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderLobbyPositionPreferencesV2 { /**/ 
    std::string excludedPreference;/**/
    std::string firstPreference;/**/
    std::string secondPreference;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLobbyPositionPreferencesV2& v) { 
    j["excludedPreference"] = v.excludedPreference;
    j["firstPreference"] = v.firstPreference;
    j["secondPreference"] = v.secondPreference;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLobbyPositionPreferencesV2& v) { 
    v.excludedPreference = j.at("excludedPreference").get<std::string>(); 
    v.firstPreference = j.at("firstPreference").get<std::string>(); 
    v.secondPreference = j.at("secondPreference").get<std::string>(); 
  } 
  enum class LolLobbyTeamBuilderLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLoginSessionState& v) {
    switch(v) { 
    case LolLobbyTeamBuilderLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolLobbyTeamBuilderLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLobbyTeamBuilderLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLobbyTeamBuilderLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLobbyTeamBuilderLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLobbyTeamBuilderLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLobbyTeamBuilderLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLobbyTeamBuilderLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderLoginSession { /**/ 
    bool connected;/**/
    LolLobbyTeamBuilderLoginSessionState state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolLobbyTeamBuilderLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolLobbyTeamBuilderMatchmakingDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingDodgeState& v) {
    switch(v) { 
    case LolLobbyTeamBuilderMatchmakingDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolLobbyTeamBuilderMatchmakingDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolLobbyTeamBuilderMatchmakingDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolLobbyTeamBuilderMatchmakingDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolLobbyTeamBuilderMatchmakingDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolLobbyTeamBuilderMatchmakingDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolLobbyTeamBuilderMatchmakingDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolLobbyTeamBuilderMatchmakingDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderMatchmakingDodgeData { /**/ 
    LolLobbyTeamBuilderMatchmakingDodgeState state;/**/
    uint64_t dodgerId;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingDodgeData& v) { 
    j["state"] = v.state;
    j["dodgerId"] = v.dodgerId;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingDodgeData& v) { 
    v.state = j.at("state").get<LolLobbyTeamBuilderMatchmakingDodgeState>(); 
    v.dodgerId = j.at("dodgerId").get<uint64_t>(); 
  } 
  enum class LolLobbyTeamBuilderMatchmakingDodgeWarning { /**/ 
    None_e = 0, /**/ 
    Penalty_e = 2, /**/ 
    Warning_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingDodgeWarning& v) {
    switch(v) { 
    case LolLobbyTeamBuilderMatchmakingDodgeWarning::None_e:
      j = "None";
    break;
    case LolLobbyTeamBuilderMatchmakingDodgeWarning::Penalty_e:
      j = "Penalty";
    break;
    case LolLobbyTeamBuilderMatchmakingDodgeWarning::Warning_e:
      j = "Warning";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingDodgeWarning& v) {
    auto s = j.get<std::string>(); 
    if(s == "None") {
      v = LolLobbyTeamBuilderMatchmakingDodgeWarning::None_e;
      return;
    } 
    if(s == "Penalty") {
      v = LolLobbyTeamBuilderMatchmakingDodgeWarning::Penalty_e;
      return;
    } 
    if(s == "Warning") {
      v = LolLobbyTeamBuilderMatchmakingDodgeWarning::Warning_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderMatchmakingLowPriorityData { /**/ 
    double penaltyTimeRemaining;/**/
    double penaltyTime;/**/
    std::vector<uint64_t> penalizedSummonerIds;/**/
    std::string bustedLeaverAccessToken;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingLowPriorityData& v) { 
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["penaltyTime"] = v.penaltyTime;
    j["penalizedSummonerIds"] = v.penalizedSummonerIds;
    j["bustedLeaverAccessToken"] = v.bustedLeaverAccessToken;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingLowPriorityData& v) { 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.penaltyTime = j.at("penaltyTime").get<double>(); 
    v.penalizedSummonerIds = j.at("penalizedSummonerIds").get<std::vector<uint64_t>>(); 
    v.bustedLeaverAccessToken = j.at("bustedLeaverAccessToken").get<std::string>(); 
  } 
  enum class LolLobbyTeamBuilderMatchmakingReadyCheckState { /**/ 
    Error_e = 5, /**/ 
    EveryoneReady_e = 2, /**/ 
    InProgress_e = 1, /**/ 
    Invalid_e = 0, /**/ 
    PartyNotReady_e = 4, /**/ 
    StrangerNotReady_e = 3, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingReadyCheckState& v) {
    switch(v) { 
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::Error_e:
      j = "Error";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::EveryoneReady_e:
      j = "EveryoneReady";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::InProgress_e:
      j = "InProgress";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::Invalid_e:
      j = "Invalid";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::PartyNotReady_e:
      j = "PartyNotReady";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckState::StrangerNotReady_e:
      j = "StrangerNotReady";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingReadyCheckState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Error") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::Error_e;
      return;
    } 
    if(s == "EveryoneReady") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::EveryoneReady_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::InProgress_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::Invalid_e;
      return;
    } 
    if(s == "PartyNotReady") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::PartyNotReady_e;
      return;
    } 
    if(s == "StrangerNotReady") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckState::StrangerNotReady_e;
      return;
    } 
  } 
  enum class LolLobbyTeamBuilderMatchmakingReadyCheckResponse { /**/ 
    Accepted_e = 49, /**/ 
    Declined_e = 50, /**/ 
    None_e = 48, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingReadyCheckResponse& v) {
    switch(v) { 
    case LolLobbyTeamBuilderMatchmakingReadyCheckResponse::Accepted_e:
      j = "Accepted";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckResponse::Declined_e:
      j = "Declined";
    break;
    case LolLobbyTeamBuilderMatchmakingReadyCheckResponse::None_e:
      j = "None";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingReadyCheckResponse& v) {
    auto s = j.get<std::string>(); 
    if(s == "Accepted") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckResponse::Accepted_e;
      return;
    } 
    if(s == "Declined") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckResponse::Declined_e;
      return;
    } 
    if(s == "None") {
      v = LolLobbyTeamBuilderMatchmakingReadyCheckResponse::None_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderMatchmakingReadyCheckResource { /**/ 
    LolLobbyTeamBuilderMatchmakingReadyCheckState state;/**/
    LolLobbyTeamBuilderMatchmakingReadyCheckResponse playerResponse;/**/
    std::vector<uint64_t> declinerIds;/**/
    LolLobbyTeamBuilderMatchmakingDodgeWarning dodgeWarning;/**/
    float timer;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingReadyCheckResource& v) { 
    j["state"] = v.state;
    j["playerResponse"] = v.playerResponse;
    j["declinerIds"] = v.declinerIds;
    j["dodgeWarning"] = v.dodgeWarning;
    j["timer"] = v.timer;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingReadyCheckResource& v) { 
    v.state = j.at("state").get<LolLobbyTeamBuilderMatchmakingReadyCheckState>(); 
    v.playerResponse = j.at("playerResponse").get<LolLobbyTeamBuilderMatchmakingReadyCheckResponse>(); 
    v.declinerIds = j.at("declinerIds").get<std::vector<uint64_t>>(); 
    v.dodgeWarning = j.at("dodgeWarning").get<LolLobbyTeamBuilderMatchmakingDodgeWarning>(); 
    v.timer = j.at("timer").get<float>(); 
  } 
  struct LolLobbyTeamBuilderMatchmakingSearchErrorResource { /**/ 
    std::string errorType;/**/
    double penaltyTimeRemaining;/**/
    std::string message;/**/
    uint64_t penalizedSummonerId;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingSearchErrorResource& v) { 
    j["errorType"] = v.errorType;
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["message"] = v.message;
    j["penalizedSummonerId"] = v.penalizedSummonerId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingSearchErrorResource& v) { 
    v.errorType = j.at("errorType").get<std::string>(); 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.message = j.at("message").get<std::string>(); 
    v.penalizedSummonerId = j.at("penalizedSummonerId").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolLobbyTeamBuilderMatchmakingSearchState { /**/ 
    AbandonedLowPriorityQueue_e = 1, /**/ 
    Canceled_e = 2, /**/ 
    Error_e = 5, /**/ 
    Found_e = 4, /**/ 
    Invalid_e = 0, /**/ 
    Searching_e = 3, /**/ 
    ServiceError_e = 6, /**/ 
    ServiceShutdown_e = 7, /**/ 
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingSearchState& v) {
    switch(v) { 
    case LolLobbyTeamBuilderMatchmakingSearchState::AbandonedLowPriorityQueue_e:
      j = "AbandonedLowPriorityQueue";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::Canceled_e:
      j = "Canceled";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::Error_e:
      j = "Error";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::Found_e:
      j = "Found";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::Invalid_e:
      j = "Invalid";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::Searching_e:
      j = "Searching";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::ServiceError_e:
      j = "ServiceError";
    break;
    case LolLobbyTeamBuilderMatchmakingSearchState::ServiceShutdown_e:
      j = "ServiceShutdown";
    break;
    };
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingSearchState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AbandonedLowPriorityQueue") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::AbandonedLowPriorityQueue_e;
      return;
    } 
    if(s == "Canceled") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::Canceled_e;
      return;
    } 
    if(s == "Error") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::Error_e;
      return;
    } 
    if(s == "Found") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::Found_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::Invalid_e;
      return;
    } 
    if(s == "Searching") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::Searching_e;
      return;
    } 
    if(s == "ServiceError") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::ServiceError_e;
      return;
    } 
    if(s == "ServiceShutdown") {
      v = LolLobbyTeamBuilderMatchmakingSearchState::ServiceShutdown_e;
      return;
    } 
  } 
  struct LolLobbyTeamBuilderMatchmakingSearchResource { /**/ 
    int32_t queueId;/**/
    LolLobbyTeamBuilderMatchmakingReadyCheckResource readyCheck;/**/
    std::string lobbyId;/**/
    LolLobbyTeamBuilderMatchmakingLowPriorityData lowPriorityData;/**/
    float timeInQueue;/**/
    LolLobbyTeamBuilderMatchmakingSearchState searchState;/**/
    bool isCurrentlyInQueue;/**/
    LolLobbyTeamBuilderMatchmakingDodgeData dodgeData;/**/
    std::vector<LolLobbyTeamBuilderMatchmakingSearchErrorResource> errors;/**/
    float estimatedQueueTime;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderMatchmakingSearchResource& v) { 
    j["queueId"] = v.queueId;
    j["readyCheck"] = v.readyCheck;
    j["lobbyId"] = v.lobbyId;
    j["lowPriorityData"] = v.lowPriorityData;
    j["timeInQueue"] = v.timeInQueue;
    j["searchState"] = v.searchState;
    j["isCurrentlyInQueue"] = v.isCurrentlyInQueue;
    j["dodgeData"] = v.dodgeData;
    j["errors"] = v.errors;
    j["estimatedQueueTime"] = v.estimatedQueueTime;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderMatchmakingSearchResource& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.readyCheck = j.at("readyCheck").get<LolLobbyTeamBuilderMatchmakingReadyCheckResource>(); 
    v.lobbyId = j.at("lobbyId").get<std::string>(); 
    v.lowPriorityData = j.at("lowPriorityData").get<LolLobbyTeamBuilderMatchmakingLowPriorityData>(); 
    v.timeInQueue = j.at("timeInQueue").get<float>(); 
    v.searchState = j.at("searchState").get<LolLobbyTeamBuilderMatchmakingSearchState>(); 
    v.isCurrentlyInQueue = j.at("isCurrentlyInQueue").get<bool>(); 
    v.dodgeData = j.at("dodgeData").get<LolLobbyTeamBuilderMatchmakingDodgeData>(); 
    v.errors = j.at("errors").get<std::vector<LolLobbyTeamBuilderMatchmakingSearchErrorResource>>(); 
    v.estimatedQueueTime = j.at("estimatedQueueTime").get<float>(); 
  } 
  struct LolLobbyTeamBuilderReadyStateV1 { /**/ 
    bool premadeSizeAllowed;/**/
    bool requiredPositionCoverageMet;/**/
    bool readyToMatchmake;/**/
    std::vector<int32_t> allowablePremadeSizes;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderReadyStateV1& v) { 
    j["premadeSizeAllowed"] = v.premadeSizeAllowed;
    j["requiredPositionCoverageMet"] = v.requiredPositionCoverageMet;
    j["readyToMatchmake"] = v.readyToMatchmake;
    j["allowablePremadeSizes"] = v.allowablePremadeSizes;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderReadyStateV1& v) { 
    v.premadeSizeAllowed = j.at("premadeSizeAllowed").get<bool>(); 
    v.requiredPositionCoverageMet = j.at("requiredPositionCoverageMet").get<bool>(); 
    v.readyToMatchmake = j.at("readyToMatchmake").get<bool>(); 
    v.allowablePremadeSizes = j.at("allowablePremadeSizes").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderSpecifyPositionPreferencesV1 { /**/ 
    std::string firstPreference;/**/
    std::string secondPreference;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderSpecifyPositionPreferencesV1& v) { 
    j["firstPreference"] = v.firstPreference;
    j["secondPreference"] = v.secondPreference;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderSpecifyPositionPreferencesV1& v) { 
    v.firstPreference = j.at("firstPreference").get<std::string>(); 
    v.secondPreference = j.at("secondPreference").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderSpecifyPositionPreferencesV2 { /**/ 
    std::string excludedPreference;/**/
    std::string firstPreference;/**/
    std::string secondPreference;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderSpecifyPositionPreferencesV2& v) { 
    j["excludedPreference"] = v.excludedPreference;
    j["firstPreference"] = v.firstPreference;
    j["secondPreference"] = v.secondPreference;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderSpecifyPositionPreferencesV2& v) { 
    v.excludedPreference = j.at("excludedPreference").get<std::string>(); 
    v.firstPreference = j.at("firstPreference").get<std::string>(); 
    v.secondPreference = j.at("secondPreference").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderTBDMatchmakingState { /**/ 
    int64_t timeInMatchmakingMillis;/**/
    int64_t estimatedMatchmakingTimeMillis;/**/
    std::string backwardsTransitionReason;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTBDMatchmakingState& v) { 
    j["timeInMatchmakingMillis"] = v.timeInMatchmakingMillis;
    j["estimatedMatchmakingTimeMillis"] = v.estimatedMatchmakingTimeMillis;
    j["backwardsTransitionReason"] = v.backwardsTransitionReason;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTBDMatchmakingState& v) { 
    v.timeInMatchmakingMillis = j.at("timeInMatchmakingMillis").get<int64_t>(); 
    v.estimatedMatchmakingTimeMillis = j.at("estimatedMatchmakingTimeMillis").get<int64_t>(); 
    v.backwardsTransitionReason = j.at("backwardsTransitionReason").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource { /**/ 
    std::string backwardsTransitionReason;/**/
    std::vector<int32_t> slotIds;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource& v) { 
    j["backwardsTransitionReason"] = v.backwardsTransitionReason;
    j["slotIds"] = v.slotIds;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource& v) { 
    v.backwardsTransitionReason = j.at("backwardsTransitionReason").get<std::string>(); 
    v.slotIds = j.at("slotIds").get<std::vector<int32_t>>(); 
  } 
  struct LolLobbyTeamBuilderTbLobbyEnabledFeaturesResource { /**/ 
    std::vector<std::string> enabledFeatures;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbLobbyEnabledFeaturesResource& v) { 
    j["enabledFeatures"] = v.enabledFeatures;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbLobbyEnabledFeaturesResource& v) { 
    v.enabledFeatures = j.at("enabledFeatures").get<std::vector<std::string>>(); 
  } 
  struct LolLobbyTeamBuilderTbLobbySlotResource { /**/ 
    std::optional<std::string> excludedPositionPreference;/**/
    int32_t slotId;/**/
    uint64_t summonerId;/**/
    bool autoFillProtectedForPromos;/**/
    bool autoFillProtectedForStreaking;/**/
    std::vector<std::string> draftPositionPreferences;/**/
    std::string summonerName;/**/
    bool autoFillProtectedForSoloing;/**/
    bool autoFillEligible;/**/
    bool showPositionExcluder;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbLobbySlotResource& v) { 
    j["excludedPositionPreference"] = v.excludedPositionPreference;
    j["slotId"] = v.slotId;
    j["summonerId"] = v.summonerId;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["draftPositionPreferences"] = v.draftPositionPreferences;
    j["summonerName"] = v.summonerName;
    j["autoFillProtectedForSoloing"] = v.autoFillProtectedForSoloing;
    j["autoFillEligible"] = v.autoFillEligible;
    j["showPositionExcluder"] = v.showPositionExcluder;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbLobbySlotResource& v) { 
    v.excludedPositionPreference = j.at("excludedPositionPreference").get<std::optional<std::string>>(); 
    v.slotId = j.at("slotId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.draftPositionPreferences = j.at("draftPositionPreferences").get<std::vector<std::string>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.autoFillProtectedForSoloing = j.at("autoFillProtectedForSoloing").get<bool>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderTbLobbyPremadeStateResource { /**/ 
    std::string premadeChatRoomId;/**/
    bool showPositionSelector;/**/
    bool autoFillProtectedForPromos;/**/
    std::string draftPremadeId;/**/
    int64_t timer;/**/
    LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource backwardsToPremadeTransitionReason;/**/
    bool autoFillProtectedForStreaking;/**/
    LolLobbyTeamBuilderReadyStateV1 readyState;/**/
    std::vector<LolLobbyTeamBuilderTbLobbySlotResource> draftSlots;/**/
    bool autoFillEligible;/**/
    bool showPositionExcluder;/**/
    int32_t captainSlotId;/**/
    std::vector<std::string> playableDraftPositions;/**/
    int32_t localPlayerSlotId;/**/
    bool readyToMatchmake;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbLobbyPremadeStateResource& v) { 
    j["premadeChatRoomId"] = v.premadeChatRoomId;
    j["showPositionSelector"] = v.showPositionSelector;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["draftPremadeId"] = v.draftPremadeId;
    j["timer"] = v.timer;
    j["backwardsToPremadeTransitionReason"] = v.backwardsToPremadeTransitionReason;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
    j["readyState"] = v.readyState;
    j["draftSlots"] = v.draftSlots;
    j["autoFillEligible"] = v.autoFillEligible;
    j["showPositionExcluder"] = v.showPositionExcluder;
    j["captainSlotId"] = v.captainSlotId;
    j["playableDraftPositions"] = v.playableDraftPositions;
    j["localPlayerSlotId"] = v.localPlayerSlotId;
    j["readyToMatchmake"] = v.readyToMatchmake;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbLobbyPremadeStateResource& v) { 
    v.premadeChatRoomId = j.at("premadeChatRoomId").get<std::string>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.draftPremadeId = j.at("draftPremadeId").get<std::string>(); 
    v.timer = j.at("timer").get<int64_t>(); 
    v.backwardsToPremadeTransitionReason = j.at("backwardsToPremadeTransitionReason").get<LolLobbyTeamBuilderTbLobbyBackwardsToPremadeTransitionResource>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
    v.readyState = j.at("readyState").get<LolLobbyTeamBuilderReadyStateV1>(); 
    v.draftSlots = j.at("draftSlots").get<std::vector<LolLobbyTeamBuilderTbLobbySlotResource>>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.showPositionExcluder = j.at("showPositionExcluder").get<bool>(); 
    v.captainSlotId = j.at("captainSlotId").get<int32_t>(); 
    v.playableDraftPositions = j.at("playableDraftPositions").get<std::vector<std::string>>(); 
    v.localPlayerSlotId = j.at("localPlayerSlotId").get<int32_t>(); 
    v.readyToMatchmake = j.at("readyToMatchmake").get<bool>(); 
  } 
  struct LolLobbyTeamBuilderTbLobbyStateResource { /**/ 
    int32_t queueId;/**/
    std::optional<LolLobbyTeamBuilderChampionSelectStateV1> championSelectState;/**/
    std::optional<LolLobbyTeamBuilderTBDMatchmakingState> matchmakingState;/**/
    std::optional<LolLobbyTeamBuilderTbLobbyPremadeStateResource> premadeState;/**/
    int32_t counter;/**/
    std::optional<LolLobbyTeamBuilderAfkCheckStateV1> afkCheckState;/**/
    std::string phaseName;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbLobbyStateResource& v) { 
    j["queueId"] = v.queueId;
    j["championSelectState"] = v.championSelectState;
    j["matchmakingState"] = v.matchmakingState;
    j["premadeState"] = v.premadeState;
    j["counter"] = v.counter;
    j["afkCheckState"] = v.afkCheckState;
    j["phaseName"] = v.phaseName;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbLobbyStateResource& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.championSelectState = j.at("championSelectState").get<std::optional<LolLobbyTeamBuilderChampionSelectStateV1>>(); 
    v.matchmakingState = j.at("matchmakingState").get<std::optional<LolLobbyTeamBuilderTBDMatchmakingState>>(); 
    v.premadeState = j.at("premadeState").get<std::optional<LolLobbyTeamBuilderTbLobbyPremadeStateResource>>(); 
    v.counter = j.at("counter").get<int32_t>(); 
    v.afkCheckState = j.at("afkCheckState").get<std::optional<LolLobbyTeamBuilderAfkCheckStateV1>>(); 
    v.phaseName = j.at("phaseName").get<std::string>(); 
  } 
  struct LolLobbyTeamBuilderTbRemovedFromServiceNotification { /**/ 
    std::string reason;/**/
    LolLobbyTeamBuilderBackwardsTransitionInfoV1 backwardsTransitionInfo;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTbRemovedFromServiceNotification& v) { 
    j["reason"] = v.reason;
    j["backwardsTransitionInfo"] = v.backwardsTransitionInfo;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTbRemovedFromServiceNotification& v) { 
    v.reason = j.at("reason").get<std::string>(); 
    v.backwardsTransitionInfo = j.at("backwardsTransitionInfo").get<LolLobbyTeamBuilderBackwardsTransitionInfoV1>(); 
  } 
  struct LolLobbyTeamBuilderTeamBoost { /**/ 
    int64_t price;/**/
    std::vector<int64_t> availableSkins;/**/
    std::string summonerName;/**/
    bool unlocked;/**/
    int64_t ipReward;/**/
    std::string skinUnlockMode;/**/
    int64_t ipRewardForPurchaser;/**/
  };
  static void to_json(json& j, const LolLobbyTeamBuilderTeamBoost& v) { 
    j["price"] = v.price;
    j["availableSkins"] = v.availableSkins;
    j["summonerName"] = v.summonerName;
    j["unlocked"] = v.unlocked;
    j["ipReward"] = v.ipReward;
    j["skinUnlockMode"] = v.skinUnlockMode;
    j["ipRewardForPurchaser"] = v.ipRewardForPurchaser;
  }
  static void from_json(const json& j, LolLobbyTeamBuilderTeamBoost& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.availableSkins = j.at("availableSkins").get<std::vector<int64_t>>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.unlocked = j.at("unlocked").get<bool>(); 
    v.ipReward = j.at("ipReward").get<int64_t>(); 
    v.skinUnlockMode = j.at("skinUnlockMode").get<std::string>(); 
    v.ipRewardForPurchaser = j.at("ipRewardForPurchaser").get<int64_t>(); 
  } 
  struct LolLoginAccessToken { /**/ 
    std::vector<std::string> scopes;/**/
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolLoginAccessToken& v) { 
    j["scopes"] = v.scopes;
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolLoginAccessToken& v) { 
    v.scopes = j.at("scopes").get<std::vector<std::string>>(); 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  enum class LolLoginAccountStateType { /**/ 
    CREATING_e = 1, /**/ 
    ENABLED_e = 2, /**/ 
    GENERATING_e = 6, /**/ 
    TRANSFERRED_OUT_e = 5, /**/ 
    TRANSFERRING_IN_e = 4, /**/ 
    TRANSFERRING_OUT_e = 3, /**/ 
  };
  static void to_json(json& j, const LolLoginAccountStateType& v) {
    switch(v) { 
    case LolLoginAccountStateType::CREATING_e:
      j = "CREATING";
    break;
    case LolLoginAccountStateType::ENABLED_e:
      j = "ENABLED";
    break;
    case LolLoginAccountStateType::GENERATING_e:
      j = "GENERATING";
    break;
    case LolLoginAccountStateType::TRANSFERRED_OUT_e:
      j = "TRANSFERRED_OUT";
    break;
    case LolLoginAccountStateType::TRANSFERRING_IN_e:
      j = "TRANSFERRING_IN";
    break;
    case LolLoginAccountStateType::TRANSFERRING_OUT_e:
      j = "TRANSFERRING_OUT";
    break;
    };
  }
  static void from_json(const json& j, LolLoginAccountStateType& v) {
    auto s = j.get<std::string>(); 
    if(s == "CREATING") {
      v = LolLoginAccountStateType::CREATING_e;
      return;
    } 
    if(s == "ENABLED") {
      v = LolLoginAccountStateType::ENABLED_e;
      return;
    } 
    if(s == "GENERATING") {
      v = LolLoginAccountStateType::GENERATING_e;
      return;
    } 
    if(s == "TRANSFERRED_OUT") {
      v = LolLoginAccountStateType::TRANSFERRED_OUT_e;
      return;
    } 
    if(s == "TRANSFERRING_IN") {
      v = LolLoginAccountStateType::TRANSFERRING_IN_e;
      return;
    } 
    if(s == "TRANSFERRING_OUT") {
      v = LolLoginAccountStateType::TRANSFERRING_OUT_e;
      return;
    } 
  } 
  struct LolLoginAccountStateResource { /**/ 
    LolLoginAccountStateType state;/**/
  };
  static void to_json(json& j, const LolLoginAccountStateResource& v) { 
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolLoginAccountStateResource& v) { 
    v.state = j.at("state").get<LolLoginAccountStateType>(); 
  } 
  struct LolLoginAuthorization { /**/ 
    std::string currentPlatformId;/**/
    std::string subject;/**/
    uint64_t currentAccountId;/**/
  };
  static void to_json(json& j, const LolLoginAuthorization& v) { 
    j["currentPlatformId"] = v.currentPlatformId;
    j["subject"] = v.subject;
    j["currentAccountId"] = v.currentAccountId;
  }
  static void from_json(const json& j, LolLoginAuthorization& v) { 
    v.currentPlatformId = j.at("currentPlatformId").get<std::string>(); 
    v.subject = j.at("subject").get<std::string>(); 
    v.currentAccountId = j.at("currentAccountId").get<uint64_t>(); 
  } 
  struct LolLoginIdToken { /**/ 
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolLoginIdToken& v) { 
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolLoginIdToken& v) { 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct LolLoginLcdsResponse { /**/ 
    std::string typeName;/**/
    json body;/**/
  };
  static void to_json(json& j, const LolLoginLcdsResponse& v) { 
    j["typeName"] = v.typeName;
    j["body"] = v.body;
  }
  static void from_json(const json& j, LolLoginLcdsResponse& v) { 
    v.typeName = j.at("typeName").get<std::string>(); 
    v.body = j.at("body").get<json>(); 
  } 
  struct LolLoginLcdsServiceProxyResponse { /**/ 
    std::string messageId;/**/
    std::string payload;/**/
    std::string methodName;/**/
    std::string serviceName;/**/
    bool compressedPayload;/**/
    std::string status;/**/
  };
  static void to_json(json& j, const LolLoginLcdsServiceProxyResponse& v) { 
    j["messageId"] = v.messageId;
    j["payload"] = v.payload;
    j["methodName"] = v.methodName;
    j["serviceName"] = v.serviceName;
    j["compressedPayload"] = v.compressedPayload;
    j["status"] = v.status;
  }
  static void from_json(const json& j, LolLoginLcdsServiceProxyResponse& v) { 
    v.messageId = j.at("messageId").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.methodName = j.at("methodName").get<std::string>(); 
    v.serviceName = j.at("serviceName").get<std::string>(); 
    v.compressedPayload = j.at("compressedPayload").get<bool>(); 
    v.status = j.at("status").get<std::string>(); 
  } 
  struct LolLoginLoginError { /**/ 
    std::string messageId;/**/
    std::string id;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const LolLoginLoginError& v) { 
    j["messageId"] = v.messageId;
    j["id"] = v.id;
    j["description"] = v.description;
  }
  static void from_json(const json& j, LolLoginLoginError& v) { 
    v.messageId = j.at("messageId").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  struct LolLoginLoginQueue { /**/ 
    uint64_t estimatedPositionInQueue;/**/
    std::optional<uint64_t> approximateWaitTimeSeconds;/**/
    bool isPositionCapped;/**/
  };
  static void to_json(json& j, const LolLoginLoginQueue& v) { 
    j["estimatedPositionInQueue"] = v.estimatedPositionInQueue;
    j["approximateWaitTimeSeconds"] = v.approximateWaitTimeSeconds;
    j["isPositionCapped"] = v.isPositionCapped;
  }
  static void from_json(const json& j, LolLoginLoginQueue& v) { 
    v.estimatedPositionInQueue = j.at("estimatedPositionInQueue").get<uint64_t>(); 
    v.approximateWaitTimeSeconds = j.at("approximateWaitTimeSeconds").get<std::optional<uint64_t>>(); 
    v.isPositionCapped = j.at("isPositionCapped").get<bool>(); 
  } 
  enum class LolLoginLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLoginLoginSessionStates& v) {
    switch(v) { 
    case LolLoginLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolLoginLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLoginLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLoginLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLoginLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLoginLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLoginLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLoginLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLoginLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLoginLoginSession { /**/ 
    bool connected;/**/
    std::string puuid;/**/
    std::string username;/**/
    std::optional<LolLoginLoginError> error;/**/
    std::string userAuthToken;/**/
    std::optional<LolLoginLoginQueue> queueStatus;/**/
    LolLoginLoginSessionStates state;/**/
    std::optional<uint64_t> summonerId;/**/
    uint64_t accountId;/**/
    json gasToken;/**/
    std::string idToken;/**/
    bool isNewPlayer;/**/
  };
  static void to_json(json& j, const LolLoginLoginSession& v) { 
    j["connected"] = v.connected;
    j["puuid"] = v.puuid;
    j["username"] = v.username;
    j["error"] = v.error;
    j["userAuthToken"] = v.userAuthToken;
    j["queueStatus"] = v.queueStatus;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["gasToken"] = v.gasToken;
    j["idToken"] = v.idToken;
    j["isNewPlayer"] = v.isNewPlayer;
  }
  static void from_json(const json& j, LolLoginLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.username = j.at("username").get<std::string>(); 
    v.error = j.at("error").get<std::optional<LolLoginLoginError>>(); 
    v.userAuthToken = j.at("userAuthToken").get<std::string>(); 
    v.queueStatus = j.at("queueStatus").get<std::optional<LolLoginLoginQueue>>(); 
    v.state = j.at("state").get<LolLoginLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<std::optional<uint64_t>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.isNewPlayer = j.at("isNewPlayer").get<bool>(); 
  } 
  struct LolLoginLoginSessionWallet { /**/ 
    int64_t ip;/**/
    int64_t rp;/**/
  };
  static void to_json(json& j, const LolLoginLoginSessionWallet& v) { 
    j["ip"] = v.ip;
    j["rp"] = v.rp;
  }
  static void from_json(const json& j, LolLoginLoginSessionWallet& v) { 
    v.ip = j.at("ip").get<int64_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
  } 
  struct LolLoginPlatformGeneratedCredentials { /**/ 
    json gasToken;/**/
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolLoginPlatformGeneratedCredentials& v) { 
    j["gasToken"] = v.gasToken;
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolLoginPlatformGeneratedCredentials& v) { 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolLoginRSOPlayerCredentials { /**/ 
    std::string platformId;/**/
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolLoginRSOPlayerCredentials& v) { 
    j["platformId"] = v.platformId;
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolLoginRSOPlayerCredentials& v) { 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolLoginRegionStatus { /**/ 
    bool enabled;/**/
    bool isUserInfoEnabled;/**/
    bool isLQFallbackAllowed;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const LolLoginRegionStatus& v) { 
    j["enabled"] = v.enabled;
    j["isUserInfoEnabled"] = v.isUserInfoEnabled;
    j["isLQFallbackAllowed"] = v.isLQFallbackAllowed;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, LolLoginRegionStatus& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.isUserInfoEnabled = j.at("isUserInfoEnabled").get<bool>(); 
    v.isLQFallbackAllowed = j.at("isLQFallbackAllowed").get<bool>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct LolLoginSummonerCreatedResource { /**/ 
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolLoginSummonerCreatedResource& v) { 
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolLoginSummonerCreatedResource& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolLoginUsernameAndPassword { /**/ 
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const LolLoginUsernameAndPassword& v) { 
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, LolLoginUsernameAndPassword& v) { 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct LolLootCollectionsRental { /**/ 
    bool rented;/**/
  };
  static void to_json(json& j, const LolLootCollectionsRental& v) { 
    j["rented"] = v.rented;
  }
  static void from_json(const json& j, LolLootCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
  } 
  struct LolLootCollectionsOwnership { /**/ 
    LolLootCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolLootCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolLootCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolLootCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolLootCollectionsChampionMinimal { /**/ 
    LolLootCollectionsOwnership ownership;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLootCollectionsChampionMinimal& v) { 
    j["ownership"] = v.ownership;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLootCollectionsChampionMinimal& v) { 
    v.ownership = j.at("ownership").get<LolLootCollectionsOwnership>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolLootCollectionsChampionSkinMinimal { /**/ 
    int32_t id;/**/
    std::string splashPath;/**/
    std::string name;/**/
    std::string tilePath;/**/
    LolLootCollectionsOwnership ownership;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolLootCollectionsChampionSkinMinimal& v) { 
    j["id"] = v.id;
    j["splashPath"] = v.splashPath;
    j["name"] = v.name;
    j["tilePath"] = v.tilePath;
    j["ownership"] = v.ownership;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolLootCollectionsChampionSkinMinimal& v) { 
    v.id = j.at("id").get<int32_t>(); 
    v.splashPath = j.at("splashPath").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.tilePath = j.at("tilePath").get<std::string>(); 
    v.ownership = j.at("ownership").get<LolLootCollectionsOwnership>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  enum class LolLootInventoryOwnership { /**/ 
    F2P_e = 2, /**/ 
    OWNED_e = 0, /**/ 
    RENTED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLootInventoryOwnership& v) {
    switch(v) { 
    case LolLootInventoryOwnership::F2P_e:
      j = "F2P";
    break;
    case LolLootInventoryOwnership::OWNED_e:
      j = "OWNED";
    break;
    case LolLootInventoryOwnership::RENTED_e:
      j = "RENTED";
    break;
    };
  }
  static void from_json(const json& j, LolLootInventoryOwnership& v) {
    auto s = j.get<std::string>(); 
    if(s == "F2P") {
      v = LolLootInventoryOwnership::F2P_e;
      return;
    } 
    if(s == "OWNED") {
      v = LolLootInventoryOwnership::OWNED_e;
      return;
    } 
    if(s == "RENTED") {
      v = LolLootInventoryOwnership::RENTED_e;
      return;
    } 
  } 
  struct LolLootCollectionsEmote { /**/ 
    int64_t itemId;/**/
    LolLootInventoryOwnership ownershipType;/**/
  };
  static void to_json(json& j, const LolLootCollectionsEmote& v) { 
    j["itemId"] = v.itemId;
    j["ownershipType"] = v.ownershipType;
  }
  static void from_json(const json& j, LolLootCollectionsEmote& v) { 
    v.itemId = j.at("itemId").get<int64_t>(); 
    v.ownershipType = j.at("ownershipType").get<LolLootInventoryOwnership>(); 
  } 
  struct LolLootCollectionsSummonerIcons { /**/ 
    std::vector<int32_t> icons;/**/
  };
  static void to_json(json& j, const LolLootCollectionsSummonerIcons& v) { 
    j["icons"] = v.icons;
  }
  static void from_json(const json& j, LolLootCollectionsSummonerIcons& v) { 
    v.icons = j.at("icons").get<std::vector<int32_t>>(); 
  } 
  struct LolLootCollectionsWardSkin { /**/ 
    LolLootCollectionsOwnership ownership;/**/
    std::string wardShadowImagePath;/**/
    int64_t id;/**/
    std::string wardImagePath;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLootCollectionsWardSkin& v) { 
    j["ownership"] = v.ownership;
    j["wardShadowImagePath"] = v.wardShadowImagePath;
    j["id"] = v.id;
    j["wardImagePath"] = v.wardImagePath;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLootCollectionsWardSkin& v) { 
    v.ownership = j.at("ownership").get<LolLootCollectionsOwnership>(); 
    v.wardShadowImagePath = j.at("wardShadowImagePath").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.wardImagePath = j.at("wardImagePath").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLootContextMenu { /**/ 
    int32_t requiredOthersCount;/**/
    std::string requiredOthersName;/**/
    std::string requiredTokens;/**/
    std::string name;/**/
    bool enabled;/**/
    std::string actionType;/**/
    std::string requiredOthers;/**/
    std::string essenceType;/**/
    int32_t essenceQuantity;/**/
  };
  static void to_json(json& j, const LolLootContextMenu& v) { 
    j["requiredOthersCount"] = v.requiredOthersCount;
    j["requiredOthersName"] = v.requiredOthersName;
    j["requiredTokens"] = v.requiredTokens;
    j["name"] = v.name;
    j["enabled"] = v.enabled;
    j["actionType"] = v.actionType;
    j["requiredOthers"] = v.requiredOthers;
    j["essenceType"] = v.essenceType;
    j["essenceQuantity"] = v.essenceQuantity;
  }
  static void from_json(const json& j, LolLootContextMenu& v) { 
    v.requiredOthersCount = j.at("requiredOthersCount").get<int32_t>(); 
    v.requiredOthersName = j.at("requiredOthersName").get<std::string>(); 
    v.requiredTokens = j.at("requiredTokens").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.enabled = j.at("enabled").get<bool>(); 
    v.actionType = j.at("actionType").get<std::string>(); 
    v.requiredOthers = j.at("requiredOthers").get<std::string>(); 
    v.essenceType = j.at("essenceType").get<std::string>(); 
    v.essenceQuantity = j.at("essenceQuantity").get<int32_t>(); 
  } 
  struct LolLootCurrencyConfiguration { /**/ 
    std::vector<std::string> currenciesUsingCapWallets;/**/
  };
  static void to_json(json& j, const LolLootCurrencyConfiguration& v) { 
    j["currenciesUsingCapWallets"] = v.currenciesUsingCapWallets;
  }
  static void from_json(const json& j, LolLootCurrencyConfiguration& v) { 
    v.currenciesUsingCapWallets = j.at("currenciesUsingCapWallets").get<std::vector<std::string>>(); 
  } 
  struct LolLootGameDataSummonerEmote { /**/ 
    std::string inventoryIcon;/**/
    std::string description;/**/
    int64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolLootGameDataSummonerEmote& v) { 
    j["inventoryIcon"] = v.inventoryIcon;
    j["description"] = v.description;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolLootGameDataSummonerEmote& v) { 
    v.inventoryIcon = j.at("inventoryIcon").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolLootGameDataSummonerIcon { /**/ 
    std::string iconPath;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolLootGameDataSummonerIcon& v) { 
    j["iconPath"] = v.iconPath;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolLootGameDataSummonerIcon& v) { 
    v.iconPath = j.at("iconPath").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolLootGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolLootGameflowPhase& v) {
    switch(v) { 
    case LolLootGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolLootGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolLootGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolLootGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolLootGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolLootGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolLootGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolLootGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolLootGameflowPhase::None_e:
      j = "None";
    break;
    case LolLootGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolLootGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolLootGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolLootGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolLootGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolLootGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolLootGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolLootGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolLootGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolLootGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolLootGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolLootGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolLootGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolLootGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolLootGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolLootGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolLootGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolLootGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolLootGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolLootGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolLootGameflowSession { /**/ 
    LolLootGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolLootGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolLootGameflowSession& v) { 
    v.phase = j.at("phase").get<LolLootGameflowPhase>(); 
  } 
  enum class LolLootItemOwnershipStatus { /**/ 
    FREE_e = 1, /**/ 
    NONE_e = 0, /**/ 
    OWNED_e = 3, /**/ 
    RENTAL_e = 2, /**/ 
  };
  static void to_json(json& j, const LolLootItemOwnershipStatus& v) {
    switch(v) { 
    case LolLootItemOwnershipStatus::FREE_e:
      j = "FREE";
    break;
    case LolLootItemOwnershipStatus::NONE_e:
      j = "NONE";
    break;
    case LolLootItemOwnershipStatus::OWNED_e:
      j = "OWNED";
    break;
    case LolLootItemOwnershipStatus::RENTAL_e:
      j = "RENTAL";
    break;
    };
  }
  static void from_json(const json& j, LolLootItemOwnershipStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "FREE") {
      v = LolLootItemOwnershipStatus::FREE_e;
      return;
    } 
    if(s == "NONE") {
      v = LolLootItemOwnershipStatus::NONE_e;
      return;
    } 
    if(s == "OWNED") {
      v = LolLootItemOwnershipStatus::OWNED_e;
      return;
    } 
    if(s == "RENTAL") {
      v = LolLootItemOwnershipStatus::RENTAL_e;
      return;
    } 
  } 
  struct LolLootLoginSummonerLevelAndPoints { /**/ 
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolLootLoginSummonerLevelAndPoints& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolLootLoginSummonerLevelAndPoints& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolLootLoginAllSummonerData { /**/ 
    LolLootLoginSummonerLevelAndPoints summonerLevelAndPoints;/**/
  };
  static void to_json(json& j, const LolLootLoginAllSummonerData& v) { 
    j["summonerLevelAndPoints"] = v.summonerLevelAndPoints;
  }
  static void from_json(const json& j, LolLootLoginAllSummonerData& v) { 
    v.summonerLevelAndPoints = j.at("summonerLevelAndPoints").get<LolLootLoginSummonerLevelAndPoints>(); 
  } 
  struct LolLootLoginSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolLootLoginSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolLootLoginSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolLootLoginDataPacket { /**/ 
    LolLootLoginAllSummonerData allSummonerData;/**/
    std::vector<LolLootLoginSimpleMessage> simpleMessages;/**/
  };
  static void to_json(json& j, const LolLootLoginDataPacket& v) { 
    j["allSummonerData"] = v.allSummonerData;
    j["simpleMessages"] = v.simpleMessages;
  }
  static void from_json(const json& j, LolLootLoginDataPacket& v) { 
    v.allSummonerData = j.at("allSummonerData").get<LolLootLoginAllSummonerData>(); 
    v.simpleMessages = j.at("simpleMessages").get<std::vector<LolLootLoginSimpleMessage>>(); 
  } 
  enum class LolLootLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLootLoginSessionStates& v) {
    switch(v) { 
    case LolLootLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolLootLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolLootLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolLootLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolLootLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolLootLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolLootLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolLootLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolLootLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolLootLoginSession { /**/ 
    LolLootLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLootLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLootLoginSession& v) { 
    v.state = j.at("state").get<LolLootLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolLootLootRecipeGdsResource { /**/ 
    std::string placeholder;/**/
  };
  static void to_json(json& j, const LolLootLootRecipeGdsResource& v) { 
    j["placeholder"] = v.placeholder;
  }
  static void from_json(const json& j, LolLootLootRecipeGdsResource& v) { 
    v.placeholder = j.at("placeholder").get<std::string>(); 
  } 
  enum class LolLootLootType { /**/ 
    Chest_e = 0, /**/ 
    Currency_e = 1, /**/ 
  };
  static void to_json(json& j, const LolLootLootType& v) {
    switch(v) { 
    case LolLootLootType::Chest_e:
      j = "Chest";
    break;
    case LolLootLootType::Currency_e:
      j = "Currency";
    break;
    };
  }
  static void from_json(const json& j, LolLootLootType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Chest") {
      v = LolLootLootType::Chest_e;
      return;
    } 
    if(s == "Currency") {
      v = LolLootLootType::Currency_e;
      return;
    } 
  } 
  enum class LolLootLootRarity { /**/ 
    Default_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLootLootRarity& v) {
    switch(v) { 
    case LolLootLootRarity::Default_e:
      j = "Default";
    break;
    };
  }
  static void from_json(const json& j, LolLootLootRarity& v) {
    auto s = j.get<std::string>(); 
    if(s == "Default") {
      v = LolLootLootRarity::Default_e;
      return;
    } 
  } 
  struct LolLootLootItemGdsResource { /**/ 
    std::string startDate;/**/
    std::string id;/**/
    bool autoRedeem;/**/
    std::string description;/**/
    LolLootLootType type;/**/
    LolLootLootRarity rarity;/**/
    std::string name;/**/
    std::string image;/**/
    int32_t mappedStoreId;/**/
    int32_t lifetimeMax;/**/
    std::string endDate;/**/
  };
  static void to_json(json& j, const LolLootLootItemGdsResource& v) { 
    j["startDate"] = v.startDate;
    j["id"] = v.id;
    j["autoRedeem"] = v.autoRedeem;
    j["description"] = v.description;
    j["type"] = v.type;
    j["rarity"] = v.rarity;
    j["name"] = v.name;
    j["image"] = v.image;
    j["mappedStoreId"] = v.mappedStoreId;
    j["lifetimeMax"] = v.lifetimeMax;
    j["endDate"] = v.endDate;
  }
  static void from_json(const json& j, LolLootLootItemGdsResource& v) { 
    v.startDate = j.at("startDate").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.autoRedeem = j.at("autoRedeem").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.type = j.at("type").get<LolLootLootType>(); 
    v.rarity = j.at("rarity").get<LolLootLootRarity>(); 
    v.name = j.at("name").get<std::string>(); 
    v.image = j.at("image").get<std::string>(); 
    v.mappedStoreId = j.at("mappedStoreId").get<int32_t>(); 
    v.lifetimeMax = j.at("lifetimeMax").get<int32_t>(); 
    v.endDate = j.at("endDate").get<std::string>(); 
  } 
  struct LolLootLootDataGdsResource { /**/ 
    std::vector<LolLootLootRecipeGdsResource> LootRecipes;/**/
    std::vector<LolLootLootItemGdsResource> LootItems;/**/
  };
  static void to_json(json& j, const LolLootLootDataGdsResource& v) { 
    j["LootRecipes"] = v.LootRecipes;
    j["LootItems"] = v.LootItems;
  }
  static void from_json(const json& j, LolLootLootDataGdsResource& v) { 
    v.LootRecipes = j.at("LootRecipes").get<std::vector<LolLootLootRecipeGdsResource>>(); 
    v.LootItems = j.at("LootItems").get<std::vector<LolLootLootItemGdsResource>>(); 
  } 
  struct LolLootLootDescription { /**/ 
    std::map<std::string, std::string> localizationMap;/**/
    std::map<std::string, std::string> localizationLongDescriptionMap;/**/
    std::vector<std::string> childLootTableNames;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const LolLootLootDescription& v) { 
    j["localizationMap"] = v.localizationMap;
    j["localizationLongDescriptionMap"] = v.localizationLongDescriptionMap;
    j["childLootTableNames"] = v.childLootTableNames;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, LolLootLootDescription& v) { 
    v.localizationMap = j.at("localizationMap").get<std::map<std::string, std::string>>(); 
    v.localizationLongDescriptionMap = j.at("localizationLongDescriptionMap").get<std::map<std::string, std::string>>(); 
    v.childLootTableNames = j.at("childLootTableNames").get<std::vector<std::string>>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct LolLootLootGrantNotification { /**/ 
    uint64_t playerId;/**/
    std::string messageKey;/**/
    int64_t id;/**/
    std::string playerGrade;/**/
    std::string lootName;/**/
    uint64_t gameId;/**/
    std::string msgId;/**/
    int32_t championId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolLootLootGrantNotification& v) { 
    j["playerId"] = v.playerId;
    j["messageKey"] = v.messageKey;
    j["id"] = v.id;
    j["playerGrade"] = v.playerGrade;
    j["lootName"] = v.lootName;
    j["gameId"] = v.gameId;
    j["msgId"] = v.msgId;
    j["championId"] = v.championId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolLootLootGrantNotification& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.messageKey = j.at("messageKey").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.playerGrade = j.at("playerGrade").get<std::string>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolLootLootItem { /**/ 
    int32_t rentalGames;/**/
    std::string tags;/**/
    std::string upgradeLootName;/**/
    std::string rarity;/**/
    int32_t value;/**/
    int64_t rentalSeconds;/**/
    int64_t expiryTime;/**/
    std::string lootName;/**/
    std::string type;/**/
    std::string displayCategories;/**/
    std::string asset;/**/
    int32_t storeItemId;/**/
  };
  static void to_json(json& j, const LolLootLootItem& v) { 
    j["rentalGames"] = v.rentalGames;
    j["tags"] = v.tags;
    j["upgradeLootName"] = v.upgradeLootName;
    j["rarity"] = v.rarity;
    j["value"] = v.value;
    j["rentalSeconds"] = v.rentalSeconds;
    j["expiryTime"] = v.expiryTime;
    j["lootName"] = v.lootName;
    j["type"] = v.type;
    j["displayCategories"] = v.displayCategories;
    j["asset"] = v.asset;
    j["storeItemId"] = v.storeItemId;
  }
  static void from_json(const json& j, LolLootLootItem& v) { 
    v.rentalGames = j.at("rentalGames").get<int32_t>(); 
    v.tags = j.at("tags").get<std::string>(); 
    v.upgradeLootName = j.at("upgradeLootName").get<std::string>(); 
    v.rarity = j.at("rarity").get<std::string>(); 
    v.value = j.at("value").get<int32_t>(); 
    v.rentalSeconds = j.at("rentalSeconds").get<int64_t>(); 
    v.expiryTime = j.at("expiryTime").get<int64_t>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.displayCategories = j.at("displayCategories").get<std::string>(); 
    v.asset = j.at("asset").get<std::string>(); 
    v.storeItemId = j.at("storeItemId").get<int32_t>(); 
  } 
  enum class LolLootRedeemableStatus { /**/ 
    ALREADY_OWNED_e = 5, /**/ 
    ALREADY_RENTED_e = 6, /**/ 
    CHAMPION_NOT_OWNED_e = 7, /**/ 
    NOT_REDEEMABLE_e = 3, /**/ 
    NOT_REDEEMABLE_RENTAL_e = 4, /**/ 
    REDEEMABLE_e = 1, /**/ 
    REDEEMABLE_RENTAL_e = 2, /**/ 
    SKIN_NOT_OWNED_e = 8, /**/ 
    UNKNOWN_e = 0, /**/ 
  };
  static void to_json(json& j, const LolLootRedeemableStatus& v) {
    switch(v) { 
    case LolLootRedeemableStatus::ALREADY_OWNED_e:
      j = "ALREADY_OWNED";
    break;
    case LolLootRedeemableStatus::ALREADY_RENTED_e:
      j = "ALREADY_RENTED";
    break;
    case LolLootRedeemableStatus::CHAMPION_NOT_OWNED_e:
      j = "CHAMPION_NOT_OWNED";
    break;
    case LolLootRedeemableStatus::NOT_REDEEMABLE_e:
      j = "NOT_REDEEMABLE";
    break;
    case LolLootRedeemableStatus::NOT_REDEEMABLE_RENTAL_e:
      j = "NOT_REDEEMABLE_RENTAL";
    break;
    case LolLootRedeemableStatus::REDEEMABLE_e:
      j = "REDEEMABLE";
    break;
    case LolLootRedeemableStatus::REDEEMABLE_RENTAL_e:
      j = "REDEEMABLE_RENTAL";
    break;
    case LolLootRedeemableStatus::SKIN_NOT_OWNED_e:
      j = "SKIN_NOT_OWNED";
    break;
    case LolLootRedeemableStatus::UNKNOWN_e:
      j = "UNKNOWN";
    break;
    };
  }
  static void from_json(const json& j, LolLootRedeemableStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "ALREADY_OWNED") {
      v = LolLootRedeemableStatus::ALREADY_OWNED_e;
      return;
    } 
    if(s == "ALREADY_RENTED") {
      v = LolLootRedeemableStatus::ALREADY_RENTED_e;
      return;
    } 
    if(s == "CHAMPION_NOT_OWNED") {
      v = LolLootRedeemableStatus::CHAMPION_NOT_OWNED_e;
      return;
    } 
    if(s == "NOT_REDEEMABLE") {
      v = LolLootRedeemableStatus::NOT_REDEEMABLE_e;
      return;
    } 
    if(s == "NOT_REDEEMABLE_RENTAL") {
      v = LolLootRedeemableStatus::NOT_REDEEMABLE_RENTAL_e;
      return;
    } 
    if(s == "REDEEMABLE") {
      v = LolLootRedeemableStatus::REDEEMABLE_e;
      return;
    } 
    if(s == "REDEEMABLE_RENTAL") {
      v = LolLootRedeemableStatus::REDEEMABLE_RENTAL_e;
      return;
    } 
    if(s == "SKIN_NOT_OWNED") {
      v = LolLootRedeemableStatus::SKIN_NOT_OWNED_e;
      return;
    } 
    if(s == "UNKNOWN") {
      v = LolLootRedeemableStatus::UNKNOWN_e;
      return;
    } 
  } 
  struct LolLootPlayerLoot { /**/ 
    std::string localizedDescription;/**/
    std::string disenchantLootName;/**/
    int32_t disenchantValue;/**/
    LolLootRedeemableStatus redeemableStatus;/**/
    std::string upgradeLootName;/**/
    std::string refId;/**/
    std::string lootName;/**/
    std::string shadowPath;/**/
    int64_t rentalSeconds;/**/
    std::string splashPath;/**/
    int32_t count;/**/
    bool isRental;/**/
    std::string tilePath;/**/
    LolLootItemOwnershipStatus parentItemStatus;/**/
    int32_t rentalGames;/**/
    int64_t expiryTime;/**/
    int32_t upgradeEssenceValue;/**/
    std::string tags;/**/
    int32_t parentStoreItemId;/**/
    std::string rarity;/**/
    int32_t value;/**/
    std::string upgradeEssenceName;/**/
    LolLootItemOwnershipStatus itemStatus;/**/
    std::string lootId;/**/
    std::string localizedName;/**/
    std::string displayCategories;/**/
    std::string itemDesc;/**/
    std::string type;/**/
    int32_t storeItemId;/**/
    std::string asset;/**/
    bool isNew;/**/
  };
  static void to_json(json& j, const LolLootPlayerLoot& v) { 
    j["localizedDescription"] = v.localizedDescription;
    j["disenchantLootName"] = v.disenchantLootName;
    j["disenchantValue"] = v.disenchantValue;
    j["redeemableStatus"] = v.redeemableStatus;
    j["upgradeLootName"] = v.upgradeLootName;
    j["refId"] = v.refId;
    j["lootName"] = v.lootName;
    j["shadowPath"] = v.shadowPath;
    j["rentalSeconds"] = v.rentalSeconds;
    j["splashPath"] = v.splashPath;
    j["count"] = v.count;
    j["isRental"] = v.isRental;
    j["tilePath"] = v.tilePath;
    j["parentItemStatus"] = v.parentItemStatus;
    j["rentalGames"] = v.rentalGames;
    j["expiryTime"] = v.expiryTime;
    j["upgradeEssenceValue"] = v.upgradeEssenceValue;
    j["tags"] = v.tags;
    j["parentStoreItemId"] = v.parentStoreItemId;
    j["rarity"] = v.rarity;
    j["value"] = v.value;
    j["upgradeEssenceName"] = v.upgradeEssenceName;
    j["itemStatus"] = v.itemStatus;
    j["lootId"] = v.lootId;
    j["localizedName"] = v.localizedName;
    j["displayCategories"] = v.displayCategories;
    j["itemDesc"] = v.itemDesc;
    j["type"] = v.type;
    j["storeItemId"] = v.storeItemId;
    j["asset"] = v.asset;
    j["isNew"] = v.isNew;
  }
  static void from_json(const json& j, LolLootPlayerLoot& v) { 
    v.localizedDescription = j.at("localizedDescription").get<std::string>(); 
    v.disenchantLootName = j.at("disenchantLootName").get<std::string>(); 
    v.disenchantValue = j.at("disenchantValue").get<int32_t>(); 
    v.redeemableStatus = j.at("redeemableStatus").get<LolLootRedeemableStatus>(); 
    v.upgradeLootName = j.at("upgradeLootName").get<std::string>(); 
    v.refId = j.at("refId").get<std::string>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
    v.shadowPath = j.at("shadowPath").get<std::string>(); 
    v.rentalSeconds = j.at("rentalSeconds").get<int64_t>(); 
    v.splashPath = j.at("splashPath").get<std::string>(); 
    v.count = j.at("count").get<int32_t>(); 
    v.isRental = j.at("isRental").get<bool>(); 
    v.tilePath = j.at("tilePath").get<std::string>(); 
    v.parentItemStatus = j.at("parentItemStatus").get<LolLootItemOwnershipStatus>(); 
    v.rentalGames = j.at("rentalGames").get<int32_t>(); 
    v.expiryTime = j.at("expiryTime").get<int64_t>(); 
    v.upgradeEssenceValue = j.at("upgradeEssenceValue").get<int32_t>(); 
    v.tags = j.at("tags").get<std::string>(); 
    v.parentStoreItemId = j.at("parentStoreItemId").get<int32_t>(); 
    v.rarity = j.at("rarity").get<std::string>(); 
    v.value = j.at("value").get<int32_t>(); 
    v.upgradeEssenceName = j.at("upgradeEssenceName").get<std::string>(); 
    v.itemStatus = j.at("itemStatus").get<LolLootItemOwnershipStatus>(); 
    v.lootId = j.at("lootId").get<std::string>(); 
    v.localizedName = j.at("localizedName").get<std::string>(); 
    v.displayCategories = j.at("displayCategories").get<std::string>(); 
    v.itemDesc = j.at("itemDesc").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.storeItemId = j.at("storeItemId").get<int32_t>(); 
    v.asset = j.at("asset").get<std::string>(); 
    v.isNew = j.at("isNew").get<bool>(); 
  } 
  struct LolLootPlayerLootDelta { /**/ 
    int32_t deltaCount;/**/
    LolLootPlayerLoot playerLoot;/**/
  };
  static void to_json(json& j, const LolLootPlayerLootDelta& v) { 
    j["deltaCount"] = v.deltaCount;
    j["playerLoot"] = v.playerLoot;
  }
  static void from_json(const json& j, LolLootPlayerLootDelta& v) { 
    v.deltaCount = j.at("deltaCount").get<int32_t>(); 
    v.playerLoot = j.at("playerLoot").get<LolLootPlayerLoot>(); 
  } 
  struct LolLootPlayerLootMap { /**/ 
    std::map<std::string, LolLootPlayerLoot> playerLoot;/**/
    int64_t version;/**/
  };
  static void to_json(json& j, const LolLootPlayerLootMap& v) { 
    j["playerLoot"] = v.playerLoot;
    j["version"] = v.version;
  }
  static void from_json(const json& j, LolLootPlayerLootMap& v) { 
    v.playerLoot = j.at("playerLoot").get<std::map<std::string, LolLootPlayerLoot>>(); 
    v.version = j.at("version").get<int64_t>(); 
  } 
  struct LolLootPlayerLootNotification { /**/ 
    int32_t count;/**/
    std::string id;/**/
    bool acknowledged;/**/
  };
  static void to_json(json& j, const LolLootPlayerLootNotification& v) { 
    j["count"] = v.count;
    j["id"] = v.id;
    j["acknowledged"] = v.acknowledged;
  }
  static void from_json(const json& j, LolLootPlayerLootNotification& v) { 
    v.count = j.at("count").get<int32_t>(); 
    v.id = j.at("id").get<std::string>(); 
    v.acknowledged = j.at("acknowledged").get<bool>(); 
  } 
  struct LolLootPlayerLootUpdate { /**/ 
    std::vector<LolLootPlayerLootDelta> removed;/**/
    std::vector<LolLootPlayerLootDelta> added;/**/
    std::vector<LolLootPlayerLootDelta> redeemed;/**/
  };
  static void to_json(json& j, const LolLootPlayerLootUpdate& v) { 
    j["removed"] = v.removed;
    j["added"] = v.added;
    j["redeemed"] = v.redeemed;
  }
  static void from_json(const json& j, LolLootPlayerLootUpdate& v) { 
    v.removed = j.at("removed").get<std::vector<LolLootPlayerLootDelta>>(); 
    v.added = j.at("added").get<std::vector<LolLootPlayerLootDelta>>(); 
    v.redeemed = j.at("redeemed").get<std::vector<LolLootPlayerLootDelta>>(); 
  } 
  struct LolLootRecipeMetadata { /**/ 
    std::vector<LolLootLootDescription> bonusDescriptions;/**/
    bool tooltipsDisabled;/**/
    std::vector<LolLootLootDescription> guaranteedDescriptions;/**/
  };
  static void to_json(json& j, const LolLootRecipeMetadata& v) { 
    j["bonusDescriptions"] = v.bonusDescriptions;
    j["tooltipsDisabled"] = v.tooltipsDisabled;
    j["guaranteedDescriptions"] = v.guaranteedDescriptions;
  }
  static void from_json(const json& j, LolLootRecipeMetadata& v) { 
    v.bonusDescriptions = j.at("bonusDescriptions").get<std::vector<LolLootLootDescription>>(); 
    v.tooltipsDisabled = j.at("tooltipsDisabled").get<bool>(); 
    v.guaranteedDescriptions = j.at("guaranteedDescriptions").get<std::vector<LolLootLootDescription>>(); 
  } 
  struct LolLootRecipeSlot { /**/ 
    int32_t quantity;/**/
    std::vector<std::string> lootIds;/**/
    std::string tags;/**/
    int32_t slotNumber;/**/
  };
  static void to_json(json& j, const LolLootRecipeSlot& v) { 
    j["quantity"] = v.quantity;
    j["lootIds"] = v.lootIds;
    j["tags"] = v.tags;
    j["slotNumber"] = v.slotNumber;
  }
  static void from_json(const json& j, LolLootRecipeSlot& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.lootIds = j.at("lootIds").get<std::vector<std::string>>(); 
    v.tags = j.at("tags").get<std::string>(); 
    v.slotNumber = j.at("slotNumber").get<int32_t>(); 
  } 
  struct LolLootRecipeOutput { /**/ 
    int32_t quantity;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const LolLootRecipeOutput& v) { 
    j["quantity"] = v.quantity;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, LolLootRecipeOutput& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct LolLootRecipe { /**/ 
    LolLootRecipeMetadata metadata;/**/
    std::vector<LolLootRecipeSlot> slots;/**/
    std::vector<LolLootRecipeOutput> outputs;/**/
    std::string displayCategories;/**/
    std::string type;/**/
    std::string recipeName;/**/
    std::string crafterName;/**/
  };
  static void to_json(json& j, const LolLootRecipe& v) { 
    j["metadata"] = v.metadata;
    j["slots"] = v.slots;
    j["outputs"] = v.outputs;
    j["displayCategories"] = v.displayCategories;
    j["type"] = v.type;
    j["recipeName"] = v.recipeName;
    j["crafterName"] = v.crafterName;
  }
  static void from_json(const json& j, LolLootRecipe& v) { 
    v.metadata = j.at("metadata").get<LolLootRecipeMetadata>(); 
    v.slots = j.at("slots").get<std::vector<LolLootRecipeSlot>>(); 
    v.outputs = j.at("outputs").get<std::vector<LolLootRecipeOutput>>(); 
    v.displayCategories = j.at("displayCategories").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.recipeName = j.at("recipeName").get<std::string>(); 
    v.crafterName = j.at("crafterName").get<std::string>(); 
  } 
  struct LolLootRecipeMenuConfig { /**/ 
    bool enabled;/**/
    std::vector<std::string> lootItemsUsingBreakoutRecipeMenu;/**/
    std::vector<std::string> alwaysShowLootIds;/**/
  };
  static void to_json(json& j, const LolLootRecipeMenuConfig& v) { 
    j["enabled"] = v.enabled;
    j["lootItemsUsingBreakoutRecipeMenu"] = v.lootItemsUsingBreakoutRecipeMenu;
    j["alwaysShowLootIds"] = v.alwaysShowLootIds;
  }
  static void from_json(const json& j, LolLootRecipeMenuConfig& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.lootItemsUsingBreakoutRecipeMenu = j.at("lootItemsUsingBreakoutRecipeMenu").get<std::vector<std::string>>(); 
    v.alwaysShowLootIds = j.at("alwaysShowLootIds").get<std::vector<std::string>>(); 
  } 
  struct LolLootSummoner { /**/ 
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolLootSummoner& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolLootSummoner& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolMapsMaps { /**/ 
    std::string gameMutator;/**/
    json properties;/**/
    int64_t id;/**/
    std::map<std::string, std::string> assets;/**/
    std::string name;/**/
    std::string platformName;/**/
    std::string description;/**/
    std::string gameModeDescription;/**/
    std::string gameModeName;/**/
    std::string gameModeShortName;/**/
    std::string platformId;/**/
    bool isRGM;/**/
    bool isDefault;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolMapsMaps& v) { 
    j["gameMutator"] = v.gameMutator;
    j["properties"] = v.properties;
    j["id"] = v.id;
    j["assets"] = v.assets;
    j["name"] = v.name;
    j["platformName"] = v.platformName;
    j["description"] = v.description;
    j["gameModeDescription"] = v.gameModeDescription;
    j["gameModeName"] = v.gameModeName;
    j["gameModeShortName"] = v.gameModeShortName;
    j["platformId"] = v.platformId;
    j["isRGM"] = v.isRGM;
    j["isDefault"] = v.isDefault;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolMapsMaps& v) { 
    v.gameMutator = j.at("gameMutator").get<std::string>(); 
    v.properties = j.at("properties").get<json>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.assets = j.at("assets").get<std::map<std::string, std::string>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.platformName = j.at("platformName").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.gameModeDescription = j.at("gameModeDescription").get<std::string>(); 
    v.gameModeName = j.at("gameModeName").get<std::string>(); 
    v.gameModeShortName = j.at("gameModeShortName").get<std::string>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.isRGM = j.at("isRGM").get<bool>(); 
    v.isDefault = j.at("isDefault").get<bool>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  enum class LolMatchHistoryLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolMatchHistoryLoginSessionStates& v) {
    switch(v) { 
    case LolMatchHistoryLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolMatchHistoryLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolMatchHistoryLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolMatchHistoryLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolMatchHistoryLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolMatchHistoryLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolMatchHistoryLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolMatchHistoryLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolMatchHistoryLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolMatchHistoryLoginSession { /**/ 
    LolMatchHistoryLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolMatchHistoryLoginSession& v) { 
    v.state = j.at("state").get<LolMatchHistoryLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryPosition { /**/ 
    int16_t y;/**/
    int16_t x;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPosition& v) { 
    j["y"] = v.y;
    j["x"] = v.x;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPosition& v) { 
    v.y = j.at("y").get<int16_t>(); 
    v.x = j.at("x").get<int16_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryEvent { /**/ 
    std::string monsterSubType;/**/
    uint16_t itemId;/**/
    uint16_t killerId;/**/
    std::string towerType;/**/
    uint16_t teamId;/**/
    uint16_t skillSlot;/**/
    LolMatchHistoryMatchHistoryPosition position;/**/
    uint64_t timestamp;/**/
    std::vector<uint16_t> assistingParticipantIds;/**/
    std::string type;/**/
    std::string laneType;/**/
    std::string monsterType;/**/
    uint16_t participantId;/**/
    uint16_t victimId;/**/
    std::string buildingType;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryEvent& v) { 
    j["monsterSubType"] = v.monsterSubType;
    j["itemId"] = v.itemId;
    j["killerId"] = v.killerId;
    j["towerType"] = v.towerType;
    j["teamId"] = v.teamId;
    j["skillSlot"] = v.skillSlot;
    j["position"] = v.position;
    j["timestamp"] = v.timestamp;
    j["assistingParticipantIds"] = v.assistingParticipantIds;
    j["type"] = v.type;
    j["laneType"] = v.laneType;
    j["monsterType"] = v.monsterType;
    j["participantId"] = v.participantId;
    j["victimId"] = v.victimId;
    j["buildingType"] = v.buildingType;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryEvent& v) { 
    v.monsterSubType = j.at("monsterSubType").get<std::string>(); 
    v.itemId = j.at("itemId").get<uint16_t>(); 
    v.killerId = j.at("killerId").get<uint16_t>(); 
    v.towerType = j.at("towerType").get<std::string>(); 
    v.teamId = j.at("teamId").get<uint16_t>(); 
    v.skillSlot = j.at("skillSlot").get<uint16_t>(); 
    v.position = j.at("position").get<LolMatchHistoryMatchHistoryPosition>(); 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.assistingParticipantIds = j.at("assistingParticipantIds").get<std::vector<uint16_t>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.laneType = j.at("laneType").get<std::string>(); 
    v.monsterType = j.at("monsterType").get<std::string>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
    v.victimId = j.at("victimId").get<uint16_t>(); 
    v.buildingType = j.at("buildingType").get<std::string>(); 
  } 
  struct LolMatchHistoryMatchHistoryTeamBan { /**/ 
    uint16_t pickTurn;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryTeamBan& v) { 
    j["pickTurn"] = v.pickTurn;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryTeamBan& v) { 
    v.pickTurn = j.at("pickTurn").get<uint16_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryTeam { /**/ 
    std::vector<LolMatchHistoryMatchHistoryTeamBan> bans;/**/
    uint32_t baronKills;/**/
    uint16_t teamId;/**/
    bool firstDargon;/**/
    uint32_t vilemawKills;/**/
    uint32_t dominionVictoryScore;/**/
    bool firstInhibitor;/**/
    uint32_t towerKills;/**/
    uint32_t dragonKills;/**/
    std::string win;/**/
    bool firstTower;/**/
    bool firstBlood;/**/
    bool firstBaron;/**/
    uint32_t inhibitorKills;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryTeam& v) { 
    j["bans"] = v.bans;
    j["baronKills"] = v.baronKills;
    j["teamId"] = v.teamId;
    j["firstDargon"] = v.firstDargon;
    j["vilemawKills"] = v.vilemawKills;
    j["dominionVictoryScore"] = v.dominionVictoryScore;
    j["firstInhibitor"] = v.firstInhibitor;
    j["towerKills"] = v.towerKills;
    j["dragonKills"] = v.dragonKills;
    j["win"] = v.win;
    j["firstTower"] = v.firstTower;
    j["firstBlood"] = v.firstBlood;
    j["firstBaron"] = v.firstBaron;
    j["inhibitorKills"] = v.inhibitorKills;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryTeam& v) { 
    v.bans = j.at("bans").get<std::vector<LolMatchHistoryMatchHistoryTeamBan>>(); 
    v.baronKills = j.at("baronKills").get<uint32_t>(); 
    v.teamId = j.at("teamId").get<uint16_t>(); 
    v.firstDargon = j.at("firstDargon").get<bool>(); 
    v.vilemawKills = j.at("vilemawKills").get<uint32_t>(); 
    v.dominionVictoryScore = j.at("dominionVictoryScore").get<uint32_t>(); 
    v.firstInhibitor = j.at("firstInhibitor").get<bool>(); 
    v.towerKills = j.at("towerKills").get<uint32_t>(); 
    v.dragonKills = j.at("dragonKills").get<uint32_t>(); 
    v.win = j.at("win").get<std::string>(); 
    v.firstTower = j.at("firstTower").get<bool>(); 
    v.firstBlood = j.at("firstBlood").get<bool>(); 
    v.firstBaron = j.at("firstBaron").get<bool>(); 
    v.inhibitorKills = j.at("inhibitorKills").get<uint32_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryTimeline { /**/ 
    std::string lane;/**/
    std::map<std::string, double> goldPerMinDeltas;/**/
    std::map<std::string, double> xpDiffPerMinDeltas;/**/
    std::string role;/**/
    std::map<std::string, double> xpPerMinDeltas;/**/
    std::map<std::string, double> csDiffPerMinDeltas;/**/
    std::map<std::string, double> creepsPerMinDeltas;/**/
    uint16_t participantId;/**/
    std::map<std::string, double> damageTakenDiffPerMinDeltas;/**/
    std::map<std::string, double> damageTakenPerMinDeltas;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryTimeline& v) { 
    j["lane"] = v.lane;
    j["goldPerMinDeltas"] = v.goldPerMinDeltas;
    j["xpDiffPerMinDeltas"] = v.xpDiffPerMinDeltas;
    j["role"] = v.role;
    j["xpPerMinDeltas"] = v.xpPerMinDeltas;
    j["csDiffPerMinDeltas"] = v.csDiffPerMinDeltas;
    j["creepsPerMinDeltas"] = v.creepsPerMinDeltas;
    j["participantId"] = v.participantId;
    j["damageTakenDiffPerMinDeltas"] = v.damageTakenDiffPerMinDeltas;
    j["damageTakenPerMinDeltas"] = v.damageTakenPerMinDeltas;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryTimeline& v) { 
    v.lane = j.at("lane").get<std::string>(); 
    v.goldPerMinDeltas = j.at("goldPerMinDeltas").get<std::map<std::string, double>>(); 
    v.xpDiffPerMinDeltas = j.at("xpDiffPerMinDeltas").get<std::map<std::string, double>>(); 
    v.role = j.at("role").get<std::string>(); 
    v.xpPerMinDeltas = j.at("xpPerMinDeltas").get<std::map<std::string, double>>(); 
    v.csDiffPerMinDeltas = j.at("csDiffPerMinDeltas").get<std::map<std::string, double>>(); 
    v.creepsPerMinDeltas = j.at("creepsPerMinDeltas").get<std::map<std::string, double>>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
    v.damageTakenDiffPerMinDeltas = j.at("damageTakenDiffPerMinDeltas").get<std::map<std::string, double>>(); 
    v.damageTakenPerMinDeltas = j.at("damageTakenPerMinDeltas").get<std::map<std::string, double>>(); 
  } 
  struct LolMatchHistoryMatchHistoryParticipantStatistics { /**/ 
    int64_t perk4;/**/
    int64_t perk1;/**/
    int64_t totalHeal;/**/
    int64_t totalDamageTaken;/**/
    int64_t longestTimeSpentLiving;/**/
    int64_t largestMultiKill;/**/
    int64_t quadraKills;/**/
    int64_t playerScore2;/**/
    int64_t trueDamageDealtToChampions;/**/
    int64_t physicalDamageTaken;/**/
    bool firstInhibitorKill;/**/
    int64_t timeCCingOthers;/**/
    bool gameEndedInEarlySurrender;/**/
    bool firstTowerKill;/**/
    int64_t perk3Var1;/**/
    bool causedEarlySurrender;/**/
    int64_t perk0Var1;/**/
    int64_t perk5;/**/
    int64_t tripleKills;/**/
    int64_t totalMinionsKilled;/**/
    int64_t perk0Var3;/**/
    int64_t playerScore4;/**/
    bool win;/**/
    bool earlySurrenderAccomplice;/**/
    int64_t largestKillingSpree;/**/
    bool gameEndedInSurrender;/**/
    int64_t goldSpent;/**/
    int64_t perk1Var3;/**/
    int64_t magicDamageDealtToChampions;/**/
    int64_t perk3Var3;/**/
    int64_t perk5Var3;/**/
    bool firstInhibitorAssist;/**/
    int64_t sightWardsBoughtInGame;/**/
    int64_t visionWardsBoughtInGame;/**/
    uint16_t item2;/**/
    uint16_t item6;/**/
    bool teamEarlySurrendered;/**/
    int64_t totalTimeCrowdControlDealt;/**/
    int64_t inhibitorKills;/**/
    int64_t neutralMinionsKilled;/**/
    int64_t perk4Var1;/**/
    int64_t playerScore0;/**/
    int64_t turretKills;/**/
    int64_t playerScore6;/**/
    int64_t combatPlayerScore;/**/
    int64_t damageSelfMitigated;/**/
    int64_t perk4Var3;/**/
    int64_t perk2Var1;/**/
    int64_t perk1Var2;/**/
    int64_t magicalDamageTaken;/**/
    int64_t perk5Var1;/**/
    bool firstBloodAssist;/**/
    int64_t perk2Var2;/**/
    int64_t totalScoreRank;/**/
    int64_t perk2;/**/
    int64_t perk0;/**/
    int64_t killingSprees;/**/
    uint16_t item4;/**/
    int64_t trueDamageTaken;/**/
    int64_t totalDamageDealtToChampions;/**/
    int64_t goldEarned;/**/
    uint16_t item5;/**/
    int64_t perk5Var2;/**/
    int64_t neutralMinionsKilledEnemyJungle;/**/
    int64_t doubleKills;/**/
    int64_t playerScore8;/**/
    uint16_t item3;/**/
    int64_t playerScore7;/**/
    int64_t physicalDamageDealt;/**/
    int64_t damageDealtToTurrets;/**/
    int64_t assists;/**/
    int64_t totalDamageDealt;/**/
    uint16_t item0;/**/
    int64_t visionScore;/**/
    int64_t magicDamageDealt;/**/
    int64_t objectivePlayerScore;/**/
    uint16_t participantId;/**/
    int64_t physicalDamageDealtToChampions;/**/
    int64_t unrealKills;/**/
    int64_t perk0Var2;/**/
    int64_t wardsKilled;/**/
    bool firstBloodKill;/**/
    int64_t totalPlayerScore;/**/
    int64_t deaths;/**/
    int64_t playerScore5;/**/
    int64_t playerScore3;/**/
    int64_t wardsPlaced;/**/
    int64_t pentaKills;/**/
    uint16_t item1;/**/
    int64_t damageDealtToObjectives;/**/
    int64_t champLevel;/**/
    int64_t totalUnitsHealed;/**/
    int64_t perk2Var3;/**/
    int64_t perk3;/**/
    int64_t playerScore9;/**/
    int64_t neutralMinionsKilledTeamJungle;/**/
    int64_t largestCriticalStrike;/**/
    int64_t trueDamageDealt;/**/
    int64_t perkPrimaryStyle;/**/
    int64_t kills;/**/
    int64_t perk3Var2;/**/
    int64_t perk4Var2;/**/
    int64_t perkSubStyle;/**/
    int64_t perk1Var1;/**/
    bool firstTowerAssist;/**/
    int64_t playerScore1;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryParticipantStatistics& v) { 
    j["perk4"] = v.perk4;
    j["perk1"] = v.perk1;
    j["totalHeal"] = v.totalHeal;
    j["totalDamageTaken"] = v.totalDamageTaken;
    j["longestTimeSpentLiving"] = v.longestTimeSpentLiving;
    j["largestMultiKill"] = v.largestMultiKill;
    j["quadraKills"] = v.quadraKills;
    j["playerScore2"] = v.playerScore2;
    j["trueDamageDealtToChampions"] = v.trueDamageDealtToChampions;
    j["physicalDamageTaken"] = v.physicalDamageTaken;
    j["firstInhibitorKill"] = v.firstInhibitorKill;
    j["timeCCingOthers"] = v.timeCCingOthers;
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender;
    j["firstTowerKill"] = v.firstTowerKill;
    j["perk3Var1"] = v.perk3Var1;
    j["causedEarlySurrender"] = v.causedEarlySurrender;
    j["perk0Var1"] = v.perk0Var1;
    j["perk5"] = v.perk5;
    j["tripleKills"] = v.tripleKills;
    j["totalMinionsKilled"] = v.totalMinionsKilled;
    j["perk0Var3"] = v.perk0Var3;
    j["playerScore4"] = v.playerScore4;
    j["win"] = v.win;
    j["earlySurrenderAccomplice"] = v.earlySurrenderAccomplice;
    j["largestKillingSpree"] = v.largestKillingSpree;
    j["gameEndedInSurrender"] = v.gameEndedInSurrender;
    j["goldSpent"] = v.goldSpent;
    j["perk1Var3"] = v.perk1Var3;
    j["magicDamageDealtToChampions"] = v.magicDamageDealtToChampions;
    j["perk3Var3"] = v.perk3Var3;
    j["perk5Var3"] = v.perk5Var3;
    j["firstInhibitorAssist"] = v.firstInhibitorAssist;
    j["sightWardsBoughtInGame"] = v.sightWardsBoughtInGame;
    j["visionWardsBoughtInGame"] = v.visionWardsBoughtInGame;
    j["item2"] = v.item2;
    j["item6"] = v.item6;
    j["teamEarlySurrendered"] = v.teamEarlySurrendered;
    j["totalTimeCrowdControlDealt"] = v.totalTimeCrowdControlDealt;
    j["inhibitorKills"] = v.inhibitorKills;
    j["neutralMinionsKilled"] = v.neutralMinionsKilled;
    j["perk4Var1"] = v.perk4Var1;
    j["playerScore0"] = v.playerScore0;
    j["turretKills"] = v.turretKills;
    j["playerScore6"] = v.playerScore6;
    j["combatPlayerScore"] = v.combatPlayerScore;
    j["damageSelfMitigated"] = v.damageSelfMitigated;
    j["perk4Var3"] = v.perk4Var3;
    j["perk2Var1"] = v.perk2Var1;
    j["perk1Var2"] = v.perk1Var2;
    j["magicalDamageTaken"] = v.magicalDamageTaken;
    j["perk5Var1"] = v.perk5Var1;
    j["firstBloodAssist"] = v.firstBloodAssist;
    j["perk2Var2"] = v.perk2Var2;
    j["totalScoreRank"] = v.totalScoreRank;
    j["perk2"] = v.perk2;
    j["perk0"] = v.perk0;
    j["killingSprees"] = v.killingSprees;
    j["item4"] = v.item4;
    j["trueDamageTaken"] = v.trueDamageTaken;
    j["totalDamageDealtToChampions"] = v.totalDamageDealtToChampions;
    j["goldEarned"] = v.goldEarned;
    j["item5"] = v.item5;
    j["perk5Var2"] = v.perk5Var2;
    j["neutralMinionsKilledEnemyJungle"] = v.neutralMinionsKilledEnemyJungle;
    j["doubleKills"] = v.doubleKills;
    j["playerScore8"] = v.playerScore8;
    j["item3"] = v.item3;
    j["playerScore7"] = v.playerScore7;
    j["physicalDamageDealt"] = v.physicalDamageDealt;
    j["damageDealtToTurrets"] = v.damageDealtToTurrets;
    j["assists"] = v.assists;
    j["totalDamageDealt"] = v.totalDamageDealt;
    j["item0"] = v.item0;
    j["visionScore"] = v.visionScore;
    j["magicDamageDealt"] = v.magicDamageDealt;
    j["objectivePlayerScore"] = v.objectivePlayerScore;
    j["participantId"] = v.participantId;
    j["physicalDamageDealtToChampions"] = v.physicalDamageDealtToChampions;
    j["unrealKills"] = v.unrealKills;
    j["perk0Var2"] = v.perk0Var2;
    j["wardsKilled"] = v.wardsKilled;
    j["firstBloodKill"] = v.firstBloodKill;
    j["totalPlayerScore"] = v.totalPlayerScore;
    j["deaths"] = v.deaths;
    j["playerScore5"] = v.playerScore5;
    j["playerScore3"] = v.playerScore3;
    j["wardsPlaced"] = v.wardsPlaced;
    j["pentaKills"] = v.pentaKills;
    j["item1"] = v.item1;
    j["damageDealtToObjectives"] = v.damageDealtToObjectives;
    j["champLevel"] = v.champLevel;
    j["totalUnitsHealed"] = v.totalUnitsHealed;
    j["perk2Var3"] = v.perk2Var3;
    j["perk3"] = v.perk3;
    j["playerScore9"] = v.playerScore9;
    j["neutralMinionsKilledTeamJungle"] = v.neutralMinionsKilledTeamJungle;
    j["largestCriticalStrike"] = v.largestCriticalStrike;
    j["trueDamageDealt"] = v.trueDamageDealt;
    j["perkPrimaryStyle"] = v.perkPrimaryStyle;
    j["kills"] = v.kills;
    j["perk3Var2"] = v.perk3Var2;
    j["perk4Var2"] = v.perk4Var2;
    j["perkSubStyle"] = v.perkSubStyle;
    j["perk1Var1"] = v.perk1Var1;
    j["firstTowerAssist"] = v.firstTowerAssist;
    j["playerScore1"] = v.playerScore1;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryParticipantStatistics& v) { 
    v.perk4 = j.at("perk4").get<int64_t>(); 
    v.perk1 = j.at("perk1").get<int64_t>(); 
    v.totalHeal = j.at("totalHeal").get<int64_t>(); 
    v.totalDamageTaken = j.at("totalDamageTaken").get<int64_t>(); 
    v.longestTimeSpentLiving = j.at("longestTimeSpentLiving").get<int64_t>(); 
    v.largestMultiKill = j.at("largestMultiKill").get<int64_t>(); 
    v.quadraKills = j.at("quadraKills").get<int64_t>(); 
    v.playerScore2 = j.at("playerScore2").get<int64_t>(); 
    v.trueDamageDealtToChampions = j.at("trueDamageDealtToChampions").get<int64_t>(); 
    v.physicalDamageTaken = j.at("physicalDamageTaken").get<int64_t>(); 
    v.firstInhibitorKill = j.at("firstInhibitorKill").get<bool>(); 
    v.timeCCingOthers = j.at("timeCCingOthers").get<int64_t>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.firstTowerKill = j.at("firstTowerKill").get<bool>(); 
    v.perk3Var1 = j.at("perk3Var1").get<int64_t>(); 
    v.causedEarlySurrender = j.at("causedEarlySurrender").get<bool>(); 
    v.perk0Var1 = j.at("perk0Var1").get<int64_t>(); 
    v.perk5 = j.at("perk5").get<int64_t>(); 
    v.tripleKills = j.at("tripleKills").get<int64_t>(); 
    v.totalMinionsKilled = j.at("totalMinionsKilled").get<int64_t>(); 
    v.perk0Var3 = j.at("perk0Var3").get<int64_t>(); 
    v.playerScore4 = j.at("playerScore4").get<int64_t>(); 
    v.win = j.at("win").get<bool>(); 
    v.earlySurrenderAccomplice = j.at("earlySurrenderAccomplice").get<bool>(); 
    v.largestKillingSpree = j.at("largestKillingSpree").get<int64_t>(); 
    v.gameEndedInSurrender = j.at("gameEndedInSurrender").get<bool>(); 
    v.goldSpent = j.at("goldSpent").get<int64_t>(); 
    v.perk1Var3 = j.at("perk1Var3").get<int64_t>(); 
    v.magicDamageDealtToChampions = j.at("magicDamageDealtToChampions").get<int64_t>(); 
    v.perk3Var3 = j.at("perk3Var3").get<int64_t>(); 
    v.perk5Var3 = j.at("perk5Var3").get<int64_t>(); 
    v.firstInhibitorAssist = j.at("firstInhibitorAssist").get<bool>(); 
    v.sightWardsBoughtInGame = j.at("sightWardsBoughtInGame").get<int64_t>(); 
    v.visionWardsBoughtInGame = j.at("visionWardsBoughtInGame").get<int64_t>(); 
    v.item2 = j.at("item2").get<uint16_t>(); 
    v.item6 = j.at("item6").get<uint16_t>(); 
    v.teamEarlySurrendered = j.at("teamEarlySurrendered").get<bool>(); 
    v.totalTimeCrowdControlDealt = j.at("totalTimeCrowdControlDealt").get<int64_t>(); 
    v.inhibitorKills = j.at("inhibitorKills").get<int64_t>(); 
    v.neutralMinionsKilled = j.at("neutralMinionsKilled").get<int64_t>(); 
    v.perk4Var1 = j.at("perk4Var1").get<int64_t>(); 
    v.playerScore0 = j.at("playerScore0").get<int64_t>(); 
    v.turretKills = j.at("turretKills").get<int64_t>(); 
    v.playerScore6 = j.at("playerScore6").get<int64_t>(); 
    v.combatPlayerScore = j.at("combatPlayerScore").get<int64_t>(); 
    v.damageSelfMitigated = j.at("damageSelfMitigated").get<int64_t>(); 
    v.perk4Var3 = j.at("perk4Var3").get<int64_t>(); 
    v.perk2Var1 = j.at("perk2Var1").get<int64_t>(); 
    v.perk1Var2 = j.at("perk1Var2").get<int64_t>(); 
    v.magicalDamageTaken = j.at("magicalDamageTaken").get<int64_t>(); 
    v.perk5Var1 = j.at("perk5Var1").get<int64_t>(); 
    v.firstBloodAssist = j.at("firstBloodAssist").get<bool>(); 
    v.perk2Var2 = j.at("perk2Var2").get<int64_t>(); 
    v.totalScoreRank = j.at("totalScoreRank").get<int64_t>(); 
    v.perk2 = j.at("perk2").get<int64_t>(); 
    v.perk0 = j.at("perk0").get<int64_t>(); 
    v.killingSprees = j.at("killingSprees").get<int64_t>(); 
    v.item4 = j.at("item4").get<uint16_t>(); 
    v.trueDamageTaken = j.at("trueDamageTaken").get<int64_t>(); 
    v.totalDamageDealtToChampions = j.at("totalDamageDealtToChampions").get<int64_t>(); 
    v.goldEarned = j.at("goldEarned").get<int64_t>(); 
    v.item5 = j.at("item5").get<uint16_t>(); 
    v.perk5Var2 = j.at("perk5Var2").get<int64_t>(); 
    v.neutralMinionsKilledEnemyJungle = j.at("neutralMinionsKilledEnemyJungle").get<int64_t>(); 
    v.doubleKills = j.at("doubleKills").get<int64_t>(); 
    v.playerScore8 = j.at("playerScore8").get<int64_t>(); 
    v.item3 = j.at("item3").get<uint16_t>(); 
    v.playerScore7 = j.at("playerScore7").get<int64_t>(); 
    v.physicalDamageDealt = j.at("physicalDamageDealt").get<int64_t>(); 
    v.damageDealtToTurrets = j.at("damageDealtToTurrets").get<int64_t>(); 
    v.assists = j.at("assists").get<int64_t>(); 
    v.totalDamageDealt = j.at("totalDamageDealt").get<int64_t>(); 
    v.item0 = j.at("item0").get<uint16_t>(); 
    v.visionScore = j.at("visionScore").get<int64_t>(); 
    v.magicDamageDealt = j.at("magicDamageDealt").get<int64_t>(); 
    v.objectivePlayerScore = j.at("objectivePlayerScore").get<int64_t>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
    v.physicalDamageDealtToChampions = j.at("physicalDamageDealtToChampions").get<int64_t>(); 
    v.unrealKills = j.at("unrealKills").get<int64_t>(); 
    v.perk0Var2 = j.at("perk0Var2").get<int64_t>(); 
    v.wardsKilled = j.at("wardsKilled").get<int64_t>(); 
    v.firstBloodKill = j.at("firstBloodKill").get<bool>(); 
    v.totalPlayerScore = j.at("totalPlayerScore").get<int64_t>(); 
    v.deaths = j.at("deaths").get<int64_t>(); 
    v.playerScore5 = j.at("playerScore5").get<int64_t>(); 
    v.playerScore3 = j.at("playerScore3").get<int64_t>(); 
    v.wardsPlaced = j.at("wardsPlaced").get<int64_t>(); 
    v.pentaKills = j.at("pentaKills").get<int64_t>(); 
    v.item1 = j.at("item1").get<uint16_t>(); 
    v.damageDealtToObjectives = j.at("damageDealtToObjectives").get<int64_t>(); 
    v.champLevel = j.at("champLevel").get<int64_t>(); 
    v.totalUnitsHealed = j.at("totalUnitsHealed").get<int64_t>(); 
    v.perk2Var3 = j.at("perk2Var3").get<int64_t>(); 
    v.perk3 = j.at("perk3").get<int64_t>(); 
    v.playerScore9 = j.at("playerScore9").get<int64_t>(); 
    v.neutralMinionsKilledTeamJungle = j.at("neutralMinionsKilledTeamJungle").get<int64_t>(); 
    v.largestCriticalStrike = j.at("largestCriticalStrike").get<int64_t>(); 
    v.trueDamageDealt = j.at("trueDamageDealt").get<int64_t>(); 
    v.perkPrimaryStyle = j.at("perkPrimaryStyle").get<int64_t>(); 
    v.kills = j.at("kills").get<int64_t>(); 
    v.perk3Var2 = j.at("perk3Var2").get<int64_t>(); 
    v.perk4Var2 = j.at("perk4Var2").get<int64_t>(); 
    v.perkSubStyle = j.at("perkSubStyle").get<int64_t>(); 
    v.perk1Var1 = j.at("perk1Var1").get<int64_t>(); 
    v.firstTowerAssist = j.at("firstTowerAssist").get<bool>(); 
    v.playerScore1 = j.at("playerScore1").get<int64_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryParticipant { /**/ 
    std::string highestAchievedSeasonTier;/**/
    uint16_t spell2Id;/**/
    uint16_t teamId;/**/
    uint16_t participantId;/**/
    LolMatchHistoryMatchHistoryTimeline timeline;/**/
    uint16_t spell1Id;/**/
    LolMatchHistoryMatchHistoryParticipantStatistics stats;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryParticipant& v) { 
    j["highestAchievedSeasonTier"] = v.highestAchievedSeasonTier;
    j["spell2Id"] = v.spell2Id;
    j["teamId"] = v.teamId;
    j["participantId"] = v.participantId;
    j["timeline"] = v.timeline;
    j["spell1Id"] = v.spell1Id;
    j["stats"] = v.stats;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryParticipant& v) { 
    v.highestAchievedSeasonTier = j.at("highestAchievedSeasonTier").get<std::string>(); 
    v.spell2Id = j.at("spell2Id").get<uint16_t>(); 
    v.teamId = j.at("teamId").get<uint16_t>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
    v.timeline = j.at("timeline").get<LolMatchHistoryMatchHistoryTimeline>(); 
    v.spell1Id = j.at("spell1Id").get<uint16_t>(); 
    v.stats = j.at("stats").get<LolMatchHistoryMatchHistoryParticipantStatistics>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryParticipantIdentityPlayer { /**/ 
    int32_t profileIcon;/**/
    std::string currentPlatformId;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string platformId;/**/
    std::string summonerName;/**/
    std::string matchHistoryUri;/**/
    uint64_t currentAccountId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryParticipantIdentityPlayer& v) { 
    j["profileIcon"] = v.profileIcon;
    j["currentPlatformId"] = v.currentPlatformId;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["platformId"] = v.platformId;
    j["summonerName"] = v.summonerName;
    j["matchHistoryUri"] = v.matchHistoryUri;
    j["currentAccountId"] = v.currentAccountId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryParticipantIdentityPlayer& v) { 
    v.profileIcon = j.at("profileIcon").get<int32_t>(); 
    v.currentPlatformId = j.at("currentPlatformId").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.matchHistoryUri = j.at("matchHistoryUri").get<std::string>(); 
    v.currentAccountId = j.at("currentAccountId").get<uint64_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryParticipantIdentities { /**/ 
    LolMatchHistoryMatchHistoryParticipantIdentityPlayer player;/**/
    uint16_t participantId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryParticipantIdentities& v) { 
    j["player"] = v.player;
    j["participantId"] = v.participantId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryParticipantIdentities& v) { 
    v.player = j.at("player").get<LolMatchHistoryMatchHistoryParticipantIdentityPlayer>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryGame { /**/ 
    std::string gameType;/**/
    std::string platformId;/**/
    std::vector<LolMatchHistoryMatchHistoryTeam> teams;/**/
    std::string gameVersion;/**/
    uint64_t gameCreation;/**/
    uint32_t gameDuration;/**/
    int32_t queueId;/**/
    std::vector<LolMatchHistoryMatchHistoryParticipant> participants;/**/
    std::vector<LolMatchHistoryMatchHistoryParticipantIdentities> participantIdentities;/**/
    uint16_t seasonId;/**/
    std::string gameCreationDate;/**/
    uint64_t gameId;/**/
    uint16_t mapId;/**/
    std::string gameMode;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryGame& v) { 
    j["gameType"] = v.gameType;
    j["platformId"] = v.platformId;
    j["teams"] = v.teams;
    j["gameVersion"] = v.gameVersion;
    j["gameCreation"] = v.gameCreation;
    j["gameDuration"] = v.gameDuration;
    j["queueId"] = v.queueId;
    j["participants"] = v.participants;
    j["participantIdentities"] = v.participantIdentities;
    j["seasonId"] = v.seasonId;
    j["gameCreationDate"] = v.gameCreationDate;
    j["gameId"] = v.gameId;
    j["mapId"] = v.mapId;
    j["gameMode"] = v.gameMode;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryGame& v) { 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.teams = j.at("teams").get<std::vector<LolMatchHistoryMatchHistoryTeam>>(); 
    v.gameVersion = j.at("gameVersion").get<std::string>(); 
    v.gameCreation = j.at("gameCreation").get<uint64_t>(); 
    v.gameDuration = j.at("gameDuration").get<uint32_t>(); 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.participants = j.at("participants").get<std::vector<LolMatchHistoryMatchHistoryParticipant>>(); 
    v.participantIdentities = j.at("participantIdentities").get<std::vector<LolMatchHistoryMatchHistoryParticipantIdentities>>(); 
    v.seasonId = j.at("seasonId").get<uint16_t>(); 
    v.gameCreationDate = j.at("gameCreationDate").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.mapId = j.at("mapId").get<uint16_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
  } 
  struct LolMatchHistoryMatchHistoryGameList { /**/ 
    std::string gameBeginDate;/**/
    std::string gameEndDate;/**/
    uint64_t gameIndexBegin;/**/
    std::vector<LolMatchHistoryMatchHistoryGame> games;/**/
    uint64_t gameCount;/**/
    uint64_t gameIndexEnd;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryGameList& v) { 
    j["gameBeginDate"] = v.gameBeginDate;
    j["gameEndDate"] = v.gameEndDate;
    j["gameIndexBegin"] = v.gameIndexBegin;
    j["games"] = v.games;
    j["gameCount"] = v.gameCount;
    j["gameIndexEnd"] = v.gameIndexEnd;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryGameList& v) { 
    v.gameBeginDate = j.at("gameBeginDate").get<std::string>(); 
    v.gameEndDate = j.at("gameEndDate").get<std::string>(); 
    v.gameIndexBegin = j.at("gameIndexBegin").get<uint64_t>(); 
    v.games = j.at("games").get<std::vector<LolMatchHistoryMatchHistoryGame>>(); 
    v.gameCount = j.at("gameCount").get<uint64_t>(); 
    v.gameIndexEnd = j.at("gameIndexEnd").get<uint64_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryList { /**/ 
    LolMatchHistoryMatchHistoryGameList games;/**/
    uint64_t accountId;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryList& v) { 
    j["games"] = v.games;
    j["accountId"] = v.accountId;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryList& v) { 
    v.games = j.at("games").get<LolMatchHistoryMatchHistoryGameList>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct LolMatchHistoryMatchHistoryMastery { /**/ 
    uint16_t rank;/**/
    uint16_t masteryId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryMastery& v) { 
    j["rank"] = v.rank;
    j["masteryId"] = v.masteryId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryMastery& v) { 
    v.rank = j.at("rank").get<uint16_t>(); 
    v.masteryId = j.at("masteryId").get<uint16_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryParticipantFrame { /**/ 
    uint16_t level;/**/
    uint16_t minionsKilled;/**/
    int32_t totalGold;/**/
    uint32_t xp;/**/
    int32_t currentGold;/**/
    uint16_t teamScore;/**/
    uint16_t jungleMinionsKilled;/**/
    uint16_t participantId;/**/
    uint16_t dominionScore;/**/
    LolMatchHistoryMatchHistoryPosition position;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryParticipantFrame& v) { 
    j["level"] = v.level;
    j["minionsKilled"] = v.minionsKilled;
    j["totalGold"] = v.totalGold;
    j["xp"] = v.xp;
    j["currentGold"] = v.currentGold;
    j["teamScore"] = v.teamScore;
    j["jungleMinionsKilled"] = v.jungleMinionsKilled;
    j["participantId"] = v.participantId;
    j["dominionScore"] = v.dominionScore;
    j["position"] = v.position;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryParticipantFrame& v) { 
    v.level = j.at("level").get<uint16_t>(); 
    v.minionsKilled = j.at("minionsKilled").get<uint16_t>(); 
    v.totalGold = j.at("totalGold").get<int32_t>(); 
    v.xp = j.at("xp").get<uint32_t>(); 
    v.currentGold = j.at("currentGold").get<int32_t>(); 
    v.teamScore = j.at("teamScore").get<uint16_t>(); 
    v.jungleMinionsKilled = j.at("jungleMinionsKilled").get<uint16_t>(); 
    v.participantId = j.at("participantId").get<uint16_t>(); 
    v.dominionScore = j.at("dominionScore").get<uint16_t>(); 
    v.position = j.at("position").get<LolMatchHistoryMatchHistoryPosition>(); 
  } 
  struct LolMatchHistoryMatchHistoryPlayerChampMasteryDelta { /**/ 
    std::string grade;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPlayerChampMasteryDelta& v) { 
    j["grade"] = v.grade;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPlayerChampMasteryDelta& v) { 
    v.grade = j.at("grade").get<std::string>(); 
  } 
  struct LolMatchHistoryMatchHistoryPlayerLeagueDelta { /**/ 
    uint64_t timestamp;/**/
    uint64_t leaguePointDelta;/**/
    std::string reason;/**/
    std::vector<std::string> miniSeriesProgress;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPlayerLeagueDelta& v) { 
    j["timestamp"] = v.timestamp;
    j["leaguePointDelta"] = v.leaguePointDelta;
    j["reason"] = v.reason;
    j["miniSeriesProgress"] = v.miniSeriesProgress;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPlayerLeagueDelta& v) { 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.leaguePointDelta = j.at("leaguePointDelta").get<uint64_t>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.miniSeriesProgress = j.at("miniSeriesProgress").get<std::vector<std::string>>(); 
  } 
  struct LolMatchHistoryMatchHistoryPlayerPlatformDelta { /**/ 
    bool compensationModeEnabled;/**/
    uint64_t ipDelta;/**/
    uint64_t timestamp;/**/
    uint64_t xpDelta;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPlayerPlatformDelta& v) { 
    j["compensationModeEnabled"] = v.compensationModeEnabled;
    j["ipDelta"] = v.ipDelta;
    j["timestamp"] = v.timestamp;
    j["xpDelta"] = v.xpDelta;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPlayerPlatformDelta& v) { 
    v.compensationModeEnabled = j.at("compensationModeEnabled").get<bool>(); 
    v.ipDelta = j.at("ipDelta").get<uint64_t>(); 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.xpDelta = j.at("xpDelta").get<uint64_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryPlayerGameDelta { /**/ 
    uint64_t gameId;/**/
    LolMatchHistoryMatchHistoryPlayerChampMasteryDelta champMastery;/**/
    std::string gamePlatformId;/**/
    LolMatchHistoryMatchHistoryPlayerLeagueDelta leagueDelta;/**/
    LolMatchHistoryMatchHistoryPlayerPlatformDelta platformDelta;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPlayerGameDelta& v) { 
    j["gameId"] = v.gameId;
    j["champMastery"] = v.champMastery;
    j["gamePlatformId"] = v.gamePlatformId;
    j["leagueDelta"] = v.leagueDelta;
    j["platformDelta"] = v.platformDelta;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPlayerGameDelta& v) { 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.champMastery = j.at("champMastery").get<LolMatchHistoryMatchHistoryPlayerChampMasteryDelta>(); 
    v.gamePlatformId = j.at("gamePlatformId").get<std::string>(); 
    v.leagueDelta = j.at("leagueDelta").get<LolMatchHistoryMatchHistoryPlayerLeagueDelta>(); 
    v.platformDelta = j.at("platformDelta").get<LolMatchHistoryMatchHistoryPlayerPlatformDelta>(); 
  } 
  struct LolMatchHistoryMatchHistoryPlayerDelta { /**/ 
    uint64_t originalAccountId;/**/
    std::vector<LolMatchHistoryMatchHistoryPlayerGameDelta> deltas;/**/
    std::string originalPlatformId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryPlayerDelta& v) { 
    j["originalAccountId"] = v.originalAccountId;
    j["deltas"] = v.deltas;
    j["originalPlatformId"] = v.originalPlatformId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryPlayerDelta& v) { 
    v.originalAccountId = j.at("originalAccountId").get<uint64_t>(); 
    v.deltas = j.at("deltas").get<std::vector<LolMatchHistoryMatchHistoryPlayerGameDelta>>(); 
    v.originalPlatformId = j.at("originalPlatformId").get<std::string>(); 
  } 
  struct LolMatchHistoryMatchHistoryRune { /**/ 
    uint16_t rank;/**/
    uint16_t runeId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryRune& v) { 
    j["rank"] = v.rank;
    j["runeId"] = v.runeId;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryRune& v) { 
    v.rank = j.at("rank").get<uint16_t>(); 
    v.runeId = j.at("runeId").get<uint16_t>(); 
  } 
  struct LolMatchHistoryMatchHistoryTimelineFrame { /**/ 
    uint64_t timestamp;/**/
    std::map<std::string, LolMatchHistoryMatchHistoryParticipantFrame> participantFrames;/**/
    std::vector<LolMatchHistoryMatchHistoryEvent> events;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryTimelineFrame& v) { 
    j["timestamp"] = v.timestamp;
    j["participantFrames"] = v.participantFrames;
    j["events"] = v.events;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryTimelineFrame& v) { 
    v.timestamp = j.at("timestamp").get<uint64_t>(); 
    v.participantFrames = j.at("participantFrames").get<std::map<std::string, LolMatchHistoryMatchHistoryParticipantFrame>>(); 
    v.events = j.at("events").get<std::vector<LolMatchHistoryMatchHistoryEvent>>(); 
  } 
  struct LolMatchHistoryMatchHistoryTimelineFrames { /**/ 
    std::vector<LolMatchHistoryMatchHistoryTimelineFrame> frames;/**/
  };
  static void to_json(json& j, const LolMatchHistoryMatchHistoryTimelineFrames& v) { 
    j["frames"] = v.frames;
  }
  static void from_json(const json& j, LolMatchHistoryMatchHistoryTimelineFrames& v) { 
    v.frames = j.at("frames").get<std::vector<LolMatchHistoryMatchHistoryTimelineFrame>>(); 
  } 
  struct LolMatchHistoryRecentlyPlayedSummoner { /**/ 
    uint64_t summonerId;/**/
    uint64_t teamId;/**/
    std::string summonerName;/**/
    uint64_t gameId;/**/
    std::string gameCreationDate;/**/
    uint64_t championId;/**/
  };
  static void to_json(json& j, const LolMatchHistoryRecentlyPlayedSummoner& v) { 
    j["summonerId"] = v.summonerId;
    j["teamId"] = v.teamId;
    j["summonerName"] = v.summonerName;
    j["gameId"] = v.gameId;
    j["gameCreationDate"] = v.gameCreationDate;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolMatchHistoryRecentlyPlayedSummoner& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.teamId = j.at("teamId").get<uint64_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameCreationDate = j.at("gameCreationDate").get<std::string>(); 
    v.championId = j.at("championId").get<uint64_t>(); 
  } 
  struct LolMatchHistorySummonerIdAndName { /**/ 
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolMatchHistorySummonerIdAndName& v) { 
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolMatchHistorySummonerIdAndName& v) { 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolMatchmakingGameflowGameTypeConfig { /**/ 
    bool reroll;/**/
  };
  static void to_json(json& j, const LolMatchmakingGameflowGameTypeConfig& v) { 
    j["reroll"] = v.reroll;
  }
  static void from_json(const json& j, LolMatchmakingGameflowGameTypeConfig& v) { 
    v.reroll = j.at("reroll").get<bool>(); 
  } 
  struct LolMatchmakingGameflowQueue { /**/ 
    LolMatchmakingGameflowGameTypeConfig gameTypeConfig;/**/
  };
  static void to_json(json& j, const LolMatchmakingGameflowQueue& v) { 
    j["gameTypeConfig"] = v.gameTypeConfig;
  }
  static void from_json(const json& j, LolMatchmakingGameflowQueue& v) { 
    v.gameTypeConfig = j.at("gameTypeConfig").get<LolMatchmakingGameflowGameTypeConfig>(); 
  } 
  struct LolMatchmakingGameflowGameData { /**/ 
    LolMatchmakingGameflowQueue queue;/**/
  };
  static void to_json(json& j, const LolMatchmakingGameflowGameData& v) { 
    j["queue"] = v.queue;
  }
  static void from_json(const json& j, LolMatchmakingGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolMatchmakingGameflowQueue>(); 
  } 
  enum class LolMatchmakingMatchmakingDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingDodgeState& v) {
    switch(v) { 
    case LolMatchmakingMatchmakingDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolMatchmakingMatchmakingDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolMatchmakingMatchmakingDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolMatchmakingMatchmakingDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolMatchmakingMatchmakingDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolMatchmakingMatchmakingDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolMatchmakingMatchmakingDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolMatchmakingMatchmakingDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  struct LolMatchmakingGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolMatchmakingMatchmakingDodgeState state;/**/
  };
  static void to_json(json& j, const LolMatchmakingGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolMatchmakingGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolMatchmakingMatchmakingDodgeState>(); 
  } 
  enum class LolMatchmakingGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingGameflowPhase& v) {
    switch(v) { 
    case LolMatchmakingGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolMatchmakingGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolMatchmakingGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolMatchmakingGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolMatchmakingGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolMatchmakingGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolMatchmakingGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolMatchmakingGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolMatchmakingGameflowPhase::None_e:
      j = "None";
    break;
    case LolMatchmakingGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolMatchmakingGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolMatchmakingGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolMatchmakingGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolMatchmakingGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolMatchmakingGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolMatchmakingGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolMatchmakingGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolMatchmakingGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolMatchmakingGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolMatchmakingGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolMatchmakingGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolMatchmakingGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolMatchmakingGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolMatchmakingGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolMatchmakingGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolMatchmakingGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolMatchmakingGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolMatchmakingGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolMatchmakingGameflowSession { /**/ 
    LolMatchmakingGameflowPhase phase;/**/
    LolMatchmakingGameflowGameDodge gameDodge;/**/
    LolMatchmakingGameflowGameData gameData;/**/
  };
  static void to_json(json& j, const LolMatchmakingGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameDodge"] = v.gameDodge;
    j["gameData"] = v.gameData;
  }
  static void from_json(const json& j, LolMatchmakingGameflowSession& v) { 
    v.phase = j.at("phase").get<LolMatchmakingGameflowPhase>(); 
    v.gameDodge = j.at("gameDodge").get<LolMatchmakingGameflowGameDodge>(); 
    v.gameData = j.at("gameData").get<LolMatchmakingGameflowGameData>(); 
  } 
  enum class LolMatchmakingQueueCustomGameSpectatorPolicy { /**/ 
    AllAllowed_e = 3, /**/ 
    FriendsAllowed_e = 2, /**/ 
    LobbyAllowed_e = 1, /**/ 
    NotAllowed_e = 0, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingQueueCustomGameSpectatorPolicy& v) {
    switch(v) { 
    case LolMatchmakingQueueCustomGameSpectatorPolicy::AllAllowed_e:
      j = "AllAllowed";
    break;
    case LolMatchmakingQueueCustomGameSpectatorPolicy::FriendsAllowed_e:
      j = "FriendsAllowed";
    break;
    case LolMatchmakingQueueCustomGameSpectatorPolicy::LobbyAllowed_e:
      j = "LobbyAllowed";
    break;
    case LolMatchmakingQueueCustomGameSpectatorPolicy::NotAllowed_e:
      j = "NotAllowed";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingQueueCustomGameSpectatorPolicy& v) {
    auto s = j.get<std::string>(); 
    if(s == "AllAllowed") {
      v = LolMatchmakingQueueCustomGameSpectatorPolicy::AllAllowed_e;
      return;
    } 
    if(s == "FriendsAllowed") {
      v = LolMatchmakingQueueCustomGameSpectatorPolicy::FriendsAllowed_e;
      return;
    } 
    if(s == "LobbyAllowed") {
      v = LolMatchmakingQueueCustomGameSpectatorPolicy::LobbyAllowed_e;
      return;
    } 
    if(s == "NotAllowed") {
      v = LolMatchmakingQueueCustomGameSpectatorPolicy::NotAllowed_e;
      return;
    } 
  } 
  struct LolMatchmakingLobbyStatus { /**/ 
    int32_t queueId;/**/
    bool isSpectator;/**/
    std::optional<std::string> lobbyId;/**/
    bool allowedPlayAgain;/**/
    std::vector<uint64_t> memberSummonerIds;/**/
    bool isCustom;/**/
    bool isLeader;/**/
    LolMatchmakingQueueCustomGameSpectatorPolicy customSpectatorPolicy;/**/
  };
  static void to_json(json& j, const LolMatchmakingLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["isSpectator"] = v.isSpectator;
    j["lobbyId"] = v.lobbyId;
    j["allowedPlayAgain"] = v.allowedPlayAgain;
    j["memberSummonerIds"] = v.memberSummonerIds;
    j["isCustom"] = v.isCustom;
    j["isLeader"] = v.isLeader;
    j["customSpectatorPolicy"] = v.customSpectatorPolicy;
  }
  static void from_json(const json& j, LolMatchmakingLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.isSpectator = j.at("isSpectator").get<bool>(); 
    v.lobbyId = j.at("lobbyId").get<std::optional<std::string>>(); 
    v.allowedPlayAgain = j.at("allowedPlayAgain").get<bool>(); 
    v.memberSummonerIds = j.at("memberSummonerIds").get<std::vector<uint64_t>>(); 
    v.isCustom = j.at("isCustom").get<bool>(); 
    v.isLeader = j.at("isLeader").get<bool>(); 
    v.customSpectatorPolicy = j.at("customSpectatorPolicy").get<LolMatchmakingQueueCustomGameSpectatorPolicy>(); 
  } 
  enum class LolMatchmakingLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingLoginSessionState& v) {
    switch(v) { 
    case LolMatchmakingLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolMatchmakingLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolMatchmakingLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolMatchmakingLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolMatchmakingLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolMatchmakingLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolMatchmakingLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolMatchmakingLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolMatchmakingLoginSession { /**/ 
    bool connected;/**/
    LolMatchmakingLoginSessionState state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolMatchmakingLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolMatchmakingLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolMatchmakingLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolMatchmakingMatchmakingDodgeData { /**/ 
    LolMatchmakingMatchmakingDodgeState state;/**/
    uint64_t dodgerId;/**/
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingDodgeData& v) { 
    j["state"] = v.state;
    j["dodgerId"] = v.dodgerId;
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingDodgeData& v) { 
    v.state = j.at("state").get<LolMatchmakingMatchmakingDodgeState>(); 
    v.dodgerId = j.at("dodgerId").get<uint64_t>(); 
  } 
  enum class LolMatchmakingMatchmakingDodgeWarning { /**/ 
    None_e = 0, /**/ 
    Penalty_e = 2, /**/ 
    Warning_e = 1, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingDodgeWarning& v) {
    switch(v) { 
    case LolMatchmakingMatchmakingDodgeWarning::None_e:
      j = "None";
    break;
    case LolMatchmakingMatchmakingDodgeWarning::Penalty_e:
      j = "Penalty";
    break;
    case LolMatchmakingMatchmakingDodgeWarning::Warning_e:
      j = "Warning";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingDodgeWarning& v) {
    auto s = j.get<std::string>(); 
    if(s == "None") {
      v = LolMatchmakingMatchmakingDodgeWarning::None_e;
      return;
    } 
    if(s == "Penalty") {
      v = LolMatchmakingMatchmakingDodgeWarning::Penalty_e;
      return;
    } 
    if(s == "Warning") {
      v = LolMatchmakingMatchmakingDodgeWarning::Warning_e;
      return;
    } 
  } 
  struct LolMatchmakingMatchmakingLowPriorityData { /**/ 
    double penaltyTimeRemaining;/**/
    double penaltyTime;/**/
    std::vector<uint64_t> penalizedSummonerIds;/**/
    std::string bustedLeaverAccessToken;/**/
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingLowPriorityData& v) { 
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["penaltyTime"] = v.penaltyTime;
    j["penalizedSummonerIds"] = v.penalizedSummonerIds;
    j["bustedLeaverAccessToken"] = v.bustedLeaverAccessToken;
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingLowPriorityData& v) { 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.penaltyTime = j.at("penaltyTime").get<double>(); 
    v.penalizedSummonerIds = j.at("penalizedSummonerIds").get<std::vector<uint64_t>>(); 
    v.bustedLeaverAccessToken = j.at("bustedLeaverAccessToken").get<std::string>(); 
  } 
  enum class LolMatchmakingMatchmakingReadyCheckState { /**/ 
    Error_e = 5, /**/ 
    EveryoneReady_e = 2, /**/ 
    InProgress_e = 1, /**/ 
    Invalid_e = 0, /**/ 
    PartyNotReady_e = 4, /**/ 
    StrangerNotReady_e = 3, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingReadyCheckState& v) {
    switch(v) { 
    case LolMatchmakingMatchmakingReadyCheckState::Error_e:
      j = "Error";
    break;
    case LolMatchmakingMatchmakingReadyCheckState::EveryoneReady_e:
      j = "EveryoneReady";
    break;
    case LolMatchmakingMatchmakingReadyCheckState::InProgress_e:
      j = "InProgress";
    break;
    case LolMatchmakingMatchmakingReadyCheckState::Invalid_e:
      j = "Invalid";
    break;
    case LolMatchmakingMatchmakingReadyCheckState::PartyNotReady_e:
      j = "PartyNotReady";
    break;
    case LolMatchmakingMatchmakingReadyCheckState::StrangerNotReady_e:
      j = "StrangerNotReady";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingReadyCheckState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Error") {
      v = LolMatchmakingMatchmakingReadyCheckState::Error_e;
      return;
    } 
    if(s == "EveryoneReady") {
      v = LolMatchmakingMatchmakingReadyCheckState::EveryoneReady_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolMatchmakingMatchmakingReadyCheckState::InProgress_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolMatchmakingMatchmakingReadyCheckState::Invalid_e;
      return;
    } 
    if(s == "PartyNotReady") {
      v = LolMatchmakingMatchmakingReadyCheckState::PartyNotReady_e;
      return;
    } 
    if(s == "StrangerNotReady") {
      v = LolMatchmakingMatchmakingReadyCheckState::StrangerNotReady_e;
      return;
    } 
  } 
  enum class LolMatchmakingMatchmakingReadyCheckResponse { /**/ 
    Accepted_e = 49, /**/ 
    Declined_e = 50, /**/ 
    None_e = 48, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingReadyCheckResponse& v) {
    switch(v) { 
    case LolMatchmakingMatchmakingReadyCheckResponse::Accepted_e:
      j = "Accepted";
    break;
    case LolMatchmakingMatchmakingReadyCheckResponse::Declined_e:
      j = "Declined";
    break;
    case LolMatchmakingMatchmakingReadyCheckResponse::None_e:
      j = "None";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingReadyCheckResponse& v) {
    auto s = j.get<std::string>(); 
    if(s == "Accepted") {
      v = LolMatchmakingMatchmakingReadyCheckResponse::Accepted_e;
      return;
    } 
    if(s == "Declined") {
      v = LolMatchmakingMatchmakingReadyCheckResponse::Declined_e;
      return;
    } 
    if(s == "None") {
      v = LolMatchmakingMatchmakingReadyCheckResponse::None_e;
      return;
    } 
  } 
  struct LolMatchmakingMatchmakingReadyCheckResource { /**/ 
    LolMatchmakingMatchmakingReadyCheckState state;/**/
    std::vector<uint64_t> declinerIds;/**/
    bool suppressUx;/**/
    float timer;/**/
    LolMatchmakingMatchmakingReadyCheckResponse playerResponse;/**/
    LolMatchmakingMatchmakingDodgeWarning dodgeWarning;/**/
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingReadyCheckResource& v) { 
    j["state"] = v.state;
    j["declinerIds"] = v.declinerIds;
    j["suppressUx"] = v.suppressUx;
    j["timer"] = v.timer;
    j["playerResponse"] = v.playerResponse;
    j["dodgeWarning"] = v.dodgeWarning;
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingReadyCheckResource& v) { 
    v.state = j.at("state").get<LolMatchmakingMatchmakingReadyCheckState>(); 
    v.declinerIds = j.at("declinerIds").get<std::vector<uint64_t>>(); 
    v.suppressUx = j.at("suppressUx").get<bool>(); 
    v.timer = j.at("timer").get<float>(); 
    v.playerResponse = j.at("playerResponse").get<LolMatchmakingMatchmakingReadyCheckResponse>(); 
    v.dodgeWarning = j.at("dodgeWarning").get<LolMatchmakingMatchmakingDodgeWarning>(); 
  } 
  struct LolMatchmakingMatchmakingSearchErrorResource { /**/ 
    std::string errorType;/**/
    double penaltyTimeRemaining;/**/
    std::string message;/**/
    uint64_t penalizedSummonerId;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingSearchErrorResource& v) { 
    j["errorType"] = v.errorType;
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["message"] = v.message;
    j["penalizedSummonerId"] = v.penalizedSummonerId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingSearchErrorResource& v) { 
    v.errorType = j.at("errorType").get<std::string>(); 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.message = j.at("message").get<std::string>(); 
    v.penalizedSummonerId = j.at("penalizedSummonerId").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolMatchmakingMatchmakingSearchState { /**/ 
    AbandonedLowPriorityQueue_e = 1, /**/ 
    Canceled_e = 2, /**/ 
    Error_e = 5, /**/ 
    Found_e = 4, /**/ 
    Invalid_e = 0, /**/ 
    Searching_e = 3, /**/ 
    ServiceError_e = 6, /**/ 
    ServiceShutdown_e = 7, /**/ 
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingSearchState& v) {
    switch(v) { 
    case LolMatchmakingMatchmakingSearchState::AbandonedLowPriorityQueue_e:
      j = "AbandonedLowPriorityQueue";
    break;
    case LolMatchmakingMatchmakingSearchState::Canceled_e:
      j = "Canceled";
    break;
    case LolMatchmakingMatchmakingSearchState::Error_e:
      j = "Error";
    break;
    case LolMatchmakingMatchmakingSearchState::Found_e:
      j = "Found";
    break;
    case LolMatchmakingMatchmakingSearchState::Invalid_e:
      j = "Invalid";
    break;
    case LolMatchmakingMatchmakingSearchState::Searching_e:
      j = "Searching";
    break;
    case LolMatchmakingMatchmakingSearchState::ServiceError_e:
      j = "ServiceError";
    break;
    case LolMatchmakingMatchmakingSearchState::ServiceShutdown_e:
      j = "ServiceShutdown";
    break;
    };
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingSearchState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AbandonedLowPriorityQueue") {
      v = LolMatchmakingMatchmakingSearchState::AbandonedLowPriorityQueue_e;
      return;
    } 
    if(s == "Canceled") {
      v = LolMatchmakingMatchmakingSearchState::Canceled_e;
      return;
    } 
    if(s == "Error") {
      v = LolMatchmakingMatchmakingSearchState::Error_e;
      return;
    } 
    if(s == "Found") {
      v = LolMatchmakingMatchmakingSearchState::Found_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolMatchmakingMatchmakingSearchState::Invalid_e;
      return;
    } 
    if(s == "Searching") {
      v = LolMatchmakingMatchmakingSearchState::Searching_e;
      return;
    } 
    if(s == "ServiceError") {
      v = LolMatchmakingMatchmakingSearchState::ServiceError_e;
      return;
    } 
    if(s == "ServiceShutdown") {
      v = LolMatchmakingMatchmakingSearchState::ServiceShutdown_e;
      return;
    } 
  } 
  struct LolMatchmakingMatchmakingSearchResource { /**/ 
    int32_t queueId;/**/
    LolMatchmakingMatchmakingReadyCheckResource readyCheck;/**/
    std::string lobbyId;/**/
    LolMatchmakingMatchmakingLowPriorityData lowPriorityData;/**/
    float timeInQueue;/**/
    LolMatchmakingMatchmakingSearchState searchState;/**/
    bool isCurrentlyInQueue;/**/
    LolMatchmakingMatchmakingDodgeData dodgeData;/**/
    std::vector<LolMatchmakingMatchmakingSearchErrorResource> errors;/**/
    float estimatedQueueTime;/**/
  };
  static void to_json(json& j, const LolMatchmakingMatchmakingSearchResource& v) { 
    j["queueId"] = v.queueId;
    j["readyCheck"] = v.readyCheck;
    j["lobbyId"] = v.lobbyId;
    j["lowPriorityData"] = v.lowPriorityData;
    j["timeInQueue"] = v.timeInQueue;
    j["searchState"] = v.searchState;
    j["isCurrentlyInQueue"] = v.isCurrentlyInQueue;
    j["dodgeData"] = v.dodgeData;
    j["errors"] = v.errors;
    j["estimatedQueueTime"] = v.estimatedQueueTime;
  }
  static void from_json(const json& j, LolMatchmakingMatchmakingSearchResource& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.readyCheck = j.at("readyCheck").get<LolMatchmakingMatchmakingReadyCheckResource>(); 
    v.lobbyId = j.at("lobbyId").get<std::string>(); 
    v.lowPriorityData = j.at("lowPriorityData").get<LolMatchmakingMatchmakingLowPriorityData>(); 
    v.timeInQueue = j.at("timeInQueue").get<float>(); 
    v.searchState = j.at("searchState").get<LolMatchmakingMatchmakingSearchState>(); 
    v.isCurrentlyInQueue = j.at("isCurrentlyInQueue").get<bool>(); 
    v.dodgeData = j.at("dodgeData").get<LolMatchmakingMatchmakingDodgeData>(); 
    v.errors = j.at("errors").get<std::vector<LolMatchmakingMatchmakingSearchErrorResource>>(); 
    v.estimatedQueueTime = j.at("estimatedQueueTime").get<float>(); 
  } 
  struct LolMatchmakingPlayerStatus { /**/ 
    std::optional<LolMatchmakingLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolMatchmakingLobbyStatus> lastQueuedLobbyStatus;/**/
  };
  static void to_json(json& j, const LolMatchmakingPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
  }
  static void from_json(const json& j, LolMatchmakingPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolMatchmakingLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolMatchmakingLobbyStatus>>(); 
  } 
  struct LolMatchmakingQueue { /**/ 
    int32_t id;/**/
    bool isTeamBuilderManaged;/**/
  };
  static void to_json(json& j, const LolMatchmakingQueue& v) { 
    j["id"] = v.id;
    j["isTeamBuilderManaged"] = v.isTeamBuilderManaged;
  }
  static void from_json(const json& j, LolMatchmakingQueue& v) { 
    v.id = j.at("id").get<int32_t>(); 
    v.isTeamBuilderManaged = j.at("isTeamBuilderManaged").get<bool>(); 
  } 
  struct LolMissionsCollectionsRental { /**/ 
    bool rented;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsRental& v) { 
    j["rented"] = v.rented;
  }
  static void from_json(const json& j, LolMissionsCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
  } 
  struct LolMissionsCollectionsOwnership { /**/ 
    LolMissionsCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolMissionsCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolMissionsCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolMissionsCollectionsChampionSkin { /**/ 
    LolMissionsCollectionsOwnership ownership;/**/
    int32_t id;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsChampionSkin& v) { 
    j["ownership"] = v.ownership;
    j["id"] = v.id;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolMissionsCollectionsChampionSkin& v) { 
    v.ownership = j.at("ownership").get<LolMissionsCollectionsOwnership>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolMissionsCollectionsChampion { /**/ 
    LolMissionsCollectionsOwnership ownership;/**/
    std::vector<LolMissionsCollectionsChampionSkin> skins;/**/
    bool freeToPlay;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsChampion& v) { 
    j["ownership"] = v.ownership;
    j["skins"] = v.skins;
    j["freeToPlay"] = v.freeToPlay;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolMissionsCollectionsChampion& v) { 
    v.ownership = j.at("ownership").get<LolMissionsCollectionsOwnership>(); 
    v.skins = j.at("skins").get<std::vector<LolMissionsCollectionsChampionSkin>>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolMissionsCollectionsSummoner { /**/ 
    int32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsSummoner& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolMissionsCollectionsSummoner& v) { 
    v.summonerLevel = j.at("summonerLevel").get<int32_t>(); 
  } 
  struct LolMissionsCollectionsSummonerIcons { /**/ 
    std::vector<int32_t> icons;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsSummonerIcons& v) { 
    j["icons"] = v.icons;
  }
  static void from_json(const json& j, LolMissionsCollectionsSummonerIcons& v) { 
    v.icons = j.at("icons").get<std::vector<int32_t>>(); 
  } 
  struct LolMissionsCollectionsWardSkin { /**/ 
    LolMissionsCollectionsOwnership ownership;/**/
    int64_t id;/**/
  };
  static void to_json(json& j, const LolMissionsCollectionsWardSkin& v) { 
    j["ownership"] = v.ownership;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolMissionsCollectionsWardSkin& v) { 
    v.ownership = j.at("ownership").get<LolMissionsCollectionsOwnership>(); 
    v.id = j.at("id").get<int64_t>(); 
  } 
  struct LolMissionsEntitlementsToken { /**/ 
    std::vector<std::string> entitlements;/**/
  };
  static void to_json(json& j, const LolMissionsEntitlementsToken& v) { 
    j["entitlements"] = v.entitlements;
  }
  static void from_json(const json& j, LolMissionsEntitlementsToken& v) { 
    v.entitlements = j.at("entitlements").get<std::vector<std::string>>(); 
  } 
  enum class LolMissionsGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolMissionsGameflowPhase& v) {
    switch(v) { 
    case LolMissionsGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolMissionsGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolMissionsGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolMissionsGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolMissionsGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolMissionsGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolMissionsGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolMissionsGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolMissionsGameflowPhase::None_e:
      j = "None";
    break;
    case LolMissionsGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolMissionsGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolMissionsGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolMissionsGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolMissionsGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolMissionsGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolMissionsGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolMissionsGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolMissionsGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolMissionsGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolMissionsGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolMissionsGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolMissionsGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolMissionsGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolMissionsGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolMissionsGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolMissionsGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolMissionsGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolMissionsGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolMissionsGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolMissionsGameflowSession { /**/ 
    LolMissionsGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolMissionsGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolMissionsGameflowSession& v) { 
    v.phase = j.at("phase").get<LolMissionsGameflowPhase>(); 
  } 
  struct LolMissionsLoginSession { /**/ 
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const LolMissionsLoginSession& v) { 
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, LolMissionsLoginSession& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct LolMissionsMissionsNotificationResource { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    bool critical;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string created;/**/
    std::string expires;/**/
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const LolMissionsMissionsNotificationResource& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["data"] = v.data;
    j["type"] = v.type;
    j["created"] = v.created;
    j["expires"] = v.expires;
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, LolMissionsMissionsNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct LolMissionsPluginRegionLocaleChangedEvent { /**/ 
    std::string locale;/**/
  };
  static void to_json(json& j, const LolMissionsPluginRegionLocaleChangedEvent& v) { 
    j["locale"] = v.locale;
  }
  static void from_json(const json& j, LolMissionsPluginRegionLocaleChangedEvent& v) { 
    v.locale = j.at("locale").get<std::string>(); 
  } 
  struct LolPerksChampSelectAction { /**/ 
    std::string type;/**/
    int64_t actorCellId;/**/
    bool completed;/**/
    int64_t id;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectAction& v) { 
    j["type"] = v.type;
    j["actorCellId"] = v.actorCellId;
    j["completed"] = v.completed;
    j["id"] = v.id;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolPerksChampSelectAction& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.actorCellId = j.at("actorCellId").get<int64_t>(); 
    v.completed = j.at("completed").get<bool>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct LolPerksChampSelectBannedChampions { /**/ 
    std::vector<int32_t> theirTeamBans;/**/
    int32_t numBans;/**/
    std::vector<int32_t> myTeamBans;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectBannedChampions& v) { 
    j["theirTeamBans"] = v.theirTeamBans;
    j["numBans"] = v.numBans;
    j["myTeamBans"] = v.myTeamBans;
  }
  static void from_json(const json& j, LolPerksChampSelectBannedChampions& v) { 
    v.theirTeamBans = j.at("theirTeamBans").get<std::vector<int32_t>>(); 
    v.numBans = j.at("numBans").get<int32_t>(); 
    v.myTeamBans = j.at("myTeamBans").get<std::vector<int32_t>>(); 
  } 
  struct LolPerksChampSelectChatRoomDetails { /**/ 
    std::optional<std::string> chatRoomPassword;/**/
    std::string chatRoomName;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectChatRoomDetails& v) { 
    j["chatRoomPassword"] = v.chatRoomPassword;
    j["chatRoomName"] = v.chatRoomName;
  }
  static void from_json(const json& j, LolPerksChampSelectChatRoomDetails& v) { 
    v.chatRoomPassword = j.at("chatRoomPassword").get<std::optional<std::string>>(); 
    v.chatRoomName = j.at("chatRoomName").get<std::string>(); 
  } 
  struct LolPerksChampSelectMySelection { /**/ 
    std::optional<int64_t> wardSkinId;/**/
    std::optional<uint64_t> spell1Id;/**/
    std::optional<int32_t> selectedSkinId;/**/
    std::optional<uint64_t> spell2Id;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectMySelection& v) { 
    j["wardSkinId"] = v.wardSkinId;
    j["spell1Id"] = v.spell1Id;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
  }
  static void from_json(const json& j, LolPerksChampSelectMySelection& v) { 
    v.wardSkinId = j.at("wardSkinId").get<std::optional<int64_t>>(); 
    v.spell1Id = j.at("spell1Id").get<std::optional<uint64_t>>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<std::optional<int32_t>>(); 
    v.spell2Id = j.at("spell2Id").get<std::optional<uint64_t>>(); 
  } 
  struct LolPerksChampSelectPlayerSelection { /**/ 
    std::string assignedPosition;/**/
    std::string playerType;/**/
    int32_t championPickIntent;/**/
    uint64_t spell1Id;/**/
    int32_t championId;/**/
    int64_t wardSkinId;/**/
    int32_t team;/**/
    uint64_t summonerId;/**/
    int32_t selectedSkinId;/**/
    uint64_t spell2Id;/**/
    int64_t cellId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectPlayerSelection& v) { 
    j["assignedPosition"] = v.assignedPosition;
    j["playerType"] = v.playerType;
    j["championPickIntent"] = v.championPickIntent;
    j["spell1Id"] = v.spell1Id;
    j["championId"] = v.championId;
    j["wardSkinId"] = v.wardSkinId;
    j["team"] = v.team;
    j["summonerId"] = v.summonerId;
    j["selectedSkinId"] = v.selectedSkinId;
    j["spell2Id"] = v.spell2Id;
    j["cellId"] = v.cellId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolPerksChampSelectPlayerSelection& v) { 
    v.assignedPosition = j.at("assignedPosition").get<std::string>(); 
    v.playerType = j.at("playerType").get<std::string>(); 
    v.championPickIntent = j.at("championPickIntent").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.wardSkinId = j.at("wardSkinId").get<int64_t>(); 
    v.team = j.at("team").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.selectedSkinId = j.at("selectedSkinId").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<uint64_t>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  enum class LolPerksChampSelectTradeState { /**/ 
    AVAILABLE_e = 1, /**/ 
    BUSY_e = 2, /**/ 
    INVALID_e = 3, /**/ 
    RECEIVED_e = 4, /**/ 
    SENT_e = 5, /**/ 
  };
  static void to_json(json& j, const LolPerksChampSelectTradeState& v) {
    switch(v) { 
    case LolPerksChampSelectTradeState::AVAILABLE_e:
      j = "AVAILABLE";
    break;
    case LolPerksChampSelectTradeState::BUSY_e:
      j = "BUSY";
    break;
    case LolPerksChampSelectTradeState::INVALID_e:
      j = "INVALID";
    break;
    case LolPerksChampSelectTradeState::RECEIVED_e:
      j = "RECEIVED";
    break;
    case LolPerksChampSelectTradeState::SENT_e:
      j = "SENT";
    break;
    };
  }
  static void from_json(const json& j, LolPerksChampSelectTradeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "AVAILABLE") {
      v = LolPerksChampSelectTradeState::AVAILABLE_e;
      return;
    } 
    if(s == "BUSY") {
      v = LolPerksChampSelectTradeState::BUSY_e;
      return;
    } 
    if(s == "INVALID") {
      v = LolPerksChampSelectTradeState::INVALID_e;
      return;
    } 
    if(s == "RECEIVED") {
      v = LolPerksChampSelectTradeState::RECEIVED_e;
      return;
    } 
    if(s == "SENT") {
      v = LolPerksChampSelectTradeState::SENT_e;
      return;
    } 
  } 
  struct LolPerksChampSelectTradeContract { /**/ 
    LolPerksChampSelectTradeState state;/**/
    int64_t cellId;/**/
    int64_t id;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectTradeContract& v) { 
    j["state"] = v.state;
    j["cellId"] = v.cellId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolPerksChampSelectTradeContract& v) { 
    v.state = j.at("state").get<LolPerksChampSelectTradeState>(); 
    v.cellId = j.at("cellId").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
  } 
  struct LolPerksChampSelectTimer { /**/ 
    int64_t adjustedTimeLeftInPhase;/**/
    bool isInfinite;/**/
    uint64_t internalNowInEpochMs;/**/
    int64_t timeLeftInPhase;/**/
    int64_t totalTimeInPhase;/**/
    std::string phase;/**/
    int32_t adjustedTimeLeftInPhaseInSec;/**/
    int32_t timeLeftInPhaseInSec;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectTimer& v) { 
    j["adjustedTimeLeftInPhase"] = v.adjustedTimeLeftInPhase;
    j["isInfinite"] = v.isInfinite;
    j["internalNowInEpochMs"] = v.internalNowInEpochMs;
    j["timeLeftInPhase"] = v.timeLeftInPhase;
    j["totalTimeInPhase"] = v.totalTimeInPhase;
    j["phase"] = v.phase;
    j["adjustedTimeLeftInPhaseInSec"] = v.adjustedTimeLeftInPhaseInSec;
    j["timeLeftInPhaseInSec"] = v.timeLeftInPhaseInSec;
  }
  static void from_json(const json& j, LolPerksChampSelectTimer& v) { 
    v.adjustedTimeLeftInPhase = j.at("adjustedTimeLeftInPhase").get<int64_t>(); 
    v.isInfinite = j.at("isInfinite").get<bool>(); 
    v.internalNowInEpochMs = j.at("internalNowInEpochMs").get<uint64_t>(); 
    v.timeLeftInPhase = j.at("timeLeftInPhase").get<int64_t>(); 
    v.totalTimeInPhase = j.at("totalTimeInPhase").get<int64_t>(); 
    v.phase = j.at("phase").get<std::string>(); 
    v.adjustedTimeLeftInPhaseInSec = j.at("adjustedTimeLeftInPhaseInSec").get<int32_t>(); 
    v.timeLeftInPhaseInSec = j.at("timeLeftInPhaseInSec").get<int32_t>(); 
  } 
  struct LolPerksChampSelectSession { /**/ 
    std::vector<LolPerksChampSelectTradeContract> trades;/**/
    std::vector<LolPerksChampSelectPlayerSelection> theirTeam;/**/
    bool isSpectating;/**/
    std::vector<json> actions;/**/
    int64_t localPlayerCellId;/**/
    LolPerksChampSelectTimer timer;/**/
    LolPerksChampSelectChatRoomDetails chatDetails;/**/
    std::vector<LolPerksChampSelectPlayerSelection> myTeam;/**/
    LolPerksChampSelectBannedChampions bans;/**/
  };
  static void to_json(json& j, const LolPerksChampSelectSession& v) { 
    j["trades"] = v.trades;
    j["theirTeam"] = v.theirTeam;
    j["isSpectating"] = v.isSpectating;
    j["actions"] = v.actions;
    j["localPlayerCellId"] = v.localPlayerCellId;
    j["timer"] = v.timer;
    j["chatDetails"] = v.chatDetails;
    j["myTeam"] = v.myTeam;
    j["bans"] = v.bans;
  }
  static void from_json(const json& j, LolPerksChampSelectSession& v) { 
    v.trades = j.at("trades").get<std::vector<LolPerksChampSelectTradeContract>>(); 
    v.theirTeam = j.at("theirTeam").get<std::vector<LolPerksChampSelectPlayerSelection>>(); 
    v.isSpectating = j.at("isSpectating").get<bool>(); 
    v.actions = j.at("actions").get<std::vector<json>>(); 
    v.localPlayerCellId = j.at("localPlayerCellId").get<int64_t>(); 
    v.timer = j.at("timer").get<LolPerksChampSelectTimer>(); 
    v.chatDetails = j.at("chatDetails").get<LolPerksChampSelectChatRoomDetails>(); 
    v.myTeam = j.at("myTeam").get<std::vector<LolPerksChampSelectPlayerSelection>>(); 
    v.bans = j.at("bans").get<LolPerksChampSelectBannedChampions>(); 
  } 
  struct LolPerksChampionPreferredStyle { /**/ 
    int32_t style;/**/
    std::string championName;/**/
    uint32_t championId;/**/
  };
  static void to_json(json& j, const LolPerksChampionPreferredStyle& v) { 
    j["style"] = v.style;
    j["championName"] = v.championName;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, LolPerksChampionPreferredStyle& v) { 
    v.style = j.at("style").get<int32_t>(); 
    v.championName = j.at("championName").get<std::string>(); 
    v.championId = j.at("championId").get<uint32_t>(); 
  } 
  struct LolPerksCollectionsRune { /**/ 
    uint32_t runeSlotId;/**/
    uint32_t runeId;/**/
  };
  static void to_json(json& j, const LolPerksCollectionsRune& v) { 
    j["runeSlotId"] = v.runeSlotId;
    j["runeId"] = v.runeId;
  }
  static void from_json(const json& j, LolPerksCollectionsRune& v) { 
    v.runeSlotId = j.at("runeSlotId").get<uint32_t>(); 
    v.runeId = j.at("runeId").get<uint32_t>(); 
  } 
  struct LolPerksCollectionsRunePage { /**/ 
    std::vector<LolPerksCollectionsRune> runes;/**/
    bool current;/**/
    uint32_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolPerksCollectionsRunePage& v) { 
    j["runes"] = v.runes;
    j["current"] = v.current;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolPerksCollectionsRunePage& v) { 
    v.runes = j.at("runes").get<std::vector<LolPerksCollectionsRune>>(); 
    v.current = j.at("current").get<bool>(); 
    v.id = j.at("id").get<uint32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolPerksCollectionsRuneBook { /**/ 
    uint64_t summonerId;/**/
    std::vector<LolPerksCollectionsRunePage> pages;/**/
  };
  static void to_json(json& j, const LolPerksCollectionsRuneBook& v) { 
    j["summonerId"] = v.summonerId;
    j["pages"] = v.pages;
  }
  static void from_json(const json& j, LolPerksCollectionsRuneBook& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.pages = j.at("pages").get<std::vector<LolPerksCollectionsRunePage>>(); 
  } 
  enum class LolPerksCustomizationLimits { /**/ 
    CanSelectKeystones_e = 2, /**/ 
    CanSelectPages_e = 1, /**/ 
    CanSelectPrimaries_e = 4, /**/ 
    CanSelectSplash_e = 8, /**/ 
    CanUseAdvancedStyles_e = 16, /**/ 
    Locked_e = 0, /**/ 
  };
  static void to_json(json& j, const LolPerksCustomizationLimits& v) {
    switch(v) { 
    case LolPerksCustomizationLimits::CanSelectKeystones_e:
      j = "CanSelectKeystones";
    break;
    case LolPerksCustomizationLimits::CanSelectPages_e:
      j = "CanSelectPages";
    break;
    case LolPerksCustomizationLimits::CanSelectPrimaries_e:
      j = "CanSelectPrimaries";
    break;
    case LolPerksCustomizationLimits::CanSelectSplash_e:
      j = "CanSelectSplash";
    break;
    case LolPerksCustomizationLimits::CanUseAdvancedStyles_e:
      j = "CanUseAdvancedStyles";
    break;
    case LolPerksCustomizationLimits::Locked_e:
      j = "Locked";
    break;
    };
  }
  static void from_json(const json& j, LolPerksCustomizationLimits& v) {
    auto s = j.get<std::string>(); 
    if(s == "CanSelectKeystones") {
      v = LolPerksCustomizationLimits::CanSelectKeystones_e;
      return;
    } 
    if(s == "CanSelectPages") {
      v = LolPerksCustomizationLimits::CanSelectPages_e;
      return;
    } 
    if(s == "CanSelectPrimaries") {
      v = LolPerksCustomizationLimits::CanSelectPrimaries_e;
      return;
    } 
    if(s == "CanSelectSplash") {
      v = LolPerksCustomizationLimits::CanSelectSplash_e;
      return;
    } 
    if(s == "CanUseAdvancedStyles") {
      v = LolPerksCustomizationLimits::CanUseAdvancedStyles_e;
      return;
    } 
    if(s == "Locked") {
      v = LolPerksCustomizationLimits::Locked_e;
      return;
    } 
  } 
  struct LolPerksDisabledPerksResource { /**/ 
    std::vector<int32_t> disabledPerks;/**/
  };
  static void to_json(json& j, const LolPerksDisabledPerksResource& v) { 
    j["disabledPerks"] = v.disabledPerks;
  }
  static void from_json(const json& j, LolPerksDisabledPerksResource& v) { 
    v.disabledPerks = j.at("disabledPerks").get<std::vector<int32_t>>(); 
  } 
  struct LolPerksGameCustomizationDTO { /**/ 
    std::string category;/**/
    uint64_t queueType;/**/
    std::string content;/**/
  };
  static void to_json(json& j, const LolPerksGameCustomizationDTO& v) { 
    j["category"] = v.category;
    j["queueType"] = v.queueType;
    j["content"] = v.content;
  }
  static void from_json(const json& j, LolPerksGameCustomizationDTO& v) { 
    v.category = j.at("category").get<std::string>(); 
    v.queueType = j.at("queueType").get<uint64_t>(); 
    v.content = j.at("content").get<std::string>(); 
  } 
  struct LolPerksQueue { /**/ 
    int32_t id;/**/
  };
  static void to_json(json& j, const LolPerksQueue& v) { 
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolPerksQueue& v) { 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct LolPerksGameflowGameData { /**/ 
    LolPerksQueue queue;/**/
    bool isCustomGame;/**/
  };
  static void to_json(json& j, const LolPerksGameflowGameData& v) { 
    j["queue"] = v.queue;
    j["isCustomGame"] = v.isCustomGame;
  }
  static void from_json(const json& j, LolPerksGameflowGameData& v) { 
    v.queue = j.at("queue").get<LolPerksQueue>(); 
    v.isCustomGame = j.at("isCustomGame").get<bool>(); 
  } 
  enum class LolPerksGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolPerksGameflowPhase& v) {
    switch(v) { 
    case LolPerksGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolPerksGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolPerksGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolPerksGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolPerksGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolPerksGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolPerksGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolPerksGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolPerksGameflowPhase::None_e:
      j = "None";
    break;
    case LolPerksGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolPerksGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolPerksGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolPerksGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolPerksGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolPerksGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolPerksGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolPerksGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolPerksGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolPerksGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolPerksGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolPerksGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolPerksGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolPerksGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolPerksGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolPerksGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolPerksGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolPerksGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolPerksGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolPerksGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolPerksGameflowSession { /**/ 
    LolPerksGameflowPhase phase;/**/
    LolPerksGameflowGameData gameData;/**/
  };
  static void to_json(json& j, const LolPerksGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameData"] = v.gameData;
  }
  static void from_json(const json& j, LolPerksGameflowSession& v) { 
    v.phase = j.at("phase").get<LolPerksGameflowPhase>(); 
    v.gameData = j.at("gameData").get<LolPerksGameflowGameData>(); 
  } 
  struct LolPerksGetGameCustomizationDTO { /**/ 
    std::string queueType;/**/
  };
  static void to_json(json& j, const LolPerksGetGameCustomizationDTO& v) { 
    j["queueType"] = v.queueType;
  }
  static void from_json(const json& j, LolPerksGetGameCustomizationDTO& v) { 
    v.queueType = j.at("queueType").get<std::string>(); 
  } 
  struct LolPerksGetResultFromServiceDTO { /**/ 
    std::string error;/**/
    std::string result;/**/
  };
  static void to_json(json& j, const LolPerksGetResultFromServiceDTO& v) { 
    j["error"] = v.error;
    j["result"] = v.result;
  }
  static void from_json(const json& j, LolPerksGetResultFromServiceDTO& v) { 
    v.error = j.at("error").get<std::string>(); 
    v.result = j.at("result").get<std::string>(); 
  } 
  enum class LolPerksLoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolPerksLoginSessionState& v) {
    switch(v) { 
    case LolPerksLoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolPerksLoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolPerksLoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolPerksLoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolPerksLoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolPerksLoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolPerksLoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolPerksLoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolPerksLoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolPerksLoginSession { /**/ 
    LolPerksLoginSessionState state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolPerksLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolPerksLoginSession& v) { 
    v.state = j.at("state").get<LolPerksLoginSessionState>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolPerksPerkGDSResource { /**/ 
    std::string shortDesc;/**/
    int32_t id;/**/
    std::string name;/**/
    std::string iconPath;/**/
    std::string tooltip;/**/
    std::string longDesc;/**/
  };
  static void to_json(json& j, const LolPerksPerkGDSResource& v) { 
    j["shortDesc"] = v.shortDesc;
    j["id"] = v.id;
    j["name"] = v.name;
    j["iconPath"] = v.iconPath;
    j["tooltip"] = v.tooltip;
    j["longDesc"] = v.longDesc;
  }
  static void from_json(const json& j, LolPerksPerkGDSResource& v) { 
    v.shortDesc = j.at("shortDesc").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.iconPath = j.at("iconPath").get<std::string>(); 
    v.tooltip = j.at("tooltip").get<std::string>(); 
    v.longDesc = j.at("longDesc").get<std::string>(); 
  } 
  struct LolPerksPerkPageResource { /**/ 
    bool current;/**/
    bool isDeletable;/**/
    int32_t id;/**/
    bool isActive;/**/
    int32_t order;/**/
    std::string name;/**/
    bool isEditable;/**/
    bool isValid;/**/
    int32_t subStyleId;/**/
    int32_t formatVersion;/**/
    std::vector<int32_t> selectedPerkIds;/**/
    int32_t primaryStyleId;/**/
  };
  static void to_json(json& j, const LolPerksPerkPageResource& v) { 
    j["current"] = v.current;
    j["isDeletable"] = v.isDeletable;
    j["id"] = v.id;
    j["isActive"] = v.isActive;
    j["order"] = v.order;
    j["name"] = v.name;
    j["isEditable"] = v.isEditable;
    j["isValid"] = v.isValid;
    j["subStyleId"] = v.subStyleId;
    j["formatVersion"] = v.formatVersion;
    j["selectedPerkIds"] = v.selectedPerkIds;
    j["primaryStyleId"] = v.primaryStyleId;
  }
  static void from_json(const json& j, LolPerksPerkPageResource& v) { 
    v.current = j.at("current").get<bool>(); 
    v.isDeletable = j.at("isDeletable").get<bool>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.isActive = j.at("isActive").get<bool>(); 
    v.order = j.at("order").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.isEditable = j.at("isEditable").get<bool>(); 
    v.isValid = j.at("isValid").get<bool>(); 
    v.subStyleId = j.at("subStyleId").get<int32_t>(); 
    v.formatVersion = j.at("formatVersion").get<int32_t>(); 
    v.selectedPerkIds = j.at("selectedPerkIds").get<std::vector<int32_t>>(); 
    v.primaryStyleId = j.at("primaryStyleId").get<int32_t>(); 
  } 
  struct LolPerksPerkSettingResource { /**/ 
    int32_t perkSubStyle;/**/
    std::vector<int32_t> perkIds;/**/
    int32_t perkStyle;/**/
  };
  static void to_json(json& j, const LolPerksPerkSettingResource& v) { 
    j["perkSubStyle"] = v.perkSubStyle;
    j["perkIds"] = v.perkIds;
    j["perkStyle"] = v.perkStyle;
  }
  static void from_json(const json& j, LolPerksPerkSettingResource& v) { 
    v.perkSubStyle = j.at("perkSubStyle").get<int32_t>(); 
    v.perkIds = j.at("perkIds").get<std::vector<int32_t>>(); 
    v.perkStyle = j.at("perkStyle").get<int32_t>(); 
  } 
  struct LolPerksPerkStyleSlotResource { /**/ 
    std::string type;/**/
    std::vector<int32_t> perks;/**/
    std::string slotLabel;/**/
  };
  static void to_json(json& j, const LolPerksPerkStyleSlotResource& v) { 
    j["type"] = v.type;
    j["perks"] = v.perks;
    j["slotLabel"] = v.slotLabel;
  }
  static void from_json(const json& j, LolPerksPerkStyleSlotResource& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.perks = j.at("perks").get<std::vector<int32_t>>(); 
    v.slotLabel = j.at("slotLabel").get<std::string>(); 
  } 
  struct LolPerksPerkSubStyleBonusResource { /**/ 
    int32_t styleId;/**/
    int32_t perkId;/**/
  };
  static void to_json(json& j, const LolPerksPerkSubStyleBonusResource& v) { 
    j["styleId"] = v.styleId;
    j["perkId"] = v.perkId;
  }
  static void from_json(const json& j, LolPerksPerkSubStyleBonusResource& v) { 
    v.styleId = j.at("styleId").get<int32_t>(); 
    v.perkId = j.at("perkId").get<int32_t>(); 
  } 
  struct LolPerksPerkStyleResource { /**/ 
    std::vector<int32_t> defaultPerks;/**/
    int32_t defaultSubStyle;/**/
    std::vector<LolPerksPerkStyleSlotResource> slots;/**/
    bool isAdvanced;/**/
    std::string iconPath;/**/
    int32_t id;/**/
    std::string name;/**/
    std::vector<LolPerksPerkSubStyleBonusResource> subStyleBonus;/**/
    std::string tooltip;/**/
    std::vector<int32_t> allowedSubStyles;/**/
    std::string defaultPageName;/**/
  };
  static void to_json(json& j, const LolPerksPerkStyleResource& v) { 
    j["defaultPerks"] = v.defaultPerks;
    j["defaultSubStyle"] = v.defaultSubStyle;
    j["slots"] = v.slots;
    j["isAdvanced"] = v.isAdvanced;
    j["iconPath"] = v.iconPath;
    j["id"] = v.id;
    j["name"] = v.name;
    j["subStyleBonus"] = v.subStyleBonus;
    j["tooltip"] = v.tooltip;
    j["allowedSubStyles"] = v.allowedSubStyles;
    j["defaultPageName"] = v.defaultPageName;
  }
  static void from_json(const json& j, LolPerksPerkStyleResource& v) { 
    v.defaultPerks = j.at("defaultPerks").get<std::vector<int32_t>>(); 
    v.defaultSubStyle = j.at("defaultSubStyle").get<int32_t>(); 
    v.slots = j.at("slots").get<std::vector<LolPerksPerkStyleSlotResource>>(); 
    v.isAdvanced = j.at("isAdvanced").get<bool>(); 
    v.iconPath = j.at("iconPath").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.subStyleBonus = j.at("subStyleBonus").get<std::vector<LolPerksPerkSubStyleBonusResource>>(); 
    v.tooltip = j.at("tooltip").get<std::string>(); 
    v.allowedSubStyles = j.at("allowedSubStyles").get<std::vector<int32_t>>(); 
    v.defaultPageName = j.at("defaultPageName").get<std::string>(); 
  } 
  struct LolPerksPerkUIPerk { /**/ 
    std::string shortDesc;/**/
    int32_t id;/**/
    std::string name;/**/
    std::string iconPath;/**/
    std::string tooltip;/**/
    std::string longDesc;/**/
  };
  static void to_json(json& j, const LolPerksPerkUIPerk& v) { 
    j["shortDesc"] = v.shortDesc;
    j["id"] = v.id;
    j["name"] = v.name;
    j["iconPath"] = v.iconPath;
    j["tooltip"] = v.tooltip;
    j["longDesc"] = v.longDesc;
  }
  static void from_json(const json& j, LolPerksPerkUIPerk& v) { 
    v.shortDesc = j.at("shortDesc").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.iconPath = j.at("iconPath").get<std::string>(); 
    v.tooltip = j.at("tooltip").get<std::string>(); 
    v.longDesc = j.at("longDesc").get<std::string>(); 
  } 
  struct LolPerksPerkUISlot { /**/ 
    std::string type;/**/
    std::vector<int32_t> perks;/**/
    std::string slotLabel;/**/
  };
  static void to_json(json& j, const LolPerksPerkUISlot& v) { 
    j["type"] = v.type;
    j["perks"] = v.perks;
    j["slotLabel"] = v.slotLabel;
  }
  static void from_json(const json& j, LolPerksPerkUISlot& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.perks = j.at("perks").get<std::vector<int32_t>>(); 
    v.slotLabel = j.at("slotLabel").get<std::string>(); 
  } 
  struct LolPerksPerkUIStyle { /**/ 
    std::vector<int32_t> defaultPerks;/**/
    int32_t defaultSubStyle;/**/
    std::vector<LolPerksPerkUISlot> slots;/**/
    std::vector<LolPerksPerkSubStyleBonusResource> subStyleBonus;/**/
    std::string iconPath;/**/
    int32_t id;/**/
    std::string name;/**/
    std::string tooltip;/**/
    std::vector<int32_t> allowedSubStyles;/**/
    std::string defaultPageName;/**/
  };
  static void to_json(json& j, const LolPerksPerkUIStyle& v) { 
    j["defaultPerks"] = v.defaultPerks;
    j["defaultSubStyle"] = v.defaultSubStyle;
    j["slots"] = v.slots;
    j["subStyleBonus"] = v.subStyleBonus;
    j["iconPath"] = v.iconPath;
    j["id"] = v.id;
    j["name"] = v.name;
    j["tooltip"] = v.tooltip;
    j["allowedSubStyles"] = v.allowedSubStyles;
    j["defaultPageName"] = v.defaultPageName;
  }
  static void from_json(const json& j, LolPerksPerkUIStyle& v) { 
    v.defaultPerks = j.at("defaultPerks").get<std::vector<int32_t>>(); 
    v.defaultSubStyle = j.at("defaultSubStyle").get<int32_t>(); 
    v.slots = j.at("slots").get<std::vector<LolPerksPerkUISlot>>(); 
    v.subStyleBonus = j.at("subStyleBonus").get<std::vector<LolPerksPerkSubStyleBonusResource>>(); 
    v.iconPath = j.at("iconPath").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.tooltip = j.at("tooltip").get<std::string>(); 
    v.allowedSubStyles = j.at("allowedSubStyles").get<std::vector<int32_t>>(); 
    v.defaultPageName = j.at("defaultPageName").get<std::string>(); 
  } 
  struct LolPerksPlatformConfig { /**/ 
    bool PerksEnabled;/**/
  };
  static void to_json(json& j, const LolPerksPlatformConfig& v) { 
    j["PerksEnabled"] = v.PerksEnabled;
  }
  static void from_json(const json& j, LolPerksPlatformConfig& v) { 
    v.PerksEnabled = j.at("PerksEnabled").get<bool>(); 
  } 
  struct LolPerksPlayerInventory { /**/ 
    uint32_t ownedPageCount;/**/
  };
  static void to_json(json& j, const LolPerksPlayerInventory& v) { 
    j["ownedPageCount"] = v.ownedPageCount;
  }
  static void from_json(const json& j, LolPerksPlayerInventory& v) { 
    v.ownedPageCount = j.at("ownedPageCount").get<uint32_t>(); 
  } 
  struct LolPerksUISettings { /**/ 
    bool showPresetPages;/**/
    bool showLongDescriptions;/**/
    bool gridModeEnabled;/**/
  };
  static void to_json(json& j, const LolPerksUISettings& v) { 
    j["showPresetPages"] = v.showPresetPages;
    j["showLongDescriptions"] = v.showLongDescriptions;
    j["gridModeEnabled"] = v.gridModeEnabled;
  }
  static void from_json(const json& j, LolPerksUISettings& v) { 
    v.showPresetPages = j.at("showPresetPages").get<bool>(); 
    v.showLongDescriptions = j.at("showLongDescriptions").get<bool>(); 
    v.gridModeEnabled = j.at("gridModeEnabled").get<bool>(); 
  } 
  struct LolPerksPlayerPreferencesSettings { /**/ 
    LolPerksUISettings settings;/**/
    std::vector<LolPerksPerkPageResource> pages;/**/
  };
  static void to_json(json& j, const LolPerksPlayerPreferencesSettings& v) { 
    j["settings"] = v.settings;
    j["pages"] = v.pages;
  }
  static void from_json(const json& j, LolPerksPlayerPreferencesSettings& v) { 
    v.settings = j.at("settings").get<LolPerksUISettings>(); 
    v.pages = j.at("pages").get<std::vector<LolPerksPerkPageResource>>(); 
  } 
  struct LolPerksRiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const LolPerksRiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, LolPerksRiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct LolPerksServiceSettings { /**/ 
    bool serverSideStorageAvailable;/**/
  };
  static void to_json(json& j, const LolPerksServiceSettings& v) { 
    j["serverSideStorageAvailable"] = v.serverSideStorageAvailable;
  }
  static void from_json(const json& j, LolPerksServiceSettings& v) { 
    v.serverSideStorageAvailable = j.at("serverSideStorageAvailable").get<bool>(); 
  } 
  struct LolPerksSummonerRerollPoints { /**/ 
    uint64_t pointsCostToRoll;/**/
    uint32_t maxRolls;/**/
    uint32_t numberOfRolls;/**/
    uint64_t currentPoints;/**/
    uint64_t pointsToReroll;/**/
  };
  static void to_json(json& j, const LolPerksSummonerRerollPoints& v) { 
    j["pointsCostToRoll"] = v.pointsCostToRoll;
    j["maxRolls"] = v.maxRolls;
    j["numberOfRolls"] = v.numberOfRolls;
    j["currentPoints"] = v.currentPoints;
    j["pointsToReroll"] = v.pointsToReroll;
  }
  static void from_json(const json& j, LolPerksSummonerRerollPoints& v) { 
    v.pointsCostToRoll = j.at("pointsCostToRoll").get<uint64_t>(); 
    v.maxRolls = j.at("maxRolls").get<uint32_t>(); 
    v.numberOfRolls = j.at("numberOfRolls").get<uint32_t>(); 
    v.currentPoints = j.at("currentPoints").get<uint64_t>(); 
    v.pointsToReroll = j.at("pointsToReroll").get<uint64_t>(); 
  } 
  struct LolPerksSummoner { /**/ 
    uint64_t xpSinceLastLevel;/**/
    int32_t profileIconId;/**/
    uint32_t percentCompleteForNextLevel;/**/
    LolPerksSummonerRerollPoints rerollPoints;/**/
    std::string internalName;/**/
    uint32_t summonerLevel;/**/
    std::string lastSeasonHighestRank;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    uint64_t xpUntilNextLevel;/**/
    std::string puuid;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolPerksSummoner& v) { 
    j["xpSinceLastLevel"] = v.xpSinceLastLevel;
    j["profileIconId"] = v.profileIconId;
    j["percentCompleteForNextLevel"] = v.percentCompleteForNextLevel;
    j["rerollPoints"] = v.rerollPoints;
    j["internalName"] = v.internalName;
    j["summonerLevel"] = v.summonerLevel;
    j["lastSeasonHighestRank"] = v.lastSeasonHighestRank;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["xpUntilNextLevel"] = v.xpUntilNextLevel;
    j["puuid"] = v.puuid;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolPerksSummoner& v) { 
    v.xpSinceLastLevel = j.at("xpSinceLastLevel").get<uint64_t>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.percentCompleteForNextLevel = j.at("percentCompleteForNextLevel").get<uint32_t>(); 
    v.rerollPoints = j.at("rerollPoints").get<LolPerksSummonerRerollPoints>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.lastSeasonHighestRank = j.at("lastSeasonHighestRank").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.xpUntilNextLevel = j.at("xpUntilNextLevel").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolPersonalizedOffersAuthenticationRequest { /**/ 
    std::string token;/**/
    std::string tokenType;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersAuthenticationRequest& v) { 
    j["token"] = v.token;
    j["tokenType"] = v.tokenType;
  }
  static void from_json(const json& j, LolPersonalizedOffersAuthenticationRequest& v) { 
    v.token = j.at("token").get<std::string>(); 
    v.tokenType = j.at("tokenType").get<std::string>(); 
  } 
  struct LolPersonalizedOffersAuthenticationResponse { /**/ 
    std::string expiration;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersAuthenticationResponse& v) { 
    j["expiration"] = v.expiration;
    j["token"] = v.token;
  }
  static void from_json(const json& j, LolPersonalizedOffersAuthenticationResponse& v) { 
    v.expiration = j.at("expiration").get<std::string>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  enum class LolPersonalizedOffersLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolPersonalizedOffersLoginSessionStates& v) {
    switch(v) { 
    case LolPersonalizedOffersLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolPersonalizedOffersLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolPersonalizedOffersLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolPersonalizedOffersLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolPersonalizedOffersLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolPersonalizedOffersLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolPersonalizedOffersLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolPersonalizedOffersLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolPersonalizedOffersLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolPersonalizedOffersLoginSession { /**/ 
    LolPersonalizedOffersLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolPersonalizedOffersLoginSession& v) { 
    v.state = j.at("state").get<LolPersonalizedOffersLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolPersonalizedOffersOffer { /**/ 
    bool owned;/**/
    std::string expirationDate;/**/
    int32_t itemId;/**/
    std::string name;/**/
    bool revealed;/**/
    int64_t originalPrice;/**/
    uint32_t spotIndex;/**/
    std::string inventoryType;/**/
    std::string offerId;/**/
    int64_t discountPrice;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOffer& v) { 
    j["owned"] = v.owned;
    j["expirationDate"] = v.expirationDate;
    j["itemId"] = v.itemId;
    j["name"] = v.name;
    j["revealed"] = v.revealed;
    j["originalPrice"] = v.originalPrice;
    j["spotIndex"] = v.spotIndex;
    j["inventoryType"] = v.inventoryType;
    j["offerId"] = v.offerId;
    j["discountPrice"] = v.discountPrice;
  }
  static void from_json(const json& j, LolPersonalizedOffersOffer& v) { 
    v.owned = j.at("owned").get<bool>(); 
    v.expirationDate = j.at("expirationDate").get<std::string>(); 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.revealed = j.at("revealed").get<bool>(); 
    v.originalPrice = j.at("originalPrice").get<int64_t>(); 
    v.spotIndex = j.at("spotIndex").get<uint32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.offerId = j.at("offerId").get<std::string>(); 
    v.discountPrice = j.at("discountPrice").get<int64_t>(); 
  } 
  struct LolPersonalizedOffersOfferId { /**/ 
    std::string offerId;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOfferId& v) { 
    j["offerId"] = v.offerId;
  }
  static void from_json(const json& j, LolPersonalizedOffersOfferId& v) { 
    v.offerId = j.at("offerId").get<std::string>(); 
  } 
  struct LolPersonalizedOffersOfferIds { /**/ 
    std::vector<LolPersonalizedOffersOfferId> offers;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOfferIds& v) { 
    j["offers"] = v.offers;
  }
  static void from_json(const json& j, LolPersonalizedOffersOfferIds& v) { 
    v.offers = j.at("offers").get<std::vector<LolPersonalizedOffersOfferId>>(); 
  } 
  struct LolPersonalizedOffersOfferRequest { /**/ 
    int64_t price;/**/
    int32_t itemId;/**/
    std::string inventoryType;/**/
    std::string offerId;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOfferRequest& v) { 
    j["price"] = v.price;
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
    j["offerId"] = v.offerId;
  }
  static void from_json(const json& j, LolPersonalizedOffersOfferRequest& v) { 
    v.price = j.at("price").get<int64_t>(); 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.offerId = j.at("offerId").get<std::string>(); 
  } 
  struct LolPersonalizedOffersOfferRequests { /**/ 
    std::vector<LolPersonalizedOffersOfferRequest> offers;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOfferRequests& v) { 
    j["offers"] = v.offers;
  }
  static void from_json(const json& j, LolPersonalizedOffersOfferRequests& v) { 
    v.offers = j.at("offers").get<std::vector<LolPersonalizedOffersOfferRequest>>(); 
  } 
  struct LolPersonalizedOffersOffers { /**/ 
    std::vector<LolPersonalizedOffersOffer> offers;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersOffers& v) { 
    j["offers"] = v.offers;
  }
  static void from_json(const json& j, LolPersonalizedOffersOffers& v) { 
    v.offers = j.at("offers").get<std::vector<LolPersonalizedOffersOffer>>(); 
  } 
  struct LolPersonalizedOffersPurchaseItem { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
    int64_t pricePaid;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersPurchaseItem& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
    j["pricePaid"] = v.pricePaid;
  }
  static void from_json(const json& j, LolPersonalizedOffersPurchaseItem& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.pricePaid = j.at("pricePaid").get<int64_t>(); 
  } 
  struct LolPersonalizedOffersWallet { /**/ 
    int64_t rp;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersWallet& v) { 
    j["rp"] = v.rp;
  }
  static void from_json(const json& j, LolPersonalizedOffersWallet& v) { 
    v.rp = j.at("rp").get<int64_t>(); 
  } 
  struct LolPersonalizedOffersPurchaseResponse { /**/ 
    std::vector<LolPersonalizedOffersPurchaseItem> items;/**/
    LolPersonalizedOffersWallet wallet;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersPurchaseResponse& v) { 
    j["items"] = v.items;
    j["wallet"] = v.wallet;
  }
  static void from_json(const json& j, LolPersonalizedOffersPurchaseResponse& v) { 
    v.items = j.at("items").get<std::vector<LolPersonalizedOffersPurchaseItem>>(); 
    v.wallet = j.at("wallet").get<LolPersonalizedOffersWallet>(); 
  } 
  struct LolPersonalizedOffersUIOffer { /**/ 
    bool owned;/**/
    int32_t skinId;/**/
    bool revealed;/**/
    std::string id;/**/
    std::string expirationDate;/**/
    std::string type;/**/
    std::string skinName;/**/
    int64_t originalPrice;/**/
    int32_t championId;/**/
    int64_t discountPrice;/**/
  };
  static void to_json(json& j, const LolPersonalizedOffersUIOffer& v) { 
    j["owned"] = v.owned;
    j["skinId"] = v.skinId;
    j["revealed"] = v.revealed;
    j["id"] = v.id;
    j["expirationDate"] = v.expirationDate;
    j["type"] = v.type;
    j["skinName"] = v.skinName;
    j["originalPrice"] = v.originalPrice;
    j["championId"] = v.championId;
    j["discountPrice"] = v.discountPrice;
  }
  static void from_json(const json& j, LolPersonalizedOffersUIOffer& v) { 
    v.owned = j.at("owned").get<bool>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.revealed = j.at("revealed").get<bool>(); 
    v.id = j.at("id").get<std::string>(); 
    v.expirationDate = j.at("expirationDate").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
    v.originalPrice = j.at("originalPrice").get<int64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.discountPrice = j.at("discountPrice").get<int64_t>(); 
  } 
  enum class LolPftGameflowGameDodgeState { /**/ 
    Invalid_e = 48, /**/ 
    PartyDodged_e = 49, /**/ 
    StrangerDodged_e = 50, /**/ 
    TournamentDodged_e = 51, /**/ 
  };
  static void to_json(json& j, const LolPftGameflowGameDodgeState& v) {
    switch(v) { 
    case LolPftGameflowGameDodgeState::Invalid_e:
      j = "Invalid";
    break;
    case LolPftGameflowGameDodgeState::PartyDodged_e:
      j = "PartyDodged";
    break;
    case LolPftGameflowGameDodgeState::StrangerDodged_e:
      j = "StrangerDodged";
    break;
    case LolPftGameflowGameDodgeState::TournamentDodged_e:
      j = "TournamentDodged";
    break;
    };
  }
  static void from_json(const json& j, LolPftGameflowGameDodgeState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = LolPftGameflowGameDodgeState::Invalid_e;
      return;
    } 
    if(s == "PartyDodged") {
      v = LolPftGameflowGameDodgeState::PartyDodged_e;
      return;
    } 
    if(s == "StrangerDodged") {
      v = LolPftGameflowGameDodgeState::StrangerDodged_e;
      return;
    } 
    if(s == "TournamentDodged") {
      v = LolPftGameflowGameDodgeState::TournamentDodged_e;
      return;
    } 
  } 
  struct LolPftGameflowGameDodge { /**/ 
    std::vector<uint64_t> dodgeIds;/**/
    LolPftGameflowGameDodgeState state;/**/
  };
  static void to_json(json& j, const LolPftGameflowGameDodge& v) { 
    j["dodgeIds"] = v.dodgeIds;
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolPftGameflowGameDodge& v) { 
    v.dodgeIds = j.at("dodgeIds").get<std::vector<uint64_t>>(); 
    v.state = j.at("state").get<LolPftGameflowGameDodgeState>(); 
  } 
  enum class LolPftGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolPftGameflowPhase& v) {
    switch(v) { 
    case LolPftGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolPftGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolPftGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolPftGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolPftGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolPftGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolPftGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolPftGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolPftGameflowPhase::None_e:
      j = "None";
    break;
    case LolPftGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolPftGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolPftGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolPftGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolPftGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolPftGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolPftGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolPftGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolPftGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolPftGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolPftGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolPftGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolPftGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolPftGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolPftGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolPftGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolPftGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolPftGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolPftGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolPftGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolPftGameflowSession { /**/ 
    LolPftGameflowPhase phase;/**/
    LolPftGameflowGameDodge gameDodge;/**/
  };
  static void to_json(json& j, const LolPftGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameDodge"] = v.gameDodge;
  }
  static void from_json(const json& j, LolPftGameflowSession& v) { 
    v.phase = j.at("phase").get<LolPftGameflowPhase>(); 
    v.gameDodge = j.at("gameDodge").get<LolPftGameflowGameDodge>(); 
  } 
  enum class LolPftLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolPftLoginSessionStates& v) {
    switch(v) { 
    case LolPftLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolPftLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolPftLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolPftLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolPftLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolPftLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolPftLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolPftLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolPftLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolPftLoginSession { /**/ 
    LolPftLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolPftLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolPftLoginSession& v) { 
    v.state = j.at("state").get<LolPftLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolPftPFTEndOfGamePlayer { /**/ 
    bool isReportingDisabled;/**/
    std::vector<int32_t> items;/**/
    bool leaver;/**/
    std::string summonerName;/**/
    int32_t teamId;/**/
    int32_t eloChange;/**/
    int32_t leaves;/**/
    int32_t spell2Id;/**/
    int32_t spell1Id;/**/
    uint64_t userId;/**/
    int32_t championId;/**/
    int32_t level;/**/
    int32_t wins;/**/
    bool botPlayer;/**/
    int32_t profileIconId;/**/
    int32_t elo;/**/
    int32_t losses;/**/
    std::string skinName;/**/
    uint64_t gameId;/**/
    uint64_t summonerId;/**/
    json stats;/**/
  };
  static void to_json(json& j, const LolPftPFTEndOfGamePlayer& v) { 
    j["isReportingDisabled"] = v.isReportingDisabled;
    j["items"] = v.items;
    j["leaver"] = v.leaver;
    j["summonerName"] = v.summonerName;
    j["teamId"] = v.teamId;
    j["eloChange"] = v.eloChange;
    j["leaves"] = v.leaves;
    j["spell2Id"] = v.spell2Id;
    j["spell1Id"] = v.spell1Id;
    j["userId"] = v.userId;
    j["championId"] = v.championId;
    j["level"] = v.level;
    j["wins"] = v.wins;
    j["botPlayer"] = v.botPlayer;
    j["profileIconId"] = v.profileIconId;
    j["elo"] = v.elo;
    j["losses"] = v.losses;
    j["skinName"] = v.skinName;
    j["gameId"] = v.gameId;
    j["summonerId"] = v.summonerId;
    j["stats"] = v.stats;
  }
  static void from_json(const json& j, LolPftPFTEndOfGamePlayer& v) { 
    v.isReportingDisabled = j.at("isReportingDisabled").get<bool>(); 
    v.items = j.at("items").get<std::vector<int32_t>>(); 
    v.leaver = j.at("leaver").get<bool>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.leaves = j.at("leaves").get<int32_t>(); 
    v.spell2Id = j.at("spell2Id").get<int32_t>(); 
    v.spell1Id = j.at("spell1Id").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.level = j.at("level").get<int32_t>(); 
    v.wins = j.at("wins").get<int32_t>(); 
    v.botPlayer = j.at("botPlayer").get<bool>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.losses = j.at("losses").get<int32_t>(); 
    v.skinName = j.at("skinName").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.stats = j.at("stats").get<json>(); 
  } 
  struct LolPftPFTEndOfGamePoints { /**/ 
    int32_t pointsUntilNextReroll;/**/
    int32_t totalPoints;/**/
    int32_t pointChangeFromGameplay;/**/
    int32_t previousPoints;/**/
    int32_t pointsUsed;/**/
    int32_t pointChangeFromChampionsOwned;/**/
    int32_t rerollCount;/**/
  };
  static void to_json(json& j, const LolPftPFTEndOfGamePoints& v) { 
    j["pointsUntilNextReroll"] = v.pointsUntilNextReroll;
    j["totalPoints"] = v.totalPoints;
    j["pointChangeFromGameplay"] = v.pointChangeFromGameplay;
    j["previousPoints"] = v.previousPoints;
    j["pointsUsed"] = v.pointsUsed;
    j["pointChangeFromChampionsOwned"] = v.pointChangeFromChampionsOwned;
    j["rerollCount"] = v.rerollCount;
  }
  static void from_json(const json& j, LolPftPFTEndOfGamePoints& v) { 
    v.pointsUntilNextReroll = j.at("pointsUntilNextReroll").get<int32_t>(); 
    v.totalPoints = j.at("totalPoints").get<int32_t>(); 
    v.pointChangeFromGameplay = j.at("pointChangeFromGameplay").get<int32_t>(); 
    v.previousPoints = j.at("previousPoints").get<int32_t>(); 
    v.pointsUsed = j.at("pointsUsed").get<int32_t>(); 
    v.pointChangeFromChampionsOwned = j.at("pointChangeFromChampionsOwned").get<int32_t>(); 
    v.rerollCount = j.at("rerollCount").get<int32_t>(); 
  } 
  struct LolPftPFTEndOfGameTeam { /**/ 
    std::vector<LolPftPFTEndOfGamePlayer> players;/**/
    std::string memberStatusString;/**/
    std::string fullId;/**/
    bool isPlayerTeam;/**/
    std::vector<int32_t> championBans;/**/
    std::string name;/**/
    int32_t teamId;/**/
    std::string tag;/**/
    bool isWinningTeam;/**/
    json stats;/**/
    bool isBottomTeam;/**/
  };
  static void to_json(json& j, const LolPftPFTEndOfGameTeam& v) { 
    j["players"] = v.players;
    j["memberStatusString"] = v.memberStatusString;
    j["fullId"] = v.fullId;
    j["isPlayerTeam"] = v.isPlayerTeam;
    j["championBans"] = v.championBans;
    j["name"] = v.name;
    j["teamId"] = v.teamId;
    j["tag"] = v.tag;
    j["isWinningTeam"] = v.isWinningTeam;
    j["stats"] = v.stats;
    j["isBottomTeam"] = v.isBottomTeam;
  }
  static void from_json(const json& j, LolPftPFTEndOfGameTeam& v) { 
    v.players = j.at("players").get<std::vector<LolPftPFTEndOfGamePlayer>>(); 
    v.memberStatusString = j.at("memberStatusString").get<std::string>(); 
    v.fullId = j.at("fullId").get<std::string>(); 
    v.isPlayerTeam = j.at("isPlayerTeam").get<bool>(); 
    v.championBans = j.at("championBans").get<std::vector<int32_t>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.teamId = j.at("teamId").get<int32_t>(); 
    v.tag = j.at("tag").get<std::string>(); 
    v.isWinningTeam = j.at("isWinningTeam").get<bool>(); 
    v.stats = j.at("stats").get<json>(); 
    v.isBottomTeam = j.at("isBottomTeam").get<bool>(); 
  } 
  struct LolPftPFTEndOfGameStats { /**/ 
    int32_t rpEarned;/**/
    int32_t ipTotal;/**/
    std::vector<int32_t> newSpells;/**/
    int32_t eloChange;/**/
    int32_t loyaltyBoostIpEarned;/**/
    uint64_t userId;/**/
    int32_t gameLength;/**/
    uint64_t summonerId;/**/
    int32_t elo;/**/
    std::string summonerName;/**/
    bool sendStatsToTournamentProvider;/**/
    bool ranked;/**/
    int32_t coOpVsAiMinutesLeftToday;/**/
    int32_t customMinutesLeftToday;/**/
    uint64_t previousXpTotal;/**/
    std::string myTeamStatus;/**/
    bool gameEndedInEarlySurrender;/**/
    int32_t boostIpEarned;/**/
    std::string queueType;/**/
    std::vector<LolPftPFTEndOfGameTeam> teams;/**/
    std::vector<std::string> gameMutators;/**/
    int32_t championId;/**/
    int32_t boostXpEarned;/**/
    int32_t completionBonusPoints;/**/
    uint64_t previousLevel;/**/
    bool earlySurrenderAccomplice;/**/
    int32_t skinIndex;/**/
    int32_t battleBoostIpEarned;/**/
    uint64_t reportGameId;/**/
    int32_t odinBonusIp;/**/
    std::string gameType;/**/
    int32_t queueBonusEarned;/**/
    int32_t skinId;/**/
    bool isAramGame;/**/
    int32_t coOpVsAiMsecsUntilReset;/**/
    int32_t experienceEarned;/**/
    uint64_t accountId;/**/
    std::string roomName;/**/
    LolPftPFTEndOfGamePoints rerollData;/**/
    bool causedEarlySurrender;/**/
    bool leveledUp;/**/
    int32_t firstWinBonus;/**/
    bool teamEarlySurrendered;/**/
    int32_t talentPointsGained;/**/
    bool imbalancedTeamsNoPoints;/**/
    json pointsPenalties;/**/
    std::string difficulty;/**/
    int32_t customMsecsUntilReset;/**/
    int32_t experienceTotal;/**/
    std::string roomPassword;/**/
    int32_t ipEarned;/**/
    int32_t timeUntilNextFirstWinBonus;/**/
    uint64_t gameId;/**/
    std::string gameMode;/**/
    bool invalid;/**/
    int32_t loyaltyBoostXpEarned;/**/
    int32_t basePoints;/**/
    int32_t partyRewardsBonusIpEarned;/**/
  };
  static void to_json(json& j, const LolPftPFTEndOfGameStats& v) { 
    j["rpEarned"] = v.rpEarned;
    j["ipTotal"] = v.ipTotal;
    j["newSpells"] = v.newSpells;
    j["eloChange"] = v.eloChange;
    j["loyaltyBoostIpEarned"] = v.loyaltyBoostIpEarned;
    j["userId"] = v.userId;
    j["gameLength"] = v.gameLength;
    j["summonerId"] = v.summonerId;
    j["elo"] = v.elo;
    j["summonerName"] = v.summonerName;
    j["sendStatsToTournamentProvider"] = v.sendStatsToTournamentProvider;
    j["ranked"] = v.ranked;
    j["coOpVsAiMinutesLeftToday"] = v.coOpVsAiMinutesLeftToday;
    j["customMinutesLeftToday"] = v.customMinutesLeftToday;
    j["previousXpTotal"] = v.previousXpTotal;
    j["myTeamStatus"] = v.myTeamStatus;
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender;
    j["boostIpEarned"] = v.boostIpEarned;
    j["queueType"] = v.queueType;
    j["teams"] = v.teams;
    j["gameMutators"] = v.gameMutators;
    j["championId"] = v.championId;
    j["boostXpEarned"] = v.boostXpEarned;
    j["completionBonusPoints"] = v.completionBonusPoints;
    j["previousLevel"] = v.previousLevel;
    j["earlySurrenderAccomplice"] = v.earlySurrenderAccomplice;
    j["skinIndex"] = v.skinIndex;
    j["battleBoostIpEarned"] = v.battleBoostIpEarned;
    j["reportGameId"] = v.reportGameId;
    j["odinBonusIp"] = v.odinBonusIp;
    j["gameType"] = v.gameType;
    j["queueBonusEarned"] = v.queueBonusEarned;
    j["skinId"] = v.skinId;
    j["isAramGame"] = v.isAramGame;
    j["coOpVsAiMsecsUntilReset"] = v.coOpVsAiMsecsUntilReset;
    j["experienceEarned"] = v.experienceEarned;
    j["accountId"] = v.accountId;
    j["roomName"] = v.roomName;
    j["rerollData"] = v.rerollData;
    j["causedEarlySurrender"] = v.causedEarlySurrender;
    j["leveledUp"] = v.leveledUp;
    j["firstWinBonus"] = v.firstWinBonus;
    j["teamEarlySurrendered"] = v.teamEarlySurrendered;
    j["talentPointsGained"] = v.talentPointsGained;
    j["imbalancedTeamsNoPoints"] = v.imbalancedTeamsNoPoints;
    j["pointsPenalties"] = v.pointsPenalties;
    j["difficulty"] = v.difficulty;
    j["customMsecsUntilReset"] = v.customMsecsUntilReset;
    j["experienceTotal"] = v.experienceTotal;
    j["roomPassword"] = v.roomPassword;
    j["ipEarned"] = v.ipEarned;
    j["timeUntilNextFirstWinBonus"] = v.timeUntilNextFirstWinBonus;
    j["gameId"] = v.gameId;
    j["gameMode"] = v.gameMode;
    j["invalid"] = v.invalid;
    j["loyaltyBoostXpEarned"] = v.loyaltyBoostXpEarned;
    j["basePoints"] = v.basePoints;
    j["partyRewardsBonusIpEarned"] = v.partyRewardsBonusIpEarned;
  }
  static void from_json(const json& j, LolPftPFTEndOfGameStats& v) { 
    v.rpEarned = j.at("rpEarned").get<int32_t>(); 
    v.ipTotal = j.at("ipTotal").get<int32_t>(); 
    v.newSpells = j.at("newSpells").get<std::vector<int32_t>>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.loyaltyBoostIpEarned = j.at("loyaltyBoostIpEarned").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.gameLength = j.at("gameLength").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.sendStatsToTournamentProvider = j.at("sendStatsToTournamentProvider").get<bool>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.coOpVsAiMinutesLeftToday = j.at("coOpVsAiMinutesLeftToday").get<int32_t>(); 
    v.customMinutesLeftToday = j.at("customMinutesLeftToday").get<int32_t>(); 
    v.previousXpTotal = j.at("previousXpTotal").get<uint64_t>(); 
    v.myTeamStatus = j.at("myTeamStatus").get<std::string>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.boostIpEarned = j.at("boostIpEarned").get<int32_t>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.teams = j.at("teams").get<std::vector<LolPftPFTEndOfGameTeam>>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.boostXpEarned = j.at("boostXpEarned").get<int32_t>(); 
    v.completionBonusPoints = j.at("completionBonusPoints").get<int32_t>(); 
    v.previousLevel = j.at("previousLevel").get<uint64_t>(); 
    v.earlySurrenderAccomplice = j.at("earlySurrenderAccomplice").get<bool>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.battleBoostIpEarned = j.at("battleBoostIpEarned").get<int32_t>(); 
    v.reportGameId = j.at("reportGameId").get<uint64_t>(); 
    v.odinBonusIp = j.at("odinBonusIp").get<int32_t>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.queueBonusEarned = j.at("queueBonusEarned").get<int32_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.isAramGame = j.at("isAramGame").get<bool>(); 
    v.coOpVsAiMsecsUntilReset = j.at("coOpVsAiMsecsUntilReset").get<int32_t>(); 
    v.experienceEarned = j.at("experienceEarned").get<int32_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.rerollData = j.at("rerollData").get<LolPftPFTEndOfGamePoints>(); 
    v.causedEarlySurrender = j.at("causedEarlySurrender").get<bool>(); 
    v.leveledUp = j.at("leveledUp").get<bool>(); 
    v.firstWinBonus = j.at("firstWinBonus").get<int32_t>(); 
    v.teamEarlySurrendered = j.at("teamEarlySurrendered").get<bool>(); 
    v.talentPointsGained = j.at("talentPointsGained").get<int32_t>(); 
    v.imbalancedTeamsNoPoints = j.at("imbalancedTeamsNoPoints").get<bool>(); 
    v.pointsPenalties = j.at("pointsPenalties").get<json>(); 
    v.difficulty = j.at("difficulty").get<std::string>(); 
    v.customMsecsUntilReset = j.at("customMsecsUntilReset").get<int32_t>(); 
    v.experienceTotal = j.at("experienceTotal").get<int32_t>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.ipEarned = j.at("ipEarned").get<int32_t>(); 
    v.timeUntilNextFirstWinBonus = j.at("timeUntilNextFirstWinBonus").get<int32_t>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.invalid = j.at("invalid").get<bool>(); 
    v.loyaltyBoostXpEarned = j.at("loyaltyBoostXpEarned").get<int32_t>(); 
    v.basePoints = j.at("basePoints").get<int32_t>(); 
    v.partyRewardsBonusIpEarned = j.at("partyRewardsBonusIpEarned").get<int32_t>(); 
  } 
  struct LolPftPFTEvent { /**/ 
    uint64_t playerSurveyId;/**/
    std::string action;/**/
    std::vector<json> data;/**/
  };
  static void to_json(json& j, const LolPftPFTEvent& v) { 
    j["playerSurveyId"] = v.playerSurveyId;
    j["action"] = v.action;
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolPftPFTEvent& v) { 
    v.playerSurveyId = j.at("playerSurveyId").get<uint64_t>(); 
    v.action = j.at("action").get<std::string>(); 
    v.data = j.at("data").get<std::vector<json>>(); 
  } 
  struct LolPftPFTMetadata { /**/ 
    std::string locale;/**/
    std::string appVersion;/**/
    std::string systemOs;/**/
    uint64_t accountId;/**/
    std::string webRegion;/**/
    std::string appName;/**/
    LolPftPFTEndOfGameStats stats;/**/
    std::string env;/**/
  };
  static void to_json(json& j, const LolPftPFTMetadata& v) { 
    j["locale"] = v.locale;
    j["appVersion"] = v.appVersion;
    j["systemOs"] = v.systemOs;
    j["accountId"] = v.accountId;
    j["webRegion"] = v.webRegion;
    j["appName"] = v.appName;
    j["stats"] = v.stats;
    j["env"] = v.env;
  }
  static void from_json(const json& j, LolPftPFTMetadata& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.appVersion = j.at("appVersion").get<std::string>(); 
    v.systemOs = j.at("systemOs").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.webRegion = j.at("webRegion").get<std::string>(); 
    v.appName = j.at("appName").get<std::string>(); 
    v.stats = j.at("stats").get<LolPftPFTEndOfGameStats>(); 
    v.env = j.at("env").get<std::string>(); 
  } 
  struct LolPftPFTQuestionResponse { /**/ 
    uint64_t questionId;/**/
    json responseData;/**/
  };
  static void to_json(json& j, const LolPftPFTQuestionResponse& v) { 
    j["questionId"] = v.questionId;
    j["responseData"] = v.responseData;
  }
  static void from_json(const json& j, LolPftPFTQuestionResponse& v) { 
    v.questionId = j.at("questionId").get<uint64_t>(); 
    v.responseData = j.at("responseData").get<json>(); 
  } 
  struct LolPftPFTSurvey { /**/ 
    std::string display;/**/
    uint64_t id;/**/
    std::map<std::string, json> data;/**/
    std::string type;/**/
    std::string title;/**/
    std::string caption;/**/
  };
  static void to_json(json& j, const LolPftPFTSurvey& v) { 
    j["display"] = v.display;
    j["id"] = v.id;
    j["data"] = v.data;
    j["type"] = v.type;
    j["title"] = v.title;
    j["caption"] = v.caption;
  }
  static void from_json(const json& j, LolPftPFTSurvey& v) { 
    v.display = j.at("display").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.data = j.at("data").get<std::map<std::string, json>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.title = j.at("title").get<std::string>(); 
    v.caption = j.at("caption").get<std::string>(); 
  } 
  struct LolPftPFTSurveyResults { /**/ 
    std::vector<LolPftPFTQuestionResponse> questionResponses;/**/
    std::vector<LolPftPFTEvent> actions;/**/
  };
  static void to_json(json& j, const LolPftPFTSurveyResults& v) { 
    j["questionResponses"] = v.questionResponses;
    j["actions"] = v.actions;
  }
  static void from_json(const json& j, LolPftPFTSurveyResults& v) { 
    v.questionResponses = j.at("questionResponses").get<std::vector<LolPftPFTQuestionResponse>>(); 
    v.actions = j.at("actions").get<std::vector<LolPftPFTEvent>>(); 
  } 
  struct LolPftPFTSurveyV1 { /**/ 
    std::string type;/**/
    std::string title;/**/
    std::string caption;/**/
    uint64_t id;/**/
    std::string url;/**/
  };
  static void to_json(json& j, const LolPftPFTSurveyV1& v) { 
    j["type"] = v.type;
    j["title"] = v.title;
    j["caption"] = v.caption;
    j["id"] = v.id;
    j["url"] = v.url;
  }
  static void from_json(const json& j, LolPftPFTSurveyV1& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.title = j.at("title").get<std::string>(); 
    v.caption = j.at("caption").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.url = j.at("url").get<std::string>(); 
  } 
  enum class LolPlayerBehaviorNotificationSource { /**/ 
    ForcedShutdown_e = 2, /**/ 
    Invalid_e = 0, /**/ 
    Login_e = 1, /**/ 
    Message_e = 3, /**/ 
  };
  static void to_json(json& j, const LolPlayerBehaviorNotificationSource& v) {
    switch(v) { 
    case LolPlayerBehaviorNotificationSource::ForcedShutdown_e:
      j = "ForcedShutdown";
    break;
    case LolPlayerBehaviorNotificationSource::Invalid_e:
      j = "Invalid";
    break;
    case LolPlayerBehaviorNotificationSource::Login_e:
      j = "Login";
    break;
    case LolPlayerBehaviorNotificationSource::Message_e:
      j = "Message";
    break;
    };
  }
  static void from_json(const json& j, LolPlayerBehaviorNotificationSource& v) {
    auto s = j.get<std::string>(); 
    if(s == "ForcedShutdown") {
      v = LolPlayerBehaviorNotificationSource::ForcedShutdown_e;
      return;
    } 
    if(s == "Invalid") {
      v = LolPlayerBehaviorNotificationSource::Invalid_e;
      return;
    } 
    if(s == "Login") {
      v = LolPlayerBehaviorNotificationSource::Login_e;
      return;
    } 
    if(s == "Message") {
      v = LolPlayerBehaviorNotificationSource::Message_e;
      return;
    } 
  } 
  struct LolPlayerBehaviorBanNotification { /**/ 
    LolPlayerBehaviorNotificationSource source;/**/
    std::string reason;/**/
    uint64_t id;/**/
    bool isPermaBan;/**/
    bool displayReformCard;/**/
    uint64_t timeUntilBanExpires;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorBanNotification& v) { 
    j["source"] = v.source;
    j["reason"] = v.reason;
    j["id"] = v.id;
    j["isPermaBan"] = v.isPermaBan;
    j["displayReformCard"] = v.displayReformCard;
    j["timeUntilBanExpires"] = v.timeUntilBanExpires;
  }
  static void from_json(const json& j, LolPlayerBehaviorBanNotification& v) { 
    v.source = j.at("source").get<LolPlayerBehaviorNotificationSource>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.isPermaBan = j.at("isPermaBan").get<bool>(); 
    v.displayReformCard = j.at("displayReformCard").get<bool>(); 
    v.timeUntilBanExpires = j.at("timeUntilBanExpires").get<uint64_t>(); 
  } 
  enum class LolPlayerBehaviorGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolPlayerBehaviorGameflowPhase& v) {
    switch(v) { 
    case LolPlayerBehaviorGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolPlayerBehaviorGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolPlayerBehaviorGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolPlayerBehaviorGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolPlayerBehaviorGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolPlayerBehaviorGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolPlayerBehaviorGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolPlayerBehaviorGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolPlayerBehaviorGameflowPhase::None_e:
      j = "None";
    break;
    case LolPlayerBehaviorGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolPlayerBehaviorGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolPlayerBehaviorGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolPlayerBehaviorGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolPlayerBehaviorGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolPlayerBehaviorGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolPlayerBehaviorGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolPlayerBehaviorGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolPlayerBehaviorGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolPlayerBehaviorGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolPlayerBehaviorGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolPlayerBehaviorGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolPlayerBehaviorGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolPlayerBehaviorGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolPlayerBehaviorGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolPlayerBehaviorGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolPlayerBehaviorGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolPlayerBehaviorGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolPlayerBehaviorGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolPlayerBehaviorGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolPlayerBehaviorPlayerBehavior_GameflowSessionResource { /**/ 
    LolPlayerBehaviorGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerBehavior_GameflowSessionResource& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerBehavior_GameflowSessionResource& v) { 
    v.phase = j.at("phase").get<LolPlayerBehaviorGameflowPhase>(); 
  } 
  struct LolPlayerBehaviorPlayerBehavior_LoginError { /**/ 
    std::string messageId;/**/
    std::string id;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerBehavior_LoginError& v) { 
    j["messageId"] = v.messageId;
    j["id"] = v.id;
    j["description"] = v.description;
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerBehavior_LoginError& v) { 
    v.messageId = j.at("messageId").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  enum class LolPlayerBehaviorPlayerBehavior_LoginSessionState { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerBehavior_LoginSessionState& v) {
    switch(v) { 
    case LolPlayerBehaviorPlayerBehavior_LoginSessionState::ERROR_e:
      j = "ERROR";
    break;
    case LolPlayerBehaviorPlayerBehavior_LoginSessionState::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolPlayerBehaviorPlayerBehavior_LoginSessionState::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolPlayerBehaviorPlayerBehavior_LoginSessionState::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerBehavior_LoginSessionState& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolPlayerBehaviorPlayerBehavior_LoginSessionState::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolPlayerBehaviorPlayerBehavior_LoginSessionState::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolPlayerBehaviorPlayerBehavior_LoginSessionState::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolPlayerBehaviorPlayerBehavior_LoginSessionState::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolPlayerBehaviorPlayerBehavior_LoginSession { /**/ 
    LolPlayerBehaviorPlayerBehavior_LoginSessionState state;/**/
    std::optional<LolPlayerBehaviorPlayerBehavior_LoginError> error;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerBehavior_LoginSession& v) { 
    j["state"] = v.state;
    j["error"] = v.error;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerBehavior_LoginSession& v) { 
    v.state = j.at("state").get<LolPlayerBehaviorPlayerBehavior_LoginSessionState>(); 
    v.error = j.at("error").get<std::optional<LolPlayerBehaviorPlayerBehavior_LoginError>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolPlayerBehaviorPlayerBehavior_SimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerBehavior_SimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerBehavior_SimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolPlayerBehaviorPlayerNotificationResource { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    bool critical;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string created;/**/
    std::string expires;/**/
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorPlayerNotificationResource& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["data"] = v.data;
    j["type"] = v.type;
    j["created"] = v.created;
    j["expires"] = v.expires;
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, LolPlayerBehaviorPlayerNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct LolPlayerBehaviorReformCard { /**/ 
    std::vector<std::string> chatLogs;/**/
    std::string reason;/**/
    uint64_t id;/**/
    int64_t restrictedChatGamesRemaining;/**/
    std::string playerFacingMessage;/**/
    std::vector<uint64_t> gameIds;/**/
    uint64_t punishmentLengthTime;/**/
    std::string punishmentType;/**/
    int64_t punishmentLengthGames;/**/
    uint64_t timeWhenPunishmentExpires;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorReformCard& v) { 
    j["chatLogs"] = v.chatLogs;
    j["reason"] = v.reason;
    j["id"] = v.id;
    j["restrictedChatGamesRemaining"] = v.restrictedChatGamesRemaining;
    j["playerFacingMessage"] = v.playerFacingMessage;
    j["gameIds"] = v.gameIds;
    j["punishmentLengthTime"] = v.punishmentLengthTime;
    j["punishmentType"] = v.punishmentType;
    j["punishmentLengthGames"] = v.punishmentLengthGames;
    j["timeWhenPunishmentExpires"] = v.timeWhenPunishmentExpires;
  }
  static void from_json(const json& j, LolPlayerBehaviorReformCard& v) { 
    v.chatLogs = j.at("chatLogs").get<std::vector<std::string>>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.restrictedChatGamesRemaining = j.at("restrictedChatGamesRemaining").get<int64_t>(); 
    v.playerFacingMessage = j.at("playerFacingMessage").get<std::string>(); 
    v.gameIds = j.at("gameIds").get<std::vector<uint64_t>>(); 
    v.punishmentLengthTime = j.at("punishmentLengthTime").get<uint64_t>(); 
    v.punishmentType = j.at("punishmentType").get<std::string>(); 
    v.punishmentLengthGames = j.at("punishmentLengthGames").get<int64_t>(); 
    v.timeWhenPunishmentExpires = j.at("timeWhenPunishmentExpires").get<uint64_t>(); 
  } 
  struct LolPlayerBehaviorReporterFeedback { /**/ 
    std::string type;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorReporterFeedback& v) { 
    j["type"] = v.type;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolPlayerBehaviorReporterFeedback& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  struct LolPlayerBehaviorRestrictionNotification { /**/ 
    LolPlayerBehaviorNotificationSource source;/**/
    int64_t gamesRemaining;/**/
    bool displayReformCard;/**/
    uint64_t id;/**/
  };
  static void to_json(json& j, const LolPlayerBehaviorRestrictionNotification& v) { 
    j["source"] = v.source;
    j["gamesRemaining"] = v.gamesRemaining;
    j["displayReformCard"] = v.displayReformCard;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolPlayerBehaviorRestrictionNotification& v) { 
    v.source = j.at("source").get<LolPlayerBehaviorNotificationSource>(); 
    v.gamesRemaining = j.at("gamesRemaining").get<int64_t>(); 
    v.displayReformCard = j.at("displayReformCard").get<bool>(); 
    v.id = j.at("id").get<uint64_t>(); 
  } 
  enum class LolPreEndOfGameGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolPreEndOfGameGameflowPhase& v) {
    switch(v) { 
    case LolPreEndOfGameGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolPreEndOfGameGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolPreEndOfGameGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolPreEndOfGameGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolPreEndOfGameGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolPreEndOfGameGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolPreEndOfGameGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolPreEndOfGameGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolPreEndOfGameGameflowPhase::None_e:
      j = "None";
    break;
    case LolPreEndOfGameGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolPreEndOfGameGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolPreEndOfGameGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolPreEndOfGameGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolPreEndOfGameGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolPreEndOfGameGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolPreEndOfGameGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolPreEndOfGameGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolPreEndOfGameGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolPreEndOfGameGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolPreEndOfGameGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolPreEndOfGameGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolPreEndOfGameGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolPreEndOfGameGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolPreEndOfGameGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolPreEndOfGameGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolPreEndOfGameGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolPreEndOfGameGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolPreEndOfGameGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolPreEndOfGameGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolPreEndOfGameGameflowSessionResource { /**/ 
    LolPreEndOfGameGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolPreEndOfGameGameflowSessionResource& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolPreEndOfGameGameflowSessionResource& v) { 
    v.phase = j.at("phase").get<LolPreEndOfGameGameflowPhase>(); 
  } 
  struct LolPreEndOfGameSequenceEvent { /**/ 
    int32_t priority;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolPreEndOfGameSequenceEvent& v) { 
    j["priority"] = v.priority;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolPreEndOfGameSequenceEvent& v) { 
    v.priority = j.at("priority").get<int32_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolPurchaseWidgetBalance { /**/ 
    int32_t amount;/**/
    std::string currencyType;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetBalance& v) { 
    j["amount"] = v.amount;
    j["currencyType"] = v.currencyType;
  }
  static void from_json(const json& j, LolPurchaseWidgetBalance& v) { 
    v.amount = j.at("amount").get<int32_t>(); 
    v.currencyType = j.at("currencyType").get<std::string>(); 
  } 
  struct LolPurchaseWidgetItemKey { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetItemKey& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, LolPurchaseWidgetItemKey& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LolPurchaseWidgetItemPrice { /**/ 
    int32_t price;/**/
    std::string currencyType;/**/
    bool purchasable;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetItemPrice& v) { 
    j["price"] = v.price;
    j["currencyType"] = v.currencyType;
    j["purchasable"] = v.purchasable;
  }
  static void from_json(const json& j, LolPurchaseWidgetItemPrice& v) { 
    v.price = j.at("price").get<int32_t>(); 
    v.currencyType = j.at("currencyType").get<std::string>(); 
    v.purchasable = j.at("purchasable").get<bool>(); 
  } 
  enum class LolPurchaseWidgetLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolPurchaseWidgetLoginSessionStates& v) {
    switch(v) { 
    case LolPurchaseWidgetLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolPurchaseWidgetLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolPurchaseWidgetLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolPurchaseWidgetLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolPurchaseWidgetLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolPurchaseWidgetLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolPurchaseWidgetLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolPurchaseWidgetLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolPurchaseWidgetLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolPurchaseWidgetLoginSession { /**/ 
    LolPurchaseWidgetLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolPurchaseWidgetLoginSession& v) { 
    v.state = j.at("state").get<LolPurchaseWidgetLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolPurchaseWidgetPurchaseItem { /**/ 
    int32_t quantity;/**/
    LolPurchaseWidgetItemKey itemKey;/**/
    LolPurchaseWidgetItemPrice purchaseCurrencyInfo;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetPurchaseItem& v) { 
    j["quantity"] = v.quantity;
    j["itemKey"] = v.itemKey;
    j["purchaseCurrencyInfo"] = v.purchaseCurrencyInfo;
  }
  static void from_json(const json& j, LolPurchaseWidgetPurchaseItem& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.itemKey = j.at("itemKey").get<LolPurchaseWidgetItemKey>(); 
    v.purchaseCurrencyInfo = j.at("purchaseCurrencyInfo").get<LolPurchaseWidgetItemPrice>(); 
  } 
  struct LolPurchaseWidgetPurchaseRequest { /**/ 
    std::vector<LolPurchaseWidgetPurchaseItem> items;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetPurchaseRequest& v) { 
    j["items"] = v.items;
  }
  static void from_json(const json& j, LolPurchaseWidgetPurchaseRequest& v) { 
    v.items = j.at("items").get<std::vector<LolPurchaseWidgetPurchaseItem>>(); 
  } 
  struct LolPurchaseWidgetWallet { /**/ 
    std::vector<LolPurchaseWidgetBalance> balances;/**/
    uint64_t accountId;/**/
    int32_t version;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetWallet& v) { 
    j["balances"] = v.balances;
    j["accountId"] = v.accountId;
    j["version"] = v.version;
  }
  static void from_json(const json& j, LolPurchaseWidgetWallet& v) { 
    v.balances = j.at("balances").get<std::vector<LolPurchaseWidgetBalance>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.version = j.at("version").get<int32_t>(); 
  } 
  struct LolPurchaseWidgetTransaction { /**/ 
    std::string itemName;/**/
    LolPurchaseWidgetItemKey itemKey;/**/
    std::string transactionId;/**/
    std::string iconUrl;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetTransaction& v) { 
    j["itemName"] = v.itemName;
    j["itemKey"] = v.itemKey;
    j["transactionId"] = v.transactionId;
    j["iconUrl"] = v.iconUrl;
  }
  static void from_json(const json& j, LolPurchaseWidgetTransaction& v) { 
    v.itemName = j.at("itemName").get<std::string>(); 
    v.itemKey = j.at("itemKey").get<LolPurchaseWidgetItemKey>(); 
    v.transactionId = j.at("transactionId").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
  } 
  struct LolPurchaseWidgetPurchaseResponse { /**/ 
    LolPurchaseWidgetWallet wallet;/**/
    std::vector<LolPurchaseWidgetPurchaseItem> items;/**/
    std::vector<LolPurchaseWidgetTransaction> transactions;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetPurchaseResponse& v) { 
    j["wallet"] = v.wallet;
    j["items"] = v.items;
    j["transactions"] = v.transactions;
  }
  static void from_json(const json& j, LolPurchaseWidgetPurchaseResponse& v) { 
    v.wallet = j.at("wallet").get<LolPurchaseWidgetWallet>(); 
    v.items = j.at("items").get<std::vector<LolPurchaseWidgetPurchaseItem>>(); 
    v.transactions = j.at("transactions").get<std::vector<LolPurchaseWidgetTransaction>>(); 
  } 
  struct LolPurchaseWidgetPurchaseWidgetConfig { /**/ 
    bool enabled;/**/
    bool purchaseDisclaimerEnabled;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetPurchaseWidgetConfig& v) { 
    j["enabled"] = v.enabled;
    j["purchaseDisclaimerEnabled"] = v.purchaseDisclaimerEnabled;
  }
  static void from_json(const json& j, LolPurchaseWidgetPurchaseWidgetConfig& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.purchaseDisclaimerEnabled = j.at("purchaseDisclaimerEnabled").get<bool>(); 
  } 
  struct LolPurchaseWidgetSale { /**/ 
    std::string startDate;/**/
    std::string endDate;/**/
    std::vector<LolPurchaseWidgetItemPrice> prices;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetSale& v) { 
    j["startDate"] = v.startDate;
    j["endDate"] = v.endDate;
    j["prices"] = v.prices;
  }
  static void from_json(const json& j, LolPurchaseWidgetSale& v) { 
    v.startDate = j.at("startDate").get<std::string>(); 
    v.endDate = j.at("endDate").get<std::string>(); 
    v.prices = j.at("prices").get<std::vector<LolPurchaseWidgetItemPrice>>(); 
  } 
  struct LolPurchaseWidgetValidationRequestItem { /**/ 
    int32_t quantity;/**/
    LolPurchaseWidgetItemKey itemKey;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetValidationRequestItem& v) { 
    j["quantity"] = v.quantity;
    j["itemKey"] = v.itemKey;
  }
  static void from_json(const json& j, LolPurchaseWidgetValidationRequestItem& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.itemKey = j.at("itemKey").get<LolPurchaseWidgetItemKey>(); 
  } 
  struct LolPurchaseWidgetValidationRequest { /**/ 
    std::vector<LolPurchaseWidgetValidationRequestItem> items;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetValidationRequest& v) { 
    j["items"] = v.items;
  }
  static void from_json(const json& j, LolPurchaseWidgetValidationRequest& v) { 
    v.items = j.at("items").get<std::vector<LolPurchaseWidgetValidationRequestItem>>(); 
  } 
  struct LolPurchaseWidgetValidationResponseItem { /**/ 
    int32_t quantity;/**/
    LolPurchaseWidgetItemKey itemKey;/**/
    std::optional<std::string> name;/**/
    std::optional<LolPurchaseWidgetSale> sale;/**/
    std::optional<std::string> description;/**/
    std::vector<LolPurchaseWidgetItemPrice> prices;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetValidationResponseItem& v) { 
    j["quantity"] = v.quantity;
    j["itemKey"] = v.itemKey;
    j["name"] = v.name;
    j["sale"] = v.sale;
    j["description"] = v.description;
    j["prices"] = v.prices;
  }
  static void from_json(const json& j, LolPurchaseWidgetValidationResponseItem& v) { 
    v.quantity = j.at("quantity").get<int32_t>(); 
    v.itemKey = j.at("itemKey").get<LolPurchaseWidgetItemKey>(); 
    v.name = j.at("name").get<std::optional<std::string>>(); 
    v.sale = j.at("sale").get<std::optional<LolPurchaseWidgetSale>>(); 
    v.description = j.at("description").get<std::optional<std::string>>(); 
    v.prices = j.at("prices").get<std::vector<LolPurchaseWidgetItemPrice>>(); 
  } 
  struct LolPurchaseWidgetValidationResponse { /**/ 
    std::vector<LolPurchaseWidgetValidationResponseItem> items;/**/
    bool valid;/**/
  };
  static void to_json(json& j, const LolPurchaseWidgetValidationResponse& v) { 
    j["items"] = v.items;
    j["valid"] = v.valid;
  }
  static void from_json(const json& j, LolPurchaseWidgetValidationResponse& v) { 
    v.items = j.at("items").get<std::vector<LolPurchaseWidgetValidationResponseItem>>(); 
    v.valid = j.at("valid").get<bool>(); 
  } 
  struct LolQueueEligibilityChampionPlayableCountsForEligibility { /**/ 
    uint32_t championsFreeToPlayReward;/**/
    uint32_t championsFreeToPlay;/**/
    uint32_t championsOwned;/**/
    uint32_t championsRented;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityChampionPlayableCountsForEligibility& v) { 
    j["championsFreeToPlayReward"] = v.championsFreeToPlayReward;
    j["championsFreeToPlay"] = v.championsFreeToPlay;
    j["championsOwned"] = v.championsOwned;
    j["championsRented"] = v.championsRented;
  }
  static void from_json(const json& j, LolQueueEligibilityChampionPlayableCountsForEligibility& v) { 
    v.championsFreeToPlayReward = j.at("championsFreeToPlayReward").get<uint32_t>(); 
    v.championsFreeToPlay = j.at("championsFreeToPlay").get<uint32_t>(); 
    v.championsOwned = j.at("championsOwned").get<uint32_t>(); 
    v.championsRented = j.at("championsRented").get<uint32_t>(); 
  } 
  struct LolQueueEligibilityCollectionsRental { /**/ 
    bool rented;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityCollectionsRental& v) { 
    j["rented"] = v.rented;
  }
  static void from_json(const json& j, LolQueueEligibilityCollectionsRental& v) { 
    v.rented = j.at("rented").get<bool>(); 
  } 
  struct LolQueueEligibilityCollectionsOwnership { /**/ 
    LolQueueEligibilityCollectionsRental rental;/**/
    bool freeToPlayReward;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityCollectionsOwnership& v) { 
    j["rental"] = v.rental;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolQueueEligibilityCollectionsOwnership& v) { 
    v.rental = j.at("rental").get<LolQueueEligibilityCollectionsRental>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolQueueEligibilityCollectionsChampion { /**/ 
    LolQueueEligibilityCollectionsOwnership ownership;/**/
    bool freeToPlay;/**/
    std::vector<std::string> disabledQueues;/**/
    uint64_t purchased;/**/
    bool rankedPlayEnabled;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityCollectionsChampion& v) { 
    j["ownership"] = v.ownership;
    j["freeToPlay"] = v.freeToPlay;
    j["disabledQueues"] = v.disabledQueues;
    j["purchased"] = v.purchased;
    j["rankedPlayEnabled"] = v.rankedPlayEnabled;
  }
  static void from_json(const json& j, LolQueueEligibilityCollectionsChampion& v) { 
    v.ownership = j.at("ownership").get<LolQueueEligibilityCollectionsOwnership>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.disabledQueues = j.at("disabledQueues").get<std::vector<std::string>>(); 
    v.purchased = j.at("purchased").get<uint64_t>(); 
    v.rankedPlayEnabled = j.at("rankedPlayEnabled").get<bool>(); 
  } 
  struct LolQueueEligibilityCollectionsPlayableChampionCounts { /**/ 
    uint32_t championsOwned;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityCollectionsPlayableChampionCounts& v) { 
    j["championsOwned"] = v.championsOwned;
  }
  static void from_json(const json& j, LolQueueEligibilityCollectionsPlayableChampionCounts& v) { 
    v.championsOwned = j.at("championsOwned").get<uint32_t>(); 
  } 
  enum class LolQueueEligibilityEligibilityRestrictionCode { /**/ 
    PlayerAvailableChampionRestriction_e = 5, /**/ 
    PlayerBannedRestriction_e = 4, /**/ 
    PlayerBingeRestriction_e = 9, /**/ 
    PlayerDodgeRestriction_e = 10, /**/ 
    PlayerInGameRestriction_e = 11, /**/ 
    PlayerLeaverBustedRestriction_e = 12, /**/ 
    PlayerLeaverTaintedWarningRestriction_e = 13, /**/ 
    PlayerLevelRestriction_e = 2, /**/ 
    PlayerMaxLevelRestriction_e = 14, /**/ 
    PlayerMinLevelRestriction_e = 15, /**/ 
    PlayerMinorRestriction_e = 16, /**/ 
    PlayerRankedSuspensionRestriction_e = 17, /**/ 
    PlayerTimedRestriction_e = 3, /**/ 
    PrerequisiteQueuesNotPlayedRestriction_e = 19, /**/ 
    QueueDisabled_e = 0, /**/ 
    QueueUnsupported_e = 1, /**/ 
    TeamDivisionRestriction_e = 6, /**/ 
    TeamHighMMRMaxSizeRestriction_e = 18, /**/ 
    TeamMaxSizeRestriction_e = 7, /**/ 
    TeamMinSizeRestriction_e = 8, /**/ 
    UnknownRestriction_e = 20, /**/ 
  };
  static void to_json(json& j, const LolQueueEligibilityEligibilityRestrictionCode& v) {
    switch(v) { 
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerAvailableChampionRestriction_e:
      j = "PlayerAvailableChampionRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerBannedRestriction_e:
      j = "PlayerBannedRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerBingeRestriction_e:
      j = "PlayerBingeRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerDodgeRestriction_e:
      j = "PlayerDodgeRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerInGameRestriction_e:
      j = "PlayerInGameRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerLeaverBustedRestriction_e:
      j = "PlayerLeaverBustedRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerLeaverTaintedWarningRestriction_e:
      j = "PlayerLeaverTaintedWarningRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerLevelRestriction_e:
      j = "PlayerLevelRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerMaxLevelRestriction_e:
      j = "PlayerMaxLevelRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerMinLevelRestriction_e:
      j = "PlayerMinLevelRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerMinorRestriction_e:
      j = "PlayerMinorRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerRankedSuspensionRestriction_e:
      j = "PlayerRankedSuspensionRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PlayerTimedRestriction_e:
      j = "PlayerTimedRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::PrerequisiteQueuesNotPlayedRestriction_e:
      j = "PrerequisiteQueuesNotPlayedRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::QueueDisabled_e:
      j = "QueueDisabled";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::QueueUnsupported_e:
      j = "QueueUnsupported";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::TeamDivisionRestriction_e:
      j = "TeamDivisionRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::TeamHighMMRMaxSizeRestriction_e:
      j = "TeamHighMMRMaxSizeRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::TeamMaxSizeRestriction_e:
      j = "TeamMaxSizeRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::TeamMinSizeRestriction_e:
      j = "TeamMinSizeRestriction";
    break;
    case LolQueueEligibilityEligibilityRestrictionCode::UnknownRestriction_e:
      j = "UnknownRestriction";
    break;
    };
  }
  static void from_json(const json& j, LolQueueEligibilityEligibilityRestrictionCode& v) {
    auto s = j.get<std::string>(); 
    if(s == "PlayerAvailableChampionRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerAvailableChampionRestriction_e;
      return;
    } 
    if(s == "PlayerBannedRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerBannedRestriction_e;
      return;
    } 
    if(s == "PlayerBingeRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerBingeRestriction_e;
      return;
    } 
    if(s == "PlayerDodgeRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerDodgeRestriction_e;
      return;
    } 
    if(s == "PlayerInGameRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerInGameRestriction_e;
      return;
    } 
    if(s == "PlayerLeaverBustedRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerLeaverBustedRestriction_e;
      return;
    } 
    if(s == "PlayerLeaverTaintedWarningRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerLeaverTaintedWarningRestriction_e;
      return;
    } 
    if(s == "PlayerLevelRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMaxLevelRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerMaxLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMinLevelRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerMinLevelRestriction_e;
      return;
    } 
    if(s == "PlayerMinorRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerMinorRestriction_e;
      return;
    } 
    if(s == "PlayerRankedSuspensionRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerRankedSuspensionRestriction_e;
      return;
    } 
    if(s == "PlayerTimedRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PlayerTimedRestriction_e;
      return;
    } 
    if(s == "PrerequisiteQueuesNotPlayedRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::PrerequisiteQueuesNotPlayedRestriction_e;
      return;
    } 
    if(s == "QueueDisabled") {
      v = LolQueueEligibilityEligibilityRestrictionCode::QueueDisabled_e;
      return;
    } 
    if(s == "QueueUnsupported") {
      v = LolQueueEligibilityEligibilityRestrictionCode::QueueUnsupported_e;
      return;
    } 
    if(s == "TeamDivisionRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::TeamDivisionRestriction_e;
      return;
    } 
    if(s == "TeamHighMMRMaxSizeRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::TeamHighMMRMaxSizeRestriction_e;
      return;
    } 
    if(s == "TeamMaxSizeRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::TeamMaxSizeRestriction_e;
      return;
    } 
    if(s == "TeamMinSizeRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::TeamMinSizeRestriction_e;
      return;
    } 
    if(s == "UnknownRestriction") {
      v = LolQueueEligibilityEligibilityRestrictionCode::UnknownRestriction_e;
      return;
    } 
  } 
  struct LolQueueEligibilityEligibilityRestriction { /**/ 
    std::map<std::string, std::string> restrictionArgs;/**/
    std::vector<uint64_t> summonerIds;/**/
    uint64_t expiredTimestamp;/**/
    LolQueueEligibilityEligibilityRestrictionCode restrictionCode;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityEligibilityRestriction& v) { 
    j["restrictionArgs"] = v.restrictionArgs;
    j["summonerIds"] = v.summonerIds;
    j["expiredTimestamp"] = v.expiredTimestamp;
    j["restrictionCode"] = v.restrictionCode;
  }
  static void from_json(const json& j, LolQueueEligibilityEligibilityRestriction& v) { 
    v.restrictionArgs = j.at("restrictionArgs").get<std::map<std::string, std::string>>(); 
    v.summonerIds = j.at("summonerIds").get<std::vector<uint64_t>>(); 
    v.expiredTimestamp = j.at("expiredTimestamp").get<uint64_t>(); 
    v.restrictionCode = j.at("restrictionCode").get<LolQueueEligibilityEligibilityRestrictionCode>(); 
  } 
  struct LolQueueEligibilityEligibility { /**/ 
    int32_t queueId;/**/
    std::vector<LolQueueEligibilityEligibilityRestriction> restrictions;/**/
    bool eligible;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityEligibility& v) { 
    j["queueId"] = v.queueId;
    j["restrictions"] = v.restrictions;
    j["eligible"] = v.eligible;
  }
  static void from_json(const json& j, LolQueueEligibilityEligibility& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.restrictions = j.at("restrictions").get<std::vector<LolQueueEligibilityEligibilityRestriction>>(); 
    v.eligible = j.at("eligible").get<bool>(); 
  } 
  struct LolQueueEligibilityEligibilityQueryParams { /**/ 
    std::vector<int32_t> queueIds;/**/
    std::vector<uint64_t> summonerIds;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityEligibilityQueryParams& v) { 
    j["queueIds"] = v.queueIds;
    j["summonerIds"] = v.summonerIds;
  }
  static void from_json(const json& j, LolQueueEligibilityEligibilityQueryParams& v) { 
    v.queueIds = j.at("queueIds").get<std::vector<int32_t>>(); 
    v.summonerIds = j.at("summonerIds").get<std::vector<uint64_t>>(); 
  } 
  struct LolQueueEligibilityLeague { /**/ 
    std::string leagueTier;/**/
    std::string queueType;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityLeague& v) { 
    j["leagueTier"] = v.leagueTier;
    j["queueType"] = v.queueType;
  }
  static void from_json(const json& j, LolQueueEligibilityLeague& v) { 
    v.leagueTier = j.at("leagueTier").get<std::string>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
  } 
  enum class LolQueueEligibilityLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolQueueEligibilityLoginSessionStates& v) {
    switch(v) { 
    case LolQueueEligibilityLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolQueueEligibilityLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolQueueEligibilityLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolQueueEligibilityLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolQueueEligibilityLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolQueueEligibilityLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolQueueEligibilityLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolQueueEligibilityLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolQueueEligibilityLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolQueueEligibilityLoginSession { /**/ 
    LolQueueEligibilityLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolQueueEligibilityLoginSession& v) { 
    v.state = j.at("state").get<LolQueueEligibilityLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  enum class LolQueueEligibilityQueueAvailability { /**/ 
    Available_e = 0, /**/ 
    DoesntMeetRequirements_e = 2, /**/ 
    PlatformDisabled_e = 1, /**/ 
  };
  static void to_json(json& j, const LolQueueEligibilityQueueAvailability& v) {
    switch(v) { 
    case LolQueueEligibilityQueueAvailability::Available_e:
      j = "Available";
    break;
    case LolQueueEligibilityQueueAvailability::DoesntMeetRequirements_e:
      j = "DoesntMeetRequirements";
    break;
    case LolQueueEligibilityQueueAvailability::PlatformDisabled_e:
      j = "PlatformDisabled";
    break;
    };
  }
  static void from_json(const json& j, LolQueueEligibilityQueueAvailability& v) {
    auto s = j.get<std::string>(); 
    if(s == "Available") {
      v = LolQueueEligibilityQueueAvailability::Available_e;
      return;
    } 
    if(s == "DoesntMeetRequirements") {
      v = LolQueueEligibilityQueueAvailability::DoesntMeetRequirements_e;
      return;
    } 
    if(s == "PlatformDisabled") {
      v = LolQueueEligibilityQueueAvailability::PlatformDisabled_e;
      return;
    } 
  } 
  struct LolQueueEligibilityQueue { /**/ 
    int32_t numPlayersPerTeam;/**/
    int32_t maximumParticipantListSize;/**/
    bool showPositionSelector;/**/
    LolQueueEligibilityQueueAvailability queueAvailability;/**/
    uint32_t minLevel;/**/
    int32_t id;/**/
    std::string type;/**/
    bool areFreeChampionsAllowed;/**/
    uint32_t maxLevel;/**/
    uint32_t championsRequiredToPlay;/**/
    bool isRanked;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityQueue& v) { 
    j["numPlayersPerTeam"] = v.numPlayersPerTeam;
    j["maximumParticipantListSize"] = v.maximumParticipantListSize;
    j["showPositionSelector"] = v.showPositionSelector;
    j["queueAvailability"] = v.queueAvailability;
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
    j["type"] = v.type;
    j["areFreeChampionsAllowed"] = v.areFreeChampionsAllowed;
    j["maxLevel"] = v.maxLevel;
    j["championsRequiredToPlay"] = v.championsRequiredToPlay;
    j["isRanked"] = v.isRanked;
  }
  static void from_json(const json& j, LolQueueEligibilityQueue& v) { 
    v.numPlayersPerTeam = j.at("numPlayersPerTeam").get<int32_t>(); 
    v.maximumParticipantListSize = j.at("maximumParticipantListSize").get<int32_t>(); 
    v.showPositionSelector = j.at("showPositionSelector").get<bool>(); 
    v.queueAvailability = j.at("queueAvailability").get<LolQueueEligibilityQueueAvailability>(); 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.type = j.at("type").get<std::string>(); 
    v.areFreeChampionsAllowed = j.at("areFreeChampionsAllowed").get<bool>(); 
    v.maxLevel = j.at("maxLevel").get<uint32_t>(); 
    v.championsRequiredToPlay = j.at("championsRequiredToPlay").get<uint32_t>(); 
    v.isRanked = j.at("isRanked").get<bool>(); 
  } 
  struct LolQueueEligibilityQueueShutdownStatus { /**/ 
    bool isDisabled;/**/
  };
  static void to_json(json& j, const LolQueueEligibilityQueueShutdownStatus& v) { 
    j["isDisabled"] = v.isDisabled;
  }
  static void from_json(const json& j, LolQueueEligibilityQueueShutdownStatus& v) { 
    v.isDisabled = j.at("isDisabled").get<bool>(); 
  } 
  struct LolQueueEligibilitySummonerSummoner { /**/ 
    uint64_t summonerId;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolQueueEligibilitySummonerSummoner& v) { 
    j["summonerId"] = v.summonerId;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolQueueEligibilitySummonerSummoner& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  enum class LolRankedStatsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolRankedStatsLoginSessionStates& v) {
    switch(v) { 
    case LolRankedStatsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolRankedStatsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolRankedStatsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolRankedStatsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolRankedStatsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolRankedStatsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolRankedStatsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolRankedStatsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolRankedStatsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolRankedStatsLoginSession { /**/ 
    LolRankedStatsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolRankedStatsLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolRankedStatsLoginSession& v) { 
    v.state = j.at("state").get<LolRankedStatsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolRankedStatsPluginStatus { /**/ 
    bool ready;/**/
  };
  static void to_json(json& j, const LolRankedStatsPluginStatus& v) { 
    j["ready"] = v.ready;
  }
  static void from_json(const json& j, LolRankedStatsPluginStatus& v) { 
    v.ready = j.at("ready").get<bool>(); 
  } 
  enum class LolRankedStatsRankedTier { /**/ 
    BRONZE_e = 2, /**/ 
    CHALLENGER_e = 8, /**/ 
    DIAMOND_e = 6, /**/ 
    GOLD_e = 4, /**/ 
    MASTER_e = 7, /**/ 
    NOT_RANKED_e = 0, /**/ 
    PLATINUM_e = 5, /**/ 
    PROVISIONAL_e = 1, /**/ 
    SILVER_e = 3, /**/ 
  };
  static void to_json(json& j, const LolRankedStatsRankedTier& v) {
    switch(v) { 
    case LolRankedStatsRankedTier::BRONZE_e:
      j = "BRONZE";
    break;
    case LolRankedStatsRankedTier::CHALLENGER_e:
      j = "CHALLENGER";
    break;
    case LolRankedStatsRankedTier::DIAMOND_e:
      j = "DIAMOND";
    break;
    case LolRankedStatsRankedTier::GOLD_e:
      j = "GOLD";
    break;
    case LolRankedStatsRankedTier::MASTER_e:
      j = "MASTER";
    break;
    case LolRankedStatsRankedTier::NOT_RANKED_e:
      j = "NOT_RANKED";
    break;
    case LolRankedStatsRankedTier::PLATINUM_e:
      j = "PLATINUM";
    break;
    case LolRankedStatsRankedTier::PROVISIONAL_e:
      j = "PROVISIONAL";
    break;
    case LolRankedStatsRankedTier::SILVER_e:
      j = "SILVER";
    break;
    };
  }
  static void from_json(const json& j, LolRankedStatsRankedTier& v) {
    auto s = j.get<std::string>(); 
    if(s == "BRONZE") {
      v = LolRankedStatsRankedTier::BRONZE_e;
      return;
    } 
    if(s == "CHALLENGER") {
      v = LolRankedStatsRankedTier::CHALLENGER_e;
      return;
    } 
    if(s == "DIAMOND") {
      v = LolRankedStatsRankedTier::DIAMOND_e;
      return;
    } 
    if(s == "GOLD") {
      v = LolRankedStatsRankedTier::GOLD_e;
      return;
    } 
    if(s == "MASTER") {
      v = LolRankedStatsRankedTier::MASTER_e;
      return;
    } 
    if(s == "NOT_RANKED") {
      v = LolRankedStatsRankedTier::NOT_RANKED_e;
      return;
    } 
    if(s == "PLATINUM") {
      v = LolRankedStatsRankedTier::PLATINUM_e;
      return;
    } 
    if(s == "PROVISIONAL") {
      v = LolRankedStatsRankedTier::PROVISIONAL_e;
      return;
    } 
    if(s == "SILVER") {
      v = LolRankedStatsRankedTier::SILVER_e;
      return;
    } 
  } 
  enum class LolRankedStatsRankedQueue { /**/ 
    INVALID_e = 0, /**/ 
    RANKED_FLEX_SR_e = 2, /**/ 
    RANKED_FLEX_TT_e = 1, /**/ 
    RANKED_SOLO_5x5_e = 3, /**/ 
    RANKED_TEAM_3x3_e = 4, /**/ 
    RANKED_TEAM_5x5_e = 5, /**/ 
  };
  static void to_json(json& j, const LolRankedStatsRankedQueue& v) {
    switch(v) { 
    case LolRankedStatsRankedQueue::INVALID_e:
      j = "INVALID";
    break;
    case LolRankedStatsRankedQueue::RANKED_FLEX_SR_e:
      j = "RANKED_FLEX_SR";
    break;
    case LolRankedStatsRankedQueue::RANKED_FLEX_TT_e:
      j = "RANKED_FLEX_TT";
    break;
    case LolRankedStatsRankedQueue::RANKED_SOLO_5x5_e:
      j = "RANKED_SOLO_5x5";
    break;
    case LolRankedStatsRankedQueue::RANKED_TEAM_3x3_e:
      j = "RANKED_TEAM_3x3";
    break;
    case LolRankedStatsRankedQueue::RANKED_TEAM_5x5_e:
      j = "RANKED_TEAM_5x5";
    break;
    };
  }
  static void from_json(const json& j, LolRankedStatsRankedQueue& v) {
    auto s = j.get<std::string>(); 
    if(s == "INVALID") {
      v = LolRankedStatsRankedQueue::INVALID_e;
      return;
    } 
    if(s == "RANKED_FLEX_SR") {
      v = LolRankedStatsRankedQueue::RANKED_FLEX_SR_e;
      return;
    } 
    if(s == "RANKED_FLEX_TT") {
      v = LolRankedStatsRankedQueue::RANKED_FLEX_TT_e;
      return;
    } 
    if(s == "RANKED_SOLO_5x5") {
      v = LolRankedStatsRankedQueue::RANKED_SOLO_5x5_e;
      return;
    } 
    if(s == "RANKED_TEAM_3x3") {
      v = LolRankedStatsRankedQueue::RANKED_TEAM_3x3_e;
      return;
    } 
    if(s == "RANKED_TEAM_5x5") {
      v = LolRankedStatsRankedQueue::RANKED_TEAM_5x5_e;
      return;
    } 
  } 
  struct LolRankedStatsRankedEntry { /**/ 
    std::string leagueName;/**/
    LolRankedStatsRankedTier rankedTier;/**/
    bool isApexTier;/**/
    LolRankedStatsRankedQueue rankedQueue;/**/
    uint64_t games;/**/
    uint64_t wins;/**/
    int64_t apexDaysUntilDecay;/**/
    int64_t lp;/**/
    uint64_t division;/**/
  };
  static void to_json(json& j, const LolRankedStatsRankedEntry& v) { 
    j["leagueName"] = v.leagueName;
    j["rankedTier"] = v.rankedTier;
    j["isApexTier"] = v.isApexTier;
    j["rankedQueue"] = v.rankedQueue;
    j["games"] = v.games;
    j["wins"] = v.wins;
    j["apexDaysUntilDecay"] = v.apexDaysUntilDecay;
    j["lp"] = v.lp;
    j["division"] = v.division;
  }
  static void from_json(const json& j, LolRankedStatsRankedEntry& v) { 
    v.leagueName = j.at("leagueName").get<std::string>(); 
    v.rankedTier = j.at("rankedTier").get<LolRankedStatsRankedTier>(); 
    v.isApexTier = j.at("isApexTier").get<bool>(); 
    v.rankedQueue = j.at("rankedQueue").get<LolRankedStatsRankedQueue>(); 
    v.games = j.at("games").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.apexDaysUntilDecay = j.at("apexDaysUntilDecay").get<int64_t>(); 
    v.lp = j.at("lp").get<int64_t>(); 
    v.division = j.at("division").get<uint64_t>(); 
  } 
  struct LolRankedStatsRankedData { /**/ 
    std::vector<LolRankedStatsRankedEntry> rankedData;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolRankedStatsRankedData& v) { 
    j["rankedData"] = v.rankedData;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolRankedStatsRankedData& v) { 
    v.rankedData = j.at("rankedData").get<std::vector<LolRankedStatsRankedEntry>>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolRankedStatsRankedSummonerResource { /**/ 
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolRankedStatsRankedSummonerResource& v) { 
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolRankedStatsRankedSummonerResource& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolReplaysGameflowAvailability { /**/ 
    std::string state;/**/
  };
  static void to_json(json& j, const LolReplaysGameflowAvailability& v) { 
    j["state"] = v.state;
  }
  static void from_json(const json& j, LolReplaysGameflowAvailability& v) { 
    v.state = j.at("state").get<std::string>(); 
  } 
  struct LolReplaysGameflowGameClient { /**/ 
    bool running;/**/
  };
  static void to_json(json& j, const LolReplaysGameflowGameClient& v) { 
    j["running"] = v.running;
  }
  static void from_json(const json& j, LolReplaysGameflowGameClient& v) { 
    v.running = j.at("running").get<bool>(); 
  } 
  enum class LolReplaysGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolReplaysGameflowPhase& v) {
    switch(v) { 
    case LolReplaysGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolReplaysGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolReplaysGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolReplaysGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolReplaysGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolReplaysGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolReplaysGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolReplaysGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolReplaysGameflowPhase::None_e:
      j = "None";
    break;
    case LolReplaysGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolReplaysGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolReplaysGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolReplaysGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolReplaysGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolReplaysGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolReplaysGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolReplaysGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolReplaysGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolReplaysGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolReplaysGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolReplaysGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolReplaysGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolReplaysGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolReplaysGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolReplaysGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolReplaysGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolReplaysGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolReplaysGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolReplaysGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolReplaysGameflowSession { /**/ 
    LolReplaysGameflowPhase phase;/**/
    LolReplaysGameflowGameClient gameClient;/**/
  };
  static void to_json(json& j, const LolReplaysGameflowSession& v) { 
    j["phase"] = v.phase;
    j["gameClient"] = v.gameClient;
  }
  static void from_json(const json& j, LolReplaysGameflowSession& v) { 
    v.phase = j.at("phase").get<LolReplaysGameflowPhase>(); 
    v.gameClient = j.at("gameClient").get<LolReplaysGameflowGameClient>(); 
  } 
  enum class LolReplaysGameflowWatchPhase { /**/ 
    None_e = 0, /**/ 
    WatchFailedToLaunch_e = 3, /**/ 
    WatchInProgress_e = 2, /**/ 
    WatchStarted_e = 1, /**/ 
  };
  static void to_json(json& j, const LolReplaysGameflowWatchPhase& v) {
    switch(v) { 
    case LolReplaysGameflowWatchPhase::None_e:
      j = "None";
    break;
    case LolReplaysGameflowWatchPhase::WatchFailedToLaunch_e:
      j = "WatchFailedToLaunch";
    break;
    case LolReplaysGameflowWatchPhase::WatchInProgress_e:
      j = "WatchInProgress";
    break;
    case LolReplaysGameflowWatchPhase::WatchStarted_e:
      j = "WatchStarted";
    break;
    };
  }
  static void from_json(const json& j, LolReplaysGameflowWatchPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "None") {
      v = LolReplaysGameflowWatchPhase::None_e;
      return;
    } 
    if(s == "WatchFailedToLaunch") {
      v = LolReplaysGameflowWatchPhase::WatchFailedToLaunch_e;
      return;
    } 
    if(s == "WatchInProgress") {
      v = LolReplaysGameflowWatchPhase::WatchInProgress_e;
      return;
    } 
    if(s == "WatchStarted") {
      v = LolReplaysGameflowWatchPhase::WatchStarted_e;
      return;
    } 
  } 
  enum class LolReplaysMetadataState { /**/ 
    checking_e = 0, /**/ 
    download_e = 3, /**/ 
    downloading_e = 4, /**/ 
    error_e = 10, /**/ 
    found_e = 1, /**/ 
    incompatible_e = 5, /**/ 
    lost_e = 8, /**/ 
    missingOrExpired_e = 6, /**/ 
    retryDownload_e = 7, /**/ 
    unsupported_e = 9, /**/ 
    watch_e = 2, /**/ 
  };
  static void to_json(json& j, const LolReplaysMetadataState& v) {
    switch(v) { 
    case LolReplaysMetadataState::checking_e:
      j = "checking";
    break;
    case LolReplaysMetadataState::download_e:
      j = "download";
    break;
    case LolReplaysMetadataState::downloading_e:
      j = "downloading";
    break;
    case LolReplaysMetadataState::error_e:
      j = "error";
    break;
    case LolReplaysMetadataState::found_e:
      j = "found";
    break;
    case LolReplaysMetadataState::incompatible_e:
      j = "incompatible";
    break;
    case LolReplaysMetadataState::lost_e:
      j = "lost";
    break;
    case LolReplaysMetadataState::missingOrExpired_e:
      j = "missingOrExpired";
    break;
    case LolReplaysMetadataState::retryDownload_e:
      j = "retryDownload";
    break;
    case LolReplaysMetadataState::unsupported_e:
      j = "unsupported";
    break;
    case LolReplaysMetadataState::watch_e:
      j = "watch";
    break;
    };
  }
  static void from_json(const json& j, LolReplaysMetadataState& v) {
    auto s = j.get<std::string>(); 
    if(s == "checking") {
      v = LolReplaysMetadataState::checking_e;
      return;
    } 
    if(s == "download") {
      v = LolReplaysMetadataState::download_e;
      return;
    } 
    if(s == "downloading") {
      v = LolReplaysMetadataState::downloading_e;
      return;
    } 
    if(s == "error") {
      v = LolReplaysMetadataState::error_e;
      return;
    } 
    if(s == "found") {
      v = LolReplaysMetadataState::found_e;
      return;
    } 
    if(s == "incompatible") {
      v = LolReplaysMetadataState::incompatible_e;
      return;
    } 
    if(s == "lost") {
      v = LolReplaysMetadataState::lost_e;
      return;
    } 
    if(s == "missingOrExpired") {
      v = LolReplaysMetadataState::missingOrExpired_e;
      return;
    } 
    if(s == "retryDownload") {
      v = LolReplaysMetadataState::retryDownload_e;
      return;
    } 
    if(s == "unsupported") {
      v = LolReplaysMetadataState::unsupported_e;
      return;
    } 
    if(s == "watch") {
      v = LolReplaysMetadataState::watch_e;
      return;
    } 
  } 
  struct LolReplaysReplayContextData { /**/ 
    std::string componentType;/**/
  };
  static void to_json(json& j, const LolReplaysReplayContextData& v) { 
    j["componentType"] = v.componentType;
  }
  static void from_json(const json& j, LolReplaysReplayContextData& v) { 
    v.componentType = j.at("componentType").get<std::string>(); 
  } 
  struct LolReplaysReplayCreateMetadata { /**/ 
    int32_t queueId;/**/
    std::string gameVersion;/**/
    std::string gameType;/**/
    uint64_t gameEnd;/**/
  };
  static void to_json(json& j, const LolReplaysReplayCreateMetadata& v) { 
    j["queueId"] = v.queueId;
    j["gameVersion"] = v.gameVersion;
    j["gameType"] = v.gameType;
    j["gameEnd"] = v.gameEnd;
  }
  static void from_json(const json& j, LolReplaysReplayCreateMetadata& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.gameVersion = j.at("gameVersion").get<std::string>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.gameEnd = j.at("gameEnd").get<uint64_t>(); 
  } 
  struct LolReplaysReplayMetadata { /**/ 
    LolReplaysMetadataState state;/**/
    uint64_t gameId;/**/
    uint32_t downloadProgress;/**/
  };
  static void to_json(json& j, const LolReplaysReplayMetadata& v) { 
    j["state"] = v.state;
    j["gameId"] = v.gameId;
    j["downloadProgress"] = v.downloadProgress;
  }
  static void from_json(const json& j, LolReplaysReplayMetadata& v) { 
    v.state = j.at("state").get<LolReplaysMetadataState>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.downloadProgress = j.at("downloadProgress").get<uint32_t>(); 
  } 
  struct LolReplaysReplaysConfiguration { /**/ 
    bool isPatching;/**/
    bool isReplaysForEndOfGameEnabled;/**/
    bool isReplaysForMatchHistoryEnabled;/**/
    bool isLoggedIn;/**/
    bool isPlayingReplay;/**/
    bool isReplaysEnabled;/**/
    double minutesUntilReplayConsideredLost;/**/
    std::string gameVersion;/**/
    bool isPlayingGame;/**/
    std::string minServerVersion;/**/
  };
  static void to_json(json& j, const LolReplaysReplaysConfiguration& v) { 
    j["isPatching"] = v.isPatching;
    j["isReplaysForEndOfGameEnabled"] = v.isReplaysForEndOfGameEnabled;
    j["isReplaysForMatchHistoryEnabled"] = v.isReplaysForMatchHistoryEnabled;
    j["isLoggedIn"] = v.isLoggedIn;
    j["isPlayingReplay"] = v.isPlayingReplay;
    j["isReplaysEnabled"] = v.isReplaysEnabled;
    j["minutesUntilReplayConsideredLost"] = v.minutesUntilReplayConsideredLost;
    j["gameVersion"] = v.gameVersion;
    j["isPlayingGame"] = v.isPlayingGame;
    j["minServerVersion"] = v.minServerVersion;
  }
  static void from_json(const json& j, LolReplaysReplaysConfiguration& v) { 
    v.isPatching = j.at("isPatching").get<bool>(); 
    v.isReplaysForEndOfGameEnabled = j.at("isReplaysForEndOfGameEnabled").get<bool>(); 
    v.isReplaysForMatchHistoryEnabled = j.at("isReplaysForMatchHistoryEnabled").get<bool>(); 
    v.isLoggedIn = j.at("isLoggedIn").get<bool>(); 
    v.isPlayingReplay = j.at("isPlayingReplay").get<bool>(); 
    v.isReplaysEnabled = j.at("isReplaysEnabled").get<bool>(); 
    v.minutesUntilReplayConsideredLost = j.at("minutesUntilReplayConsideredLost").get<double>(); 
    v.gameVersion = j.at("gameVersion").get<std::string>(); 
    v.isPlayingGame = j.at("isPlayingGame").get<bool>(); 
    v.minServerVersion = j.at("minServerVersion").get<std::string>(); 
  } 
  struct LolReplaysReplaysDynamicConfig { /**/ 
    double MinutesUntilReplayConsideredLost;/**/
    std::string MinSupportedGameServerVersion;/**/
  };
  static void to_json(json& j, const LolReplaysReplaysDynamicConfig& v) { 
    j["MinutesUntilReplayConsideredLost"] = v.MinutesUntilReplayConsideredLost;
    j["MinSupportedGameServerVersion"] = v.MinSupportedGameServerVersion;
  }
  static void from_json(const json& j, LolReplaysReplaysDynamicConfig& v) { 
    v.MinutesUntilReplayConsideredLost = j.at("MinutesUntilReplayConsideredLost").get<double>(); 
    v.MinSupportedGameServerVersion = j.at("MinSupportedGameServerVersion").get<std::string>(); 
  } 
  struct LolReplaysReplaysSettingsData { /**/ 
    std::string replays_folder_path;/**/
    std::string highlights_folder_path;/**/
  };
  static void to_json(json& j, const LolReplaysReplaysSettingsData& v) { 
    j["replays_folder_path"] = v.replays_folder_path;
    j["highlights_folder_path"] = v.highlights_folder_path;
  }
  static void from_json(const json& j, LolReplaysReplaysSettingsData& v) { 
    v.replays_folder_path = j.at("replays_folder_path").get<std::string>(); 
    v.highlights_folder_path = j.at("highlights_folder_path").get<std::string>(); 
  } 
  struct LolReplaysReplaysSettingsResource { /**/ 
    LolReplaysReplaysSettingsData data;/**/
  };
  static void to_json(json& j, const LolReplaysReplaysSettingsResource& v) { 
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolReplaysReplaysSettingsResource& v) { 
    v.data = j.at("data").get<LolReplaysReplaysSettingsData>(); 
  } 
  struct LolReplaysRoflFileMetadata { /**/ 
    uint32_t lastKeyFrameId;/**/
    std::string gameVersion;/**/
    uint32_t lastGameChunkId;/**/
    uint32_t gameLength;/**/
  };
  static void to_json(json& j, const LolReplaysRoflFileMetadata& v) { 
    j["lastKeyFrameId"] = v.lastKeyFrameId;
    j["gameVersion"] = v.gameVersion;
    j["lastGameChunkId"] = v.lastGameChunkId;
    j["gameLength"] = v.gameLength;
  }
  static void from_json(const json& j, LolReplaysRoflFileMetadata& v) { 
    v.lastKeyFrameId = j.at("lastKeyFrameId").get<uint32_t>(); 
    v.gameVersion = j.at("gameVersion").get<std::string>(); 
    v.lastGameChunkId = j.at("lastGameChunkId").get<uint32_t>(); 
    v.gameLength = j.at("gameLength").get<uint32_t>(); 
  } 
  enum class LolSettingsLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolSettingsLoginSessionStates& v) {
    switch(v) { 
    case LolSettingsLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolSettingsLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolSettingsLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolSettingsLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolSettingsLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolSettingsLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolSettingsLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolSettingsLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolSettingsLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolSettingsLoginSession { /**/ 
    LolSettingsLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolSettingsLoginSession& v) { 
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolSettingsLoginSession& v) { 
    v.state = j.at("state").get<LolSettingsLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolSettingsSettingCategory { /**/ 
    int32_t schemaVersion;/**/
    json data;/**/
  };
  static void to_json(json& j, const LolSettingsSettingCategory& v) { 
    j["schemaVersion"] = v.schemaVersion;
    j["data"] = v.data;
  }
  static void from_json(const json& j, LolSettingsSettingCategory& v) { 
    v.schemaVersion = j.at("schemaVersion").get<int32_t>(); 
    v.data = j.at("data").get<json>(); 
  } 
  enum class LolSimpleDialogMessagesGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolSimpleDialogMessagesGameflowPhase& v) {
    switch(v) { 
    case LolSimpleDialogMessagesGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolSimpleDialogMessagesGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolSimpleDialogMessagesGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolSimpleDialogMessagesGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolSimpleDialogMessagesGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolSimpleDialogMessagesGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolSimpleDialogMessagesGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolSimpleDialogMessagesGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolSimpleDialogMessagesGameflowPhase::None_e:
      j = "None";
    break;
    case LolSimpleDialogMessagesGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolSimpleDialogMessagesGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolSimpleDialogMessagesGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolSimpleDialogMessagesGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolSimpleDialogMessagesGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolSimpleDialogMessagesGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolSimpleDialogMessagesGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolSimpleDialogMessagesGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolSimpleDialogMessagesGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolSimpleDialogMessagesGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolSimpleDialogMessagesGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolSimpleDialogMessagesGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolSimpleDialogMessagesGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolSimpleDialogMessagesGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolSimpleDialogMessagesGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolSimpleDialogMessagesGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolSimpleDialogMessagesGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolSimpleDialogMessagesGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolSimpleDialogMessagesGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolSimpleDialogMessagesGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolSimpleDialogMessagesGameflowSession { /**/ 
    LolSimpleDialogMessagesGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolSimpleDialogMessagesGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolSimpleDialogMessagesGameflowSession& v) { 
    v.phase = j.at("phase").get<LolSimpleDialogMessagesGameflowPhase>(); 
  } 
  struct LolSimpleDialogMessagesLocalMessageRequest { /**/ 
    std::vector<std::string> msgBody;/**/
    std::string msgType;/**/
  };
  static void to_json(json& j, const LolSimpleDialogMessagesLocalMessageRequest& v) { 
    j["msgBody"] = v.msgBody;
    j["msgType"] = v.msgType;
  }
  static void from_json(const json& j, LolSimpleDialogMessagesLocalMessageRequest& v) { 
    v.msgBody = j.at("msgBody").get<std::vector<std::string>>(); 
    v.msgType = j.at("msgType").get<std::string>(); 
  } 
  struct LolSimpleDialogMessagesSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolSimpleDialogMessagesSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolSimpleDialogMessagesSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolSimpleDialogMessagesLoginDataPacket { /**/ 
    std::vector<LolSimpleDialogMessagesSimpleMessage> simpleMessages;/**/
  };
  static void to_json(json& j, const LolSimpleDialogMessagesLoginDataPacket& v) { 
    j["simpleMessages"] = v.simpleMessages;
  }
  static void from_json(const json& j, LolSimpleDialogMessagesLoginDataPacket& v) { 
    v.simpleMessages = j.at("simpleMessages").get<std::vector<LolSimpleDialogMessagesSimpleMessage>>(); 
  } 
  struct LolSimpleDialogMessagesMessage { /**/ 
    std::string type;/**/
    int64_t id;/**/
    json body;/**/
  };
  static void to_json(json& j, const LolSimpleDialogMessagesMessage& v) { 
    j["type"] = v.type;
    j["id"] = v.id;
    j["body"] = v.body;
  }
  static void from_json(const json& j, LolSimpleDialogMessagesMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.body = j.at("body").get<json>(); 
  } 
  struct LolStoreSummonerLevelAndPoints { /**/ 
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolStoreSummonerLevelAndPoints& v) { 
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolStoreSummonerLevelAndPoints& v) { 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolStoreSummoner { /**/ 
    uint64_t acctId;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const LolStoreSummoner& v) { 
    j["acctId"] = v.acctId;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, LolStoreSummoner& v) { 
    v.acctId = j.at("acctId").get<uint64_t>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct LolStoreAllSummonerData { /**/ 
    LolStoreSummonerLevelAndPoints summonerLevelAndPoints;/**/
    LolStoreSummoner summoner;/**/
  };
  static void to_json(json& j, const LolStoreAllSummonerData& v) { 
    j["summonerLevelAndPoints"] = v.summonerLevelAndPoints;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, LolStoreAllSummonerData& v) { 
    v.summonerLevelAndPoints = j.at("summonerLevelAndPoints").get<LolStoreSummonerLevelAndPoints>(); 
    v.summoner = j.at("summoner").get<LolStoreSummoner>(); 
  } 
  struct LolStoreBundleItemDTO { /**/ 
    int64_t discountedRp;/**/
    uint32_t quantity;/**/
    int32_t itemId;/**/
    int64_t rp;/**/
    std::string iconUrl;/**/
    std::string name;/**/
    int64_t ip;/**/
    std::string description;/**/
    std::string inventoryType;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const LolStoreBundleItemDTO& v) { 
    j["discountedRp"] = v.discountedRp;
    j["quantity"] = v.quantity;
    j["itemId"] = v.itemId;
    j["rp"] = v.rp;
    j["iconUrl"] = v.iconUrl;
    j["name"] = v.name;
    j["ip"] = v.ip;
    j["description"] = v.description;
    j["inventoryType"] = v.inventoryType;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, LolStoreBundleItemDTO& v) { 
    v.discountedRp = j.at("discountedRp").get<int64_t>(); 
    v.quantity = j.at("quantity").get<uint32_t>(); 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.ip = j.at("ip").get<int64_t>(); 
    v.description = j.at("description").get<std::string>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct LolStoreBundledItemCost { /**/ 
    std::string costType;/**/
    std::optional<float> discount;/**/
    int64_t cost;/**/
    std::string currency;/**/
  };
  static void to_json(json& j, const LolStoreBundledItemCost& v) { 
    j["costType"] = v.costType;
    j["discount"] = v.discount;
    j["cost"] = v.cost;
    j["currency"] = v.currency;
  }
  static void from_json(const json& j, LolStoreBundledItemCost& v) { 
    v.costType = j.at("costType").get<std::string>(); 
    v.discount = j.at("discount").get<std::optional<float>>(); 
    v.cost = j.at("cost").get<int64_t>(); 
    v.currency = j.at("currency").get<std::string>(); 
  } 
  struct LolStoreBundledItem { /**/ 
    uint32_t quantity;/**/
    int32_t itemId;/**/
    std::string inventoryType;/**/
    std::vector<LolStoreBundledItemCost> discountPrices;/**/
  };
  static void to_json(json& j, const LolStoreBundledItem& v) { 
    j["quantity"] = v.quantity;
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
    j["discountPrices"] = v.discountPrices;
  }
  static void from_json(const json& j, LolStoreBundledItem& v) { 
    v.quantity = j.at("quantity").get<uint32_t>(); 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.discountPrices = j.at("discountPrices").get<std::vector<LolStoreBundledItemCost>>(); 
  } 
  struct LolStoreBundled { /**/ 
    std::vector<LolStoreBundledItem> items;/**/
    std::vector<LolStoreBundledItemCost> minimumPrices;/**/
    bool flexible;/**/
  };
  static void to_json(json& j, const LolStoreBundled& v) { 
    j["items"] = v.items;
    j["minimumPrices"] = v.minimumPrices;
    j["flexible"] = v.flexible;
  }
  static void from_json(const json& j, LolStoreBundled& v) { 
    v.items = j.at("items").get<std::vector<LolStoreBundledItem>>(); 
    v.minimumPrices = j.at("minimumPrices").get<std::vector<LolStoreBundledItemCost>>(); 
    v.flexible = j.at("flexible").get<bool>(); 
  } 
  struct LolStoreItemKey { /**/ 
    int32_t itemId;/**/
    std::string inventoryType;/**/
  };
  static void to_json(json& j, const LolStoreItemKey& v) { 
    j["itemId"] = v.itemId;
    j["inventoryType"] = v.inventoryType;
  }
  static void from_json(const json& j, LolStoreItemKey& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
  } 
  struct LolStoreItemCost { /**/ 
    std::optional<float> discount;/**/
    int64_t cost;/**/
    std::string currency;/**/
  };
  static void to_json(json& j, const LolStoreItemCost& v) { 
    j["discount"] = v.discount;
    j["cost"] = v.cost;
    j["currency"] = v.currency;
  }
  static void from_json(const json& j, LolStoreItemCost& v) { 
    v.discount = j.at("discount").get<std::optional<float>>(); 
    v.cost = j.at("cost").get<int64_t>(); 
    v.currency = j.at("currency").get<std::string>(); 
  } 
  struct LolStoreSale { /**/ 
    std::string startDate;/**/
    std::string endDate;/**/
    std::vector<LolStoreItemCost> prices;/**/
  };
  static void to_json(json& j, const LolStoreSale& v) { 
    j["startDate"] = v.startDate;
    j["endDate"] = v.endDate;
    j["prices"] = v.prices;
  }
  static void from_json(const json& j, LolStoreSale& v) { 
    v.startDate = j.at("startDate").get<std::string>(); 
    v.endDate = j.at("endDate").get<std::string>(); 
    v.prices = j.at("prices").get<std::vector<LolStoreItemCost>>(); 
  } 
  struct LolStoreCatalogItem { /**/ 
    int32_t itemId;/**/
    std::optional<LolStoreBundled> bundled;/**/
    std::optional<std::vector<std::string>> tags;/**/
    std::optional<std::string> releaseDate;/**/
    std::optional<std::string> inactiveDate;/**/
    std::optional<std::vector<LolStoreItemKey>> itemRequirements;/**/
    std::optional<std::vector<LolStoreItemCost>> prices;/**/
    std::string inventoryType;/**/
    std::optional<std::string> subInventoryType;/**/
    std::optional<LolStoreSale> sale;/**/
    std::optional<int32_t> maxQuantity;/**/
    std::optional<bool> active;/**/
    std::optional<std::string> itemInstanceId;/**/
  };
  static void to_json(json& j, const LolStoreCatalogItem& v) { 
    j["itemId"] = v.itemId;
    j["bundled"] = v.bundled;
    j["tags"] = v.tags;
    j["releaseDate"] = v.releaseDate;
    j["inactiveDate"] = v.inactiveDate;
    j["itemRequirements"] = v.itemRequirements;
    j["prices"] = v.prices;
    j["inventoryType"] = v.inventoryType;
    j["subInventoryType"] = v.subInventoryType;
    j["sale"] = v.sale;
    j["maxQuantity"] = v.maxQuantity;
    j["active"] = v.active;
    j["itemInstanceId"] = v.itemInstanceId;
  }
  static void from_json(const json& j, LolStoreCatalogItem& v) { 
    v.itemId = j.at("itemId").get<int32_t>(); 
    v.bundled = j.at("bundled").get<std::optional<LolStoreBundled>>(); 
    v.tags = j.at("tags").get<std::optional<std::vector<std::string>>>(); 
    v.releaseDate = j.at("releaseDate").get<std::optional<std::string>>(); 
    v.inactiveDate = j.at("inactiveDate").get<std::optional<std::string>>(); 
    v.itemRequirements = j.at("itemRequirements").get<std::optional<std::vector<LolStoreItemKey>>>(); 
    v.prices = j.at("prices").get<std::optional<std::vector<LolStoreItemCost>>>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.subInventoryType = j.at("subInventoryType").get<std::optional<std::string>>(); 
    v.sale = j.at("sale").get<std::optional<LolStoreSale>>(); 
    v.maxQuantity = j.at("maxQuantity").get<std::optional<int32_t>>(); 
    v.active = j.at("active").get<std::optional<bool>>(); 
    v.itemInstanceId = j.at("itemInstanceId").get<std::optional<std::string>>(); 
  } 
  struct LolStoreItemLocalization { /**/ 
    std::string description;/**/
    std::string language;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolStoreItemLocalization& v) { 
    j["description"] = v.description;
    j["language"] = v.language;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolStoreItemLocalization& v) { 
    v.description = j.at("description").get<std::string>(); 
    v.language = j.at("language").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolStoreSimpleDialogMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const LolStoreSimpleDialogMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, LolStoreSimpleDialogMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct LolStoreLoginDataPacket { /**/ 
    LolStoreAllSummonerData allSummonerData;/**/
    std::vector<LolStoreSimpleDialogMessage> simpleMessages;/**/
  };
  static void to_json(json& j, const LolStoreLoginDataPacket& v) { 
    j["allSummonerData"] = v.allSummonerData;
    j["simpleMessages"] = v.simpleMessages;
  }
  static void from_json(const json& j, LolStoreLoginDataPacket& v) { 
    v.allSummonerData = j.at("allSummonerData").get<LolStoreAllSummonerData>(); 
    v.simpleMessages = j.at("simpleMessages").get<std::vector<LolStoreSimpleDialogMessage>>(); 
  } 
  enum class LolStoreLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolStoreLoginSessionStates& v) {
    switch(v) { 
    case LolStoreLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolStoreLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolStoreLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolStoreLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolStoreLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolStoreLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolStoreLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolStoreLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolStoreLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolStoreLoginSession { /**/ 
    LolStoreLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolStoreLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolStoreLoginSession& v) { 
    v.state = j.at("state").get<LolStoreLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolStoreNotification { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    bool critical;/**/
    bool dismissible;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string created;/**/
    std::string expires;/**/
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const LolStoreNotification& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["dismissible"] = v.dismissible;
    j["data"] = v.data;
    j["type"] = v.type;
    j["created"] = v.created;
    j["expires"] = v.expires;
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, LolStoreNotification& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.dismissible = j.at("dismissible").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct LolStoreOrderNotificationResource { /**/ 
    std::string eventTypeId;/**/
    std::string eventType;/**/
    uint64_t id;/**/
    std::string status;/**/
  };
  static void to_json(json& j, const LolStoreOrderNotificationResource& v) { 
    j["eventTypeId"] = v.eventTypeId;
    j["eventType"] = v.eventType;
    j["id"] = v.id;
    j["status"] = v.status;
  }
  static void from_json(const json& j, LolStoreOrderNotificationResource& v) { 
    v.eventTypeId = j.at("eventTypeId").get<std::string>(); 
    v.eventType = j.at("eventType").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.status = j.at("status").get<std::string>(); 
  } 
  struct LolStorePageGroupingDTO { /**/ 
    bool hidden;/**/
    std::vector<LolStoreItemKey> items;/**/
    bool grouped;/**/
  };
  static void to_json(json& j, const LolStorePageGroupingDTO& v) { 
    j["hidden"] = v.hidden;
    j["items"] = v.items;
    j["grouped"] = v.grouped;
  }
  static void from_json(const json& j, LolStorePageGroupingDTO& v) { 
    v.hidden = j.at("hidden").get<bool>(); 
    v.items = j.at("items").get<std::vector<LolStoreItemKey>>(); 
    v.grouped = j.at("grouped").get<bool>(); 
  } 
  struct LolStorePlayer { /**/ 
    int64_t ip;/**/
    int64_t rp;/**/
    uint64_t accountId;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const LolStorePlayer& v) { 
    j["ip"] = v.ip;
    j["rp"] = v.rp;
    j["accountId"] = v.accountId;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, LolStorePlayer& v) { 
    v.ip = j.at("ip").get<int64_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct LolStorePageDTO { /**/ 
    std::map<std::string, LolStorePageGroupingDTO> itemGroups;/**/
    std::vector<LolStoreCatalogItem> catalog;/**/
    LolStorePlayer Player;/**/
    std::vector<std::string> groupOrder;/**/
  };
  static void to_json(json& j, const LolStorePageDTO& v) { 
    j["itemGroups"] = v.itemGroups;
    j["catalog"] = v.catalog;
    j["Player"] = v.Player;
    j["groupOrder"] = v.groupOrder;
  }
  static void from_json(const json& j, LolStorePageDTO& v) { 
    v.itemGroups = j.at("itemGroups").get<std::map<std::string, LolStorePageGroupingDTO>>(); 
    v.catalog = j.at("catalog").get<std::vector<LolStoreCatalogItem>>(); 
    v.Player = j.at("Player").get<LolStorePlayer>(); 
    v.groupOrder = j.at("groupOrder").get<std::vector<std::string>>(); 
  } 
  struct LolStoreRiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const LolStoreRiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, LolStoreRiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct LolStoreServiceBalance { /**/ 
    int64_t amount;/**/
    std::string currency;/**/
  };
  static void to_json(json& j, const LolStoreServiceBalance& v) { 
    j["amount"] = v.amount;
    j["currency"] = v.currency;
  }
  static void from_json(const json& j, LolStoreServiceBalance& v) { 
    v.amount = j.at("amount").get<int64_t>(); 
    v.currency = j.at("currency").get<std::string>(); 
  } 
  struct LolStoreServiceWallet { /**/ 
    std::vector<LolStoreServiceBalance> balances;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LolStoreServiceWallet& v) { 
    j["balances"] = v.balances;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LolStoreServiceWallet& v) { 
    v.balances = j.at("balances").get<std::vector<LolStoreServiceBalance>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LolStoreWallet { /**/ 
    int64_t ip;/**/
    int64_t rp;/**/
  };
  static void to_json(json& j, const LolStoreWallet& v) { 
    j["ip"] = v.ip;
    j["rp"] = v.rp;
  }
  static void from_json(const json& j, LolStoreWallet& v) { 
    v.ip = j.at("ip").get<int64_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
  } 
  struct LolSuggestedPlayersFriendOfFriendRecord { /**/ 
    std::string commonFriendName;/**/
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    uint64_t commonFriendId;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersFriendOfFriendRecord& v) { 
    j["commonFriendName"] = v.commonFriendName;
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["commonFriendId"] = v.commonFriendId;
  }
  static void from_json(const json& j, LolSuggestedPlayersFriendOfFriendRecord& v) { 
    v.commonFriendName = j.at("commonFriendName").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.commonFriendId = j.at("commonFriendId").get<uint64_t>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersConfig { /**/ 
    bool FriendsOfFriendsEnabled;/**/
    uint32_t VicoriousComradesLimit;/**/
    uint32_t MaxNumReplacements;/**/
    uint32_t PreviousPremadesLimit;/**/
    bool Enabled;/**/
    uint32_t OnlineFriendsLimit;/**/
    uint32_t FriendsOfFriendsLimit;/**/
    uint32_t MaxNumSuggestedPlayers;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersConfig& v) { 
    j["FriendsOfFriendsEnabled"] = v.FriendsOfFriendsEnabled;
    j["VicoriousComradesLimit"] = v.VicoriousComradesLimit;
    j["MaxNumReplacements"] = v.MaxNumReplacements;
    j["PreviousPremadesLimit"] = v.PreviousPremadesLimit;
    j["Enabled"] = v.Enabled;
    j["OnlineFriendsLimit"] = v.OnlineFriendsLimit;
    j["FriendsOfFriendsLimit"] = v.FriendsOfFriendsLimit;
    j["MaxNumSuggestedPlayers"] = v.MaxNumSuggestedPlayers;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersConfig& v) { 
    v.FriendsOfFriendsEnabled = j.at("FriendsOfFriendsEnabled").get<bool>(); 
    v.VicoriousComradesLimit = j.at("VicoriousComradesLimit").get<uint32_t>(); 
    v.MaxNumReplacements = j.at("MaxNumReplacements").get<uint32_t>(); 
    v.PreviousPremadesLimit = j.at("PreviousPremadesLimit").get<uint32_t>(); 
    v.Enabled = j.at("Enabled").get<bool>(); 
    v.OnlineFriendsLimit = j.at("OnlineFriendsLimit").get<uint32_t>(); 
    v.FriendsOfFriendsLimit = j.at("FriendsOfFriendsLimit").get<uint32_t>(); 
    v.MaxNumSuggestedPlayers = j.at("MaxNumSuggestedPlayers").get<uint32_t>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersDynamicClientConfig { /**/ 
    LolSuggestedPlayersSuggestedPlayersConfig SuggestedPlayers;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersDynamicClientConfig& v) { 
    j["SuggestedPlayers"] = v.SuggestedPlayers;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersDynamicClientConfig& v) { 
    v.SuggestedPlayers = j.at("SuggestedPlayers").get<LolSuggestedPlayersSuggestedPlayersConfig>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersFriend { /**/ 
    std::string availability;/**/
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersFriend& v) { 
    j["availability"] = v.availability;
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersFriend& v) { 
    v.availability = j.at("availability").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersKudoedPlayer { /**/ 
    std::string kudoedSummonerName;/**/
    uint64_t kudoedSummonerId;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersKudoedPlayer& v) { 
    j["kudoedSummonerName"] = v.kudoedSummonerName;
    j["kudoedSummonerId"] = v.kudoedSummonerId;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersKudoedPlayer& v) { 
    v.kudoedSummonerName = j.at("kudoedSummonerName").get<std::string>(); 
    v.kudoedSummonerId = j.at("kudoedSummonerId").get<uint64_t>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersLobbyStatus { /**/ 
    int32_t queueId;/**/
    std::vector<uint64_t> invitedSummonerIds;/**/
    std::vector<uint64_t> memberSummonerIds;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersLobbyStatus& v) { 
    j["queueId"] = v.queueId;
    j["invitedSummonerIds"] = v.invitedSummonerIds;
    j["memberSummonerIds"] = v.memberSummonerIds;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersLobbyStatus& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.invitedSummonerIds = j.at("invitedSummonerIds").get<std::vector<uint64_t>>(); 
    v.memberSummonerIds = j.at("memberSummonerIds").get<std::vector<uint64_t>>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersPlayerStatus { /**/ 
    std::optional<LolSuggestedPlayersSuggestedPlayersLobbyStatus> currentLobbyStatus;/**/
    std::optional<LolSuggestedPlayersSuggestedPlayersLobbyStatus> lastQueuedLobbyStatus;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersPlayerStatus& v) { 
    j["currentLobbyStatus"] = v.currentLobbyStatus;
    j["lastQueuedLobbyStatus"] = v.lastQueuedLobbyStatus;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersPlayerStatus& v) { 
    v.currentLobbyStatus = j.at("currentLobbyStatus").get<std::optional<LolSuggestedPlayersSuggestedPlayersLobbyStatus>>(); 
    v.lastQueuedLobbyStatus = j.at("lastQueuedLobbyStatus").get<std::optional<LolSuggestedPlayersSuggestedPlayersLobbyStatus>>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersQueue { /**/ 
    uint32_t minLevel;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersQueue& v) { 
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersQueue& v) { 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  enum class LolSuggestedPlayersSuggestedPlayersReason { /**/ 
    FriendOfFriend_e = 3, /**/ 
    LegacyPlayAgain_e = 9999, /**/ 
    OnlineFriend_e = 2, /**/ 
    PreviousPremade_e = 1, /**/ 
    VictoriousComrade_e = 5, /**/ 
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersReason& v) {
    switch(v) { 
    case LolSuggestedPlayersSuggestedPlayersReason::FriendOfFriend_e:
      j = "FriendOfFriend";
    break;
    case LolSuggestedPlayersSuggestedPlayersReason::LegacyPlayAgain_e:
      j = "LegacyPlayAgain";
    break;
    case LolSuggestedPlayersSuggestedPlayersReason::OnlineFriend_e:
      j = "OnlineFriend";
    break;
    case LolSuggestedPlayersSuggestedPlayersReason::PreviousPremade_e:
      j = "PreviousPremade";
    break;
    case LolSuggestedPlayersSuggestedPlayersReason::VictoriousComrade_e:
      j = "VictoriousComrade";
    break;
    };
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "FriendOfFriend") {
      v = LolSuggestedPlayersSuggestedPlayersReason::FriendOfFriend_e;
      return;
    } 
    if(s == "LegacyPlayAgain") {
      v = LolSuggestedPlayersSuggestedPlayersReason::LegacyPlayAgain_e;
      return;
    } 
    if(s == "OnlineFriend") {
      v = LolSuggestedPlayersSuggestedPlayersReason::OnlineFriend_e;
      return;
    } 
    if(s == "PreviousPremade") {
      v = LolSuggestedPlayersSuggestedPlayersReason::PreviousPremade_e;
      return;
    } 
    if(s == "VictoriousComrade") {
      v = LolSuggestedPlayersSuggestedPlayersReason::VictoriousComrade_e;
      return;
    } 
  } 
  struct LolSuggestedPlayersSuggestedPlayersReportedPlayer { /**/ 
    uint64_t reportedSummonerId;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersReportedPlayer& v) { 
    j["reportedSummonerId"] = v.reportedSummonerId;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersReportedPlayer& v) { 
    v.reportedSummonerId = j.at("reportedSummonerId").get<uint64_t>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersSuggestedPlayer { /**/ 
    std::string commonFriendName;/**/
    std::string summonerName;/**/
    uint64_t summonerId;/**/
    LolSuggestedPlayersSuggestedPlayersReason reason;/**/
    uint64_t commonFriendId;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersSuggestedPlayer& v) { 
    j["commonFriendName"] = v.commonFriendName;
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
    j["reason"] = v.reason;
    j["commonFriendId"] = v.commonFriendId;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersSuggestedPlayer& v) { 
    v.commonFriendName = j.at("commonFriendName").get<std::string>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.reason = j.at("reason").get<LolSuggestedPlayersSuggestedPlayersReason>(); 
    v.commonFriendId = j.at("commonFriendId").get<uint64_t>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersSummoner { /**/ 
    uint64_t summonerId;/**/
    uint32_t summonerLevel;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersSummoner& v) { 
    j["summonerId"] = v.summonerId;
    j["summonerLevel"] = v.summonerLevel;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersSummoner& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolSuggestedPlayersSuggestedPlayersVictoriousComrade { /**/ 
    std::string summonerName;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolSuggestedPlayersSuggestedPlayersVictoriousComrade& v) { 
    j["summonerName"] = v.summonerName;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolSuggestedPlayersSuggestedPlayersVictoriousComrade& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolSummonerAutoFillQueueDto { /**/ 
    int32_t queueId;/**/
    bool autoFillEligible;/**/
    bool autoFillProtectedForPromos;/**/
    bool autoFillProtectedForStreaking;/**/
  };
  static void to_json(json& j, const LolSummonerAutoFillQueueDto& v) { 
    j["queueId"] = v.queueId;
    j["autoFillEligible"] = v.autoFillEligible;
    j["autoFillProtectedForPromos"] = v.autoFillProtectedForPromos;
    j["autoFillProtectedForStreaking"] = v.autoFillProtectedForStreaking;
  }
  static void from_json(const json& j, LolSummonerAutoFillQueueDto& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.autoFillEligible = j.at("autoFillEligible").get<bool>(); 
    v.autoFillProtectedForPromos = j.at("autoFillProtectedForPromos").get<bool>(); 
    v.autoFillProtectedForStreaking = j.at("autoFillProtectedForStreaking").get<bool>(); 
  } 
  struct LolSummonerAutoFillDto { /**/ 
    std::vector<LolSummonerAutoFillQueueDto> autoFillQueues;/**/
  };
  static void to_json(json& j, const LolSummonerAutoFillDto& v) { 
    j["autoFillQueues"] = v.autoFillQueues;
  }
  static void from_json(const json& j, LolSummonerAutoFillDto& v) { 
    v.autoFillQueues = j.at("autoFillQueues").get<std::vector<LolSummonerAutoFillQueueDto>>(); 
  } 
  struct LolSummonerRerollDataBagForClientV1 { /**/ 
    int64_t queueId;/**/
    uint32_t maximumRerolls;/**/
    int64_t pointsGainedLastGame;/**/
    int64_t pointsUntilNextReroll;/**/
    int64_t pointCostOfReroll;/**/
    int64_t totalPoints;/**/
    int32_t rerollCount;/**/
  };
  static void to_json(json& j, const LolSummonerRerollDataBagForClientV1& v) { 
    j["queueId"] = v.queueId;
    j["maximumRerolls"] = v.maximumRerolls;
    j["pointsGainedLastGame"] = v.pointsGainedLastGame;
    j["pointsUntilNextReroll"] = v.pointsUntilNextReroll;
    j["pointCostOfReroll"] = v.pointCostOfReroll;
    j["totalPoints"] = v.totalPoints;
    j["rerollCount"] = v.rerollCount;
  }
  static void from_json(const json& j, LolSummonerRerollDataBagForClientV1& v) { 
    v.queueId = j.at("queueId").get<int64_t>(); 
    v.maximumRerolls = j.at("maximumRerolls").get<uint32_t>(); 
    v.pointsGainedLastGame = j.at("pointsGainedLastGame").get<int64_t>(); 
    v.pointsUntilNextReroll = j.at("pointsUntilNextReroll").get<int64_t>(); 
    v.pointCostOfReroll = j.at("pointCostOfReroll").get<int64_t>(); 
    v.totalPoints = j.at("totalPoints").get<int64_t>(); 
    v.rerollCount = j.at("rerollCount").get<int32_t>(); 
  } 
  struct LolSummonerGameloopPlayerInfoV1 { /**/ 
    LolSummonerRerollDataBagForClientV1 rerollDataBag;/**/
    json autoFillDataBagByQueueId;/**/
  };
  static void to_json(json& j, const LolSummonerGameloopPlayerInfoV1& v) { 
    j["rerollDataBag"] = v.rerollDataBag;
    j["autoFillDataBagByQueueId"] = v.autoFillDataBagByQueueId;
  }
  static void from_json(const json& j, LolSummonerGameloopPlayerInfoV1& v) { 
    v.rerollDataBag = j.at("rerollDataBag").get<LolSummonerRerollDataBagForClientV1>(); 
    v.autoFillDataBagByQueueId = j.at("autoFillDataBagByQueueId").get<json>(); 
  } 
  struct LolSummonerInternalSummoner { /**/ 
    std::string lastSeasonHighestRank;/**/
    bool displayEloQuestionaireFlag;/**/
    uint64_t summonerId;/**/
    bool advancedTutorialFlag;/**/
    uint64_t accountId;/**/
    bool tutorialFlag;/**/
    bool nameChangeFlag;/**/
    int32_t profileIconId;/**/
    bool helpFlag;/**/
    std::string internalName;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolSummonerInternalSummoner& v) { 
    j["lastSeasonHighestRank"] = v.lastSeasonHighestRank;
    j["displayEloQuestionaireFlag"] = v.displayEloQuestionaireFlag;
    j["summonerId"] = v.summonerId;
    j["advancedTutorialFlag"] = v.advancedTutorialFlag;
    j["accountId"] = v.accountId;
    j["tutorialFlag"] = v.tutorialFlag;
    j["nameChangeFlag"] = v.nameChangeFlag;
    j["profileIconId"] = v.profileIconId;
    j["helpFlag"] = v.helpFlag;
    j["internalName"] = v.internalName;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolSummonerInternalSummoner& v) { 
    v.lastSeasonHighestRank = j.at("lastSeasonHighestRank").get<std::string>(); 
    v.displayEloQuestionaireFlag = j.at("displayEloQuestionaireFlag").get<bool>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.advancedTutorialFlag = j.at("advancedTutorialFlag").get<bool>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.tutorialFlag = j.at("tutorialFlag").get<bool>(); 
    v.nameChangeFlag = j.at("nameChangeFlag").get<bool>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.helpFlag = j.at("helpFlag").get<bool>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  enum class LolSummonerLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const LolSummonerLoginSessionStates& v) {
    switch(v) { 
    case LolSummonerLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case LolSummonerLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case LolSummonerLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case LolSummonerLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, LolSummonerLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = LolSummonerLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = LolSummonerLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = LolSummonerLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = LolSummonerLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct LolSummonerLoginSession { /**/ 
    bool connected;/**/
    LolSummonerLoginSessionStates state;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    std::string puuid;/**/
  };
  static void to_json(json& j, const LolSummonerLoginSession& v) { 
    j["connected"] = v.connected;
    j["state"] = v.state;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["puuid"] = v.puuid;
  }
  static void from_json(const json& j, LolSummonerLoginSession& v) { 
    v.connected = j.at("connected").get<bool>(); 
    v.state = j.at("state").get<LolSummonerLoginSessionStates>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
  } 
  struct LolSummonerRMSLevelProgression { /**/ 
    uint64_t finalXp;/**/
    uint64_t finalLevelBoundary;/**/
    uint64_t initialXp;/**/
    uint64_t initialLevelBoundary;/**/
  };
  static void to_json(json& j, const LolSummonerRMSLevelProgression& v) { 
    j["finalXp"] = v.finalXp;
    j["finalLevelBoundary"] = v.finalLevelBoundary;
    j["initialXp"] = v.initialXp;
    j["initialLevelBoundary"] = v.initialLevelBoundary;
  }
  static void from_json(const json& j, LolSummonerRMSLevelProgression& v) { 
    v.finalXp = j.at("finalXp").get<uint64_t>(); 
    v.finalLevelBoundary = j.at("finalLevelBoundary").get<uint64_t>(); 
    v.initialXp = j.at("initialXp").get<uint64_t>(); 
    v.initialLevelBoundary = j.at("initialLevelBoundary").get<uint64_t>(); 
  } 
  struct LolSummonerRMSLevelField { /**/ 
    uint32_t initialLevel;/**/
    LolSummonerRMSLevelProgression progress;/**/
    uint32_t finalLevel;/**/
  };
  static void to_json(json& j, const LolSummonerRMSLevelField& v) { 
    j["initialLevel"] = v.initialLevel;
    j["progress"] = v.progress;
    j["finalLevel"] = v.finalLevel;
  }
  static void from_json(const json& j, LolSummonerRMSLevelField& v) { 
    v.initialLevel = j.at("initialLevel").get<uint32_t>(); 
    v.progress = j.at("progress").get<LolSummonerRMSLevelProgression>(); 
    v.finalLevel = j.at("finalLevel").get<uint32_t>(); 
  } 
  struct LolSummonerRMSMessage { /**/ 
    int64_t timestamp;/**/
    std::string payload;/**/
  };
  static void to_json(json& j, const LolSummonerRMSMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["payload"] = v.payload;
  }
  static void from_json(const json& j, LolSummonerRMSMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
  } 
  struct LolSummonerRMSXpAndLevelMessage { /**/ 
    LolSummonerRMSLevelField level;/**/
    json xp;/**/
  };
  static void to_json(json& j, const LolSummonerRMSXpAndLevelMessage& v) { 
    j["level"] = v.level;
    j["xp"] = v.xp;
  }
  static void from_json(const json& j, LolSummonerRMSXpAndLevelMessage& v) { 
    v.level = j.at("level").get<LolSummonerRMSLevelField>(); 
    v.xp = j.at("xp").get<json>(); 
  } 
  struct LolSummonerSummonerRerollPoints { /**/ 
    uint64_t pointsCostToRoll;/**/
    uint32_t maxRolls;/**/
    uint32_t numberOfRolls;/**/
    uint64_t currentPoints;/**/
    uint64_t pointsToReroll;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerRerollPoints& v) { 
    j["pointsCostToRoll"] = v.pointsCostToRoll;
    j["maxRolls"] = v.maxRolls;
    j["numberOfRolls"] = v.numberOfRolls;
    j["currentPoints"] = v.currentPoints;
    j["pointsToReroll"] = v.pointsToReroll;
  }
  static void from_json(const json& j, LolSummonerSummonerRerollPoints& v) { 
    v.pointsCostToRoll = j.at("pointsCostToRoll").get<uint64_t>(); 
    v.maxRolls = j.at("maxRolls").get<uint32_t>(); 
    v.numberOfRolls = j.at("numberOfRolls").get<uint32_t>(); 
    v.currentPoints = j.at("currentPoints").get<uint64_t>(); 
    v.pointsToReroll = j.at("pointsToReroll").get<uint64_t>(); 
  } 
  struct LolSummonerSummoner { /**/ 
    uint64_t xpSinceLastLevel;/**/
    int32_t profileIconId;/**/
    uint32_t percentCompleteForNextLevel;/**/
    LolSummonerSummonerRerollPoints rerollPoints;/**/
    std::string internalName;/**/
    uint32_t summonerLevel;/**/
    std::string lastSeasonHighestRank;/**/
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
    uint64_t xpUntilNextLevel;/**/
    std::string puuid;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolSummonerSummoner& v) { 
    j["xpSinceLastLevel"] = v.xpSinceLastLevel;
    j["profileIconId"] = v.profileIconId;
    j["percentCompleteForNextLevel"] = v.percentCompleteForNextLevel;
    j["rerollPoints"] = v.rerollPoints;
    j["internalName"] = v.internalName;
    j["summonerLevel"] = v.summonerLevel;
    j["lastSeasonHighestRank"] = v.lastSeasonHighestRank;
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
    j["xpUntilNextLevel"] = v.xpUntilNextLevel;
    j["puuid"] = v.puuid;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolSummonerSummoner& v) { 
    v.xpSinceLastLevel = j.at("xpSinceLastLevel").get<uint64_t>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.percentCompleteForNextLevel = j.at("percentCompleteForNextLevel").get<uint32_t>(); 
    v.rerollPoints = j.at("rerollPoints").get<LolSummonerSummonerRerollPoints>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
    v.lastSeasonHighestRank = j.at("lastSeasonHighestRank").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.xpUntilNextLevel = j.at("xpUntilNextLevel").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolSummonerSummonerCreatedId { /**/ 
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerCreatedId& v) { 
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolSummonerSummonerCreatedId& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolSummonerSummonerIcon { /**/ 
    int32_t profileIconId;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerIcon& v) { 
    j["profileIconId"] = v.profileIconId;
  }
  static void from_json(const json& j, LolSummonerSummonerIcon& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
  } 
  struct LolSummonerSummonerIdAndIcon { /**/ 
    int32_t profileIconId;/**/
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerIdAndIcon& v) { 
    j["profileIconId"] = v.profileIconId;
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, LolSummonerSummonerIdAndIcon& v) { 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct LolSummonerSummonerIdAndName { /**/ 
    uint64_t summonerId;/**/
    std::string displayName;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerIdAndName& v) { 
    j["summonerId"] = v.summonerId;
    j["displayName"] = v.displayName;
  }
  static void from_json(const json& j, LolSummonerSummonerIdAndName& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.displayName = j.at("displayName").get<std::string>(); 
  } 
  struct LolSummonerSummonerProfileUpdate { /**/ 
    json value;/**/
    std::string key;/**/
    std::string inventory;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerProfileUpdate& v) { 
    j["value"] = v.value;
    j["key"] = v.key;
    j["inventory"] = v.inventory;
  }
  static void from_json(const json& j, LolSummonerSummonerProfileUpdate& v) { 
    v.value = j.at("value").get<json>(); 
    v.key = j.at("key").get<std::string>(); 
    v.inventory = j.at("inventory").get<std::string>(); 
  } 
  struct LolSummonerSummonerRequestedName { /**/ 
    std::string name;/**/
  };
  static void to_json(json& j, const LolSummonerSummonerRequestedName& v) { 
    j["name"] = v.name;
  }
  static void from_json(const json& j, LolSummonerSummonerRequestedName& v) { 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class LolUserExperienceGameflowPhase { /**/ 
    ChampSelect_e = 5, /**/ 
    CheckedIntoTournament_e = 3, /**/ 
    EndOfGame_e = 12, /**/ 
    FailedToLaunch_e = 7, /**/ 
    GameStart_e = 6, /**/ 
    InProgress_e = 8, /**/ 
    Lobby_e = 1, /**/ 
    Matchmaking_e = 2, /**/ 
    None_e = 0, /**/ 
    PreEndOfGame_e = 11, /**/ 
    ReadyCheck_e = 4, /**/ 
    Reconnect_e = 9, /**/ 
    TerminatedInError_e = 13, /**/ 
    WaitingForStats_e = 10, /**/ 
  };
  static void to_json(json& j, const LolUserExperienceGameflowPhase& v) {
    switch(v) { 
    case LolUserExperienceGameflowPhase::ChampSelect_e:
      j = "ChampSelect";
    break;
    case LolUserExperienceGameflowPhase::CheckedIntoTournament_e:
      j = "CheckedIntoTournament";
    break;
    case LolUserExperienceGameflowPhase::EndOfGame_e:
      j = "EndOfGame";
    break;
    case LolUserExperienceGameflowPhase::FailedToLaunch_e:
      j = "FailedToLaunch";
    break;
    case LolUserExperienceGameflowPhase::GameStart_e:
      j = "GameStart";
    break;
    case LolUserExperienceGameflowPhase::InProgress_e:
      j = "InProgress";
    break;
    case LolUserExperienceGameflowPhase::Lobby_e:
      j = "Lobby";
    break;
    case LolUserExperienceGameflowPhase::Matchmaking_e:
      j = "Matchmaking";
    break;
    case LolUserExperienceGameflowPhase::None_e:
      j = "None";
    break;
    case LolUserExperienceGameflowPhase::PreEndOfGame_e:
      j = "PreEndOfGame";
    break;
    case LolUserExperienceGameflowPhase::ReadyCheck_e:
      j = "ReadyCheck";
    break;
    case LolUserExperienceGameflowPhase::Reconnect_e:
      j = "Reconnect";
    break;
    case LolUserExperienceGameflowPhase::TerminatedInError_e:
      j = "TerminatedInError";
    break;
    case LolUserExperienceGameflowPhase::WaitingForStats_e:
      j = "WaitingForStats";
    break;
    };
  }
  static void from_json(const json& j, LolUserExperienceGameflowPhase& v) {
    auto s = j.get<std::string>(); 
    if(s == "ChampSelect") {
      v = LolUserExperienceGameflowPhase::ChampSelect_e;
      return;
    } 
    if(s == "CheckedIntoTournament") {
      v = LolUserExperienceGameflowPhase::CheckedIntoTournament_e;
      return;
    } 
    if(s == "EndOfGame") {
      v = LolUserExperienceGameflowPhase::EndOfGame_e;
      return;
    } 
    if(s == "FailedToLaunch") {
      v = LolUserExperienceGameflowPhase::FailedToLaunch_e;
      return;
    } 
    if(s == "GameStart") {
      v = LolUserExperienceGameflowPhase::GameStart_e;
      return;
    } 
    if(s == "InProgress") {
      v = LolUserExperienceGameflowPhase::InProgress_e;
      return;
    } 
    if(s == "Lobby") {
      v = LolUserExperienceGameflowPhase::Lobby_e;
      return;
    } 
    if(s == "Matchmaking") {
      v = LolUserExperienceGameflowPhase::Matchmaking_e;
      return;
    } 
    if(s == "None") {
      v = LolUserExperienceGameflowPhase::None_e;
      return;
    } 
    if(s == "PreEndOfGame") {
      v = LolUserExperienceGameflowPhase::PreEndOfGame_e;
      return;
    } 
    if(s == "ReadyCheck") {
      v = LolUserExperienceGameflowPhase::ReadyCheck_e;
      return;
    } 
    if(s == "Reconnect") {
      v = LolUserExperienceGameflowPhase::Reconnect_e;
      return;
    } 
    if(s == "TerminatedInError") {
      v = LolUserExperienceGameflowPhase::TerminatedInError_e;
      return;
    } 
    if(s == "WaitingForStats") {
      v = LolUserExperienceGameflowPhase::WaitingForStats_e;
      return;
    } 
  } 
  struct LolUserExperienceGameflowSession { /**/ 
    LolUserExperienceGameflowPhase phase;/**/
  };
  static void to_json(json& j, const LolUserExperienceGameflowSession& v) { 
    j["phase"] = v.phase;
  }
  static void from_json(const json& j, LolUserExperienceGameflowSession& v) { 
    v.phase = j.at("phase").get<LolUserExperienceGameflowPhase>(); 
  } 
  struct LootItemClientDTO { /**/ 
    int32_t rentalGames;/**/
    std::string tags;/**/
    std::string upgradeLootName;/**/
    std::string rarity;/**/
    int32_t value;/**/
    int64_t rentalSeconds;/**/
    int64_t expiryTime;/**/
    std::string lootName;/**/
    std::string type;/**/
    std::string displayCategories;/**/
    std::string asset;/**/
    int32_t storeItemId;/**/
  };
  static void to_json(json& j, const LootItemClientDTO& v) { 
    j["rentalGames"] = v.rentalGames;
    j["tags"] = v.tags;
    j["upgradeLootName"] = v.upgradeLootName;
    j["rarity"] = v.rarity;
    j["value"] = v.value;
    j["rentalSeconds"] = v.rentalSeconds;
    j["expiryTime"] = v.expiryTime;
    j["lootName"] = v.lootName;
    j["type"] = v.type;
    j["displayCategories"] = v.displayCategories;
    j["asset"] = v.asset;
    j["storeItemId"] = v.storeItemId;
  }
  static void from_json(const json& j, LootItemClientDTO& v) { 
    v.rentalGames = j.at("rentalGames").get<int32_t>(); 
    v.tags = j.at("tags").get<std::string>(); 
    v.upgradeLootName = j.at("upgradeLootName").get<std::string>(); 
    v.rarity = j.at("rarity").get<std::string>(); 
    v.value = j.at("value").get<int32_t>(); 
    v.rentalSeconds = j.at("rentalSeconds").get<int64_t>(); 
    v.expiryTime = j.at("expiryTime").get<int64_t>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.displayCategories = j.at("displayCategories").get<std::string>(); 
    v.asset = j.at("asset").get<std::string>(); 
    v.storeItemId = j.at("storeItemId").get<int32_t>(); 
  } 
  struct LootItemListClientDTO { /**/ 
    int64_t lastUpdate;/**/
    std::vector<LootItemClientDTO> lootItems;/**/
  };
  static void to_json(json& j, const LootItemListClientDTO& v) { 
    j["lastUpdate"] = v.lastUpdate;
    j["lootItems"] = v.lootItems;
  }
  static void from_json(const json& j, LootItemListClientDTO& v) { 
    v.lastUpdate = j.at("lastUpdate").get<int64_t>(); 
    v.lootItems = j.at("lootItems").get<std::vector<LootItemClientDTO>>(); 
  } 
  struct LootLcdsClientConfigurationDTO { /**/ 
    std::vector<std::string> lootItemsUsingBreakoutRecipeMenu;/**/
    std::vector<std::string> lootMaterialsToAlwaysRender;/**/
    std::vector<std::string> currenciesUsingCapWallets;/**/
  };
  static void to_json(json& j, const LootLcdsClientConfigurationDTO& v) { 
    j["lootItemsUsingBreakoutRecipeMenu"] = v.lootItemsUsingBreakoutRecipeMenu;
    j["lootMaterialsToAlwaysRender"] = v.lootMaterialsToAlwaysRender;
    j["currenciesUsingCapWallets"] = v.currenciesUsingCapWallets;
  }
  static void from_json(const json& j, LootLcdsClientConfigurationDTO& v) { 
    v.lootItemsUsingBreakoutRecipeMenu = j.at("lootItemsUsingBreakoutRecipeMenu").get<std::vector<std::string>>(); 
    v.lootMaterialsToAlwaysRender = j.at("lootMaterialsToAlwaysRender").get<std::vector<std::string>>(); 
    v.currenciesUsingCapWallets = j.at("currenciesUsingCapWallets").get<std::vector<std::string>>(); 
  } 
  struct LootLcdsLootDescriptionDTO { /**/ 
    std::map<std::string, std::string> localizationMap;/**/
    std::map<std::string, std::string> localizationLongDescriptionMap;/**/
    std::vector<std::string> childLootTableNames;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const LootLcdsLootDescriptionDTO& v) { 
    j["localizationMap"] = v.localizationMap;
    j["localizationLongDescriptionMap"] = v.localizationLongDescriptionMap;
    j["childLootTableNames"] = v.childLootTableNames;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, LootLcdsLootDescriptionDTO& v) { 
    v.localizationMap = j.at("localizationMap").get<std::map<std::string, std::string>>(); 
    v.localizationLongDescriptionMap = j.at("localizationLongDescriptionMap").get<std::map<std::string, std::string>>(); 
    v.childLootTableNames = j.at("childLootTableNames").get<std::vector<std::string>>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct LootLcdsRecipeMetadata { /**/ 
    std::vector<LootLcdsLootDescriptionDTO> bonusDescriptions;/**/
    bool tooltipsDisabled;/**/
    std::vector<LootLcdsLootDescriptionDTO> guaranteedDescriptions;/**/
  };
  static void to_json(json& j, const LootLcdsRecipeMetadata& v) { 
    j["bonusDescriptions"] = v.bonusDescriptions;
    j["tooltipsDisabled"] = v.tooltipsDisabled;
    j["guaranteedDescriptions"] = v.guaranteedDescriptions;
  }
  static void from_json(const json& j, LootLcdsRecipeMetadata& v) { 
    v.bonusDescriptions = j.at("bonusDescriptions").get<std::vector<LootLcdsLootDescriptionDTO>>(); 
    v.tooltipsDisabled = j.at("tooltipsDisabled").get<bool>(); 
    v.guaranteedDescriptions = j.at("guaranteedDescriptions").get<std::vector<LootLcdsLootDescriptionDTO>>(); 
  } 
  struct LootLcdsRecipeSlotClientDTO { /**/ 
    std::string query;/**/
    std::string quantityExpression;/**/
    int32_t slotNumber;/**/
  };
  static void to_json(json& j, const LootLcdsRecipeSlotClientDTO& v) { 
    j["query"] = v.query;
    j["quantityExpression"] = v.quantityExpression;
    j["slotNumber"] = v.slotNumber;
  }
  static void from_json(const json& j, LootLcdsRecipeSlotClientDTO& v) { 
    v.query = j.at("query").get<std::string>(); 
    v.quantityExpression = j.at("quantityExpression").get<std::string>(); 
    v.slotNumber = j.at("slotNumber").get<int32_t>(); 
  } 
  struct LootLcdsRecipeOutputDTO { /**/ 
    std::string quantityExpression;/**/
    double probability;/**/
    bool allowDuplicates;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const LootLcdsRecipeOutputDTO& v) { 
    j["quantityExpression"] = v.quantityExpression;
    j["probability"] = v.probability;
    j["allowDuplicates"] = v.allowDuplicates;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, LootLcdsRecipeOutputDTO& v) { 
    v.quantityExpression = j.at("quantityExpression").get<std::string>(); 
    v.probability = j.at("probability").get<double>(); 
    v.allowDuplicates = j.at("allowDuplicates").get<bool>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct LootLcdsRecipeClientDTO { /**/ 
    LootLcdsRecipeMetadata metadata;/**/
    std::vector<LootLcdsRecipeSlotClientDTO> slots;/**/
    std::vector<LootLcdsRecipeOutputDTO> outputs;/**/
    std::string displayCategories;/**/
    std::string type;/**/
    std::string recipeName;/**/
    std::string crafterName;/**/
  };
  static void to_json(json& j, const LootLcdsRecipeClientDTO& v) { 
    j["metadata"] = v.metadata;
    j["slots"] = v.slots;
    j["outputs"] = v.outputs;
    j["displayCategories"] = v.displayCategories;
    j["type"] = v.type;
    j["recipeName"] = v.recipeName;
    j["crafterName"] = v.crafterName;
  }
  static void from_json(const json& j, LootLcdsRecipeClientDTO& v) { 
    v.metadata = j.at("metadata").get<LootLcdsRecipeMetadata>(); 
    v.slots = j.at("slots").get<std::vector<LootLcdsRecipeSlotClientDTO>>(); 
    v.outputs = j.at("outputs").get<std::vector<LootLcdsRecipeOutputDTO>>(); 
    v.displayCategories = j.at("displayCategories").get<std::string>(); 
    v.type = j.at("type").get<std::string>(); 
    v.recipeName = j.at("recipeName").get<std::string>(); 
    v.crafterName = j.at("crafterName").get<std::string>(); 
  } 
  struct LootLcdsRecipeListClientDTO { /**/ 
    std::vector<LootLcdsRecipeClientDTO> recipes;/**/
    int64_t lastUpdate;/**/
  };
  static void to_json(json& j, const LootLcdsRecipeListClientDTO& v) { 
    j["recipes"] = v.recipes;
    j["lastUpdate"] = v.lastUpdate;
  }
  static void from_json(const json& j, LootLcdsRecipeListClientDTO& v) { 
    v.recipes = j.at("recipes").get<std::vector<LootLcdsRecipeClientDTO>>(); 
    v.lastUpdate = j.at("lastUpdate").get<int64_t>(); 
  } 
  struct LootSimpleDialogMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const LootSimpleDialogMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, LootSimpleDialogMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct LoyaltyRewards { /**/ 
    int32_t ipBoost;/**/
    int32_t freeRewardedChampionsCount;/**/
    int32_t xpBoost;/**/
    int32_t freeRewardedSkinsCount;/**/
  };
  static void to_json(json& j, const LoyaltyRewards& v) { 
    j["ipBoost"] = v.ipBoost;
    j["freeRewardedChampionsCount"] = v.freeRewardedChampionsCount;
    j["xpBoost"] = v.xpBoost;
    j["freeRewardedSkinsCount"] = v.freeRewardedSkinsCount;
  }
  static void from_json(const json& j, LoyaltyRewards& v) { 
    v.ipBoost = j.at("ipBoost").get<int32_t>(); 
    v.freeRewardedChampionsCount = j.at("freeRewardedChampionsCount").get<int32_t>(); 
    v.xpBoost = j.at("xpBoost").get<int32_t>(); 
    v.freeRewardedSkinsCount = j.at("freeRewardedSkinsCount").get<int32_t>(); 
  } 
  enum class LoyaltyStatus { /**/ 
    CHANGE_e = 3, /**/ 
    DISABLED_e = 5, /**/ 
    EXPIRY_e = 2, /**/ 
    LEGACY_e = 0, /**/ 
    REVOKE_e = 4, /**/ 
    REWARDS_GRANT_e = 1, /**/ 
  };
  static void to_json(json& j, const LoyaltyStatus& v) {
    switch(v) { 
    case LoyaltyStatus::CHANGE_e:
      j = "CHANGE";
    break;
    case LoyaltyStatus::DISABLED_e:
      j = "DISABLED";
    break;
    case LoyaltyStatus::EXPIRY_e:
      j = "EXPIRY";
    break;
    case LoyaltyStatus::LEGACY_e:
      j = "LEGACY";
    break;
    case LoyaltyStatus::REVOKE_e:
      j = "REVOKE";
    break;
    case LoyaltyStatus::REWARDS_GRANT_e:
      j = "REWARDS_GRANT";
    break;
    };
  }
  static void from_json(const json& j, LoyaltyStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "CHANGE") {
      v = LoyaltyStatus::CHANGE_e;
      return;
    } 
    if(s == "DISABLED") {
      v = LoyaltyStatus::DISABLED_e;
      return;
    } 
    if(s == "EXPIRY") {
      v = LoyaltyStatus::EXPIRY_e;
      return;
    } 
    if(s == "LEGACY") {
      v = LoyaltyStatus::LEGACY_e;
      return;
    } 
    if(s == "REVOKE") {
      v = LoyaltyStatus::REVOKE_e;
      return;
    } 
    if(s == "REWARDS_GRANT") {
      v = LoyaltyStatus::REWARDS_GRANT_e;
      return;
    } 
  } 
  struct LoyaltyStatusNotification { /**/ 
    LoyaltyRewards rewards;/**/
    LoyaltyStatus status;/**/
  };
  static void to_json(json& j, const LoyaltyStatusNotification& v) { 
    j["rewards"] = v.rewards;
    j["status"] = v.status;
  }
  static void from_json(const json& j, LoyaltyStatusNotification& v) { 
    v.rewards = j.at("rewards").get<LoyaltyRewards>(); 
    v.status = j.at("status").get<LoyaltyStatus>(); 
  } 
  struct MatchmakingLcdsSummoner { /**/ 
    std::string name;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsSummoner& v) { 
    j["name"] = v.name;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, MatchmakingLcdsSummoner& v) { 
    v.name = j.at("name").get<std::string>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct MatchmakingLcdsBustedLeaver { /**/ 
    std::string accessToken;/**/
    uint64_t leaverPenaltyMillisRemaining;/**/
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsBustedLeaver& v) { 
    j["accessToken"] = v.accessToken;
    j["leaverPenaltyMillisRemaining"] = v.leaverPenaltyMillisRemaining;
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, MatchmakingLcdsBustedLeaver& v) { 
    v.accessToken = j.at("accessToken").get<std::string>(); 
    v.leaverPenaltyMillisRemaining = j.at("leaverPenaltyMillisRemaining").get<uint64_t>(); 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
  } 
  struct MatchmakingLcdsFailedJoinPlayer { /**/ 
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsFailedJoinPlayer& v) { 
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, MatchmakingLcdsFailedJoinPlayer& v) { 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
  } 
  struct MatchmakingLcdsPlayerParticipant { /**/ 
    uint64_t summonerId;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsPlayerParticipant& v) { 
    j["summonerId"] = v.summonerId;
  }
  static void from_json(const json& j, MatchmakingLcdsPlayerParticipant& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
  } 
  struct MatchmakingLcdsGameDTO { /**/ 
    std::vector<MatchmakingLcdsPlayerParticipant> teamOne;/**/
    std::string gameState;/**/
    std::string terminatedCondition;/**/
    std::string statusOfParticipants;/**/
    std::vector<MatchmakingLcdsPlayerParticipant> teamTwo;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsGameDTO& v) { 
    j["teamOne"] = v.teamOne;
    j["gameState"] = v.gameState;
    j["terminatedCondition"] = v.terminatedCondition;
    j["statusOfParticipants"] = v.statusOfParticipants;
    j["teamTwo"] = v.teamTwo;
  }
  static void from_json(const json& j, MatchmakingLcdsGameDTO& v) { 
    v.teamOne = j.at("teamOne").get<std::vector<MatchmakingLcdsPlayerParticipant>>(); 
    v.gameState = j.at("gameState").get<std::string>(); 
    v.terminatedCondition = j.at("terminatedCondition").get<std::string>(); 
    v.statusOfParticipants = j.at("statusOfParticipants").get<std::string>(); 
    v.teamTwo = j.at("teamTwo").get<std::vector<MatchmakingLcdsPlayerParticipant>>(); 
  } 
  struct MatchmakingLcdsGameNotification { /**/ 
    std::string type;/**/
    std::string messageCode;/**/
    std::string messageArgument;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsGameNotification& v) { 
    j["type"] = v.type;
    j["messageCode"] = v.messageCode;
    j["messageArgument"] = v.messageArgument;
  }
  static void from_json(const json& j, MatchmakingLcdsGameNotification& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.messageCode = j.at("messageCode").get<std::string>(); 
    v.messageArgument = j.at("messageArgument").get<std::string>(); 
  } 
  struct MatchmakingLcdsMatchMakerParams { /**/ 
    std::vector<uint64_t> team;/**/
    std::optional<std::string> languages;/**/
    std::vector<int32_t> queueIds;/**/
    uint64_t teamId;/**/
    std::string botDifficulty;/**/
    std::optional<std::string> invitationId;/**/
    std::string lastMaestroMessage;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsMatchMakerParams& v) { 
    j["team"] = v.team;
    j["languages"] = v.languages;
    j["queueIds"] = v.queueIds;
    j["teamId"] = v.teamId;
    j["botDifficulty"] = v.botDifficulty;
    j["invitationId"] = v.invitationId;
    j["lastMaestroMessage"] = v.lastMaestroMessage;
  }
  static void from_json(const json& j, MatchmakingLcdsMatchMakerParams& v) { 
    v.team = j.at("team").get<std::vector<uint64_t>>(); 
    v.languages = j.at("languages").get<std::optional<std::string>>(); 
    v.queueIds = j.at("queueIds").get<std::vector<int32_t>>(); 
    v.teamId = j.at("teamId").get<uint64_t>(); 
    v.botDifficulty = j.at("botDifficulty").get<std::string>(); 
    v.invitationId = j.at("invitationId").get<std::optional<std::string>>(); 
    v.lastMaestroMessage = j.at("lastMaestroMessage").get<std::string>(); 
  } 
  struct MatchmakingLcdsMatchMakerPayload { /**/ 
    std::string LEAVER_BUSTER_ACCESS_TOKEN;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsMatchMakerPayload& v) { 
    j["LEAVER_BUSTER_ACCESS_TOKEN"] = v.LEAVER_BUSTER_ACCESS_TOKEN;
  }
  static void from_json(const json& j, MatchmakingLcdsMatchMakerPayload& v) { 
    v.LEAVER_BUSTER_ACCESS_TOKEN = j.at("LEAVER_BUSTER_ACCESS_TOKEN").get<std::string>(); 
  } 
  struct MatchmakingLcdsQueueDisabled { /**/ 
    int32_t queueId;/**/
    std::string message;/**/
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsQueueDisabled& v) { 
    j["queueId"] = v.queueId;
    j["message"] = v.message;
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, MatchmakingLcdsQueueDisabled& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.message = j.at("message").get<std::string>(); 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
  } 
  struct MatchmakingLcdsQueueDodger { /**/ 
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
    uint64_t dodgePenaltyRemainingTime;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsQueueDodger& v) { 
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
    j["dodgePenaltyRemainingTime"] = v.dodgePenaltyRemainingTime;
  }
  static void from_json(const json& j, MatchmakingLcdsQueueDodger& v) { 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
    v.dodgePenaltyRemainingTime = j.at("dodgePenaltyRemainingTime").get<uint64_t>(); 
  } 
  struct MatchmakingLcdsQueueInfo { /**/ 
    int32_t queueId;/**/
    uint64_t waitTime;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsQueueInfo& v) { 
    j["queueId"] = v.queueId;
    j["waitTime"] = v.waitTime;
  }
  static void from_json(const json& j, MatchmakingLcdsQueueInfo& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.waitTime = j.at("waitTime").get<uint64_t>(); 
  } 
  struct MatchmakingLcdsQueueRestricted { /**/ 
    int32_t queueId;/**/
    std::string message;/**/
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsQueueRestricted& v) { 
    j["queueId"] = v.queueId;
    j["message"] = v.message;
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, MatchmakingLcdsQueueRestricted& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.message = j.at("message").get<std::string>(); 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
  } 
  struct MatchmakingLcdsQueueThrottled { /**/ 
    int32_t queueId;/**/
    std::string message;/**/
    std::string reasonFailed;/**/
    MatchmakingLcdsSummoner summoner;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsQueueThrottled& v) { 
    j["queueId"] = v.queueId;
    j["message"] = v.message;
    j["reasonFailed"] = v.reasonFailed;
    j["summoner"] = v.summoner;
  }
  static void from_json(const json& j, MatchmakingLcdsQueueThrottled& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.message = j.at("message").get<std::string>(); 
    v.reasonFailed = j.at("reasonFailed").get<std::string>(); 
    v.summoner = j.at("summoner").get<MatchmakingLcdsSummoner>(); 
  } 
  struct MatchmakingLcdsSearchingForMatchNotification { /**/ 
    std::vector<MatchmakingLcdsQueueInfo> joinedQueues;/**/
    std::vector<json> playerJoinFailures;/**/
  };
  static void to_json(json& j, const MatchmakingLcdsSearchingForMatchNotification& v) { 
    j["joinedQueues"] = v.joinedQueues;
    j["playerJoinFailures"] = v.playerJoinFailures;
  }
  static void from_json(const json& j, MatchmakingLcdsSearchingForMatchNotification& v) { 
    v.joinedQueues = j.at("joinedQueues").get<std::vector<MatchmakingLcdsQueueInfo>>(); 
    v.playerJoinFailures = j.at("playerJoinFailures").get<std::vector<json>>(); 
  } 
  struct MatchmakingSearchErrorResource { /**/ 
    std::string errorType;/**/
    double penaltyTimeRemaining;/**/
    std::string message;/**/
    uint64_t penalizedSummonerId;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const MatchmakingSearchErrorResource& v) { 
    j["errorType"] = v.errorType;
    j["penaltyTimeRemaining"] = v.penaltyTimeRemaining;
    j["message"] = v.message;
    j["penalizedSummonerId"] = v.penalizedSummonerId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, MatchmakingSearchErrorResource& v) { 
    v.errorType = j.at("errorType").get<std::string>(); 
    v.penaltyTimeRemaining = j.at("penaltyTimeRemaining").get<double>(); 
    v.message = j.at("message").get<std::string>(); 
    v.penalizedSummonerId = j.at("penalizedSummonerId").get<uint64_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct MatchmakingSearchResource { /**/ 
    int32_t queueId;/**/
    std::vector<MatchmakingSearchErrorResource> errors;/**/
  };
  static void to_json(json& j, const MatchmakingSearchResource& v) { 
    j["queueId"] = v.queueId;
    j["errors"] = v.errors;
  }
  static void from_json(const json& j, MatchmakingSearchResource& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.errors = j.at("errors").get<std::vector<MatchmakingSearchErrorResource>>(); 
  } 
  struct MembershipInviteDto { /**/ 
    std::string clubKey;/**/
    uint64_t inviterSummonerId;/**/
    std::string inviteePlatformId;/**/
    std::string inviterPlatformId;/**/
    uint64_t inviterAccountId;/**/
    uint64_t inviteeAccountId;/**/
    uint64_t inviteeSummonerId;/**/
    int32_t status;/**/
    std::string clubName;/**/
  };
  static void to_json(json& j, const MembershipInviteDto& v) { 
    j["clubKey"] = v.clubKey;
    j["inviterSummonerId"] = v.inviterSummonerId;
    j["inviteePlatformId"] = v.inviteePlatformId;
    j["inviterPlatformId"] = v.inviterPlatformId;
    j["inviterAccountId"] = v.inviterAccountId;
    j["inviteeAccountId"] = v.inviteeAccountId;
    j["inviteeSummonerId"] = v.inviteeSummonerId;
    j["status"] = v.status;
    j["clubName"] = v.clubName;
  }
  static void from_json(const json& j, MembershipInviteDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.inviterSummonerId = j.at("inviterSummonerId").get<uint64_t>(); 
    v.inviteePlatformId = j.at("inviteePlatformId").get<std::string>(); 
    v.inviterPlatformId = j.at("inviterPlatformId").get<std::string>(); 
    v.inviterAccountId = j.at("inviterAccountId").get<uint64_t>(); 
    v.inviteeAccountId = j.at("inviteeAccountId").get<uint64_t>(); 
    v.inviteeSummonerId = j.at("inviteeSummonerId").get<uint64_t>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.clubName = j.at("clubName").get<std::string>(); 
  } 
  struct MembershipNoficationsDto { /**/ 
    std::string clubKey;/**/
    std::string action;/**/
    std::string role;/**/
    std::string status;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const MembershipNoficationsDto& v) { 
    j["clubKey"] = v.clubKey;
    j["action"] = v.action;
    j["role"] = v.role;
    j["status"] = v.status;
    j["name"] = v.name;
  }
  static void from_json(const json& j, MembershipNoficationsDto& v) { 
    v.clubKey = j.at("clubKey").get<std::string>(); 
    v.action = j.at("action").get<std::string>(); 
    v.role = j.at("role").get<std::string>(); 
    v.status = j.at("status").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class MetricDataType { /**/ 
    bool_e = 4, /**/ 
    float_e = 3, /**/ 
    int_e = 1, /**/ 
    string_e = 5, /**/ 
    uint_e = 2, /**/ 
    unknown_e = 0, /**/ 
  };
  static void to_json(json& j, const MetricDataType& v) {
    switch(v) { 
    case MetricDataType::bool_e:
      j = "bool";
    break;
    case MetricDataType::float_e:
      j = "float";
    break;
    case MetricDataType::int_e:
      j = "int";
    break;
    case MetricDataType::string_e:
      j = "string";
    break;
    case MetricDataType::uint_e:
      j = "uint";
    break;
    case MetricDataType::unknown_e:
      j = "unknown";
    break;
    };
  }
  static void from_json(const json& j, MetricDataType& v) {
    auto s = j.get<std::string>(); 
    if(s == "bool") {
      v = MetricDataType::bool_e;
      return;
    } 
    if(s == "float") {
      v = MetricDataType::float_e;
      return;
    } 
    if(s == "int") {
      v = MetricDataType::int_e;
      return;
    } 
    if(s == "string") {
      v = MetricDataType::string_e;
      return;
    } 
    if(s == "uint") {
      v = MetricDataType::uint_e;
      return;
    } 
    if(s == "unknown") {
      v = MetricDataType::unknown_e;
      return;
    } 
  } 
  enum class MetricPriority { /**/ 
    high_e = 2, /**/ 
    low_e = 0, /**/ 
    medium_e = 1, /**/ 
  };
  static void to_json(json& j, const MetricPriority& v) {
    switch(v) { 
    case MetricPriority::high_e:
      j = "high";
    break;
    case MetricPriority::low_e:
      j = "low";
    break;
    case MetricPriority::medium_e:
      j = "medium";
    break;
    };
  }
  static void from_json(const json& j, MetricPriority& v) {
    auto s = j.get<std::string>(); 
    if(s == "high") {
      v = MetricPriority::high_e;
      return;
    } 
    if(s == "low") {
      v = MetricPriority::low_e;
      return;
    } 
    if(s == "medium") {
      v = MetricPriority::medium_e;
      return;
    } 
  } 
  struct MetricMetadataHipchatNotification { /**/ 
    std::string roomid;/**/
    std::string tags;/**/
  };
  static void to_json(json& j, const MetricMetadataHipchatNotification& v) { 
    j["roomid"] = v.roomid;
    j["tags"] = v.tags;
  }
  static void from_json(const json& j, MetricMetadataHipchatNotification& v) { 
    v.roomid = j.at("roomid").get<std::string>(); 
    v.tags = j.at("tags").get<std::string>(); 
  } 
  struct MetricMetadataPagerDutyNotification { /**/ 
    std::string apikey;/**/
  };
  static void to_json(json& j, const MetricMetadataPagerDutyNotification& v) { 
    j["apikey"] = v.apikey;
  }
  static void from_json(const json& j, MetricMetadataPagerDutyNotification& v) { 
    v.apikey = j.at("apikey").get<std::string>(); 
  } 
  struct MetricMetadataNotify { /**/ 
    std::vector<MetricMetadataHipchatNotification> hipchat;/**/
    std::vector<MetricMetadataPagerDutyNotification> pagerduty;/**/
    std::vector<std::string> email;/**/
  };
  static void to_json(json& j, const MetricMetadataNotify& v) { 
    j["hipchat"] = v.hipchat;
    j["pagerduty"] = v.pagerduty;
    j["email"] = v.email;
  }
  static void from_json(const json& j, MetricMetadataNotify& v) { 
    v.hipchat = j.at("hipchat").get<std::vector<MetricMetadataHipchatNotification>>(); 
    v.pagerduty = j.at("pagerduty").get<std::vector<MetricMetadataPagerDutyNotification>>(); 
    v.email = j.at("email").get<std::vector<std::string>>(); 
  } 
  struct MetricMetadataAlert { /**/ 
    std::string level;/**/
    std::string description;/**/
    MetricMetadataNotify notify;/**/
    std::string pretty_name;/**/
    double min;/**/
    std::string info;/**/
    double max;/**/
  };
  static void to_json(json& j, const MetricMetadataAlert& v) { 
    j["level"] = v.level;
    j["description"] = v.description;
    j["notify"] = v.notify;
    j["pretty_name"] = v.pretty_name;
    j["min"] = v.min;
    j["info"] = v.info;
    j["max"] = v.max;
  }
  static void from_json(const json& j, MetricMetadataAlert& v) { 
    v.level = j.at("level").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.notify = j.at("notify").get<MetricMetadataNotify>(); 
    v.pretty_name = j.at("pretty_name").get<std::string>(); 
    v.min = j.at("min").get<double>(); 
    v.info = j.at("info").get<std::string>(); 
    v.max = j.at("max").get<double>(); 
  } 
  enum class MetricType { /**/ 
    count_e = 2, /**/ 
    duration_e = 3, /**/ 
    percentage_e = 1, /**/ 
    rate_e = 4, /**/ 
    unknown_e = 0, /**/ 
  };
  static void to_json(json& j, const MetricType& v) {
    switch(v) { 
    case MetricType::count_e:
      j = "count";
    break;
    case MetricType::duration_e:
      j = "duration";
    break;
    case MetricType::percentage_e:
      j = "percentage";
    break;
    case MetricType::rate_e:
      j = "rate";
    break;
    case MetricType::unknown_e:
      j = "unknown";
    break;
    };
  }
  static void from_json(const json& j, MetricType& v) {
    auto s = j.get<std::string>(); 
    if(s == "count") {
      v = MetricType::count_e;
      return;
    } 
    if(s == "duration") {
      v = MetricType::duration_e;
      return;
    } 
    if(s == "percentage") {
      v = MetricType::percentage_e;
      return;
    } 
    if(s == "rate") {
      v = MetricType::rate_e;
      return;
    } 
    if(s == "unknown") {
      v = MetricType::unknown_e;
      return;
    } 
  } 
  struct MetricMetadata { /**/ 
    uint32_t sample_window_ms;/**/
    MetricDataType data_type;/**/
    MetricPriority priority;/**/
    std::vector<MetricMetadataAlert> alerts;/**/
    std::string description;/**/
    std::string info;/**/
    std::string units;/**/
    std::string category;/**/
    MetricType type;/**/
    uint32_t period;/**/
    MetricMetadataNotify notify;/**/
    std::string pretty_name;/**/
    AggregationType transientAggregation;/**/
    std::string destination;/**/
  };
  static void to_json(json& j, const MetricMetadata& v) { 
    j["sample_window_ms"] = v.sample_window_ms;
    j["data_type"] = v.data_type;
    j["priority"] = v.priority;
    j["alerts"] = v.alerts;
    j["description"] = v.description;
    j["info"] = v.info;
    j["units"] = v.units;
    j["category"] = v.category;
    j["type"] = v.type;
    j["period"] = v.period;
    j["notify"] = v.notify;
    j["pretty_name"] = v.pretty_name;
    j["transientAggregation"] = v.transientAggregation;
    j["destination"] = v.destination;
  }
  static void from_json(const json& j, MetricMetadata& v) { 
    v.sample_window_ms = j.at("sample_window_ms").get<uint32_t>(); 
    v.data_type = j.at("data_type").get<MetricDataType>(); 
    v.priority = j.at("priority").get<MetricPriority>(); 
    v.alerts = j.at("alerts").get<std::vector<MetricMetadataAlert>>(); 
    v.description = j.at("description").get<std::string>(); 
    v.info = j.at("info").get<std::string>(); 
    v.units = j.at("units").get<std::string>(); 
    v.category = j.at("category").get<std::string>(); 
    v.type = j.at("type").get<MetricType>(); 
    v.period = j.at("period").get<uint32_t>(); 
    v.notify = j.at("notify").get<MetricMetadataNotify>(); 
    v.pretty_name = j.at("pretty_name").get<std::string>(); 
    v.transientAggregation = j.at("transientAggregation").get<AggregationType>(); 
    v.destination = j.at("destination").get<std::string>(); 
  } 
  struct MissionAlertDTO { /**/ 
    std::string type;/**/
    std::string message;/**/
    int64_t alertTime;/**/
  };
  static void to_json(json& j, const MissionAlertDTO& v) { 
    j["type"] = v.type;
    j["message"] = v.message;
    j["alertTime"] = v.alertTime;
  }
  static void from_json(const json& j, MissionAlertDTO& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.message = j.at("message").get<std::string>(); 
    v.alertTime = j.at("alertTime").get<int64_t>(); 
  } 
  struct MissionIdsDTO { /**/ 
    std::vector<std::string> missionIds;/**/
  };
  static void to_json(json& j, const MissionIdsDTO& v) { 
    j["missionIds"] = v.missionIds;
  }
  static void from_json(const json& j, MissionIdsDTO& v) { 
    v.missionIds = j.at("missionIds").get<std::vector<std::string>>(); 
  } 
  struct MissionProgressDTO { /**/ 
    int32_t currentProgress;/**/
    int32_t totalCount;/**/
    int32_t lastViewedProgress;/**/
  };
  static void to_json(json& j, const MissionProgressDTO& v) { 
    j["currentProgress"] = v.currentProgress;
    j["totalCount"] = v.totalCount;
    j["lastViewedProgress"] = v.lastViewedProgress;
  }
  static void from_json(const json& j, MissionProgressDTO& v) { 
    v.currentProgress = j.at("currentProgress").get<int32_t>(); 
    v.totalCount = j.at("totalCount").get<int32_t>(); 
    v.lastViewedProgress = j.at("lastViewedProgress").get<int32_t>(); 
  } 
  struct MissionRequirementDTO { /**/ 
    std::string type;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const MissionRequirementDTO& v) { 
    j["type"] = v.type;
    j["description"] = v.description;
  }
  static void from_json(const json& j, MissionRequirementDTO& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  struct MissionRewardMediaItemDTO { /**/ 
    std::string video;/**/
    std::string sound;/**/
  };
  static void to_json(json& j, const MissionRewardMediaItemDTO& v) { 
    j["video"] = v.video;
    j["sound"] = v.sound;
  }
  static void from_json(const json& j, MissionRewardMediaItemDTO& v) { 
    v.video = j.at("video").get<std::string>(); 
    v.sound = j.at("sound").get<std::string>(); 
  } 
  struct MissionRewardMediaDTO { /**/ 
    MissionRewardMediaItemDTO loop;/**/
    MissionRewardMediaItemDTO outro;/**/
    MissionRewardMediaItemDTO intro;/**/
  };
  static void to_json(json& j, const MissionRewardMediaDTO& v) { 
    j["loop"] = v.loop;
    j["outro"] = v.outro;
    j["intro"] = v.intro;
  }
  static void from_json(const json& j, MissionRewardMediaDTO& v) { 
    v.loop = j.at("loop").get<MissionRewardMediaItemDTO>(); 
    v.outro = j.at("outro").get<MissionRewardMediaItemDTO>(); 
    v.intro = j.at("intro").get<MissionRewardMediaItemDTO>(); 
  } 
  struct MultipleReplayMetadataRequestV2 { /**/ 
    std::vector<uint64_t> gameIds;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const MultipleReplayMetadataRequestV2& v) { 
    j["gameIds"] = v.gameIds;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, MultipleReplayMetadataRequestV2& v) { 
    v.gameIds = j.at("gameIds").get<std::vector<uint64_t>>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct ReplayMetadataV2 { /**/ 
    std::string gameVersion;/**/
    uint32_t fileSize;/**/
  };
  static void to_json(json& j, const ReplayMetadataV2& v) { 
    j["gameVersion"] = v.gameVersion;
    j["fileSize"] = v.fileSize;
  }
  static void from_json(const json& j, ReplayMetadataV2& v) { 
    v.gameVersion = j.at("gameVersion").get<std::string>(); 
    v.fileSize = j.at("fileSize").get<uint32_t>(); 
  } 
  enum class ReplayResponseStatus { /**/ 
    BAD_REQUEST_e = 3, /**/ 
    EXPIRED_e = 2, /**/ 
    INTERNAL_SERVER_ERROR_e = 4, /**/ 
    NOT_FOUND_e = 1, /**/ 
    OK_e = 0, /**/ 
  };
  static void to_json(json& j, const ReplayResponseStatus& v) {
    switch(v) { 
    case ReplayResponseStatus::BAD_REQUEST_e:
      j = "BAD_REQUEST";
    break;
    case ReplayResponseStatus::EXPIRED_e:
      j = "EXPIRED";
    break;
    case ReplayResponseStatus::INTERNAL_SERVER_ERROR_e:
      j = "INTERNAL_SERVER_ERROR";
    break;
    case ReplayResponseStatus::NOT_FOUND_e:
      j = "NOT_FOUND";
    break;
    case ReplayResponseStatus::OK_e:
      j = "OK";
    break;
    };
  }
  static void from_json(const json& j, ReplayResponseStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "BAD_REQUEST") {
      v = ReplayResponseStatus::BAD_REQUEST_e;
      return;
    } 
    if(s == "EXPIRED") {
      v = ReplayResponseStatus::EXPIRED_e;
      return;
    } 
    if(s == "INTERNAL_SERVER_ERROR") {
      v = ReplayResponseStatus::INTERNAL_SERVER_ERROR_e;
      return;
    } 
    if(s == "NOT_FOUND") {
      v = ReplayResponseStatus::NOT_FOUND_e;
      return;
    } 
    if(s == "OK") {
      v = ReplayResponseStatus::OK_e;
      return;
    } 
  } 
  struct MultipleReplayMetadataResponseItemV2 { /**/ 
    ReplayMetadataV2 metadata;/**/
    uint64_t gameId;/**/
    ReplayResponseStatus status;/**/
  };
  static void to_json(json& j, const MultipleReplayMetadataResponseItemV2& v) { 
    j["metadata"] = v.metadata;
    j["gameId"] = v.gameId;
    j["status"] = v.status;
  }
  static void from_json(const json& j, MultipleReplayMetadataResponseItemV2& v) { 
    v.metadata = j.at("metadata").get<ReplayMetadataV2>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.status = j.at("status").get<ReplayResponseStatus>(); 
  } 
  struct MultipleReplayMetadataResponseV2 { /**/ 
    std::vector<MultipleReplayMetadataResponseItemV2> metadataResponses;/**/
  };
  static void to_json(json& j, const MultipleReplayMetadataResponseV2& v) { 
    j["metadataResponses"] = v.metadataResponses;
  }
  static void from_json(const json& j, MultipleReplayMetadataResponseV2& v) { 
    v.metadataResponses = j.at("metadataResponses").get<std::vector<MultipleReplayMetadataResponseItemV2>>(); 
  } 
  enum class NetworkExperimentStatus { /**/ 
    Completed_e = 3, /**/ 
    Disabled_e = 0, /**/ 
    InProgress_e = 2, /**/ 
    Skipped_e = 1, /**/ 
  };
  static void to_json(json& j, const NetworkExperimentStatus& v) {
    switch(v) { 
    case NetworkExperimentStatus::Completed_e:
      j = "Completed";
    break;
    case NetworkExperimentStatus::Disabled_e:
      j = "Disabled";
    break;
    case NetworkExperimentStatus::InProgress_e:
      j = "InProgress";
    break;
    case NetworkExperimentStatus::Skipped_e:
      j = "Skipped";
    break;
    };
  }
  static void from_json(const json& j, NetworkExperimentStatus& v) {
    auto s = j.get<std::string>(); 
    if(s == "Completed") {
      v = NetworkExperimentStatus::Completed_e;
      return;
    } 
    if(s == "Disabled") {
      v = NetworkExperimentStatus::Disabled_e;
      return;
    } 
    if(s == "InProgress") {
      v = NetworkExperimentStatus::InProgress_e;
      return;
    } 
    if(s == "Skipped") {
      v = NetworkExperimentStatus::Skipped_e;
      return;
    } 
  } 
  struct NetworkExperimentResource { /**/ 
    NetworkExperimentStatus status;/**/
  };
  static void to_json(json& j, const NetworkExperimentResource& v) { 
    j["status"] = v.status;
  }
  static void from_json(const json& j, NetworkExperimentResource& v) { 
    v.status = j.at("status").get<NetworkExperimentStatus>(); 
  } 
  struct NetworkExperimentsResource { /**/ 
    std::map<std::string, NetworkExperimentResource> experiments;/**/
  };
  static void to_json(json& j, const NetworkExperimentsResource& v) { 
    j["experiments"] = v.experiments;
  }
  static void from_json(const json& j, NetworkExperimentsResource& v) { 
    v.experiments = j.at("experiments").get<std::map<std::string, NetworkExperimentResource>>(); 
  } 
  struct NetworkTestingDynamicConfig { /**/ 
    std::string IPv6SupportProbeServers;/**/
    uint8_t IPv6SupportProbeCount;/**/
    uint16_t IPv4OptionsProbePort;/**/
    std::string IPv4OptionsProbeServers;/**/
    uint16_t IPv6SupportProbePort;/**/
    double IPv4OptionsProbability;/**/
    uint8_t IPv4OptionsProbeCount;/**/
    double IPv6SupportProbability;/**/
  };
  static void to_json(json& j, const NetworkTestingDynamicConfig& v) { 
    j["IPv6SupportProbeServers"] = v.IPv6SupportProbeServers;
    j["IPv6SupportProbeCount"] = v.IPv6SupportProbeCount;
    j["IPv4OptionsProbePort"] = v.IPv4OptionsProbePort;
    j["IPv4OptionsProbeServers"] = v.IPv4OptionsProbeServers;
    j["IPv6SupportProbePort"] = v.IPv6SupportProbePort;
    j["IPv4OptionsProbability"] = v.IPv4OptionsProbability;
    j["IPv4OptionsProbeCount"] = v.IPv4OptionsProbeCount;
    j["IPv6SupportProbability"] = v.IPv6SupportProbability;
  }
  static void from_json(const json& j, NetworkTestingDynamicConfig& v) { 
    v.IPv6SupportProbeServers = j.at("IPv6SupportProbeServers").get<std::string>(); 
    v.IPv6SupportProbeCount = j.at("IPv6SupportProbeCount").get<uint8_t>(); 
    v.IPv4OptionsProbePort = j.at("IPv4OptionsProbePort").get<uint16_t>(); 
    v.IPv4OptionsProbeServers = j.at("IPv4OptionsProbeServers").get<std::string>(); 
    v.IPv6SupportProbePort = j.at("IPv6SupportProbePort").get<uint16_t>(); 
    v.IPv4OptionsProbability = j.at("IPv4OptionsProbability").get<double>(); 
    v.IPv4OptionsProbeCount = j.at("IPv4OptionsProbeCount").get<uint8_t>(); 
    v.IPv6SupportProbability = j.at("IPv6SupportProbability").get<double>(); 
  } 
  struct PatcherComponentStateProgress { /**/ 
    double bytesPerSecond;/**/
    uint64_t bytesRequired;/**/
    uint64_t bytesComplete;/**/
  };
  static void to_json(json& j, const PatcherComponentStateProgress& v) { 
    j["bytesPerSecond"] = v.bytesPerSecond;
    j["bytesRequired"] = v.bytesRequired;
    j["bytesComplete"] = v.bytesComplete;
  }
  static void from_json(const json& j, PatcherComponentStateProgress& v) { 
    v.bytesPerSecond = j.at("bytesPerSecond").get<double>(); 
    v.bytesRequired = j.at("bytesRequired").get<uint64_t>(); 
    v.bytesComplete = j.at("bytesComplete").get<uint64_t>(); 
  } 
  enum class PatcherComponentStateWorkType { /**/ 
    Disk_e = 2, /**/ 
    Network_e = 1, /**/ 
    Scanning_e = 0, /**/ 
  };
  static void to_json(json& j, const PatcherComponentStateWorkType& v) {
    switch(v) { 
    case PatcherComponentStateWorkType::Disk_e:
      j = "Disk";
    break;
    case PatcherComponentStateWorkType::Network_e:
      j = "Network";
    break;
    case PatcherComponentStateWorkType::Scanning_e:
      j = "Scanning";
    break;
    };
  }
  static void from_json(const json& j, PatcherComponentStateWorkType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Disk") {
      v = PatcherComponentStateWorkType::Disk_e;
      return;
    } 
    if(s == "Network") {
      v = PatcherComponentStateWorkType::Network_e;
      return;
    } 
    if(s == "Scanning") {
      v = PatcherComponentStateWorkType::Scanning_e;
      return;
    } 
  } 
  struct PatcherComponentActionProgress { /**/ 
    PatcherComponentStateProgress total;/**/
    std::string currentItem;/**/
    PatcherComponentStateWorkType primaryWork;/**/
    PatcherComponentStateProgress network;/**/
  };
  static void to_json(json& j, const PatcherComponentActionProgress& v) { 
    j["total"] = v.total;
    j["currentItem"] = v.currentItem;
    j["primaryWork"] = v.primaryWork;
    j["network"] = v.network;
  }
  static void from_json(const json& j, PatcherComponentActionProgress& v) { 
    v.total = j.at("total").get<PatcherComponentStateProgress>(); 
    v.currentItem = j.at("currentItem").get<std::string>(); 
    v.primaryWork = j.at("primaryWork").get<PatcherComponentStateWorkType>(); 
    v.network = j.at("network").get<PatcherComponentStateProgress>(); 
  } 
  enum class PatcherComponentResourceHistory { /**/ 
    keep_e = 1, /**/ 
    none_e = 0, /**/ 
  };
  static void to_json(json& j, const PatcherComponentResourceHistory& v) {
    switch(v) { 
    case PatcherComponentResourceHistory::keep_e:
      j = "keep";
    break;
    case PatcherComponentResourceHistory::none_e:
      j = "none";
    break;
    };
  }
  static void from_json(const json& j, PatcherComponentResourceHistory& v) {
    auto s = j.get<std::string>(); 
    if(s == "keep") {
      v = PatcherComponentResourceHistory::keep_e;
      return;
    } 
    if(s == "none") {
      v = PatcherComponentResourceHistory::none_e;
      return;
    } 
  } 
  enum class PatcherComponentResourceType { /**/ 
    project_e = 0, /**/ 
    solution_e = 1, /**/ 
  };
  static void to_json(json& j, const PatcherComponentResourceType& v) {
    switch(v) { 
    case PatcherComponentResourceType::project_e:
      j = "project";
    break;
    case PatcherComponentResourceType::solution_e:
      j = "solution";
    break;
    };
  }
  static void from_json(const json& j, PatcherComponentResourceType& v) {
    auto s = j.get<std::string>(); 
    if(s == "project") {
      v = PatcherComponentResourceType::project_e;
      return;
    } 
    if(s == "solution") {
      v = PatcherComponentResourceType::solution_e;
      return;
    } 
  } 
  struct PatcherHeaderEntry { /**/ 
    std::string value;/**/
    std::string key;/**/
  };
  static void to_json(json& j, const PatcherHeaderEntry& v) { 
    j["value"] = v.value;
    j["key"] = v.key;
  }
  static void from_json(const json& j, PatcherHeaderEntry& v) { 
    v.value = j.at("value").get<std::string>(); 
    v.key = j.at("key").get<std::string>(); 
  } 
  struct PatcherComponentResource { /**/ 
    PatcherComponentResourceHistory history;/**/
    std::string locale;/**/
    std::string install_dir;/**/
    std::string id;/**/
    bool copy_to_solution;/**/
    PatcherComponentResourceType type;/**/
    std::string region;/**/
    std::vector<PatcherHeaderEntry> headers;/**/
    std::string hostname;/**/
    bool use_tls;/**/
    std::string remote_path;/**/
  };
  static void to_json(json& j, const PatcherComponentResource& v) { 
    j["history"] = v.history;
    j["locale"] = v.locale;
    j["install_dir"] = v.install_dir;
    j["id"] = v.id;
    j["copy_to_solution"] = v.copy_to_solution;
    j["type"] = v.type;
    j["region"] = v.region;
    j["headers"] = v.headers;
    j["hostname"] = v.hostname;
    j["use_tls"] = v.use_tls;
    j["remote_path"] = v.remote_path;
  }
  static void from_json(const json& j, PatcherComponentResource& v) { 
    v.history = j.at("history").get<PatcherComponentResourceHistory>(); 
    v.locale = j.at("locale").get<std::string>(); 
    v.install_dir = j.at("install_dir").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.copy_to_solution = j.at("copy_to_solution").get<bool>(); 
    v.type = j.at("type").get<PatcherComponentResourceType>(); 
    v.region = j.at("region").get<std::string>(); 
    v.headers = j.at("headers").get<std::vector<PatcherHeaderEntry>>(); 
    v.hostname = j.at("hostname").get<std::string>(); 
    v.use_tls = j.at("use_tls").get<bool>(); 
    v.remote_path = j.at("remote_path").get<std::string>(); 
  } 
  enum class PatcherComponentStateAction { /**/ 
    CheckingForUpdates_e = 1, /**/ 
    Idle_e = 0, /**/ 
    Patching_e = 2, /**/ 
    Repairing_e = 3, /**/ 
  };
  static void to_json(json& j, const PatcherComponentStateAction& v) {
    switch(v) { 
    case PatcherComponentStateAction::CheckingForUpdates_e:
      j = "CheckingForUpdates";
    break;
    case PatcherComponentStateAction::Idle_e:
      j = "Idle";
    break;
    case PatcherComponentStateAction::Patching_e:
      j = "Patching";
    break;
    case PatcherComponentStateAction::Repairing_e:
      j = "Repairing";
    break;
    };
  }
  static void from_json(const json& j, PatcherComponentStateAction& v) {
    auto s = j.get<std::string>(); 
    if(s == "CheckingForUpdates") {
      v = PatcherComponentStateAction::CheckingForUpdates_e;
      return;
    } 
    if(s == "Idle") {
      v = PatcherComponentStateAction::Idle_e;
      return;
    } 
    if(s == "Patching") {
      v = PatcherComponentStateAction::Patching_e;
      return;
    } 
    if(s == "Repairing") {
      v = PatcherComponentStateAction::Repairing_e;
      return;
    } 
  } 
  struct PatcherComponentState { /**/ 
    bool isCorrupted;/**/
    PatcherComponentStateAction action;/**/
    bool isUpdateAvailable;/**/
    std::string id;/**/
    std::optional<std::string> timeOfLastUpToDateCheckISO8601;/**/
    std::optional<PatcherComponentActionProgress> progress;/**/
    bool isUpToDate;/**/
  };
  static void to_json(json& j, const PatcherComponentState& v) { 
    j["isCorrupted"] = v.isCorrupted;
    j["action"] = v.action;
    j["isUpdateAvailable"] = v.isUpdateAvailable;
    j["id"] = v.id;
    j["timeOfLastUpToDateCheckISO8601"] = v.timeOfLastUpToDateCheckISO8601;
    j["progress"] = v.progress;
    j["isUpToDate"] = v.isUpToDate;
  }
  static void from_json(const json& j, PatcherComponentState& v) { 
    v.isCorrupted = j.at("isCorrupted").get<bool>(); 
    v.action = j.at("action").get<PatcherComponentStateAction>(); 
    v.isUpdateAvailable = j.at("isUpdateAvailable").get<bool>(); 
    v.id = j.at("id").get<std::string>(); 
    v.timeOfLastUpToDateCheckISO8601 = j.at("timeOfLastUpToDateCheckISO8601").get<std::optional<std::string>>(); 
    v.progress = j.at("progress").get<std::optional<PatcherComponentActionProgress>>(); 
    v.isUpToDate = j.at("isUpToDate").get<bool>(); 
  } 
  enum class PatcherInjectedPatcherError { /**/ 
    FailedFailedToWriteFile_e = 3, /**/ 
    FailedToFindFile_e = 1, /**/ 
    FailedToResolveHostName_e = 2, /**/ 
    UnspecifiedError_e = 0, /**/ 
  };
  static void to_json(json& j, const PatcherInjectedPatcherError& v) {
    switch(v) { 
    case PatcherInjectedPatcherError::FailedFailedToWriteFile_e:
      j = "FailedFailedToWriteFile";
    break;
    case PatcherInjectedPatcherError::FailedToFindFile_e:
      j = "FailedToFindFile";
    break;
    case PatcherInjectedPatcherError::FailedToResolveHostName_e:
      j = "FailedToResolveHostName";
    break;
    case PatcherInjectedPatcherError::UnspecifiedError_e:
      j = "UnspecifiedError";
    break;
    };
  }
  static void from_json(const json& j, PatcherInjectedPatcherError& v) {
    auto s = j.get<std::string>(); 
    if(s == "FailedFailedToWriteFile") {
      v = PatcherInjectedPatcherError::FailedFailedToWriteFile_e;
      return;
    } 
    if(s == "FailedToFindFile") {
      v = PatcherInjectedPatcherError::FailedToFindFile_e;
      return;
    } 
    if(s == "FailedToResolveHostName") {
      v = PatcherInjectedPatcherError::FailedToResolveHostName_e;
      return;
    } 
    if(s == "UnspecifiedError") {
      v = PatcherInjectedPatcherError::UnspecifiedError_e;
      return;
    } 
  } 
  enum class PatcherNotificationId { /**/ 
    ConnectionError_e = 1, /**/ 
    DidRestoreClientBackup_e = 5, /**/ 
    FailedToWriteError_e = 3, /**/ 
    MissingFilesError_e = 2, /**/ 
    UnspecifiedError_e = 0, /**/ 
    WillRestoreClientBackupOnRestart_e = 4, /**/ 
  };
  static void to_json(json& j, const PatcherNotificationId& v) {
    switch(v) { 
    case PatcherNotificationId::ConnectionError_e:
      j = "ConnectionError";
    break;
    case PatcherNotificationId::DidRestoreClientBackup_e:
      j = "DidRestoreClientBackup";
    break;
    case PatcherNotificationId::FailedToWriteError_e:
      j = "FailedToWriteError";
    break;
    case PatcherNotificationId::MissingFilesError_e:
      j = "MissingFilesError";
    break;
    case PatcherNotificationId::UnspecifiedError_e:
      j = "UnspecifiedError";
    break;
    case PatcherNotificationId::WillRestoreClientBackupOnRestart_e:
      j = "WillRestoreClientBackupOnRestart";
    break;
    };
  }
  static void from_json(const json& j, PatcherNotificationId& v) {
    auto s = j.get<std::string>(); 
    if(s == "ConnectionError") {
      v = PatcherNotificationId::ConnectionError_e;
      return;
    } 
    if(s == "DidRestoreClientBackup") {
      v = PatcherNotificationId::DidRestoreClientBackup_e;
      return;
    } 
    if(s == "FailedToWriteError") {
      v = PatcherNotificationId::FailedToWriteError_e;
      return;
    } 
    if(s == "MissingFilesError") {
      v = PatcherNotificationId::MissingFilesError_e;
      return;
    } 
    if(s == "UnspecifiedError") {
      v = PatcherNotificationId::UnspecifiedError_e;
      return;
    } 
    if(s == "WillRestoreClientBackupOnRestart") {
      v = PatcherNotificationId::WillRestoreClientBackupOnRestart_e;
      return;
    } 
  } 
  struct PatcherNotification { /**/ 
    PatcherNotificationId notificationId;/**/
    std::string id;/**/
  };
  static void to_json(json& j, const PatcherNotification& v) { 
    j["notificationId"] = v.notificationId;
    j["id"] = v.id;
  }
  static void from_json(const json& j, PatcherNotification& v) { 
    v.notificationId = j.at("notificationId").get<PatcherNotificationId>(); 
    v.id = j.at("id").get<std::string>(); 
  } 
  struct PatcherP2PStatus { /**/ 
    bool isAllowedByUser;/**/
    bool isEnabledForPatchline;/**/
    bool requiresRestart;/**/
  };
  static void to_json(json& j, const PatcherP2PStatus& v) { 
    j["isAllowedByUser"] = v.isAllowedByUser;
    j["isEnabledForPatchline"] = v.isEnabledForPatchline;
    j["requiresRestart"] = v.requiresRestart;
  }
  static void from_json(const json& j, PatcherP2PStatus& v) { 
    v.isAllowedByUser = j.at("isAllowedByUser").get<bool>(); 
    v.isEnabledForPatchline = j.at("isEnabledForPatchline").get<bool>(); 
    v.requiresRestart = j.at("requiresRestart").get<bool>(); 
  } 
  struct PatcherP2PStatusUpdate { /**/ 
    bool isAllowedByUser;/**/
  };
  static void to_json(json& j, const PatcherP2PStatusUpdate& v) { 
    j["isAllowedByUser"] = v.isAllowedByUser;
  }
  static void from_json(const json& j, PatcherP2PStatusUpdate& v) { 
    v.isAllowedByUser = j.at("isAllowedByUser").get<bool>(); 
  } 
  struct PatcherProductResource { /**/ 
    std::vector<PatcherComponentResource> components;/**/
    std::string id;/**/
    std::optional<uint32_t> refresh_period;/**/
  };
  static void to_json(json& j, const PatcherProductResource& v) { 
    j["components"] = v.components;
    j["id"] = v.id;
    j["refresh_period"] = v.refresh_period;
  }
  static void from_json(const json& j, PatcherProductResource& v) { 
    v.components = j.at("components").get<std::vector<PatcherComponentResource>>(); 
    v.id = j.at("id").get<std::string>(); 
    v.refresh_period = j.at("refresh_period").get<std::optional<uint32_t>>(); 
  } 
  struct PatcherProductState { /**/ 
    bool isCorrupted;/**/
    PatcherComponentStateAction action;/**/
    bool isUpdateAvailable;/**/
    std::string id;/**/
    double percentPatched;/**/
    bool isStopped;/**/
    std::vector<PatcherComponentState> components;/**/
    bool isUpToDate;/**/
  };
  static void to_json(json& j, const PatcherProductState& v) { 
    j["isCorrupted"] = v.isCorrupted;
    j["action"] = v.action;
    j["isUpdateAvailable"] = v.isUpdateAvailable;
    j["id"] = v.id;
    j["percentPatched"] = v.percentPatched;
    j["isStopped"] = v.isStopped;
    j["components"] = v.components;
    j["isUpToDate"] = v.isUpToDate;
  }
  static void from_json(const json& j, PatcherProductState& v) { 
    v.isCorrupted = j.at("isCorrupted").get<bool>(); 
    v.action = j.at("action").get<PatcherComponentStateAction>(); 
    v.isUpdateAvailable = j.at("isUpdateAvailable").get<bool>(); 
    v.id = j.at("id").get<std::string>(); 
    v.percentPatched = j.at("percentPatched").get<double>(); 
    v.isStopped = j.at("isStopped").get<bool>(); 
    v.components = j.at("components").get<std::vector<PatcherComponentState>>(); 
    v.isUpToDate = j.at("isUpToDate").get<bool>(); 
  } 
  struct PatcherStatus { /**/ 
    std::optional<uint32_t> successfullyInstalledVersion;/**/
    bool connectedToPatchServer;/**/
    bool hasUpdatesOnRestart;/**/
    bool willRestartOnSelfUpdate;/**/
  };
  static void to_json(json& j, const PatcherStatus& v) { 
    j["successfullyInstalledVersion"] = v.successfullyInstalledVersion;
    j["connectedToPatchServer"] = v.connectedToPatchServer;
    j["hasUpdatesOnRestart"] = v.hasUpdatesOnRestart;
    j["willRestartOnSelfUpdate"] = v.willRestartOnSelfUpdate;
  }
  static void from_json(const json& j, PatcherStatus& v) { 
    v.successfullyInstalledVersion = j.at("successfullyInstalledVersion").get<std::optional<uint32_t>>(); 
    v.connectedToPatchServer = j.at("connectedToPatchServer").get<bool>(); 
    v.hasUpdatesOnRestart = j.at("hasUpdatesOnRestart").get<bool>(); 
    v.willRestartOnSelfUpdate = j.at("willRestartOnSelfUpdate").get<bool>(); 
  } 
  struct PaymentsFrontEndRequest { /**/ 
    int32_t gifteeAccountId;/**/
    std::string gifteeMessage;/**/
    bool isPrepaid;/**/
    std::string localeId;/**/
    std::string rsoToken;/**/
    int16_t summonerLevel;/**/
  };
  static void to_json(json& j, const PaymentsFrontEndRequest& v) { 
    j["gifteeAccountId"] = v.gifteeAccountId;
    j["gifteeMessage"] = v.gifteeMessage;
    j["isPrepaid"] = v.isPrepaid;
    j["localeId"] = v.localeId;
    j["rsoToken"] = v.rsoToken;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, PaymentsFrontEndRequest& v) { 
    v.gifteeAccountId = j.at("gifteeAccountId").get<int32_t>(); 
    v.gifteeMessage = j.at("gifteeMessage").get<std::string>(); 
    v.isPrepaid = j.at("isPrepaid").get<bool>(); 
    v.localeId = j.at("localeId").get<std::string>(); 
    v.rsoToken = j.at("rsoToken").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<int16_t>(); 
  } 
  struct PaymentsFrontEndResult { /**/ 
    std::string url;/**/
  };
  static void to_json(json& j, const PaymentsFrontEndResult& v) { 
    j["url"] = v.url;
  }
  static void from_json(const json& j, PaymentsFrontEndResult& v) { 
    v.url = j.at("url").get<std::string>(); 
  } 
  struct PaymentsPMCStartUrlRequest { /**/ 
    int32_t gifteeAccountId;/**/
    bool isPrepaid;/**/
    std::string localeId;/**/
    std::string gifteeMessage;/**/
    int16_t summonerLevel;/**/
  };
  static void to_json(json& j, const PaymentsPMCStartUrlRequest& v) { 
    j["gifteeAccountId"] = v.gifteeAccountId;
    j["isPrepaid"] = v.isPrepaid;
    j["localeId"] = v.localeId;
    j["gifteeMessage"] = v.gifteeMessage;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, PaymentsPMCStartUrlRequest& v) { 
    v.gifteeAccountId = j.at("gifteeAccountId").get<int32_t>(); 
    v.isPrepaid = j.at("isPrepaid").get<bool>(); 
    v.localeId = j.at("localeId").get<std::string>(); 
    v.gifteeMessage = j.at("gifteeMessage").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<int16_t>(); 
  } 
  struct PaymentsPMCStartUrlResult { /**/ 
    std::string pmcStartUrl;/**/
    std::string createdAt;/**/
    std::string id;/**/
    std::string playerFacingId;/**/
    std::string localeId;/**/
    std::string userId;/**/
    int16_t summonerLevel;/**/
  };
  static void to_json(json& j, const PaymentsPMCStartUrlResult& v) { 
    j["pmcStartUrl"] = v.pmcStartUrl;
    j["createdAt"] = v.createdAt;
    j["id"] = v.id;
    j["playerFacingId"] = v.playerFacingId;
    j["localeId"] = v.localeId;
    j["userId"] = v.userId;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, PaymentsPMCStartUrlResult& v) { 
    v.pmcStartUrl = j.at("pmcStartUrl").get<std::string>(); 
    v.createdAt = j.at("createdAt").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.playerFacingId = j.at("playerFacingId").get<std::string>(); 
    v.localeId = j.at("localeId").get<std::string>(); 
    v.userId = j.at("userId").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<int16_t>(); 
  } 
  struct PersonalizedOffersLcdsChampionDTO { /**/ 
    int32_t championId;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const PersonalizedOffersLcdsChampionDTO& v) { 
    j["championId"] = v.championId;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, PersonalizedOffersLcdsChampionDTO& v) { 
    v.championId = j.at("championId").get<int32_t>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct PersonalizedOffersLcdsChampionSkinDTO { /**/ 
    int32_t skinId;/**/
    int32_t championId;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const PersonalizedOffersLcdsChampionSkinDTO& v) { 
    j["skinId"] = v.skinId;
    j["championId"] = v.championId;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, PersonalizedOffersLcdsChampionSkinDTO& v) { 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct PersonalizedOffersLcdsClientDynamicConfigurationNotification { /**/ 
    std::string configs;/**/
    bool delta;/**/
  };
  static void to_json(json& j, const PersonalizedOffersLcdsClientDynamicConfigurationNotification& v) { 
    j["configs"] = v.configs;
    j["delta"] = v.delta;
  }
  static void from_json(const json& j, PersonalizedOffersLcdsClientDynamicConfigurationNotification& v) { 
    v.configs = j.at("configs").get<std::string>(); 
    v.delta = j.at("delta").get<bool>(); 
  } 
  struct PersonalizedOffersStoreFulfillmentNotification { /**/ 
    std::string inventoryType;/**/
    json data;/**/
  };
  static void to_json(json& j, const PersonalizedOffersStoreFulfillmentNotification& v) { 
    j["inventoryType"] = v.inventoryType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, PersonalizedOffersStoreFulfillmentNotification& v) { 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  enum class PickModes { /**/ 
    DONE_e = 2, /**/ 
    IN_PROGRESS_e = 1, /**/ 
    NOT_PICKING_e = 0, /**/ 
  };
  static void to_json(json& j, const PickModes& v) {
    switch(v) { 
    case PickModes::DONE_e:
      j = "DONE";
    break;
    case PickModes::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case PickModes::NOT_PICKING_e:
      j = "NOT_PICKING";
    break;
    };
  }
  static void from_json(const json& j, PickModes& v) {
    auto s = j.get<std::string>(); 
    if(s == "DONE") {
      v = PickModes::DONE_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = PickModes::IN_PROGRESS_e;
      return;
    } 
    if(s == "NOT_PICKING") {
      v = PickModes::NOT_PICKING_e;
      return;
    } 
  } 
  struct PlayerBehaviorLcdsForcedClientShutdown { /**/ 
    std::string additionalInfo;/**/
    std::string reason;/**/
  };
  static void to_json(json& j, const PlayerBehaviorLcdsForcedClientShutdown& v) { 
    j["additionalInfo"] = v.additionalInfo;
    j["reason"] = v.reason;
  }
  static void from_json(const json& j, PlayerBehaviorLcdsForcedClientShutdown& v) { 
    v.additionalInfo = j.at("additionalInfo").get<std::string>(); 
    v.reason = j.at("reason").get<std::string>(); 
  } 
  struct PlayerBehaviorLcdsSimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const PlayerBehaviorLcdsSimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, PlayerBehaviorLcdsSimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct PlayerBehaviorSimpleMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const PlayerBehaviorSimpleMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, PlayerBehaviorSimpleMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct PlayerClub { /**/ 
    std::string tag;/**/
    std::string motd;/**/
    int64_t lastModified;/**/
    ClubRole role;/**/
    bool primary;/**/
    ClubPermissions permissions;/**/
    std::string name;/**/
    std::string description;/**/
    ClubMemberLists members;/**/
    std::string jid;/**/
    std::string key;/**/
    ClubMember owner;/**/
    bool isClubTagEligible;/**/
    int64_t created;/**/
  };
  static void to_json(json& j, const PlayerClub& v) { 
    j["tag"] = v.tag;
    j["motd"] = v.motd;
    j["lastModified"] = v.lastModified;
    j["role"] = v.role;
    j["primary"] = v.primary;
    j["permissions"] = v.permissions;
    j["name"] = v.name;
    j["description"] = v.description;
    j["members"] = v.members;
    j["jid"] = v.jid;
    j["key"] = v.key;
    j["owner"] = v.owner;
    j["isClubTagEligible"] = v.isClubTagEligible;
    j["created"] = v.created;
  }
  static void from_json(const json& j, PlayerClub& v) { 
    v.tag = j.at("tag").get<std::string>(); 
    v.motd = j.at("motd").get<std::string>(); 
    v.lastModified = j.at("lastModified").get<int64_t>(); 
    v.role = j.at("role").get<ClubRole>(); 
    v.primary = j.at("primary").get<bool>(); 
    v.permissions = j.at("permissions").get<ClubPermissions>(); 
    v.name = j.at("name").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.members = j.at("members").get<ClubMemberLists>(); 
    v.jid = j.at("jid").get<std::string>(); 
    v.key = j.at("key").get<std::string>(); 
    v.owner = j.at("owner").get<ClubMember>(); 
    v.isClubTagEligible = j.at("isClubTagEligible").get<bool>(); 
    v.created = j.at("created").get<int64_t>(); 
  } 
  struct PlayerClubMembership { /**/ 
    std::vector<ClubInvite> pendingInvites;/**/
    std::vector<Club> removedClubs;/**/
    std::vector<Club> revokedInviteClubs;/**/
    ClubsConfig clubsServerConfig;/**/
    ClubPreferences preferences;/**/
    std::vector<PlayerClub> activeClubs;/**/
    ClubPlayer info;/**/
    std::string secureClubPresenceInfoString;/**/
  };
  static void to_json(json& j, const PlayerClubMembership& v) { 
    j["pendingInvites"] = v.pendingInvites;
    j["removedClubs"] = v.removedClubs;
    j["revokedInviteClubs"] = v.revokedInviteClubs;
    j["clubsServerConfig"] = v.clubsServerConfig;
    j["preferences"] = v.preferences;
    j["activeClubs"] = v.activeClubs;
    j["info"] = v.info;
    j["secureClubPresenceInfoString"] = v.secureClubPresenceInfoString;
  }
  static void from_json(const json& j, PlayerClubMembership& v) { 
    v.pendingInvites = j.at("pendingInvites").get<std::vector<ClubInvite>>(); 
    v.removedClubs = j.at("removedClubs").get<std::vector<Club>>(); 
    v.revokedInviteClubs = j.at("revokedInviteClubs").get<std::vector<Club>>(); 
    v.clubsServerConfig = j.at("clubsServerConfig").get<ClubsConfig>(); 
    v.preferences = j.at("preferences").get<ClubPreferences>(); 
    v.activeClubs = j.at("activeClubs").get<std::vector<PlayerClub>>(); 
    v.info = j.at("info").get<ClubPlayer>(); 
    v.secureClubPresenceInfoString = j.at("secureClubPresenceInfoString").get<std::string>(); 
  } 
  struct PlayerGameStats { /**/ 
    std::vector<FellowPlayerInfo> fellowPlayers;/**/
    uint64_t gameId;/**/
    uint64_t createDate;/**/
    uint64_t userId;/**/
  };
  static void to_json(json& j, const PlayerGameStats& v) { 
    j["fellowPlayers"] = v.fellowPlayers;
    j["gameId"] = v.gameId;
    j["createDate"] = v.createDate;
    j["userId"] = v.userId;
  }
  static void from_json(const json& j, PlayerGameStats& v) { 
    v.fellowPlayers = j.at("fellowPlayers").get<std::vector<FellowPlayerInfo>>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.createDate = j.at("createDate").get<uint64_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
  } 
  struct PlayerInventory { /**/ 
    std::vector<int32_t> champions;/**/
    std::vector<int32_t> skins;/**/
    std::vector<int32_t> icons;/**/
    std::vector<int64_t> wardSkins;/**/
  };
  static void to_json(json& j, const PlayerInventory& v) { 
    j["champions"] = v.champions;
    j["skins"] = v.skins;
    j["icons"] = v.icons;
    j["wardSkins"] = v.wardSkins;
  }
  static void from_json(const json& j, PlayerInventory& v) { 
    v.champions = j.at("champions").get<std::vector<int32_t>>(); 
    v.skins = j.at("skins").get<std::vector<int32_t>>(); 
    v.icons = j.at("icons").get<std::vector<int32_t>>(); 
    v.wardSkins = j.at("wardSkins").get<std::vector<int64_t>>(); 
  } 
  struct PlayerLevelUpEvent { /**/ 
    bool switchedToStandardFreeToPlayChampRotation;/**/
    bool newMasterySlotUnlocked;/**/
    bool newRuneSlotUnlocked;/**/
    bool nowHasAccessToLoot;/**/
    bool nowHasAccessToMastery;/**/
    std::vector<uint64_t> newSpells;/**/
    std::vector<int32_t> newQueues;/**/
    bool leveledUp;/**/
    int32_t rpEarned;/**/
    uint32_t newSummonerLevel;/**/
    bool nowHasAccessToPublicChatRooms;/**/
  };
  static void to_json(json& j, const PlayerLevelUpEvent& v) { 
    j["switchedToStandardFreeToPlayChampRotation"] = v.switchedToStandardFreeToPlayChampRotation;
    j["newMasterySlotUnlocked"] = v.newMasterySlotUnlocked;
    j["newRuneSlotUnlocked"] = v.newRuneSlotUnlocked;
    j["nowHasAccessToLoot"] = v.nowHasAccessToLoot;
    j["nowHasAccessToMastery"] = v.nowHasAccessToMastery;
    j["newSpells"] = v.newSpells;
    j["newQueues"] = v.newQueues;
    j["leveledUp"] = v.leveledUp;
    j["rpEarned"] = v.rpEarned;
    j["newSummonerLevel"] = v.newSummonerLevel;
    j["nowHasAccessToPublicChatRooms"] = v.nowHasAccessToPublicChatRooms;
  }
  static void from_json(const json& j, PlayerLevelUpEvent& v) { 
    v.switchedToStandardFreeToPlayChampRotation = j.at("switchedToStandardFreeToPlayChampRotation").get<bool>(); 
    v.newMasterySlotUnlocked = j.at("newMasterySlotUnlocked").get<bool>(); 
    v.newRuneSlotUnlocked = j.at("newRuneSlotUnlocked").get<bool>(); 
    v.nowHasAccessToLoot = j.at("nowHasAccessToLoot").get<bool>(); 
    v.nowHasAccessToMastery = j.at("nowHasAccessToMastery").get<bool>(); 
    v.newSpells = j.at("newSpells").get<std::vector<uint64_t>>(); 
    v.newQueues = j.at("newQueues").get<std::vector<int32_t>>(); 
    v.leveledUp = j.at("leveledUp").get<bool>(); 
    v.rpEarned = j.at("rpEarned").get<int32_t>(); 
    v.newSummonerLevel = j.at("newSummonerLevel").get<uint32_t>(); 
    v.nowHasAccessToPublicChatRooms = j.at("nowHasAccessToPublicChatRooms").get<bool>(); 
  } 
  struct PlayerLevelUpEventAck { /**/ 
    bool seenThisEvent;/**/
    uint32_t newSummonerLevel;/**/
  };
  static void to_json(json& j, const PlayerLevelUpEventAck& v) { 
    j["seenThisEvent"] = v.seenThisEvent;
    j["newSummonerLevel"] = v.newSummonerLevel;
  }
  static void from_json(const json& j, PlayerLevelUpEventAck& v) { 
    v.seenThisEvent = j.at("seenThisEvent").get<bool>(); 
    v.newSummonerLevel = j.at("newSummonerLevel").get<uint32_t>(); 
  } 
  struct PlayerStatSummary { /**/ 
    uint64_t maxRating;/**/
    uint64_t losses;/**/
    uint64_t wins;/**/
    uint64_t rating;/**/
    std::string playerStatSummaryType;/**/
    uint64_t leaves;/**/
  };
  static void to_json(json& j, const PlayerStatSummary& v) { 
    j["maxRating"] = v.maxRating;
    j["losses"] = v.losses;
    j["wins"] = v.wins;
    j["rating"] = v.rating;
    j["playerStatSummaryType"] = v.playerStatSummaryType;
    j["leaves"] = v.leaves;
  }
  static void from_json(const json& j, PlayerStatSummary& v) { 
    v.maxRating = j.at("maxRating").get<uint64_t>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.rating = j.at("rating").get<uint64_t>(); 
    v.playerStatSummaryType = j.at("playerStatSummaryType").get<std::string>(); 
    v.leaves = j.at("leaves").get<uint64_t>(); 
  } 
  struct PlayerStatSummaries { /**/ 
    std::vector<PlayerStatSummary> playerStatSummarySet;/**/
  };
  static void to_json(json& j, const PlayerStatSummaries& v) { 
    j["playerStatSummarySet"] = v.playerStatSummarySet;
  }
  static void from_json(const json& j, PlayerStatSummaries& v) { 
    v.playerStatSummarySet = j.at("playerStatSummarySet").get<std::vector<PlayerStatSummary>>(); 
  } 
  struct PlayerLifetimeStats { /**/ 
    PlayerStatSummaries playerStatSummaries;/**/
  };
  static void to_json(json& j, const PlayerLifetimeStats& v) { 
    j["playerStatSummaries"] = v.playerStatSummaries;
  }
  static void from_json(const json& j, PlayerLifetimeStats& v) { 
    v.playerStatSummaries = j.at("playerStatSummaries").get<PlayerStatSummaries>(); 
  } 
  struct PlayerLootDTO { /**/ 
    std::string refId;/**/
    int32_t count;/**/
    int64_t expiryTime;/**/
    std::string lootName;/**/
  };
  static void to_json(json& j, const PlayerLootDTO& v) { 
    j["refId"] = v.refId;
    j["count"] = v.count;
    j["expiryTime"] = v.expiryTime;
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, PlayerLootDTO& v) { 
    v.refId = j.at("refId").get<std::string>(); 
    v.count = j.at("count").get<int32_t>(); 
    v.expiryTime = j.at("expiryTime").get<int64_t>(); 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct QueryResultDTO { /**/ 
    int64_t lastUpdate;/**/
    json queryToLootNames;/**/
  };
  static void to_json(json& j, const QueryResultDTO& v) { 
    j["lastUpdate"] = v.lastUpdate;
    j["queryToLootNames"] = v.queryToLootNames;
  }
  static void from_json(const json& j, QueryResultDTO& v) { 
    v.lastUpdate = j.at("lastUpdate").get<int64_t>(); 
    v.queryToLootNames = j.at("queryToLootNames").get<json>(); 
  } 
  struct PlayerLootDefinitionsDTO { /**/ 
    QueryResultDTO queryResult;/**/
    LootLcdsRecipeListClientDTO recipeList;/**/
    LootItemListClientDTO lootItemList;/**/
    std::vector<PlayerLootDTO> playerLoot;/**/
  };
  static void to_json(json& j, const PlayerLootDefinitionsDTO& v) { 
    j["queryResult"] = v.queryResult;
    j["recipeList"] = v.recipeList;
    j["lootItemList"] = v.lootItemList;
    j["playerLoot"] = v.playerLoot;
  }
  static void from_json(const json& j, PlayerLootDefinitionsDTO& v) { 
    v.queryResult = j.at("queryResult").get<QueryResultDTO>(); 
    v.recipeList = j.at("recipeList").get<LootLcdsRecipeListClientDTO>(); 
    v.lootItemList = j.at("lootItemList").get<LootItemListClientDTO>(); 
    v.playerLoot = j.at("playerLoot").get<std::vector<PlayerLootDTO>>(); 
  } 
  struct PlayerLootResultDTO { /**/ 
    std::vector<PlayerLootDTO> removed;/**/
    std::string details;/**/
    std::vector<PlayerLootDTO> added;/**/
    std::string status;/**/
    std::vector<std::string> redeemed;/**/
  };
  static void to_json(json& j, const PlayerLootResultDTO& v) { 
    j["removed"] = v.removed;
    j["details"] = v.details;
    j["added"] = v.added;
    j["status"] = v.status;
    j["redeemed"] = v.redeemed;
  }
  static void from_json(const json& j, PlayerLootResultDTO& v) { 
    v.removed = j.at("removed").get<std::vector<PlayerLootDTO>>(); 
    v.details = j.at("details").get<std::string>(); 
    v.added = j.at("added").get<std::vector<PlayerLootDTO>>(); 
    v.status = j.at("status").get<std::string>(); 
    v.redeemed = j.at("redeemed").get<std::vector<std::string>>(); 
  } 
  struct PlayerMembershipPreferencesDto { /**/ 
    bool shareClubAffiliation;/**/
    std::string primaryActiveClubKey;/**/
  };
  static void to_json(json& j, const PlayerMembershipPreferencesDto& v) { 
    j["shareClubAffiliation"] = v.shareClubAffiliation;
    j["primaryActiveClubKey"] = v.primaryActiveClubKey;
  }
  static void from_json(const json& j, PlayerMembershipPreferencesDto& v) { 
    v.shareClubAffiliation = j.at("shareClubAffiliation").get<bool>(); 
    v.primaryActiveClubKey = j.at("primaryActiveClubKey").get<std::string>(); 
  } 
  struct PlayerMembershipDto { /**/ 
    std::vector<MembershipInviteDto> pendingInvites;/**/
    std::vector<ClubReferenceDto> removedClubs;/**/
    std::vector<ClubReferenceDto> revokedInviteClubs;/**/
    PlayerMembershipPreferencesDto playerClubPreferences;/**/
    ClubsServerConfigDto clubsServerConfig;/**/
    PlayerInfoDto player;/**/
    std::vector<ClubDto> activeClubs;/**/
    std::string secureClubPresenceInfoString;/**/
    std::string resourceUri;/**/
  };
  static void to_json(json& j, const PlayerMembershipDto& v) { 
    j["pendingInvites"] = v.pendingInvites;
    j["removedClubs"] = v.removedClubs;
    j["revokedInviteClubs"] = v.revokedInviteClubs;
    j["playerClubPreferences"] = v.playerClubPreferences;
    j["clubsServerConfig"] = v.clubsServerConfig;
    j["player"] = v.player;
    j["activeClubs"] = v.activeClubs;
    j["secureClubPresenceInfoString"] = v.secureClubPresenceInfoString;
    j["resourceUri"] = v.resourceUri;
  }
  static void from_json(const json& j, PlayerMembershipDto& v) { 
    v.pendingInvites = j.at("pendingInvites").get<std::vector<MembershipInviteDto>>(); 
    v.removedClubs = j.at("removedClubs").get<std::vector<ClubReferenceDto>>(); 
    v.revokedInviteClubs = j.at("revokedInviteClubs").get<std::vector<ClubReferenceDto>>(); 
    v.playerClubPreferences = j.at("playerClubPreferences").get<PlayerMembershipPreferencesDto>(); 
    v.clubsServerConfig = j.at("clubsServerConfig").get<ClubsServerConfigDto>(); 
    v.player = j.at("player").get<PlayerInfoDto>(); 
    v.activeClubs = j.at("activeClubs").get<std::vector<ClubDto>>(); 
    v.secureClubPresenceInfoString = j.at("secureClubPresenceInfoString").get<std::string>(); 
    v.resourceUri = j.at("resourceUri").get<std::string>(); 
  } 
  struct PlayerMembershipWithNotificationsDto { /**/ 
    std::vector<MembershipNoficationsDto> membershipNotifications;/**/
    PlayerMembershipDto playerMembership;/**/
  };
  static void to_json(json& j, const PlayerMembershipWithNotificationsDto& v) { 
    j["membershipNotifications"] = v.membershipNotifications;
    j["playerMembership"] = v.playerMembership;
  }
  static void from_json(const json& j, PlayerMembershipWithNotificationsDto& v) { 
    v.membershipNotifications = j.at("membershipNotifications").get<std::vector<MembershipNoficationsDto>>(); 
    v.playerMembership = j.at("playerMembership").get<PlayerMembershipDto>(); 
  } 
  struct PlayerMessagingNotificationResource { /**/ 
    std::string title;/**/
    int32_t status;/**/
    std::string msgId;/**/
    int32_t id;/**/
    std::string body;/**/
  };
  static void to_json(json& j, const PlayerMessagingNotificationResource& v) { 
    j["title"] = v.title;
    j["status"] = v.status;
    j["msgId"] = v.msgId;
    j["id"] = v.id;
    j["body"] = v.body;
  }
  static void from_json(const json& j, PlayerMessagingNotificationResource& v) { 
    v.title = j.at("title").get<std::string>(); 
    v.status = j.at("status").get<int32_t>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.id = j.at("id").get<int32_t>(); 
    v.body = j.at("body").get<std::string>(); 
  } 
  struct PlayerMissionRewardDTO { /**/ 
    std::string rewardType;/**/
    std::string iconUrl;/**/
    MissionRewardMediaDTO media;/**/
    bool rewardFulfilled;/**/
    std::string description;/**/
    std::string itemId;/**/
  };
  static void to_json(json& j, const PlayerMissionRewardDTO& v) { 
    j["rewardType"] = v.rewardType;
    j["iconUrl"] = v.iconUrl;
    j["media"] = v.media;
    j["rewardFulfilled"] = v.rewardFulfilled;
    j["description"] = v.description;
    j["itemId"] = v.itemId;
  }
  static void from_json(const json& j, PlayerMissionRewardDTO& v) { 
    v.rewardType = j.at("rewardType").get<std::string>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.media = j.at("media").get<MissionRewardMediaDTO>(); 
    v.rewardFulfilled = j.at("rewardFulfilled").get<bool>(); 
    v.description = j.at("description").get<std::string>(); 
    v.itemId = j.at("itemId").get<std::string>(); 
  } 
  struct PlayerMissionObjectiveDTO { /**/ 
    std::string type;/**/
    int32_t sequence;/**/
    MissionProgressDTO progress;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const PlayerMissionObjectiveDTO& v) { 
    j["type"] = v.type;
    j["sequence"] = v.sequence;
    j["progress"] = v.progress;
    j["description"] = v.description;
  }
  static void from_json(const json& j, PlayerMissionObjectiveDTO& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.sequence = j.at("sequence").get<int32_t>(); 
    v.progress = j.at("progress").get<MissionProgressDTO>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  struct PlayerMissionDTO { /**/ 
    std::vector<MissionRequirementDTO> requirements;/**/
    std::string id;/**/
    std::string missionType;/**/
    std::vector<PlayerMissionRewardDTO> rewards;/**/
    int64_t startTime;/**/
    std::string internalName;/**/
    std::string seriesName;/**/
    bool isNew;/**/
    std::string completionExpression;/**/
    std::string title;/**/
    std::string status;/**/
    bool viewed;/**/
    int64_t cooldownTimeMillis;/**/
    std::string celebrationType;/**/
    std::string description;/**/
    int64_t endTime;/**/
    std::string helperText;/**/
    std::string backgroundImageUrl;/**/
    std::string locale;/**/
    std::vector<MissionAlertDTO> expiringWarnings;/**/
    std::vector<PlayerMissionObjectiveDTO> objectives;/**/
    int64_t lastUpdatedTimestamp;/**/
    std::string iconImageUrl;/**/
    std::string displayType;/**/
    int64_t completedDate;/**/
  };
  static void to_json(json& j, const PlayerMissionDTO& v) { 
    j["requirements"] = v.requirements;
    j["id"] = v.id;
    j["missionType"] = v.missionType;
    j["rewards"] = v.rewards;
    j["startTime"] = v.startTime;
    j["internalName"] = v.internalName;
    j["seriesName"] = v.seriesName;
    j["isNew"] = v.isNew;
    j["completionExpression"] = v.completionExpression;
    j["title"] = v.title;
    j["status"] = v.status;
    j["viewed"] = v.viewed;
    j["cooldownTimeMillis"] = v.cooldownTimeMillis;
    j["celebrationType"] = v.celebrationType;
    j["description"] = v.description;
    j["endTime"] = v.endTime;
    j["helperText"] = v.helperText;
    j["backgroundImageUrl"] = v.backgroundImageUrl;
    j["locale"] = v.locale;
    j["expiringWarnings"] = v.expiringWarnings;
    j["objectives"] = v.objectives;
    j["lastUpdatedTimestamp"] = v.lastUpdatedTimestamp;
    j["iconImageUrl"] = v.iconImageUrl;
    j["displayType"] = v.displayType;
    j["completedDate"] = v.completedDate;
  }
  static void from_json(const json& j, PlayerMissionDTO& v) { 
    v.requirements = j.at("requirements").get<std::vector<MissionRequirementDTO>>(); 
    v.id = j.at("id").get<std::string>(); 
    v.missionType = j.at("missionType").get<std::string>(); 
    v.rewards = j.at("rewards").get<std::vector<PlayerMissionRewardDTO>>(); 
    v.startTime = j.at("startTime").get<int64_t>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.seriesName = j.at("seriesName").get<std::string>(); 
    v.isNew = j.at("isNew").get<bool>(); 
    v.completionExpression = j.at("completionExpression").get<std::string>(); 
    v.title = j.at("title").get<std::string>(); 
    v.status = j.at("status").get<std::string>(); 
    v.viewed = j.at("viewed").get<bool>(); 
    v.cooldownTimeMillis = j.at("cooldownTimeMillis").get<int64_t>(); 
    v.celebrationType = j.at("celebrationType").get<std::string>(); 
    v.description = j.at("description").get<std::string>(); 
    v.endTime = j.at("endTime").get<int64_t>(); 
    v.helperText = j.at("helperText").get<std::string>(); 
    v.backgroundImageUrl = j.at("backgroundImageUrl").get<std::string>(); 
    v.locale = j.at("locale").get<std::string>(); 
    v.expiringWarnings = j.at("expiringWarnings").get<std::vector<MissionAlertDTO>>(); 
    v.objectives = j.at("objectives").get<std::vector<PlayerMissionObjectiveDTO>>(); 
    v.lastUpdatedTimestamp = j.at("lastUpdatedTimestamp").get<int64_t>(); 
    v.iconImageUrl = j.at("iconImageUrl").get<std::string>(); 
    v.displayType = j.at("displayType").get<std::string>(); 
    v.completedDate = j.at("completedDate").get<int64_t>(); 
  } 
  struct PlayerMissionEligibilityData { /**/ 
    int32_t level;/**/
    PlayerInventory playerInventory;/**/
  };
  static void to_json(json& j, const PlayerMissionEligibilityData& v) { 
    j["level"] = v.level;
    j["playerInventory"] = v.playerInventory;
  }
  static void from_json(const json& j, PlayerMissionEligibilityData& v) { 
    v.level = j.at("level").get<int32_t>(); 
    v.playerInventory = j.at("playerInventory").get<PlayerInventory>(); 
  } 
  struct PlayerNotificationConfigResource { /**/ 
    std::optional<uint64_t> ExpirationCheckFrequency;/**/
  };
  static void to_json(json& j, const PlayerNotificationConfigResource& v) { 
    j["ExpirationCheckFrequency"] = v.ExpirationCheckFrequency;
  }
  static void from_json(const json& j, PlayerNotificationConfigResource& v) { 
    v.ExpirationCheckFrequency = j.at("ExpirationCheckFrequency").get<std::optional<uint64_t>>(); 
  } 
  struct PlayerNotificationResource { /**/ 
    std::string source;/**/
    uint64_t id;/**/
    std::string iconUrl;/**/
    std::string detailKey;/**/
    std::string titleKey;/**/
    std::string state;/**/
    bool critical;/**/
    bool dismissible;/**/
    std::map<std::string, std::string> data;/**/
    std::string type;/**/
    std::string created;/**/
    std::string expires;/**/
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const PlayerNotificationResource& v) { 
    j["source"] = v.source;
    j["id"] = v.id;
    j["iconUrl"] = v.iconUrl;
    j["detailKey"] = v.detailKey;
    j["titleKey"] = v.titleKey;
    j["state"] = v.state;
    j["critical"] = v.critical;
    j["dismissible"] = v.dismissible;
    j["data"] = v.data;
    j["type"] = v.type;
    j["created"] = v.created;
    j["expires"] = v.expires;
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, PlayerNotificationResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.id = j.at("id").get<uint64_t>(); 
    v.iconUrl = j.at("iconUrl").get<std::string>(); 
    v.detailKey = j.at("detailKey").get<std::string>(); 
    v.titleKey = j.at("titleKey").get<std::string>(); 
    v.state = j.at("state").get<std::string>(); 
    v.critical = j.at("critical").get<bool>(); 
    v.dismissible = j.at("dismissible").get<bool>(); 
    v.data = j.at("data").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.created = j.at("created").get<std::string>(); 
    v.expires = j.at("expires").get<std::string>(); 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct PlayerPreferences { /**/ 
    std::string type;/**/
    std::string hash;/**/
    std::string version;/**/
    std::string data;/**/
  };
  static void to_json(json& j, const PlayerPreferences& v) { 
    j["type"] = v.type;
    j["hash"] = v.hash;
    j["version"] = v.version;
    j["data"] = v.data;
  }
  static void from_json(const json& j, PlayerPreferences& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.hash = j.at("hash").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.data = j.at("data").get<std::string>(); 
  } 
  struct PlayerPreferencesEndpoint { /**/ 
    std::string Version;/**/
    bool Enabled;/**/
    bool EnforceHttps;/**/
    int64_t Retries;/**/
    std::string ServiceEndpoint;/**/
  };
  static void to_json(json& j, const PlayerPreferencesEndpoint& v) { 
    j["Version"] = v.Version;
    j["Enabled"] = v.Enabled;
    j["EnforceHttps"] = v.EnforceHttps;
    j["Retries"] = v.Retries;
    j["ServiceEndpoint"] = v.ServiceEndpoint;
  }
  static void from_json(const json& j, PlayerPreferencesEndpoint& v) { 
    v.Version = j.at("Version").get<std::string>(); 
    v.Enabled = j.at("Enabled").get<bool>(); 
    v.EnforceHttps = j.at("EnforceHttps").get<bool>(); 
    v.Retries = j.at("Retries").get<int64_t>(); 
    v.ServiceEndpoint = j.at("ServiceEndpoint").get<std::string>(); 
  } 
  struct PlayerRosterHistoryDTO { /**/ 
    std::vector<RosterMemberDTO> rosters;/**/
  };
  static void to_json(json& j, const PlayerRosterHistoryDTO& v) { 
    j["rosters"] = v.rosters;
  }
  static void from_json(const json& j, PlayerRosterHistoryDTO& v) { 
    v.rosters = j.at("rosters").get<std::vector<RosterMemberDTO>>(); 
  } 
  struct PlaytimeReminder { /**/ 
    uint32_t hours;/**/
  };
  static void to_json(json& j, const PlaytimeReminder& v) { 
    j["hours"] = v.hours;
  }
  static void from_json(const json& j, PlaytimeReminder& v) { 
    v.hours = j.at("hours").get<uint32_t>(); 
  } 
  enum class PluginThreadingModel { /**/ 
    concurrent_e = 3, /**/ 
    dedicated_e = 1, /**/ 
    parallel_e = 4, /**/ 
    sequential_e = 2, /**/ 
  };
  static void to_json(json& j, const PluginThreadingModel& v) {
    switch(v) { 
    case PluginThreadingModel::concurrent_e:
      j = "concurrent";
    break;
    case PluginThreadingModel::dedicated_e:
      j = "dedicated";
    break;
    case PluginThreadingModel::parallel_e:
      j = "parallel";
    break;
    case PluginThreadingModel::sequential_e:
      j = "sequential";
    break;
    };
  }
  static void from_json(const json& j, PluginThreadingModel& v) {
    auto s = j.get<std::string>(); 
    if(s == "concurrent") {
      v = PluginThreadingModel::concurrent_e;
      return;
    } 
    if(s == "dedicated") {
      v = PluginThreadingModel::dedicated_e;
      return;
    } 
    if(s == "parallel") {
      v = PluginThreadingModel::parallel_e;
      return;
    } 
    if(s == "sequential") {
      v = PluginThreadingModel::sequential_e;
      return;
    } 
  } 
  struct PluginMetadataResource { /**/ 
    PluginThreadingModel threading;/**/
    bool hasBundledAssets;/**/
    std::map<std::string, json> perLocaleAssetBundles;/**/
    std::string subtype;/**/
    std::map<std::string, std::string> implements;/**/
    std::string type;/**/
    std::string app;/**/
    std::string feature;/**/
    std::vector<std::string> globalAssetBundles;/**/
  };
  static void to_json(json& j, const PluginMetadataResource& v) { 
    j["threading"] = v.threading;
    j["hasBundledAssets"] = v.hasBundledAssets;
    j["perLocaleAssetBundles"] = v.perLocaleAssetBundles;
    j["subtype"] = v.subtype;
    j["implements"] = v.implements;
    j["type"] = v.type;
    j["app"] = v.app;
    j["feature"] = v.feature;
    j["globalAssetBundles"] = v.globalAssetBundles;
  }
  static void from_json(const json& j, PluginMetadataResource& v) { 
    v.threading = j.at("threading").get<PluginThreadingModel>(); 
    v.hasBundledAssets = j.at("hasBundledAssets").get<bool>(); 
    v.perLocaleAssetBundles = j.at("perLocaleAssetBundles").get<std::map<std::string, json>>(); 
    v.subtype = j.at("subtype").get<std::string>(); 
    v.implements = j.at("implements").get<std::map<std::string, std::string>>(); 
    v.type = j.at("type").get<std::string>(); 
    v.app = j.at("app").get<std::string>(); 
    v.feature = j.at("feature").get<std::string>(); 
    v.globalAssetBundles = j.at("globalAssetBundles").get<std::vector<std::string>>(); 
  } 
  struct PluginDescriptionResource { /**/ 
    std::map<std::string, std::string> pluginDependencies;/**/
    PluginMetadataResource riotMeta;/**/
    std::string version;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const PluginDescriptionResource& v) { 
    j["pluginDependencies"] = v.pluginDependencies;
    j["riotMeta"] = v.riotMeta;
    j["version"] = v.version;
    j["name"] = v.name;
  }
  static void from_json(const json& j, PluginDescriptionResource& v) { 
    v.pluginDependencies = j.at("pluginDependencies").get<std::map<std::string, std::string>>(); 
    v.riotMeta = j.at("riotMeta").get<PluginMetadataResource>(); 
    v.version = j.at("version").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct PluginLcdsEvent { /**/ 
    std::string clientId;/**/
    std::string typeName;/**/
    json body;/**/
    std::string subtopic;/**/
  };
  static void to_json(json& j, const PluginLcdsEvent& v) { 
    j["clientId"] = v.clientId;
    j["typeName"] = v.typeName;
    j["body"] = v.body;
    j["subtopic"] = v.subtopic;
  }
  static void from_json(const json& j, PluginLcdsEvent& v) { 
    v.clientId = j.at("clientId").get<std::string>(); 
    v.typeName = j.at("typeName").get<std::string>(); 
    v.body = j.at("body").get<json>(); 
    v.subtopic = j.at("subtopic").get<std::string>(); 
  } 
  struct PluginLcdsResponse { /**/ 
    std::string typeName;/**/
    json body;/**/
  };
  static void to_json(json& j, const PluginLcdsResponse& v) { 
    j["typeName"] = v.typeName;
    j["body"] = v.body;
  }
  static void from_json(const json& j, PluginLcdsResponse& v) { 
    v.typeName = j.at("typeName").get<std::string>(); 
    v.body = j.at("body").get<json>(); 
  } 
  enum class PluginManagerState { /**/ 
    NotReady_e = 0, /**/ 
    PluginsInitialized_e = 1, /**/ 
  };
  static void to_json(json& j, const PluginManagerState& v) {
    switch(v) { 
    case PluginManagerState::NotReady_e:
      j = "NotReady";
    break;
    case PluginManagerState::PluginsInitialized_e:
      j = "PluginsInitialized";
    break;
    };
  }
  static void from_json(const json& j, PluginManagerState& v) {
    auto s = j.get<std::string>(); 
    if(s == "NotReady") {
      v = PluginManagerState::NotReady_e;
      return;
    } 
    if(s == "PluginsInitialized") {
      v = PluginManagerState::PluginsInitialized_e;
      return;
    } 
  } 
  struct PluginManagerResource { /**/ 
    PluginManagerState state;/**/
  };
  static void to_json(json& j, const PluginManagerResource& v) { 
    j["state"] = v.state;
  }
  static void from_json(const json& j, PluginManagerResource& v) { 
    v.state = j.at("state").get<PluginManagerState>(); 
  } 
  struct PluginRegionLocaleChangedEvent { /**/ 
    std::string locale;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const PluginRegionLocaleChangedEvent& v) { 
    j["locale"] = v.locale;
    j["region"] = v.region;
  }
  static void from_json(const json& j, PluginRegionLocaleChangedEvent& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  struct PluginResourceContract { /**/ 
    std::string fullName;/**/
    std::string version;/**/
  };
  static void to_json(json& j, const PluginResourceContract& v) { 
    j["fullName"] = v.fullName;
    j["version"] = v.version;
  }
  static void from_json(const json& j, PluginResourceContract& v) { 
    v.fullName = j.at("fullName").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
  } 
  struct PluginResource { /**/ 
    std::string shortName;/**/
    int32_t orderDynamicLibraryLoaded;/**/
    std::string supertype;/**/
    std::string dynLibPath;/**/
    bool standalone;/**/
    std::string app;/**/
    std::string fullName;/**/
    int32_t orderWADFileMounted;/**/
    std::string externalUri;/**/
    std::string pluginInfoApiSemVer;/**/
    std::vector<std::string> assetBundleNames;/**/
    std::string version;/**/
    std::string feature;/**/
    std::map<std::string, std::string> mountedAssetBundles;/**/
    bool isDynamicLibraryLoaded;/**/
    std::vector<PluginResourceContract> dependencies;/**/
    std::string subtype;/**/
    std::string threadingModel;/**/
    std::vector<PluginResourceContract> implementedContracts;/**/
    std::string dynLibFileName;/**/
    int32_t orderDynamicLibraryInited;/**/
    bool isDynamicLibraryInited;/**/
  };
  static void to_json(json& j, const PluginResource& v) { 
    j["shortName"] = v.shortName;
    j["orderDynamicLibraryLoaded"] = v.orderDynamicLibraryLoaded;
    j["supertype"] = v.supertype;
    j["dynLibPath"] = v.dynLibPath;
    j["standalone"] = v.standalone;
    j["app"] = v.app;
    j["fullName"] = v.fullName;
    j["orderWADFileMounted"] = v.orderWADFileMounted;
    j["externalUri"] = v.externalUri;
    j["pluginInfoApiSemVer"] = v.pluginInfoApiSemVer;
    j["assetBundleNames"] = v.assetBundleNames;
    j["version"] = v.version;
    j["feature"] = v.feature;
    j["mountedAssetBundles"] = v.mountedAssetBundles;
    j["isDynamicLibraryLoaded"] = v.isDynamicLibraryLoaded;
    j["dependencies"] = v.dependencies;
    j["subtype"] = v.subtype;
    j["threadingModel"] = v.threadingModel;
    j["implementedContracts"] = v.implementedContracts;
    j["dynLibFileName"] = v.dynLibFileName;
    j["orderDynamicLibraryInited"] = v.orderDynamicLibraryInited;
    j["isDynamicLibraryInited"] = v.isDynamicLibraryInited;
  }
  static void from_json(const json& j, PluginResource& v) { 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.orderDynamicLibraryLoaded = j.at("orderDynamicLibraryLoaded").get<int32_t>(); 
    v.supertype = j.at("supertype").get<std::string>(); 
    v.dynLibPath = j.at("dynLibPath").get<std::string>(); 
    v.standalone = j.at("standalone").get<bool>(); 
    v.app = j.at("app").get<std::string>(); 
    v.fullName = j.at("fullName").get<std::string>(); 
    v.orderWADFileMounted = j.at("orderWADFileMounted").get<int32_t>(); 
    v.externalUri = j.at("externalUri").get<std::string>(); 
    v.pluginInfoApiSemVer = j.at("pluginInfoApiSemVer").get<std::string>(); 
    v.assetBundleNames = j.at("assetBundleNames").get<std::vector<std::string>>(); 
    v.version = j.at("version").get<std::string>(); 
    v.feature = j.at("feature").get<std::string>(); 
    v.mountedAssetBundles = j.at("mountedAssetBundles").get<std::map<std::string, std::string>>(); 
    v.isDynamicLibraryLoaded = j.at("isDynamicLibraryLoaded").get<bool>(); 
    v.dependencies = j.at("dependencies").get<std::vector<PluginResourceContract>>(); 
    v.subtype = j.at("subtype").get<std::string>(); 
    v.threadingModel = j.at("threadingModel").get<std::string>(); 
    v.implementedContracts = j.at("implementedContracts").get<std::vector<PluginResourceContract>>(); 
    v.dynLibFileName = j.at("dynLibFileName").get<std::string>(); 
    v.orderDynamicLibraryInited = j.at("orderDynamicLibraryInited").get<int32_t>(); 
    v.isDynamicLibraryInited = j.at("isDynamicLibraryInited").get<bool>(); 
  } 
  enum class PluginResourceEventType { /**/ 
    Create_e = 0, /**/ 
    Delete_e = 2, /**/ 
    Update_e = 1, /**/ 
  };
  static void to_json(json& j, const PluginResourceEventType& v) {
    switch(v) { 
    case PluginResourceEventType::Create_e:
      j = "Create";
    break;
    case PluginResourceEventType::Delete_e:
      j = "Delete";
    break;
    case PluginResourceEventType::Update_e:
      j = "Update";
    break;
    };
  }
  static void from_json(const json& j, PluginResourceEventType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Create") {
      v = PluginResourceEventType::Create_e;
      return;
    } 
    if(s == "Delete") {
      v = PluginResourceEventType::Delete_e;
      return;
    } 
    if(s == "Update") {
      v = PluginResourceEventType::Update_e;
      return;
    } 
  } 
  struct PluginResourceEvent { /**/ 
    std::string uri;/**/
    PluginResourceEventType eventType;/**/
    json data;/**/
  };
  static void to_json(json& j, const PluginResourceEvent& v) { 
    j["uri"] = v.uri;
    j["eventType"] = v.eventType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, PluginResourceEvent& v) { 
    v.uri = j.at("uri").get<std::string>(); 
    v.eventType = j.at("eventType").get<PluginResourceEventType>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct PluginServiceProxyResponse { /**/ 
    std::string payload;/**/
    std::string methodName;/**/
    std::string error;/**/
    std::string uuid;/**/
    std::string serviceName;/**/
    std::string status;/**/
  };
  static void to_json(json& j, const PluginServiceProxyResponse& v) { 
    j["payload"] = v.payload;
    j["methodName"] = v.methodName;
    j["error"] = v.error;
    j["uuid"] = v.uuid;
    j["serviceName"] = v.serviceName;
    j["status"] = v.status;
  }
  static void from_json(const json& j, PluginServiceProxyResponse& v) { 
    v.payload = j.at("payload").get<std::string>(); 
    v.methodName = j.at("methodName").get<std::string>(); 
    v.error = j.at("error").get<std::string>(); 
    v.uuid = j.at("uuid").get<std::string>(); 
    v.serviceName = j.at("serviceName").get<std::string>(); 
    v.status = j.at("status").get<std::string>(); 
  } 
  struct ProcessControlProcess { /**/ 
    std::optional<float> restart_countdown_seconds;/**/
    std::string status;/**/
  };
  static void to_json(json& j, const ProcessControlProcess& v) { 
    j["restart_countdown_seconds"] = v.restart_countdown_seconds;
    j["status"] = v.status;
  }
  static void from_json(const json& j, ProcessControlProcess& v) { 
    v.restart_countdown_seconds = j.at("restart_countdown_seconds").get<std::optional<float>>(); 
    v.status = j.at("status").get<std::string>(); 
  } 
  struct PublicRosterDTO { /**/ 
    std::vector<uint64_t> memberIds;/**/
    int32_t logo;/**/
    std::string shortName;/**/
    int64_t id;/**/
    std::string name;/**/
    int32_t logoColor;/**/
  };
  static void to_json(json& j, const PublicRosterDTO& v) { 
    j["memberIds"] = v.memberIds;
    j["logo"] = v.logo;
    j["shortName"] = v.shortName;
    j["id"] = v.id;
    j["name"] = v.name;
    j["logoColor"] = v.logoColor;
  }
  static void from_json(const json& j, PublicRosterDTO& v) { 
    v.memberIds = j.at("memberIds").get<std::vector<uint64_t>>(); 
    v.logo = j.at("logo").get<int32_t>(); 
    v.shortName = j.at("shortName").get<std::string>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.logoColor = j.at("logoColor").get<int32_t>(); 
  } 
  struct PublicSummonerDTO { /**/ 
    uint64_t summonerId;/**/
    std::string puuid;/**/
    uint64_t acctId;/**/
    std::string name;/**/
    int32_t profileIconId;/**/
    std::string previousSeasonHighestTier;/**/
    std::string internalName;/**/
    uint32_t summonerLevel;/**/
  };
  static void to_json(json& j, const PublicSummonerDTO& v) { 
    j["summonerId"] = v.summonerId;
    j["puuid"] = v.puuid;
    j["acctId"] = v.acctId;
    j["name"] = v.name;
    j["profileIconId"] = v.profileIconId;
    j["previousSeasonHighestTier"] = v.previousSeasonHighestTier;
    j["internalName"] = v.internalName;
    j["summonerLevel"] = v.summonerLevel;
  }
  static void from_json(const json& j, PublicSummonerDTO& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.puuid = j.at("puuid").get<std::string>(); 
    v.acctId = j.at("acctId").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
    v.profileIconId = j.at("profileIconId").get<int32_t>(); 
    v.previousSeasonHighestTier = j.at("previousSeasonHighestTier").get<std::string>(); 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.summonerLevel = j.at("summonerLevel").get<uint32_t>(); 
  } 
  struct Punishment { /**/ 
    uint64_t punishedUntilDateMillis;/**/
    std::vector<uint64_t> punishedForGameIds;/**/
    uint64_t punishmentLengthMillis;/**/
    bool permaBan;/**/
    std::vector<std::string> punishedForChatLogs;/**/
    std::string punishmentReason;/**/
    std::string punishmentType;/**/
    int64_t punishmentLengthGames;/**/
    std::string playerFacingMessage;/**/
  };
  static void to_json(json& j, const Punishment& v) { 
    j["punishedUntilDateMillis"] = v.punishedUntilDateMillis;
    j["punishedForGameIds"] = v.punishedForGameIds;
    j["punishmentLengthMillis"] = v.punishmentLengthMillis;
    j["permaBan"] = v.permaBan;
    j["punishedForChatLogs"] = v.punishedForChatLogs;
    j["punishmentReason"] = v.punishmentReason;
    j["punishmentType"] = v.punishmentType;
    j["punishmentLengthGames"] = v.punishmentLengthGames;
    j["playerFacingMessage"] = v.playerFacingMessage;
  }
  static void from_json(const json& j, Punishment& v) { 
    v.punishedUntilDateMillis = j.at("punishedUntilDateMillis").get<uint64_t>(); 
    v.punishedForGameIds = j.at("punishedForGameIds").get<std::vector<uint64_t>>(); 
    v.punishmentLengthMillis = j.at("punishmentLengthMillis").get<uint64_t>(); 
    v.permaBan = j.at("permaBan").get<bool>(); 
    v.punishedForChatLogs = j.at("punishedForChatLogs").get<std::vector<std::string>>(); 
    v.punishmentReason = j.at("punishmentReason").get<std::string>(); 
    v.punishmentType = j.at("punishmentType").get<std::string>(); 
    v.punishmentLengthGames = j.at("punishmentLengthGames").get<int64_t>(); 
    v.playerFacingMessage = j.at("playerFacingMessage").get<std::string>(); 
  } 
  struct Queue { /**/ 
    uint32_t minLevel;/**/
    int32_t id;/**/
  };
  static void to_json(json& j, const Queue& v) { 
    j["minLevel"] = v.minLevel;
    j["id"] = v.id;
  }
  static void from_json(const json& j, Queue& v) { 
    v.minLevel = j.at("minLevel").get<uint32_t>(); 
    v.id = j.at("id").get<int32_t>(); 
  } 
  struct QueueEligilibilityGatekeeperRestrictionDtoV3 { /**/ 
    int32_t queueId;/**/
    std::string reason;/**/
    uint64_t summonerId;/**/
    std::string payload;/**/
    int64_t remainingMillis;/**/
    std::string summonerName;/**/
  };
  static void to_json(json& j, const QueueEligilibilityGatekeeperRestrictionDtoV3& v) { 
    j["queueId"] = v.queueId;
    j["reason"] = v.reason;
    j["summonerId"] = v.summonerId;
    j["payload"] = v.payload;
    j["remainingMillis"] = v.remainingMillis;
    j["summonerName"] = v.summonerName;
  }
  static void from_json(const json& j, QueueEligilibilityGatekeeperRestrictionDtoV3& v) { 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.reason = j.at("reason").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.remainingMillis = j.at("remainingMillis").get<int64_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
  } 
  struct QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2 { /**/ 
    std::vector<std::string> queueRestrictionsToExclude;/**/
    std::vector<uint64_t> summonerIds;/**/
    std::vector<int32_t> queueIds;/**/
  };
  static void to_json(json& j, const QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2& v) { 
    j["queueRestrictionsToExclude"] = v.queueRestrictionsToExclude;
    j["summonerIds"] = v.summonerIds;
    j["queueIds"] = v.queueIds;
  }
  static void from_json(const json& j, QueueEligilibilityGetQueueRestrictionsForQueuesRequestV2& v) { 
    v.queueRestrictionsToExclude = j.at("queueRestrictionsToExclude").get<std::vector<std::string>>(); 
    v.summonerIds = j.at("summonerIds").get<std::vector<uint64_t>>(); 
    v.queueIds = j.at("queueIds").get<std::vector<int32_t>>(); 
  } 
  enum class RankedDivision { /**/ 
    I_e = 1, /**/ 
    II_e = 2, /**/ 
    III_e = 3, /**/ 
    IV_e = 4, /**/ 
    V_e = 5, /**/ 
  };
  static void to_json(json& j, const RankedDivision& v) {
    switch(v) { 
    case RankedDivision::I_e:
      j = "I";
    break;
    case RankedDivision::II_e:
      j = "II";
    break;
    case RankedDivision::III_e:
      j = "III";
    break;
    case RankedDivision::IV_e:
      j = "IV";
    break;
    case RankedDivision::V_e:
      j = "V";
    break;
    };
  }
  static void from_json(const json& j, RankedDivision& v) {
    auto s = j.get<std::string>(); 
    if(s == "I") {
      v = RankedDivision::I_e;
      return;
    } 
    if(s == "II") {
      v = RankedDivision::II_e;
      return;
    } 
    if(s == "III") {
      v = RankedDivision::III_e;
      return;
    } 
    if(s == "IV") {
      v = RankedDivision::IV_e;
      return;
    } 
    if(s == "V") {
      v = RankedDivision::V_e;
      return;
    } 
  } 
  struct RankedLeagueMiniSeriesDTO { /**/ 
    uint64_t target;/**/
    uint64_t wins;/**/
    std::string progress;/**/
    uint64_t timeLeftToPlayMillis;/**/
    uint64_t losses;/**/
  };
  static void to_json(json& j, const RankedLeagueMiniSeriesDTO& v) { 
    j["target"] = v.target;
    j["wins"] = v.wins;
    j["progress"] = v.progress;
    j["timeLeftToPlayMillis"] = v.timeLeftToPlayMillis;
    j["losses"] = v.losses;
  }
  static void from_json(const json& j, RankedLeagueMiniSeriesDTO& v) { 
    v.target = j.at("target").get<uint64_t>(); 
    v.wins = j.at("wins").get<uint64_t>(); 
    v.progress = j.at("progress").get<std::string>(); 
    v.timeLeftToPlayMillis = j.at("timeLeftToPlayMillis").get<uint64_t>(); 
    v.losses = j.at("losses").get<uint64_t>(); 
  } 
  struct RankedLeagueItemDTO { /**/ 
    bool inactive;/**/
    std::string leagueName;/**/
    int32_t leaguePoints;/**/
    LolRankedStatsRankedQueue queueType;/**/
    RankedDivision rank;/**/
    uint32_t wins;/**/
    int32_t apexDaysUntilDecay;/**/
    LolRankedStatsRankedTier tier;/**/
    uint32_t loses;/**/
    std::string playerOrTeamName;/**/
    RankedLeagueMiniSeriesDTO miniSeries;/**/
    std::string playerOrTeamId;/**/
  };
  static void to_json(json& j, const RankedLeagueItemDTO& v) { 
    j["inactive"] = v.inactive;
    j["leagueName"] = v.leagueName;
    j["leaguePoints"] = v.leaguePoints;
    j["queueType"] = v.queueType;
    j["rank"] = v.rank;
    j["wins"] = v.wins;
    j["apexDaysUntilDecay"] = v.apexDaysUntilDecay;
    j["tier"] = v.tier;
    j["loses"] = v.loses;
    j["playerOrTeamName"] = v.playerOrTeamName;
    j["miniSeries"] = v.miniSeries;
    j["playerOrTeamId"] = v.playerOrTeamId;
  }
  static void from_json(const json& j, RankedLeagueItemDTO& v) { 
    v.inactive = j.at("inactive").get<bool>(); 
    v.leagueName = j.at("leagueName").get<std::string>(); 
    v.leaguePoints = j.at("leaguePoints").get<int32_t>(); 
    v.queueType = j.at("queueType").get<LolRankedStatsRankedQueue>(); 
    v.rank = j.at("rank").get<RankedDivision>(); 
    v.wins = j.at("wins").get<uint32_t>(); 
    v.apexDaysUntilDecay = j.at("apexDaysUntilDecay").get<int32_t>(); 
    v.tier = j.at("tier").get<LolRankedStatsRankedTier>(); 
    v.loses = j.at("loses").get<uint32_t>(); 
    v.playerOrTeamName = j.at("playerOrTeamName").get<std::string>(); 
    v.miniSeries = j.at("miniSeries").get<RankedLeagueMiniSeriesDTO>(); 
    v.playerOrTeamId = j.at("playerOrTeamId").get<std::string>(); 
  } 
  struct RankedLeagueListDTO { /**/ 
    std::string tier;/**/
    std::string requestorsRank;/**/
    std::vector<RankedLeagueItemDTO> entries;/**/
    std::string name;/**/
    std::string queue;/**/
    uint64_t nextApexUpdate;/**/
    uint32_t maxLeagueSize;/**/
    std::string requestorsName;/**/
  };
  static void to_json(json& j, const RankedLeagueListDTO& v) { 
    j["tier"] = v.tier;
    j["requestorsRank"] = v.requestorsRank;
    j["entries"] = v.entries;
    j["name"] = v.name;
    j["queue"] = v.queue;
    j["nextApexUpdate"] = v.nextApexUpdate;
    j["maxLeagueSize"] = v.maxLeagueSize;
    j["requestorsName"] = v.requestorsName;
  }
  static void from_json(const json& j, RankedLeagueListDTO& v) { 
    v.tier = j.at("tier").get<std::string>(); 
    v.requestorsRank = j.at("requestorsRank").get<std::string>(); 
    v.entries = j.at("entries").get<std::vector<RankedLeagueItemDTO>>(); 
    v.name = j.at("name").get<std::string>(); 
    v.queue = j.at("queue").get<std::string>(); 
    v.nextApexUpdate = j.at("nextApexUpdate").get<uint64_t>(); 
    v.maxLeagueSize = j.at("maxLeagueSize").get<uint32_t>(); 
    v.requestorsName = j.at("requestorsName").get<std::string>(); 
  } 
  struct RankedScoutingTopChampionDTO { /**/ 
    int32_t rank;/**/
    int32_t winCount;/**/
    float kda;/**/
    int32_t gameCount;/**/
    int32_t championId;/**/
  };
  static void to_json(json& j, const RankedScoutingTopChampionDTO& v) { 
    j["rank"] = v.rank;
    j["winCount"] = v.winCount;
    j["kda"] = v.kda;
    j["gameCount"] = v.gameCount;
    j["championId"] = v.championId;
  }
  static void from_json(const json& j, RankedScoutingTopChampionDTO& v) { 
    v.rank = j.at("rank").get<int32_t>(); 
    v.winCount = j.at("winCount").get<int32_t>(); 
    v.kda = j.at("kda").get<float>(); 
    v.gameCount = j.at("gameCount").get<int32_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
  } 
  struct RankedScoutingMemberDTO { /**/ 
    uint64_t playerId;/**/
    std::vector<RankedScoutingTopChampionDTO> championScoutingData;/**/
  };
  static void to_json(json& j, const RankedScoutingMemberDTO& v) { 
    j["playerId"] = v.playerId;
    j["championScoutingData"] = v.championScoutingData;
  }
  static void from_json(const json& j, RankedScoutingMemberDTO& v) { 
    v.playerId = j.at("playerId").get<uint64_t>(); 
    v.championScoutingData = j.at("championScoutingData").get<std::vector<RankedScoutingTopChampionDTO>>(); 
  } 
  struct RankedSummonerLeagueItemsDTO { /**/ 
    std::vector<RankedLeagueItemDTO> summonerLeagues;/**/
  };
  static void to_json(json& j, const RankedSummonerLeagueItemsDTO& v) { 
    j["summonerLeagues"] = v.summonerLeagues;
  }
  static void from_json(const json& j, RankedSummonerLeagueItemsDTO& v) { 
    v.summonerLeagues = j.at("summonerLeagues").get<std::vector<RankedLeagueItemDTO>>(); 
  } 
  struct RankedSummonerLeaguesDTO { /**/ 
    std::vector<RankedLeagueListDTO> summonerLeagues;/**/
  };
  static void to_json(json& j, const RankedSummonerLeaguesDTO& v) { 
    j["summonerLeagues"] = v.summonerLeagues;
  }
  static void from_json(const json& j, RankedSummonerLeaguesDTO& v) { 
    v.summonerLeagues = j.at("summonerLeagues").get<std::vector<RankedLeagueListDTO>>(); 
  } 
  struct RecentGames { /**/ 
    uint64_t userId;/**/
    std::vector<PlayerGameStats> gameStatistics;/**/
  };
  static void to_json(json& j, const RecentGames& v) { 
    j["userId"] = v.userId;
    j["gameStatistics"] = v.gameStatistics;
  }
  static void from_json(const json& j, RecentGames& v) { 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.gameStatistics = j.at("gameStatistics").get<std::vector<PlayerGameStats>>(); 
  } 
  struct RecofrienderActionResource { /**/ 
    std::string action;/**/
    uint64_t accountId;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const RecofrienderActionResource& v) { 
    j["action"] = v.action;
    j["accountId"] = v.accountId;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, RecofrienderActionResource& v) { 
    v.action = j.at("action").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct RecofrienderAccountResource { /**/ 
    std::vector<RecofrienderActionResource> contacts;/**/
    uint64_t accountId;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const RecofrienderAccountResource& v) { 
    j["contacts"] = v.contacts;
    j["accountId"] = v.accountId;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, RecofrienderAccountResource& v) { 
    v.contacts = j.at("contacts").get<std::vector<RecofrienderActionResource>>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct RecofrienderChatFriendResource { /**/ 
    uint64_t id;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const RecofrienderChatFriendResource& v) { 
    j["id"] = v.id;
    j["name"] = v.name;
  }
  static void from_json(const json& j, RecofrienderChatFriendResource& v) { 
    v.id = j.at("id").get<uint64_t>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct RecofrienderConfig { /**/ 
    std::string ContactsUrlTemplate;/**/
    std::vector<std::string> EnabledNetworks;/**/
    bool EnableSocial;/**/
    uint64_t ExternalCallTimeoutSeconds;/**/
    std::string ContactDetailsUrlTemplate;/**/
    std::string FaqLink;/**/
  };
  static void to_json(json& j, const RecofrienderConfig& v) { 
    j["ContactsUrlTemplate"] = v.ContactsUrlTemplate;
    j["EnabledNetworks"] = v.EnabledNetworks;
    j["EnableSocial"] = v.EnableSocial;
    j["ExternalCallTimeoutSeconds"] = v.ExternalCallTimeoutSeconds;
    j["ContactDetailsUrlTemplate"] = v.ContactDetailsUrlTemplate;
    j["FaqLink"] = v.FaqLink;
  }
  static void from_json(const json& j, RecofrienderConfig& v) { 
    v.ContactsUrlTemplate = j.at("ContactsUrlTemplate").get<std::string>(); 
    v.EnabledNetworks = j.at("EnabledNetworks").get<std::vector<std::string>>(); 
    v.EnableSocial = j.at("EnableSocial").get<bool>(); 
    v.ExternalCallTimeoutSeconds = j.at("ExternalCallTimeoutSeconds").get<uint64_t>(); 
    v.ContactDetailsUrlTemplate = j.at("ContactDetailsUrlTemplate").get<std::string>(); 
    v.FaqLink = j.at("FaqLink").get<std::string>(); 
  } 
  struct RecofrienderContactCountResource { /**/ 
    uint64_t count;/**/
  };
  static void to_json(json& j, const RecofrienderContactCountResource& v) { 
    j["count"] = v.count;
  }
  static void from_json(const json& j, RecofrienderContactCountResource& v) { 
    v.count = j.at("count").get<uint64_t>(); 
  } 
  struct RecofrienderContactPaginationResource { /**/ 
    uint64_t total;/**/
    uint64_t start;/**/
    bool more;/**/
    uint64_t limit;/**/
    uint64_t cached;/**/
    uint64_t count;/**/
  };
  static void to_json(json& j, const RecofrienderContactPaginationResource& v) { 
    j["total"] = v.total;
    j["start"] = v.start;
    j["more"] = v.more;
    j["limit"] = v.limit;
    j["cached"] = v.cached;
    j["count"] = v.count;
  }
  static void from_json(const json& j, RecofrienderContactPaginationResource& v) { 
    v.total = j.at("total").get<uint64_t>(); 
    v.start = j.at("start").get<uint64_t>(); 
    v.more = j.at("more").get<bool>(); 
    v.limit = j.at("limit").get<uint64_t>(); 
    v.cached = j.at("cached").get<uint64_t>(); 
    v.count = j.at("count").get<uint64_t>(); 
  } 
  enum class RecofrienderFriendState { /**/ 
    BLOCKED_e = 2, /**/ 
    FRIEND_e = 1, /**/ 
    NONE_e = 0, /**/ 
  };
  static void to_json(json& j, const RecofrienderFriendState& v) {
    switch(v) { 
    case RecofrienderFriendState::BLOCKED_e:
      j = "BLOCKED";
    break;
    case RecofrienderFriendState::FRIEND_e:
      j = "FRIEND";
    break;
    case RecofrienderFriendState::NONE_e:
      j = "NONE";
    break;
    };
  }
  static void from_json(const json& j, RecofrienderFriendState& v) {
    auto s = j.get<std::string>(); 
    if(s == "BLOCKED") {
      v = RecofrienderFriendState::BLOCKED_e;
      return;
    } 
    if(s == "FRIEND") {
      v = RecofrienderFriendState::FRIEND_e;
      return;
    } 
    if(s == "NONE") {
      v = RecofrienderFriendState::NONE_e;
      return;
    } 
  } 
  struct RecofrienderContactResource { /**/ 
    std::string source;/**/
    std::string action;/**/
    uint64_t summonerId;/**/
    int64_t recommendScore;/**/
    uint64_t accountId;/**/
    RecofrienderFriendState friendState;/**/
    std::string name;/**/
    std::string displayState;/**/
    std::string imageUrl;/**/
  };
  static void to_json(json& j, const RecofrienderContactResource& v) { 
    j["source"] = v.source;
    j["action"] = v.action;
    j["summonerId"] = v.summonerId;
    j["recommendScore"] = v.recommendScore;
    j["accountId"] = v.accountId;
    j["friendState"] = v.friendState;
    j["name"] = v.name;
    j["displayState"] = v.displayState;
    j["imageUrl"] = v.imageUrl;
  }
  static void from_json(const json& j, RecofrienderContactResource& v) { 
    v.source = j.at("source").get<std::string>(); 
    v.action = j.at("action").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.recommendScore = j.at("recommendScore").get<int64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.friendState = j.at("friendState").get<RecofrienderFriendState>(); 
    v.name = j.at("name").get<std::string>(); 
    v.displayState = j.at("displayState").get<std::string>(); 
    v.imageUrl = j.at("imageUrl").get<std::string>(); 
  } 
  struct RecofrienderContactStateResource { /**/ 
    std::string action;/**/
    uint64_t accountId;/**/
    std::string displayState;/**/
  };
  static void to_json(json& j, const RecofrienderContactStateResource& v) { 
    j["action"] = v.action;
    j["accountId"] = v.accountId;
    j["displayState"] = v.displayState;
  }
  static void from_json(const json& j, RecofrienderContactStateResource& v) { 
    v.action = j.at("action").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.displayState = j.at("displayState").get<std::string>(); 
  } 
  struct RecofrienderDebugConfig { /**/ 
    std::optional<bool> isHttpLoggingEnabled;/**/
  };
  static void to_json(json& j, const RecofrienderDebugConfig& v) { 
    j["isHttpLoggingEnabled"] = v.isHttpLoggingEnabled;
  }
  static void from_json(const json& j, RecofrienderDebugConfig& v) { 
    v.isHttpLoggingEnabled = j.at("isHttpLoggingEnabled").get<std::optional<bool>>(); 
  } 
  struct RecofrienderLinkResource { /**/ 
    std::string reason;/**/
    bool linked;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const RecofrienderLinkResource& v) { 
    j["reason"] = v.reason;
    j["linked"] = v.linked;
    j["name"] = v.name;
  }
  static void from_json(const json& j, RecofrienderLinkResource& v) { 
    v.reason = j.at("reason").get<std::string>(); 
    v.linked = j.at("linked").get<bool>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  enum class RecofrienderLoginSessionStates { /**/ 
    ERROR_e = 3, /**/ 
    IN_PROGRESS_e = 0, /**/ 
    LOGGING_OUT_e = 2, /**/ 
    SUCCEEDED_e = 1, /**/ 
  };
  static void to_json(json& j, const RecofrienderLoginSessionStates& v) {
    switch(v) { 
    case RecofrienderLoginSessionStates::ERROR_e:
      j = "ERROR";
    break;
    case RecofrienderLoginSessionStates::IN_PROGRESS_e:
      j = "IN_PROGRESS";
    break;
    case RecofrienderLoginSessionStates::LOGGING_OUT_e:
      j = "LOGGING_OUT";
    break;
    case RecofrienderLoginSessionStates::SUCCEEDED_e:
      j = "SUCCEEDED";
    break;
    };
  }
  static void from_json(const json& j, RecofrienderLoginSessionStates& v) {
    auto s = j.get<std::string>(); 
    if(s == "ERROR") {
      v = RecofrienderLoginSessionStates::ERROR_e;
      return;
    } 
    if(s == "IN_PROGRESS") {
      v = RecofrienderLoginSessionStates::IN_PROGRESS_e;
      return;
    } 
    if(s == "LOGGING_OUT") {
      v = RecofrienderLoginSessionStates::LOGGING_OUT_e;
      return;
    } 
    if(s == "SUCCEEDED") {
      v = RecofrienderLoginSessionStates::SUCCEEDED_e;
      return;
    } 
  } 
  struct RecofrienderLoginSession { /**/ 
    RecofrienderLoginSessionStates state;/**/
    std::string idToken;/**/
    uint64_t summonerId;/**/
    json gasToken;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const RecofrienderLoginSession& v) { 
    j["state"] = v.state;
    j["idToken"] = v.idToken;
    j["summonerId"] = v.summonerId;
    j["gasToken"] = v.gasToken;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, RecofrienderLoginSession& v) { 
    v.state = j.at("state").get<RecofrienderLoginSessionStates>(); 
    v.idToken = j.at("idToken").get<std::string>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.gasToken = j.at("gasToken").get<json>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct RecofrienderNetworkConfig { /**/ 
    bool enabled;/**/
    std::string linkUrlTemplate;/**/
    std::string unlinkUrlTemplate;/**/
    std::string name;/**/
  };
  static void to_json(json& j, const RecofrienderNetworkConfig& v) { 
    j["enabled"] = v.enabled;
    j["linkUrlTemplate"] = v.linkUrlTemplate;
    j["unlinkUrlTemplate"] = v.unlinkUrlTemplate;
    j["name"] = v.name;
  }
  static void from_json(const json& j, RecofrienderNetworkConfig& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.linkUrlTemplate = j.at("linkUrlTemplate").get<std::string>(); 
    v.unlinkUrlTemplate = j.at("unlinkUrlTemplate").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
  } 
  struct RecofrienderSessionResource { /**/ 
    uint32_t sessionExpire;/**/
    std::string sessionState;/**/
  };
  static void to_json(json& j, const RecofrienderSessionResource& v) { 
    j["sessionExpire"] = v.sessionExpire;
    j["sessionState"] = v.sessionState;
  }
  static void from_json(const json& j, RecofrienderSessionResource& v) { 
    v.sessionExpire = j.at("sessionExpire").get<uint32_t>(); 
    v.sessionState = j.at("sessionState").get<std::string>(); 
  } 
  struct RecofrienderSummonerResource { /**/ 
    uint64_t summonerId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const RecofrienderSummonerResource& v) { 
    j["summonerId"] = v.summonerId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, RecofrienderSummonerResource& v) { 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct RecofrienderUrlResource { /**/ 
    std::string url;/**/
  };
  static void to_json(json& j, const RecofrienderUrlResource& v) { 
    j["url"] = v.url;
  }
  static void from_json(const json& j, RecofrienderUrlResource& v) { 
    v.url = j.at("url").get<std::string>(); 
  } 
  struct RedeemLootTransactionDTO { /**/ 
    std::string lootName;/**/
  };
  static void to_json(json& j, const RedeemLootTransactionDTO& v) { 
    j["lootName"] = v.lootName;
  }
  static void from_json(const json& j, RedeemLootTransactionDTO& v) { 
    v.lootName = j.at("lootName").get<std::string>(); 
  } 
  struct RegionLocale { /**/ 
    std::string locale;/**/
    std::string webLanguage;/**/
    std::string webRegion;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const RegionLocale& v) { 
    j["locale"] = v.locale;
    j["webLanguage"] = v.webLanguage;
    j["webRegion"] = v.webRegion;
    j["region"] = v.region;
  }
  static void from_json(const json& j, RegionLocale& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.webLanguage = j.at("webLanguage").get<std::string>(); 
    v.webRegion = j.at("webRegion").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  enum class RemotingHelpFormat { /*Help format for remoting functions and types.*/ 
    Brief_e = 4, /*Short description format*/ 
    Console_e = 5, /*Console-friendly description format*/ 
    Epytext_e = 2, /*Python epytext format*/ 
    Full_e = 1, /*Native help format*/ 
  };
  static void to_json(json& j, const RemotingHelpFormat& v) {
    switch(v) { 
    case RemotingHelpFormat::Brief_e:
      j = "Brief";
    break;
    case RemotingHelpFormat::Console_e:
      j = "Console";
    break;
    case RemotingHelpFormat::Epytext_e:
      j = "Epytext";
    break;
    case RemotingHelpFormat::Full_e:
      j = "Full";
    break;
    };
  }
  static void from_json(const json& j, RemotingHelpFormat& v) {
    auto s = j.get<std::string>(); 
    if(s == "Brief") {
      v = RemotingHelpFormat::Brief_e;
      return;
    } 
    if(s == "Console") {
      v = RemotingHelpFormat::Console_e;
      return;
    } 
    if(s == "Epytext") {
      v = RemotingHelpFormat::Epytext_e;
      return;
    } 
    if(s == "Full") {
      v = RemotingHelpFormat::Full_e;
      return;
    } 
  } 
  enum class RemotingPrivilege { /*Well-known privilege levels for bindable functions.*/ 
    Admin_e = 254, /*Maximum privilege level for remote administrators.*/ 
    Local_e = 255, /*Maximum possible privilege level. Used for in-process function calls.*/ 
    None_e = 0, /*Minimum possible privilege level.*/ 
    User_e = 127, /*Maximum privilege level for remote non-administrators.*/ 
  };
  static void to_json(json& j, const RemotingPrivilege& v) {
    switch(v) { 
    case RemotingPrivilege::Admin_e:
      j = "Admin";
    break;
    case RemotingPrivilege::Local_e:
      j = "Local";
    break;
    case RemotingPrivilege::None_e:
      j = "None";
    break;
    case RemotingPrivilege::User_e:
      j = "User";
    break;
    };
  }
  static void from_json(const json& j, RemotingPrivilege& v) {
    auto s = j.get<std::string>(); 
    if(s == "Admin") {
      v = RemotingPrivilege::Admin_e;
      return;
    } 
    if(s == "Local") {
      v = RemotingPrivilege::Local_e;
      return;
    } 
    if(s == "None") {
      v = RemotingPrivilege::None_e;
      return;
    } 
    if(s == "User") {
      v = RemotingPrivilege::User_e;
      return;
    } 
  } 
  enum class RemotingSerializedFormat { /*Serialization format for remoting requests and results.*/ 
    JSON_e = 1, /**/ 
    MsgPack_e = 3, /**/ 
    YAML_e = 2, /**/ 
  };
  static void to_json(json& j, const RemotingSerializedFormat& v) {
    switch(v) { 
    case RemotingSerializedFormat::JSON_e:
      j = "JSON";
    break;
    case RemotingSerializedFormat::MsgPack_e:
      j = "MsgPack";
    break;
    case RemotingSerializedFormat::YAML_e:
      j = "YAML";
    break;
    };
  }
  static void from_json(const json& j, RemotingSerializedFormat& v) {
    auto s = j.get<std::string>(); 
    if(s == "JSON") {
      v = RemotingSerializedFormat::JSON_e;
      return;
    } 
    if(s == "MsgPack") {
      v = RemotingSerializedFormat::MsgPack_e;
      return;
    } 
    if(s == "YAML") {
      v = RemotingSerializedFormat::YAML_e;
      return;
    } 
  } 
  struct RerollPointsDTO { /**/ 
    uint64_t pointsCostToRoll;/**/
    uint32_t maxRolls;/**/
    uint32_t numberOfRolls;/**/
    uint64_t currentPoints;/**/
    uint64_t pointsToReroll;/**/
  };
  static void to_json(json& j, const RerollPointsDTO& v) { 
    j["pointsCostToRoll"] = v.pointsCostToRoll;
    j["maxRolls"] = v.maxRolls;
    j["numberOfRolls"] = v.numberOfRolls;
    j["currentPoints"] = v.currentPoints;
    j["pointsToReroll"] = v.pointsToReroll;
  }
  static void from_json(const json& j, RerollPointsDTO& v) { 
    v.pointsCostToRoll = j.at("pointsCostToRoll").get<uint64_t>(); 
    v.maxRolls = j.at("maxRolls").get<uint32_t>(); 
    v.numberOfRolls = j.at("numberOfRolls").get<uint32_t>(); 
    v.currentPoints = j.at("currentPoints").get<uint64_t>(); 
    v.pointsToReroll = j.at("pointsToReroll").get<uint64_t>(); 
  } 
  struct RewardDetails { /**/ 
    std::vector<int64_t> teamMemberIds;/**/
    int64_t rosterId;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const RewardDetails& v) { 
    j["teamMemberIds"] = v.teamMemberIds;
    j["rosterId"] = v.rosterId;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, RewardDetails& v) { 
    v.teamMemberIds = j.at("teamMemberIds").get<std::vector<int64_t>>(); 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct RiotMessagingServiceMessage { /**/ 
    int64_t timestamp;/**/
    std::string resource;/**/
    std::string payload;/**/
    std::string version;/**/
    std::string service;/**/
  };
  static void to_json(json& j, const RiotMessagingServiceMessage& v) { 
    j["timestamp"] = v.timestamp;
    j["resource"] = v.resource;
    j["payload"] = v.payload;
    j["version"] = v.version;
    j["service"] = v.service;
  }
  static void from_json(const json& j, RiotMessagingServiceMessage& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.resource = j.at("resource").get<std::string>(); 
    v.payload = j.at("payload").get<std::string>(); 
    v.version = j.at("version").get<std::string>(); 
    v.service = j.at("service").get<std::string>(); 
  } 
  struct RiotMessagingServicePluginRegionLocaleChangedEvent { /**/ 
    std::string locale;/**/
    std::string region;/**/
  };
  static void to_json(json& j, const RiotMessagingServicePluginRegionLocaleChangedEvent& v) { 
    j["locale"] = v.locale;
    j["region"] = v.region;
  }
  static void from_json(const json& j, RiotMessagingServicePluginRegionLocaleChangedEvent& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.region = j.at("region").get<std::string>(); 
  } 
  enum class RiotMessagingServiceState { /**/ 
    Connected_e = 5, /**/ 
    Connecting_e = 3, /**/ 
    Disconnected_e = 1, /**/ 
    Disconnecting_e = 0, /**/ 
  };
  static void to_json(json& j, const RiotMessagingServiceState& v) {
    switch(v) { 
    case RiotMessagingServiceState::Connected_e:
      j = "Connected";
    break;
    case RiotMessagingServiceState::Connecting_e:
      j = "Connecting";
    break;
    case RiotMessagingServiceState::Disconnected_e:
      j = "Disconnected";
    break;
    case RiotMessagingServiceState::Disconnecting_e:
      j = "Disconnecting";
    break;
    };
  }
  static void from_json(const json& j, RiotMessagingServiceState& v) {
    auto s = j.get<std::string>(); 
    if(s == "Connected") {
      v = RiotMessagingServiceState::Connected_e;
      return;
    } 
    if(s == "Connecting") {
      v = RiotMessagingServiceState::Connecting_e;
      return;
    } 
    if(s == "Disconnected") {
      v = RiotMessagingServiceState::Disconnected_e;
      return;
    } 
    if(s == "Disconnecting") {
      v = RiotMessagingServiceState::Disconnecting_e;
      return;
    } 
  } 
  enum class RiotMessagingServiceTokenType { /**/ 
    Access_e = 1, /**/ 
    Identity_e = 2, /**/ 
    Unavailable_e = 0, /**/ 
  };
  static void to_json(json& j, const RiotMessagingServiceTokenType& v) {
    switch(v) { 
    case RiotMessagingServiceTokenType::Access_e:
      j = "Access";
    break;
    case RiotMessagingServiceTokenType::Identity_e:
      j = "Identity";
    break;
    case RiotMessagingServiceTokenType::Unavailable_e:
      j = "Unavailable";
    break;
    };
  }
  static void from_json(const json& j, RiotMessagingServiceTokenType& v) {
    auto s = j.get<std::string>(); 
    if(s == "Access") {
      v = RiotMessagingServiceTokenType::Access_e;
      return;
    } 
    if(s == "Identity") {
      v = RiotMessagingServiceTokenType::Identity_e;
      return;
    } 
    if(s == "Unavailable") {
      v = RiotMessagingServiceTokenType::Unavailable_e;
      return;
    } 
  } 
  struct RiotMessagingServiceSession { /**/ 
    RiotMessagingServiceState state;/**/
    std::string token;/**/
    RiotMessagingServiceTokenType tokenType;/**/
  };
  static void to_json(json& j, const RiotMessagingServiceSession& v) { 
    j["state"] = v.state;
    j["token"] = v.token;
    j["tokenType"] = v.tokenType;
  }
  static void from_json(const json& j, RiotMessagingServiceSession& v) { 
    v.state = j.at("state").get<RiotMessagingServiceState>(); 
    v.token = j.at("token").get<std::string>(); 
    v.tokenType = j.at("tokenType").get<RiotMessagingServiceTokenType>(); 
  } 
  struct RosterPlayerAggregatedStatsDTO { /**/ 
    std::map<std::string, int32_t> rawStatsMax;/**/
    std::map<std::string, int32_t> rawStatsSum;/**/
  };
  static void to_json(json& j, const RosterPlayerAggregatedStatsDTO& v) { 
    j["rawStatsMax"] = v.rawStatsMax;
    j["rawStatsSum"] = v.rawStatsSum;
  }
  static void from_json(const json& j, RosterPlayerAggregatedStatsDTO& v) { 
    v.rawStatsMax = j.at("rawStatsMax").get<std::map<std::string, int32_t>>(); 
    v.rawStatsSum = j.at("rawStatsSum").get<std::map<std::string, int32_t>>(); 
  } 
  struct RosterMatchAggregatedStatsDTO { /**/ 
    std::string opponentShortName;/**/
    bool win;/**/
    int32_t opponentLogoColor;/**/
    bool loserBracket;/**/
    int32_t opponentLogo;/**/
    int32_t round;/**/
    int64_t gameId;/**/
    int64_t duration;/**/
    std::map<std::string, int32_t> playerChampionIds;/**/
  };
  static void to_json(json& j, const RosterMatchAggregatedStatsDTO& v) { 
    j["opponentShortName"] = v.opponentShortName;
    j["win"] = v.win;
    j["opponentLogoColor"] = v.opponentLogoColor;
    j["loserBracket"] = v.loserBracket;
    j["opponentLogo"] = v.opponentLogo;
    j["round"] = v.round;
    j["gameId"] = v.gameId;
    j["duration"] = v.duration;
    j["playerChampionIds"] = v.playerChampionIds;
  }
  static void from_json(const json& j, RosterMatchAggregatedStatsDTO& v) { 
    v.opponentShortName = j.at("opponentShortName").get<std::string>(); 
    v.win = j.at("win").get<bool>(); 
    v.opponentLogoColor = j.at("opponentLogoColor").get<int32_t>(); 
    v.loserBracket = j.at("loserBracket").get<bool>(); 
    v.opponentLogo = j.at("opponentLogo").get<int32_t>(); 
    v.round = j.at("round").get<int32_t>(); 
    v.gameId = j.at("gameId").get<int64_t>(); 
    v.duration = j.at("duration").get<int64_t>(); 
    v.playerChampionIds = j.at("playerChampionIds").get<std::map<std::string, int32_t>>(); 
  } 
  struct RosterPeriodAggregatedStatsDTO { /**/ 
    int32_t bracketSize;/**/
    std::vector<RosterMatchAggregatedStatsDTO> matchStats;/**/
    int64_t time;/**/
    int32_t period;/**/
  };
  static void to_json(json& j, const RosterPeriodAggregatedStatsDTO& v) { 
    j["bracketSize"] = v.bracketSize;
    j["matchStats"] = v.matchStats;
    j["time"] = v.time;
    j["period"] = v.period;
  }
  static void from_json(const json& j, RosterPeriodAggregatedStatsDTO& v) { 
    v.bracketSize = j.at("bracketSize").get<int32_t>(); 
    v.matchStats = j.at("matchStats").get<std::vector<RosterMatchAggregatedStatsDTO>>(); 
    v.time = j.at("time").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
  } 
  struct RosterAggregatedStatsDTO { /**/ 
    std::map<std::string, RosterPlayerAggregatedStatsDTO> playerStats;/**/
    std::vector<RosterPeriodAggregatedStatsDTO> periodStats;/**/
  };
  static void to_json(json& j, const RosterAggregatedStatsDTO& v) { 
    j["playerStats"] = v.playerStats;
    j["periodStats"] = v.periodStats;
  }
  static void from_json(const json& j, RosterAggregatedStatsDTO& v) { 
    v.playerStats = j.at("playerStats").get<std::map<std::string, RosterPlayerAggregatedStatsDTO>>(); 
    v.periodStats = j.at("periodStats").get<std::vector<RosterPeriodAggregatedStatsDTO>>(); 
  } 
  struct RosterItemDto { /**/ 
    std::string summonerName;/**/
    std::string clubRole;/**/
    uint64_t accountId;/**/
    int32_t summonerIconId;/**/
  };
  static void to_json(json& j, const RosterItemDto& v) { 
    j["summonerName"] = v.summonerName;
    j["clubRole"] = v.clubRole;
    j["accountId"] = v.accountId;
    j["summonerIconId"] = v.summonerIconId;
  }
  static void from_json(const json& j, RosterItemDto& v) { 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.clubRole = j.at("clubRole").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerIconId = j.at("summonerIconId").get<int32_t>(); 
  } 
  struct RosterStatsDTO { /**/ 
    int64_t rosterId;/**/
    int32_t tournamentThemeId;/**/
    std::string rosterShortName;/**/
    int32_t rosterLogoColor;/**/
    int32_t rosterLogo;/**/
    int32_t tournamentPeriods;/**/
    std::string tournamentNameLocKey;/**/
    int32_t tier;/**/
    std::string rosterName;/**/
    RosterAggregatedStatsDTO stats;/**/
  };
  static void to_json(json& j, const RosterStatsDTO& v) { 
    j["rosterId"] = v.rosterId;
    j["tournamentThemeId"] = v.tournamentThemeId;
    j["rosterShortName"] = v.rosterShortName;
    j["rosterLogoColor"] = v.rosterLogoColor;
    j["rosterLogo"] = v.rosterLogo;
    j["tournamentPeriods"] = v.tournamentPeriods;
    j["tournamentNameLocKey"] = v.tournamentNameLocKey;
    j["tier"] = v.tier;
    j["rosterName"] = v.rosterName;
    j["stats"] = v.stats;
  }
  static void from_json(const json& j, RosterStatsDTO& v) { 
    v.rosterId = j.at("rosterId").get<int64_t>(); 
    v.tournamentThemeId = j.at("tournamentThemeId").get<int32_t>(); 
    v.rosterShortName = j.at("rosterShortName").get<std::string>(); 
    v.rosterLogoColor = j.at("rosterLogoColor").get<int32_t>(); 
    v.rosterLogo = j.at("rosterLogo").get<int32_t>(); 
    v.tournamentPeriods = j.at("tournamentPeriods").get<int32_t>(); 
    v.tournamentNameLocKey = j.at("tournamentNameLocKey").get<std::string>(); 
    v.tier = j.at("tier").get<int32_t>(); 
    v.rosterName = j.at("rosterName").get<std::string>(); 
    v.stats = j.at("stats").get<RosterAggregatedStatsDTO>(); 
  } 
  struct RsoAuthAccessToken { /**/ 
    std::vector<std::string> scopes;/**/
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const RsoAuthAccessToken& v) { 
    j["scopes"] = v.scopes;
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, RsoAuthAccessToken& v) { 
    v.scopes = j.at("scopes").get<std::vector<std::string>>(); 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct RsoAuthAuthError { /**/ 
    std::string errorDescription;/**/
    std::string error;/**/
  };
  static void to_json(json& j, const RsoAuthAuthError& v) { 
    j["errorDescription"] = v.errorDescription;
    j["error"] = v.error;
  }
  static void from_json(const json& j, RsoAuthAuthError& v) { 
    v.errorDescription = j.at("errorDescription").get<std::string>(); 
    v.error = j.at("error").get<std::string>(); 
  } 
  struct RsoAuthAuthorization { /**/ 
    std::string currentPlatformId;/**/
    std::string subject;/**/
    uint64_t currentAccountId;/**/
  };
  static void to_json(json& j, const RsoAuthAuthorization& v) { 
    j["currentPlatformId"] = v.currentPlatformId;
    j["subject"] = v.subject;
    j["currentAccountId"] = v.currentAccountId;
  }
  static void from_json(const json& j, RsoAuthAuthorization& v) { 
    v.currentPlatformId = j.at("currentPlatformId").get<std::string>(); 
    v.subject = j.at("subject").get<std::string>(); 
    v.currentAccountId = j.at("currentAccountId").get<uint64_t>(); 
  } 
  struct RsoAuthDeviceId { /**/ 
    std::string collectorServerName;/**/
    std::string sessionId;/**/
    std::string installId;/**/
    std::string merchantId;/**/
    std::string frameUrl;/**/
  };
  static void to_json(json& j, const RsoAuthDeviceId& v) { 
    j["collectorServerName"] = v.collectorServerName;
    j["sessionId"] = v.sessionId;
    j["installId"] = v.installId;
    j["merchantId"] = v.merchantId;
    j["frameUrl"] = v.frameUrl;
  }
  static void from_json(const json& j, RsoAuthDeviceId& v) { 
    v.collectorServerName = j.at("collectorServerName").get<std::string>(); 
    v.sessionId = j.at("sessionId").get<std::string>(); 
    v.installId = j.at("installId").get<std::string>(); 
    v.merchantId = j.at("merchantId").get<std::string>(); 
    v.frameUrl = j.at("frameUrl").get<std::string>(); 
  } 
  struct RsoAuthEntitlementsToken { /**/ 
    uint64_t expiry;/**/
    std::vector<std::string> entitlements;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const RsoAuthEntitlementsToken& v) { 
    j["expiry"] = v.expiry;
    j["entitlements"] = v.entitlements;
    j["token"] = v.token;
  }
  static void from_json(const json& j, RsoAuthEntitlementsToken& v) { 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.entitlements = j.at("entitlements").get<std::vector<std::string>>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct RsoAuthIdToken { /**/ 
    uint64_t expiry;/**/
    std::string token;/**/
  };
  static void to_json(json& j, const RsoAuthIdToken& v) { 
    j["expiry"] = v.expiry;
    j["token"] = v.token;
  }
  static void from_json(const json& j, RsoAuthIdToken& v) { 
    v.expiry = j.at("expiry").get<uint64_t>(); 
    v.token = j.at("token").get<std::string>(); 
  } 
  struct RsoAuthPublicClientConfig { /**/ 
    std::string clientId;/**/
    std::string url;/**/
  };
  static void to_json(json& j, const RsoAuthPublicClientConfig& v) { 
    j["clientId"] = v.clientId;
    j["url"] = v.url;
  }
  static void from_json(const json& j, RsoAuthPublicClientConfig& v) { 
    v.clientId = j.at("clientId").get<std::string>(); 
    v.url = j.at("url").get<std::string>(); 
  } 
  struct RsoAuthRSOJWTConfig { /**/ 
    std::optional<std::string> token;/**/
  };
  static void to_json(json& j, const RsoAuthRSOJWTConfig& v) { 
    j["token"] = v.token;
  }
  static void from_json(const json& j, RsoAuthRSOJWTConfig& v) { 
    v.token = j.at("token").get<std::optional<std::string>>(); 
  } 
  struct RsoAuthRSOPlayerCredentials { /**/ 
    std::string platformId;/**/
    std::string username;/**/
    std::string password;/**/
  };
  static void to_json(json& j, const RsoAuthRSOPlayerCredentials& v) { 
    j["platformId"] = v.platformId;
    j["username"] = v.username;
    j["password"] = v.password;
  }
  static void from_json(const json& j, RsoAuthRSOPlayerCredentials& v) { 
    v.platformId = j.at("platformId").get<std::string>(); 
    v.username = j.at("username").get<std::string>(); 
    v.password = j.at("password").get<std::string>(); 
  } 
  struct RsoAuthRegionStatus { /**/ 
    bool enabled;/**/
    bool isUserInfoEnabled;/**/
    bool isLQFallbackAllowed;/**/
    std::string platformId;/**/
  };
  static void to_json(json& j, const RsoAuthRegionStatus& v) { 
    j["enabled"] = v.enabled;
    j["isUserInfoEnabled"] = v.isUserInfoEnabled;
    j["isLQFallbackAllowed"] = v.isLQFallbackAllowed;
    j["platformId"] = v.platformId;
  }
  static void from_json(const json& j, RsoAuthRegionStatus& v) { 
    v.enabled = j.at("enabled").get<bool>(); 
    v.isUserInfoEnabled = j.at("isUserInfoEnabled").get<bool>(); 
    v.isLQFallbackAllowed = j.at("isLQFallbackAllowed").get<bool>(); 
    v.platformId = j.at("platformId").get<std::string>(); 
  } 
  struct RsoAuthUserInfo { /**/ 
    std::string userInfo;/**/
  };
  static void to_json(json& j, const RsoAuthUserInfo& v) { 
    j["userInfo"] = v.userInfo;
  }
  static void from_json(const json& j, RsoAuthUserInfo& v) { 
    v.userInfo = j.at("userInfo").get<std::string>(); 
  } 
  struct SanitizerContainsSanitizedRequest { /**/ 
    std::optional<uint32_t> level;/**/
    std::optional<bool> includeEmbedded;/**/
    std::optional<bool> aggressiveScan;/**/
    std::string text;/**/
    std::optional<bool> removeDisallowedChars;/**/
  };
  static void to_json(json& j, const SanitizerContainsSanitizedRequest& v) { 
    j["level"] = v.level;
    j["includeEmbedded"] = v.includeEmbedded;
    j["aggressiveScan"] = v.aggressiveScan;
    j["text"] = v.text;
    j["removeDisallowedChars"] = v.removeDisallowedChars;
  }
  static void from_json(const json& j, SanitizerContainsSanitizedRequest& v) { 
    v.level = j.at("level").get<std::optional<uint32_t>>(); 
    v.includeEmbedded = j.at("includeEmbedded").get<std::optional<bool>>(); 
    v.aggressiveScan = j.at("aggressiveScan").get<std::optional<bool>>(); 
    v.text = j.at("text").get<std::string>(); 
    v.removeDisallowedChars = j.at("removeDisallowedChars").get<std::optional<bool>>(); 
  } 
  struct SanitizerContainsSanitizedResponse { /**/ 
    bool contains;/**/
  };
  static void to_json(json& j, const SanitizerContainsSanitizedResponse& v) { 
    j["contains"] = v.contains;
  }
  static void from_json(const json& j, SanitizerContainsSanitizedResponse& v) { 
    v.contains = j.at("contains").get<bool>(); 
  } 
  struct SanitizerSanitizeRequest { /**/ 
    std::optional<std::vector<std::string>> texts;/**/
    std::optional<uint32_t> level;/**/
    std::optional<bool> aggressiveScan;/**/
    std::optional<std::string> text;/**/
    std::optional<bool> removeDisallowedChars;/**/
  };
  static void to_json(json& j, const SanitizerSanitizeRequest& v) { 
    j["texts"] = v.texts;
    j["level"] = v.level;
    j["aggressiveScan"] = v.aggressiveScan;
    j["text"] = v.text;
    j["removeDisallowedChars"] = v.removeDisallowedChars;
  }
  static void from_json(const json& j, SanitizerSanitizeRequest& v) { 
    v.texts = j.at("texts").get<std::optional<std::vector<std::string>>>(); 
    v.level = j.at("level").get<std::optional<uint32_t>>(); 
    v.aggressiveScan = j.at("aggressiveScan").get<std::optional<bool>>(); 
    v.text = j.at("text").get<std::optional<std::string>>(); 
    v.removeDisallowedChars = j.at("removeDisallowedChars").get<std::optional<bool>>(); 
  } 
  struct SanitizerSanitizeResponse { /**/ 
    std::optional<std::vector<std::string>> texts;/**/
    std::optional<std::string> text;/**/
    bool modified;/**/
  };
  static void to_json(json& j, const SanitizerSanitizeResponse& v) { 
    j["texts"] = v.texts;
    j["text"] = v.text;
    j["modified"] = v.modified;
  }
  static void from_json(const json& j, SanitizerSanitizeResponse& v) { 
    v.texts = j.at("texts").get<std::optional<std::vector<std::string>>>(); 
    v.text = j.at("text").get<std::optional<std::string>>(); 
    v.modified = j.at("modified").get<bool>(); 
  } 
  struct SanitizerSanitizerConfig { /**/ 
    std::optional<std::string> Level1Filter;/**/
    std::optional<std::string> Level0Filter;/**/
    std::optional<std::string> Level0Unfilter;/**/
    std::optional<std::string> Level3Unfilter;/**/
    std::optional<std::string> Level1Unfilter;/**/
    std::optional<std::string> Level3Filter;/**/
    std::optional<std::string> Level2Filter;/**/
    std::optional<std::string> Level2Unfilter;/**/
  };
  static void to_json(json& j, const SanitizerSanitizerConfig& v) { 
    j["Level1Filter"] = v.Level1Filter;
    j["Level0Filter"] = v.Level0Filter;
    j["Level0Unfilter"] = v.Level0Unfilter;
    j["Level3Unfilter"] = v.Level3Unfilter;
    j["Level1Unfilter"] = v.Level1Unfilter;
    j["Level3Filter"] = v.Level3Filter;
    j["Level2Filter"] = v.Level2Filter;
    j["Level2Unfilter"] = v.Level2Unfilter;
  }
  static void from_json(const json& j, SanitizerSanitizerConfig& v) { 
    v.Level1Filter = j.at("Level1Filter").get<std::optional<std::string>>(); 
    v.Level0Filter = j.at("Level0Filter").get<std::optional<std::string>>(); 
    v.Level0Unfilter = j.at("Level0Unfilter").get<std::optional<std::string>>(); 
    v.Level3Unfilter = j.at("Level3Unfilter").get<std::optional<std::string>>(); 
    v.Level1Unfilter = j.at("Level1Unfilter").get<std::optional<std::string>>(); 
    v.Level3Filter = j.at("Level3Filter").get<std::optional<std::string>>(); 
    v.Level2Filter = j.at("Level2Filter").get<std::optional<std::string>>(); 
    v.Level2Unfilter = j.at("Level2Unfilter").get<std::optional<std::string>>(); 
  } 
  struct SanitizerSanitizerStatus { /**/ 
    std::string locale;/**/
    uint32_t breakingCharsCount;/**/
    uint32_t allowedCharsCount;/**/
    uint32_t projectedCharsCount;/**/
    std::string region;/**/
    bool ready;/**/
    std::map<std::string, uint32_t> filteredWordCountsByLevel;/**/
  };
  static void to_json(json& j, const SanitizerSanitizerStatus& v) { 
    j["locale"] = v.locale;
    j["breakingCharsCount"] = v.breakingCharsCount;
    j["allowedCharsCount"] = v.allowedCharsCount;
    j["projectedCharsCount"] = v.projectedCharsCount;
    j["region"] = v.region;
    j["ready"] = v.ready;
    j["filteredWordCountsByLevel"] = v.filteredWordCountsByLevel;
  }
  static void from_json(const json& j, SanitizerSanitizerStatus& v) { 
    v.locale = j.at("locale").get<std::string>(); 
    v.breakingCharsCount = j.at("breakingCharsCount").get<uint32_t>(); 
    v.allowedCharsCount = j.at("allowedCharsCount").get<uint32_t>(); 
    v.projectedCharsCount = j.at("projectedCharsCount").get<uint32_t>(); 
    v.region = j.at("region").get<std::string>(); 
    v.ready = j.at("ready").get<bool>(); 
    v.filteredWordCountsByLevel = j.at("filteredWordCountsByLevel").get<std::map<std::string, uint32_t>>(); 
  } 
  struct SeriesAlertDTO { /**/ 
    std::string title;/**/
    int64_t alertTime;/**/
    std::string description;/**/
  };
  static void to_json(json& j, const SeriesAlertDTO& v) { 
    j["title"] = v.title;
    j["alertTime"] = v.alertTime;
    j["description"] = v.description;
  }
  static void from_json(const json& j, SeriesAlertDTO& v) { 
    v.title = j.at("title").get<std::string>(); 
    v.alertTime = j.at("alertTime").get<int64_t>(); 
    v.description = j.at("description").get<std::string>(); 
  } 
  struct SeriesMediaDTO { /**/ 
    std::string backgroundUrl;/**/
  };
  static void to_json(json& j, const SeriesMediaDTO& v) { 
    j["backgroundUrl"] = v.backgroundUrl;
  }
  static void from_json(const json& j, SeriesMediaDTO& v) { 
    v.backgroundUrl = j.at("backgroundUrl").get<std::string>(); 
  } 
  struct SeriesDTO { /**/ 
    std::string internalName;/**/
    std::string id;/**/
    int64_t startDate;/**/
    std::string description;/**/
    std::vector<std::string> tags;/**/
    std::string parentName;/**/
    std::string title;/**/
    SeriesMediaDTO media;/**/
    std::vector<SeriesAlertDTO> warnings;/**/
    int64_t endDate;/**/
  };
  static void to_json(json& j, const SeriesDTO& v) { 
    j["internalName"] = v.internalName;
    j["id"] = v.id;
    j["startDate"] = v.startDate;
    j["description"] = v.description;
    j["tags"] = v.tags;
    j["parentName"] = v.parentName;
    j["title"] = v.title;
    j["media"] = v.media;
    j["warnings"] = v.warnings;
    j["endDate"] = v.endDate;
  }
  static void from_json(const json& j, SeriesDTO& v) { 
    v.internalName = j.at("internalName").get<std::string>(); 
    v.id = j.at("id").get<std::string>(); 
    v.startDate = j.at("startDate").get<int64_t>(); 
    v.description = j.at("description").get<std::string>(); 
    v.tags = j.at("tags").get<std::vector<std::string>>(); 
    v.parentName = j.at("parentName").get<std::string>(); 
    v.title = j.at("title").get<std::string>(); 
    v.media = j.at("media").get<SeriesMediaDTO>(); 
    v.warnings = j.at("warnings").get<std::vector<SeriesAlertDTO>>(); 
    v.endDate = j.at("endDate").get<int64_t>(); 
  } 
  enum class ServiceStatusIncident_Severity { /**/ 
    error_e = 2, /**/ 
    info_e = 0, /**/ 
    warn_e = 1, /**/ 
  };
  static void to_json(json& j, const ServiceStatusIncident_Severity& v) {
    switch(v) { 
    case ServiceStatusIncident_Severity::error_e:
      j = "error";
    break;
    case ServiceStatusIncident_Severity::info_e:
      j = "info";
    break;
    case ServiceStatusIncident_Severity::warn_e:
      j = "warn";
    break;
    };
  }
  static void from_json(const json& j, ServiceStatusIncident_Severity& v) {
    auto s = j.get<std::string>(); 
    if(s == "error") {
      v = ServiceStatusIncident_Severity::error_e;
      return;
    } 
    if(s == "info") {
      v = ServiceStatusIncident_Severity::info_e;
      return;
    } 
    if(s == "warn") {
      v = ServiceStatusIncident_Severity::warn_e;
      return;
    } 
  } 
  enum class ServiceStatusResource_Status { /**/ 
    degraded_e = 3, /**/ 
    deploying_e = 4, /**/ 
    offline_e = 2, /**/ 
    online_e = 1, /**/ 
    unknown_e = 0, /**/ 
  };
  static void to_json(json& j, const ServiceStatusResource_Status& v) {
    switch(v) { 
    case ServiceStatusResource_Status::degraded_e:
      j = "degraded";
    break;
    case ServiceStatusResource_Status::deploying_e:
      j = "deploying";
    break;
    case ServiceStatusResource_Status::offline_e:
      j = "offline";
    break;
    case ServiceStatusResource_Status::online_e:
      j = "online";
    break;
    case ServiceStatusResource_Status::unknown_e:
      j = "unknown";
    break;
    };
  }
  static void from_json(const json& j, ServiceStatusResource_Status& v) {
    auto s = j.get<std::string>(); 
    if(s == "degraded") {
      v = ServiceStatusResource_Status::degraded_e;
      return;
    } 
    if(s == "deploying") {
      v = ServiceStatusResource_Status::deploying_e;
      return;
    } 
    if(s == "offline") {
      v = ServiceStatusResource_Status::offline_e;
      return;
    } 
    if(s == "online") {
      v = ServiceStatusResource_Status::online_e;
      return;
    } 
    if(s == "unknown") {
      v = ServiceStatusResource_Status::unknown_e;
      return;
    } 
  } 
  struct ServiceStatusResource { /**/ 
    ServiceStatusResource_Status status;/**/
    std::string humanReadableUrl;/**/
  };
  static void to_json(json& j, const ServiceStatusResource& v) { 
    j["status"] = v.status;
    j["humanReadableUrl"] = v.humanReadableUrl;
  }
  static void from_json(const json& j, ServiceStatusResource& v) { 
    v.status = j.at("status").get<ServiceStatusResource_Status>(); 
    v.humanReadableUrl = j.at("humanReadableUrl").get<std::string>(); 
  } 
  struct ShutdownLcdsForcedClientShutdown { /**/ 
    std::string additionalInfo;/**/
    std::string reason;/**/
  };
  static void to_json(json& j, const ShutdownLcdsForcedClientShutdown& v) { 
    j["additionalInfo"] = v.additionalInfo;
    j["reason"] = v.reason;
  }
  static void from_json(const json& j, ShutdownLcdsForcedClientShutdown& v) { 
    v.additionalInfo = j.at("additionalInfo").get<std::string>(); 
    v.reason = j.at("reason").get<std::string>(); 
  } 
  enum class ShutdownReason { /**/ 
    Invalid_e = 0, /**/ 
    LcuAlphaDisabled_e = 2, /**/ 
    PlatformMaintenance_e = 1, /**/ 
    PlayerBanned_e = 3, /**/ 
  };
  static void to_json(json& j, const ShutdownReason& v) {
    switch(v) { 
    case ShutdownReason::Invalid_e:
      j = "Invalid";
    break;
    case ShutdownReason::LcuAlphaDisabled_e:
      j = "LcuAlphaDisabled";
    break;
    case ShutdownReason::PlatformMaintenance_e:
      j = "PlatformMaintenance";
    break;
    case ShutdownReason::PlayerBanned_e:
      j = "PlayerBanned";
    break;
    };
  }
  static void from_json(const json& j, ShutdownReason& v) {
    auto s = j.get<std::string>(); 
    if(s == "Invalid") {
      v = ShutdownReason::Invalid_e;
      return;
    } 
    if(s == "LcuAlphaDisabled") {
      v = ShutdownReason::LcuAlphaDisabled_e;
      return;
    } 
    if(s == "PlatformMaintenance") {
      v = ShutdownReason::PlatformMaintenance_e;
      return;
    } 
    if(s == "PlayerBanned") {
      v = ShutdownReason::PlayerBanned_e;
      return;
    } 
  } 
  struct ShutdownNotification { /**/ 
    float countdown;/**/
    ShutdownReason reason;/**/
    std::string additionalInfo;/**/
  };
  static void to_json(json& j, const ShutdownNotification& v) { 
    j["countdown"] = v.countdown;
    j["reason"] = v.reason;
    j["additionalInfo"] = v.additionalInfo;
  }
  static void from_json(const json& j, ShutdownNotification& v) { 
    v.countdown = j.at("countdown").get<float>(); 
    v.reason = j.at("reason").get<ShutdownReason>(); 
    v.additionalInfo = j.at("additionalInfo").get<std::string>(); 
  } 
  struct SimpleDialogMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    json params;/**/
  };
  static void to_json(json& j, const SimpleDialogMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, SimpleDialogMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<json>(); 
  } 
  struct SimpleDialogMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const SimpleDialogMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, SimpleDialogMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct SimpleMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const SimpleMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, SimpleMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct SpectateGameInfo { /**/ 
    std::string dropInSpectateGameId;/**/
    std::string allowObserveMode;/**/
    std::string gameQueueType;/**/
  };
  static void to_json(json& j, const SpectateGameInfo& v) { 
    j["dropInSpectateGameId"] = v.dropInSpectateGameId;
    j["allowObserveMode"] = v.allowObserveMode;
    j["gameQueueType"] = v.gameQueueType;
  }
  static void from_json(const json& j, SpectateGameInfo& v) { 
    v.dropInSpectateGameId = j.at("dropInSpectateGameId").get<std::string>(); 
    v.allowObserveMode = j.at("allowObserveMode").get<std::string>(); 
    v.gameQueueType = j.at("gameQueueType").get<std::string>(); 
  } 
  struct SpectatorLcdsSpectateAvailabilityDto { /**/ 
    std::vector<std::string> teamOrSummonerIds;/**/
  };
  static void to_json(json& j, const SpectatorLcdsSpectateAvailabilityDto& v) { 
    j["teamOrSummonerIds"] = v.teamOrSummonerIds;
  }
  static void from_json(const json& j, SpectatorLcdsSpectateAvailabilityDto& v) { 
    v.teamOrSummonerIds = j.at("teamOrSummonerIds").get<std::vector<std::string>>(); 
  } 
  struct SpectatorLcdsSpectateAvailabilityResponseDto { /**/ 
    std::vector<std::string> availableForWatching;/**/
  };
  static void to_json(json& j, const SpectatorLcdsSpectateAvailabilityResponseDto& v) { 
    j["availableForWatching"] = v.availableForWatching;
  }
  static void from_json(const json& j, SpectatorLcdsSpectateAvailabilityResponseDto& v) { 
    v.availableForWatching = j.at("availableForWatching").get<std::vector<std::string>>(); 
  } 
  struct StoreLcdsChampionSkinDTO { /**/ 
    int32_t winCountRemaining;/**/
    uint64_t endDate;/**/
    int32_t skinId;/**/
    bool lastSelected;/**/
    bool stillObtainable;/**/
    bool owned;/**/
    bool freeToPlayReward;/**/
    std::vector<std::string> sources;/**/
    int32_t championId;/**/
    uint64_t purchaseDate;/**/
  };
  static void to_json(json& j, const StoreLcdsChampionSkinDTO& v) { 
    j["winCountRemaining"] = v.winCountRemaining;
    j["endDate"] = v.endDate;
    j["skinId"] = v.skinId;
    j["lastSelected"] = v.lastSelected;
    j["stillObtainable"] = v.stillObtainable;
    j["owned"] = v.owned;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["sources"] = v.sources;
    j["championId"] = v.championId;
    j["purchaseDate"] = v.purchaseDate;
  }
  static void from_json(const json& j, StoreLcdsChampionSkinDTO& v) { 
    v.winCountRemaining = j.at("winCountRemaining").get<int32_t>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.lastSelected = j.at("lastSelected").get<bool>(); 
    v.stillObtainable = j.at("stillObtainable").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.sources = j.at("sources").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
  } 
  struct StoreLcdsChampionDTO { /**/ 
    bool rankedPlayEnabled;/**/
    bool freeToPlay;/**/
    uint64_t endDate;/**/
    std::vector<std::string> sources;/**/
    int32_t championId;/**/
    uint32_t winCountRemaining;/**/
    std::vector<StoreLcdsChampionSkinDTO> championSkins;/**/
    bool botEnabled;/**/
    uint64_t purchaseDate;/**/
    bool freeToPlayReward;/**/
    bool active;/**/
    bool owned;/**/
  };
  static void to_json(json& j, const StoreLcdsChampionDTO& v) { 
    j["rankedPlayEnabled"] = v.rankedPlayEnabled;
    j["freeToPlay"] = v.freeToPlay;
    j["endDate"] = v.endDate;
    j["sources"] = v.sources;
    j["championId"] = v.championId;
    j["winCountRemaining"] = v.winCountRemaining;
    j["championSkins"] = v.championSkins;
    j["botEnabled"] = v.botEnabled;
    j["purchaseDate"] = v.purchaseDate;
    j["freeToPlayReward"] = v.freeToPlayReward;
    j["active"] = v.active;
    j["owned"] = v.owned;
  }
  static void from_json(const json& j, StoreLcdsChampionDTO& v) { 
    v.rankedPlayEnabled = j.at("rankedPlayEnabled").get<bool>(); 
    v.freeToPlay = j.at("freeToPlay").get<bool>(); 
    v.endDate = j.at("endDate").get<uint64_t>(); 
    v.sources = j.at("sources").get<std::vector<std::string>>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.winCountRemaining = j.at("winCountRemaining").get<uint32_t>(); 
    v.championSkins = j.at("championSkins").get<std::vector<StoreLcdsChampionSkinDTO>>(); 
    v.botEnabled = j.at("botEnabled").get<bool>(); 
    v.purchaseDate = j.at("purchaseDate").get<uint64_t>(); 
    v.freeToPlayReward = j.at("freeToPlayReward").get<bool>(); 
    v.active = j.at("active").get<bool>(); 
    v.owned = j.at("owned").get<bool>(); 
  } 
  struct StoreLcdsSimpleDialogMessage { /**/ 
    std::string type;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
    std::vector<std::string> params;/**/
  };
  static void to_json(json& j, const StoreLcdsSimpleDialogMessage& v) { 
    j["type"] = v.type;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
    j["params"] = v.params;
  }
  static void from_json(const json& j, StoreLcdsSimpleDialogMessage& v) { 
    v.type = j.at("type").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.params = j.at("params").get<std::vector<std::string>>(); 
  } 
  struct StoreLcdsSimpleDialogMessageResponse { /**/ 
    std::string command;/**/
    std::string msgId;/**/
    uint64_t accountId;/**/
  };
  static void to_json(json& j, const StoreLcdsSimpleDialogMessageResponse& v) { 
    j["command"] = v.command;
    j["msgId"] = v.msgId;
    j["accountId"] = v.accountId;
  }
  static void from_json(const json& j, StoreLcdsSimpleDialogMessageResponse& v) { 
    v.command = j.at("command").get<std::string>(); 
    v.msgId = j.at("msgId").get<std::string>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
  } 
  struct StoreLcdsStoreAccountBalanceNotification { /**/ 
    int64_t ip;/**/
    int64_t rp;/**/
  };
  static void to_json(json& j, const StoreLcdsStoreAccountBalanceNotification& v) { 
    j["ip"] = v.ip;
    j["rp"] = v.rp;
  }
  static void from_json(const json& j, StoreLcdsStoreAccountBalanceNotification& v) { 
    v.ip = j.at("ip").get<int64_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
  } 
  struct StoreLcdsStoreFulfillmentNotification { /**/ 
    int64_t ip;/**/
    int64_t rp;/**/
    std::string inventoryType;/**/
    json data;/**/
  };
  static void to_json(json& j, const StoreLcdsStoreFulfillmentNotification& v) { 
    j["ip"] = v.ip;
    j["rp"] = v.rp;
    j["inventoryType"] = v.inventoryType;
    j["data"] = v.data;
  }
  static void from_json(const json& j, StoreLcdsStoreFulfillmentNotification& v) { 
    v.ip = j.at("ip").get<int64_t>(); 
    v.rp = j.at("rp").get<int64_t>(); 
    v.inventoryType = j.at("inventoryType").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct SuggestedPlayersClientDynamicConfigurationNotification { /**/ 
    std::string configs;/**/
    bool delta;/**/
  };
  static void to_json(json& j, const SuggestedPlayersClientDynamicConfigurationNotification& v) { 
    j["configs"] = v.configs;
    j["delta"] = v.delta;
  }
  static void from_json(const json& j, SuggestedPlayersClientDynamicConfigurationNotification& v) { 
    v.configs = j.at("configs").get<std::string>(); 
    v.delta = j.at("delta").get<bool>(); 
  } 
  struct SuggestedPlayersEndOfGameStats { /**/ 
  };
  static void to_json(json& j, const SuggestedPlayersEndOfGameStats& v) { 
  }
  static void from_json(const json& j, SuggestedPlayersEndOfGameStats& v) { 
  } 
  struct Summoner { /**/ 
    uint64_t acctId;/**/
    uint64_t sumId;/**/
  };
  static void to_json(json& j, const Summoner& v) { 
    j["acctId"] = v.acctId;
    j["sumId"] = v.sumId;
  }
  static void from_json(const json& j, Summoner& v) { 
    v.acctId = j.at("acctId").get<uint64_t>(); 
    v.sumId = j.at("sumId").get<uint64_t>(); 
  } 
  struct SummonerOrTeamAvailabilty { /**/ 
    std::vector<std::string> availableForWatching;/**/
  };
  static void to_json(json& j, const SummonerOrTeamAvailabilty& v) { 
    j["availableForWatching"] = v.availableForWatching;
  }
  static void from_json(const json& j, SummonerOrTeamAvailabilty& v) { 
    v.availableForWatching = j.at("availableForWatching").get<std::vector<std::string>>(); 
  } 
  struct TencentQTNotification { /**/ 
    int64_t timestamp;/**/
    std::string state;/**/
    std::string updatedBy;/**/
    json data;/**/
  };
  static void to_json(json& j, const TencentQTNotification& v) { 
    j["timestamp"] = v.timestamp;
    j["state"] = v.state;
    j["updatedBy"] = v.updatedBy;
    j["data"] = v.data;
  }
  static void from_json(const json& j, TencentQTNotification& v) { 
    v.timestamp = j.at("timestamp").get<int64_t>(); 
    v.state = j.at("state").get<std::string>(); 
    v.updatedBy = j.at("updatedBy").get<std::string>(); 
    v.data = j.at("data").get<json>(); 
  } 
  struct ThemeVp { /**/ 
    int32_t themeVp;/**/
    int32_t themeId;/**/
  };
  static void to_json(json& j, const ThemeVp& v) { 
    j["themeVp"] = v.themeVp;
    j["themeId"] = v.themeId;
  }
  static void from_json(const json& j, ThemeVp& v) { 
    v.themeVp = j.at("themeVp").get<int32_t>(); 
    v.themeId = j.at("themeId").get<int32_t>(); 
  } 
  struct TickerMessage { /**/ 
    std::string updatedAt;/**/
    std::string createdAt;/**/
    std::string message;/**/
    std::string heading;/**/
    ServiceStatusIncident_Severity severity;/**/
  };
  static void to_json(json& j, const TickerMessage& v) { 
    j["updatedAt"] = v.updatedAt;
    j["createdAt"] = v.createdAt;
    j["message"] = v.message;
    j["heading"] = v.heading;
    j["severity"] = v.severity;
  }
  static void from_json(const json& j, TickerMessage& v) { 
    v.updatedAt = j.at("updatedAt").get<std::string>(); 
    v.createdAt = j.at("createdAt").get<std::string>(); 
    v.message = j.at("message").get<std::string>(); 
    v.heading = j.at("heading").get<std::string>(); 
    v.severity = j.at("severity").get<ServiceStatusIncident_Severity>(); 
  } 
  struct TournamentPhaseDTO { /**/ 
    int64_t registrationTime;/**/
    int64_t startTime;/**/
    int64_t id;/**/
    int32_t period;/**/
    int64_t tournamentId;/**/
  };
  static void to_json(json& j, const TournamentPhaseDTO& v) { 
    j["registrationTime"] = v.registrationTime;
    j["startTime"] = v.startTime;
    j["id"] = v.id;
    j["period"] = v.period;
    j["tournamentId"] = v.tournamentId;
  }
  static void from_json(const json& j, TournamentPhaseDTO& v) { 
    v.registrationTime = j.at("registrationTime").get<int64_t>(); 
    v.startTime = j.at("startTime").get<int64_t>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.period = j.at("period").get<int32_t>(); 
    v.tournamentId = j.at("tournamentId").get<int64_t>(); 
  } 
  struct TournamentDTO { /**/ 
    int64_t scheduleTime;/**/
    int64_t rosterCreateDeadline;/**/
    int32_t themeId;/**/
    std::vector<int32_t> buyInOptions;/**/
    int64_t id;/**/
    int32_t rosterSize;/**/
    int64_t scheduleEndTime;/**/
    std::string nameLocKey;/**/
    int32_t queueId;/**/
    int32_t entryFee;/**/
    std::vector<ClashRewardConfigClient> rewardConfig;/**/
    std::vector<TournamentPhaseDTO> phases;/**/
    int64_t scoutingTimeMs;/**/
    int32_t maxSub;/**/
    int64_t rosterDisbandDeadline;/**/
  };
  static void to_json(json& j, const TournamentDTO& v) { 
    j["scheduleTime"] = v.scheduleTime;
    j["rosterCreateDeadline"] = v.rosterCreateDeadline;
    j["themeId"] = v.themeId;
    j["buyInOptions"] = v.buyInOptions;
    j["id"] = v.id;
    j["rosterSize"] = v.rosterSize;
    j["scheduleEndTime"] = v.scheduleEndTime;
    j["nameLocKey"] = v.nameLocKey;
    j["queueId"] = v.queueId;
    j["entryFee"] = v.entryFee;
    j["rewardConfig"] = v.rewardConfig;
    j["phases"] = v.phases;
    j["scoutingTimeMs"] = v.scoutingTimeMs;
    j["maxSub"] = v.maxSub;
    j["rosterDisbandDeadline"] = v.rosterDisbandDeadline;
  }
  static void from_json(const json& j, TournamentDTO& v) { 
    v.scheduleTime = j.at("scheduleTime").get<int64_t>(); 
    v.rosterCreateDeadline = j.at("rosterCreateDeadline").get<int64_t>(); 
    v.themeId = j.at("themeId").get<int32_t>(); 
    v.buyInOptions = j.at("buyInOptions").get<std::vector<int32_t>>(); 
    v.id = j.at("id").get<int64_t>(); 
    v.rosterSize = j.at("rosterSize").get<int32_t>(); 
    v.scheduleEndTime = j.at("scheduleEndTime").get<int64_t>(); 
    v.nameLocKey = j.at("nameLocKey").get<std::string>(); 
    v.queueId = j.at("queueId").get<int32_t>(); 
    v.entryFee = j.at("entryFee").get<int32_t>(); 
    v.rewardConfig = j.at("rewardConfig").get<std::vector<ClashRewardConfigClient>>(); 
    v.phases = j.at("phases").get<std::vector<TournamentPhaseDTO>>(); 
    v.scoutingTimeMs = j.at("scoutingTimeMs").get<int64_t>(); 
    v.maxSub = j.at("maxSub").get<int32_t>(); 
    v.rosterDisbandDeadline = j.at("rosterDisbandDeadline").get<int64_t>(); 
  } 
  struct TournamentHistoryAndWinnersDTO { /**/ 
    std::string tournamentWinnersCompressed;/**/
    std::vector<TournamentDTO> tournamentHistory;/**/
  };
  static void to_json(json& j, const TournamentHistoryAndWinnersDTO& v) { 
    j["tournamentWinnersCompressed"] = v.tournamentWinnersCompressed;
    j["tournamentHistory"] = v.tournamentHistory;
  }
  static void from_json(const json& j, TournamentHistoryAndWinnersDTO& v) { 
    v.tournamentWinnersCompressed = j.at("tournamentWinnersCompressed").get<std::string>(); 
    v.tournamentHistory = j.at("tournamentHistory").get<std::vector<TournamentDTO>>(); 
  } 
  struct TournamentInfoDTO { /**/ 
    TournamentDTO tournament;/**/
    std::vector<RosterDTO> subRosters;/**/
    int32_t themeVp;/**/
    std::vector<PendingRosterDTO> inviteePendingRosters;/**/
    std::optional<RosterDTO> roster;/**/
    std::optional<PendingRosterDTO> pendingRoster;/**/
  };
  static void to_json(json& j, const TournamentInfoDTO& v) { 
    j["tournament"] = v.tournament;
    j["subRosters"] = v.subRosters;
    j["themeVp"] = v.themeVp;
    j["inviteePendingRosters"] = v.inviteePendingRosters;
    j["roster"] = v.roster;
    j["pendingRoster"] = v.pendingRoster;
  }
  static void from_json(const json& j, TournamentInfoDTO& v) { 
    v.tournament = j.at("tournament").get<TournamentDTO>(); 
    v.subRosters = j.at("subRosters").get<std::vector<RosterDTO>>(); 
    v.themeVp = j.at("themeVp").get<int32_t>(); 
    v.inviteePendingRosters = j.at("inviteePendingRosters").get<std::vector<PendingRosterDTO>>(); 
    v.roster = j.at("roster").get<std::optional<RosterDTO>>(); 
    v.pendingRoster = j.at("pendingRoster").get<std::optional<PendingRosterDTO>>(); 
  } 
  struct TournamentInfoMinimalDTO { /**/ 
    std::vector<TournamentInfoDTO> tournamentInfo;/**/
    int64_t time;/**/
  };
  static void to_json(json& j, const TournamentInfoMinimalDTO& v) { 
    j["tournamentInfo"] = v.tournamentInfo;
    j["time"] = v.time;
  }
  static void from_json(const json& j, TournamentInfoMinimalDTO& v) { 
    v.tournamentInfo = j.at("tournamentInfo").get<std::vector<TournamentInfoDTO>>(); 
    v.time = j.at("time").get<int64_t>(); 
  } 
  struct TournamentPlayerInfoDTO { /**/ 
    int32_t seasonVp;/**/
    std::vector<ThemeVp> themeVps;/**/
    std::vector<TournamentInfoDTO> tournamentInfo;/**/
    std::vector<RosterStatsDTO> rosterStats;/**/
    PlayerDTO player;/**/
    int64_t time;/**/
  };
  static void to_json(json& j, const TournamentPlayerInfoDTO& v) { 
    j["seasonVp"] = v.seasonVp;
    j["themeVps"] = v.themeVps;
    j["tournamentInfo"] = v.tournamentInfo;
    j["rosterStats"] = v.rosterStats;
    j["player"] = v.player;
    j["time"] = v.time;
  }
  static void from_json(const json& j, TournamentPlayerInfoDTO& v) { 
    v.seasonVp = j.at("seasonVp").get<int32_t>(); 
    v.themeVps = j.at("themeVps").get<std::vector<ThemeVp>>(); 
    v.tournamentInfo = j.at("tournamentInfo").get<std::vector<TournamentInfoDTO>>(); 
    v.rosterStats = j.at("rosterStats").get<std::vector<RosterStatsDTO>>(); 
    v.player = j.at("player").get<PlayerDTO>(); 
    v.time = j.at("time").get<int64_t>(); 
  } 
  struct basicOperatingSystemInfo { /*User Experience Settings Operating System Information*/ 
    std::string versionMinor;/**/
    std::string versionMajor;/**/
    std::string platform;/**/
    std::string edition;/**/
  };
  static void to_json(json& j, const basicOperatingSystemInfo& v) { 
    j["versionMinor"] = v.versionMinor;
    j["versionMajor"] = v.versionMajor;
    j["platform"] = v.platform;
    j["edition"] = v.edition;
  }
  static void from_json(const json& j, basicOperatingSystemInfo& v) { 
    v.versionMinor = j.at("versionMinor").get<std::string>(); 
    v.versionMajor = j.at("versionMajor").get<std::string>(); 
    v.platform = j.at("platform").get<std::string>(); 
    v.edition = j.at("edition").get<std::string>(); 
  } 
  struct basicSystemInfo { /*User Experience Settings System Information*/ 
    uint32_t physicalProcessorCores;/**/
    uint32_t processorSpeed;/**/
    uint64_t physicalMemory;/**/
    basicOperatingSystemInfo operatingSystem;/**/
  };
  static void to_json(json& j, const basicSystemInfo& v) { 
    j["physicalProcessorCores"] = v.physicalProcessorCores;
    j["processorSpeed"] = v.processorSpeed;
    j["physicalMemory"] = v.physicalMemory;
    j["operatingSystem"] = v.operatingSystem;
  }
  static void from_json(const json& j, basicSystemInfo& v) { 
    v.physicalProcessorCores = j.at("physicalProcessorCores").get<uint32_t>(); 
    v.processorSpeed = j.at("processorSpeed").get<uint32_t>(); 
    v.physicalMemory = j.at("physicalMemory").get<uint64_t>(); 
    v.operatingSystem = j.at("operatingSystem").get<basicOperatingSystemInfo>(); 
  } 
  struct cookie { /**/ 
    std::string url;/**/
    bool httponly;/**/
    std::string path;/**/
    std::string value;/**/
    std::string domain;/**/
    std::string name;/**/
    std::optional<int64_t> expires;/**/
    bool secure;/**/
  };
  static void to_json(json& j, const cookie& v) { 
    j["url"] = v.url;
    j["httponly"] = v.httponly;
    j["path"] = v.path;
    j["value"] = v.value;
    j["domain"] = v.domain;
    j["name"] = v.name;
    j["expires"] = v.expires;
    j["secure"] = v.secure;
  }
  static void from_json(const json& j, cookie& v) { 
    v.url = j.at("url").get<std::string>(); 
    v.httponly = j.at("httponly").get<bool>(); 
    v.path = j.at("path").get<std::string>(); 
    v.value = j.at("value").get<std::string>(); 
    v.domain = j.at("domain").get<std::string>(); 
    v.name = j.at("name").get<std::string>(); 
    v.expires = j.at("expires").get<std::optional<int64_t>>(); 
    v.secure = j.at("secure").get<bool>(); 
  } 
  struct Client {
    using HttpsClient = SimpleWeb::Client<SimpleWeb::HTTPS>;
    using HttpsResponse = std::shared_ptr<HttpsClient::Response>;
    using HttpsArgs = std::multimap<std::string, std::optional<std::string>>;
    using HttpsError = LolLobbyAmbassadorMessage;
    
    std::string _host_;
    std::string _auth_;
    
    Client(const std::string& address, int port, const std::string& password) :
      _host_(address + ":" + std::to_string(port)),
      _auth_("Basic " + SimpleWeb::Crypto::Base64::encode("riot:" + password))
    { }
    
    template<typename T>
    class HttpsResult {
    private:
      std::optional<HttpsError> mError;
      T mData;
    public:
      HttpsResult(const HttpsResponse& r) {
        std::string content_type;
        if(auto it = r->header.find("content-type"); it != r->header.end())
          content_type = it->second;
        const std::string& data = r->content.string();
        const std::string& status_code = r->status_code;
        if(status_code != "200" && content_type == "application/json")
          mError = json::parse(data).get<HttpsError>();
        else if(status_code != "200")
          mError = HttpsError {data, content_type, status_code};
        else
          mData = json::parse(data).get<T>();
      }
      const std::optional<HttpsError>& error() const {
        return mError;
      }
      T* operator->() {
        return &mData;
      }
      const T& operator*() const {
        return mData;
      }
      T& operator*() {
        return mData;
      }
      explicit operator bool() const {
        return mError != std::nullopt;
      }
      bool operator!() const {
        return mError == std::nullopt;
      }
    };
    
    template<>
    class HttpsResult<json> {
    private:
      std::optional<HttpsError> mError;
      json mData;
    public:
      HttpsResult(const HttpsResponse& r) {
        std::string content_type;
        if(auto it = r->header.find("content-type"); it != r->header.end())
          content_type = it->second;
        const std::string& data = r->content.string();
        const std::string& status_code = r->status_code;
        if(status_code != "200" && content_type == "application/json")
          mError = json::parse(data).get<HttpsError>();
        else if(status_code != "200")
          mError = HttpsError {data, content_type, status_code};
        else if(content_type == "application/json")
          mData = json::parse(data);
        else
          mData = data;
      }
      const std::optional<HttpsError>& error() const {
        return mError;
      }
      json* operator->() {
        return &mData;
      }
      const json& operator*() const {
        return mData;
      }
      json& operator*() {
        return mData;
      }
      explicit operator bool() const {
        return mError != std::nullopt;
      }
      bool operator!() const {
        return mError == std::nullopt;
      }
    };
    
    template<>
    class HttpsResult<void> {
    private:
      std::optional<HttpsError> mError;
      json mData;
    public:
      HttpsResult(const HttpsResponse& r) {
        std::string content_type;
        if(auto it = r->header.find("content-type"); it != r->header.end())
          content_type = it->second;
        const std::string& data = r->content.string();
        const std::string& status_code = r->status_code;
        if(status_code != "204" && content_type == "application/json")
          mError = json::parse(data).get<HttpsError>();
        else if(status_code != "204")
          mError = HttpsError {data, content_type, status_code};
      }
      const std::optional<HttpsError>& error() const {
        return mError;
      }
      explicit operator bool() const {
        return mError != std::nullopt;
      }
      bool operator!() const {
        return mError == std::nullopt;
      }
    };
    
    HttpsResponse Do(const std::string& path, const std::string& method, const HttpsArgs& query,const HttpsArgs& headers) {
      HttpsClient client(_host_, false);
      return client.request(method, path + Args2String(query), "", Args2Headers(headers, {{"Authorization", _auth_}}));
    }

    HttpsResponse Do(const std::string& path, const std::string& method, const HttpsArgs& query, const HttpsArgs& headers, const json& body) {
      HttpsClient client(_host_, false);
      return client.request(method, path + Args2String(query), body.dump(), Args2Headers(headers, {
        {"Authorization", _auth_}, {"content-type", "application/json"}
      }));
    }

    HttpsResponse Do(const std::string& path, const std::string& method, const HttpsArgs& query, const HttpsArgs& headers, const HttpsArgs& formdata, bool) {
      HttpsClient client(_host_, false);
      return client.request(method, path + Args2String(query), Args2String(formdata), Args2Headers(headers, { 
        {"Authorization", _auth_}, {"content-type", "application/x-www-form-urlencoded"} }));
    }
  private:
    static inline SimpleWeb::CaseInsensitiveMultimap Args2Headers(const HttpsArgs& args, SimpleWeb::CaseInsensitiveMultimap&& map = {}) {
      for(const auto& it: args)
        if(it.second)
          map.insert({it.first, *(it.second)});
      return map;
    }
    
    static inline std::string Args2String(const HttpsArgs& args) {
      return SimpleWeb::QueryString::create(Args2Headers(args));
    }
  public:
  
    /*Cancels the asynchronous operation or removes its completion status.*/
    HttpsResult<json> AsyncDelete (const uint32_t& asyncToken /*ID of the asynchronous operation to remove*/)
    {
      return Do("/AsyncDelete?", "post", { 
        { "asyncToken", as_string(asyncToken) },
      }, { 
      });
    } 
    /*Retrieves the result of a completed asynchronous operation.*/
    HttpsResult<json> AsyncResult (const uint32_t& asyncToken /*ID of the asynchronous operation to check*/)
    {
      return Do("/AsyncResult?", "post", { 
        { "asyncToken", as_string(asyncToken) },
      }, { 
      });
    } 
    /*Retrieves details on the current state of an asynchronous operation.*/
    HttpsResult<json> AsyncStatus (const uint32_t& asyncToken /*ID of the asynchronous operation to check*/)
    {
      return Do("/AsyncStatus?", "post", { 
        { "asyncToken", as_string(asyncToken) },
      }, { 
      });
    } 
    /*Attempts to cancel an asynchronous operation*/
    HttpsResult<json> Cancel (const uint32_t& asyncToken /*Operation to cancel*/)
    {
      return Do("/Cancel?", "post", { 
        { "asyncToken", as_string(asyncToken) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1BlockedPlayersById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/blocked-players/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1ConversationsActive ()
    {
      return Do("/lol-chat/v1/conversations/active?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1ConversationsById (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1ConversationsByIdMessages (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/messages?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1ErrorsById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/errors/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1FriendGroupsById (const uint32_t& id /**/)
    {
      return Do("/lol-chat/v1/friend-groups/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1FriendRequestsById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/friend-requests/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1FriendsById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/friends/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1Session ()
    {
      return Do("/lol-chat/v1/session?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolChatV1SettingsByKey (const std::string& key /**/,
      const std::optional<bool>& doAsync = std::nullopt /**/)
    {
      return Do("/lol-chat/v1/settings/"+as_string(key)+"?", "delete", { 
        { "doAsync", as_string(doAsync) },
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerClubMembership> DeleteLolClubsV1ClubsByClubKey (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> DeleteLolClubsV1ClubsByClubKeyInvitationsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/invitations/"+as_string(summonerId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> DeleteLolClubsV1ClubsByClubKeyMembersBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/members/"+as_string(summonerId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> DeleteLolClubsV1ClubsByClubKeyNominationsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/nominations/"+as_string(summonerId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> DeleteLolClubsV1ClubsByClubKeyPromotionsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/promotions/"+as_string(summonerId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolCollectionsV1InventoriesBySummonerIdMasteryBookPagesByPageId (const uint64_t& summonerId /**/,
      const uint32_t& pageId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/mastery-book/pages/"+as_string(pageId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolGameClientChatV1IgnoredSummoners (const std::string& summonerName /**/)
    {
      return Do("/lol-game-client-chat/v1/ignored-summoners?", "delete", { 
        { "summonerName", as_string(summonerName) },
      }, { 
      });
    } 
    /**/
    HttpsResult<Highlight> DeleteLolHighlightsV1HighlightsById (const uint64_t& id /**/)
    {
      return Do("/lol-highlights/v1/highlights/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLeaverBusterV1NotificationsById (const uint32_t& id /**/)
    {
      return Do("/lol-leaver-buster/v1/notifications/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLoadoutsV2ItemsById (const uint32_t& id /**/,
      const std::string& inventoryType /**/)
    {
      return Do("/lol-loadouts/v2/items/"+as_string(id)+"?", "delete", { 
        { "inventoryType", as_string(inventoryType) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolLobbyTeamBuilderV1Lobby ()
    {
      return Do("/lol-lobby-team-builder/v1/lobby?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyTeamBuilderV1MatchmakingSearch ()
    {
      return Do("/lol-lobby-team-builder/v1/matchmaking/search?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyV1Lobby ()
    {
      return Do("/lol-lobby/v1/lobby?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyV1LobbyCustomBotsBySummonerInternalName (const std::string& summonerInternalName /**/)
    {
      return Do("/lol-lobby/v1/lobby/custom/bots/"+as_string(summonerInternalName)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyV1ReceivedInvitationsById (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/received-invitations/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolLobbyV2Lobby ()
    {
      return Do("/lol-lobby/v2/lobby?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyV2LobbyMatchmakingSearch ()
    {
      return Do("/lol-lobby/v2/lobby/matchmaking/search?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLobbyV2NotificationsByNotificationId (const std::string& notificationId /**/)
    {
      return Do("/lol-lobby/v2/notifications/"+as_string(notificationId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName (const std::string& serviceName /**/,
      const std::string& methodName /**/,
      const uint32_t& pluginId /**/)
    {
      return Do("/lol-login/v1/service-proxy-async-requests/"+as_string(serviceName)+"/"+as_string(methodName)+"?", "delete", { 
        { "pluginId", as_string(pluginId) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolLoginV1Session ()
    {
      return Do("/lol-login/v1/session?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolLoginV1ShutdownLocksByLockName (const std::string& lockName /**/)
    {
      return Do("/lol-login/v1/shutdown-locks/"+as_string(lockName)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLootV1LootGrantsById (const int64_t& id /**/)
    {
      return Do("/lol-loot/v1/loot-grants/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolLootV1PlayerLootByLootIdNewNotification (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/player-loot/"+as_string(lootId)+"/new-notification?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolMatchmakingV1Search ()
    {
      return Do("/lol-matchmaking/v1/search?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolPerksV1Pages ()
    {
      return Do("/lol-perks/v1/pages?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolPerksV1PagesById (const int32_t& id /**/)
    {
      return Do("/lol-perks/v1/pages/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorReporterFeedback> DeleteLolPlayerBehaviorV1ReporterFeedbackById (const std::string& id /**/)
    {
      return Do("/lol-player-behavior/v1/reporter-feedback/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolPlayerMessagingV1CelebrationNotificationByIdAcknowledge (const uint32_t& id /**/)
    {
      return Do("/lol-player-messaging/v1/celebration/notification/"+as_string(id)+"/acknowledge?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolPlayerMessagingV1NotificationByIdAcknowledge (const uint32_t& id /**/)
    {
      return Do("/lol-player-messaging/v1/notification/"+as_string(id)+"/acknowledge?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteLolPreEndOfGameV1RegistrationBySequenceEventName (const std::string& sequenceEventName /**/)
    {
      return Do("/lol-pre-end-of-game/v1/registration/"+as_string(sequenceEventName)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolSimpleDialogMessagesV1MessagesByMessageId (const int64_t& messageId /**/)
    {
      return Do("/lol-simple-dialog-messages/v1/messages/"+as_string(messageId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolStoreV1OrderNotificationsById (const uint64_t& id /**/)
    {
      return Do("/lol-store/v1/order-notifications/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteLolSuggestedPlayersV1SuggestedPlayersBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-suggested-players/v1/suggested-players/"+as_string(summonerId)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeletePatcherV1NotificationsById (const std::string& id /**/)
    {
      return Do("/patcher/v1/notifications/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeletePatcherV1ProductsByProductId (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeletePatcherV1ProductsByProductIdByComponentIdHttpHeaders (const std::string& product_id /**/,
      const std::string& component_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/"+as_string(component_id)+"/http-headers?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeletePlayerNotificationsV1NotificationsById (const uint64_t& id /**/)
    {
      return Do("/player-notifications/v1/notifications/"+as_string(id)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> DeleteRecofrienderV1RegistrationsByNetwork (const std::string& network /**/)
    {
      return Do("/recofriender/v1/registrations/"+as_string(network)+"?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRecofrienderV2Contacts ()
    {
      return Do("/recofriender/v2/contacts?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRecofrienderV2Dismissed ()
    {
      return Do("/recofriender/v2/dismissed?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRiotMessagingServiceV1Connect ()
    {
      return Do("/riot-messaging-service/v1/connect?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRiotMessagingServiceV1Session ()
    {
      return Do("/riot-messaging-service/v1/session?", "delete", { 
      }, { 
      });
    } 
    /*Deletes the current runtime affinity of the application.*/
    HttpsResult<void> DeleteRiotclientAffinity ()
    {
      return Do("/riotclient/affinity?", "delete", { 
      }, { 
      });
    } 
    /*Hide the splash screen.*/
    HttpsResult<void> DeleteRiotclientSplash ()
    {
      return Do("/riotclient/splash?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRsoAuthV1Authorization ()
    {
      return Do("/rso-auth/v1/authorization?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRsoAuthV1Config ()
    {
      return Do("/rso-auth/v1/config?", "delete", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> DeleteRsoAuthV2Config ()
    {
      return Do("/rso-auth/v2/config?", "delete", { 
      }, { 
      });
    } 
    /*Closes the connection.*/
    HttpsResult<json> Exit ()
    {
      return Do("/Exit?", "post", { 
      }, { 
      });
    } 
    /*Download a backend asset*/
    HttpsResult<json> GetByPluginAssetsByPath (const std::string& plugin /*Plugin name to serve from*/,
      const std::string& path /*Path to the asset to serve*/,
      const std::optional<std::string>& if_none_match = std::nullopt /*optional ETag of the asset that the caller has cached*/)
    {
      return Do("/"+as_string(plugin)+"/assets/"+as_string(path)+"?", "get", { 
      }, { 
        { "if-none-match", as_string(if_none_match) },
      });
    } 
    /*Get all cookies.*/
    HttpsResult<std::vector<cookie>> GetCookieJarV1Cookies ()
    {
      return Do("/cookie-jar/v1/cookies?", "get", { 
      }, { 
      });
    } 
    /*Gets the current install directory (used internally.)*/
    HttpsResult<std::string> GetDataStoreV1InstallDir ()
    {
      return Do("/data-store/v1/install-dir?", "get", { 
      }, { 
      });
    } 
    /*Get the data for the specified key from the install settings.*/
    HttpsResult<json> GetDataStoreV1InstallSettingsByPath (const std::string& path /*The path to the settings key*/)
    {
      return Do("/data-store/v1/install-settings/"+as_string(path)+"?", "get", { 
      }, { 
      });
    } 
    /*Get the setting for the specified key.*/
    HttpsResult<json> GetDataStoreV1SystemSettingsByPath (const std::string& path /*The path to the settings key*/)
    {
      return Do("/data-store/v1/system-settings/"+as_string(path)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<EntitlementsToken> GetEntitlementsV1Token ()
    {
      return Do("/entitlements/v1/token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolAccountVerificationDeviceResponse> GetLolAccountVerificationV1Device ()
    {
      return Do("/lol-account-verification/v1/device?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolAccountVerificationIsVerifiedResponse> GetLolAccountVerificationV1IsVerified ()
    {
      return Do("/lol-account-verification/v1/is-verified?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolAcsV1Delta ()
    {
      return Do("/lol-acs/v1/delta?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolAcsV1GamesByGameId (const uint64_t& gameId /**/)
    {
      return Do("/lol-acs/v1/games/"+as_string(gameId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolAcsV1GametimelinesByGameId (const uint64_t& gameId /**/)
    {
      return Do("/lol-acs/v1/gametimelines/"+as_string(gameId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolAcsV1MatchlistsByAccountId (const uint64_t& accountId /**/)
    {
      return Do("/lol-acs/v1/matchlists/"+as_string(accountId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolAcsAcsChampionGamesCollection> GetLolAcsV1RecentlyPlayedChampionsByAccountId (const uint64_t& accountId /**/,
      const bool& force /**/)
    {
      return Do("/lol-acs/v1/recently-played-champions/"+as_string(accountId)+"?", "get", { 
        { "force", as_string(force) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolAcsAcsChampionGamesCollection> GetLolAcsV2RecentlyPlayedChampionsByAccountId (const uint64_t& accountId /**/)
    {
      return Do("/lol-acs/v2/recently-played-champions/"+as_string(accountId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> GetLolAcsV2RequestRecentlyPlayedChampionsByAccountId (const uint64_t& accountId /**/,
      const bool& force /**/)
    {
      return Do("/lol-acs/v2/request-recently-played-champions/"+as_string(accountId)+"?", "get", { 
        { "force", as_string(force) },
      }, { 
      });
    } 
    /**/
    HttpsResult<ActiveBoosts> GetLolActiveBoostsV1ActiveBoosts ()
    {
      return Do("/lol-active-boosts/v1/active-boosts?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolBannersBannerFlag>> GetLolBannersV1CurrentSummonerFlags ()
    {
      return Do("/lol-banners/v1/current-summoner/flags?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolBannersBannerFlag> GetLolBannersV1CurrentSummonerFlagsEquipped ()
    {
      return Do("/lol-banners/v1/current-summoner/flags/equipped?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolBetaOptInV1MigrationError ()
    {
      return Do("/lol-beta-opt-in/v1/migration-error?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolBetaOptInV1NeedsMigration ()
    {
      return Do("/lol-beta-opt-in/v1/needs-migration?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectBannableChampions> GetLolChampSelectLegacyV1BannableChampions ()
    {
      return Do("/lol-champ-select-legacy/v1/bannable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolChampSelectLegacyV1ImplementationActive ()
    {
      return Do("/lol-champ-select-legacy/v1/implementation-active?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectPickableChampions> GetLolChampSelectLegacyV1PickableChampions ()
    {
      return Do("/lol-champ-select-legacy/v1/pickable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectSession> GetLolChampSelectLegacyV1Session ()
    {
      return Do("/lol-champ-select-legacy/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectTimer> GetLolChampSelectLegacyV1SessionTimer ()
    {
      return Do("/lol-champ-select-legacy/v1/session/timer?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampSelectLegacyChampSelectTradeContract>> GetLolChampSelectLegacyV1SessionTrades ()
    {
      return Do("/lol-champ-select-legacy/v1/session/trades?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectTradeContract> GetLolChampSelectLegacyV1SessionTradesById (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/trades/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyTeamBoost> GetLolChampSelectLegacyV1TeamBoost ()
    {
      return Do("/lol-champ-select-legacy/v1/team-boost?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectBannableChampions> GetLolChampSelectV1BannableChampions ()
    {
      return Do("/lol-champ-select/v1/bannable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectDisabledChampions> GetLolChampSelectV1DisabledChampions ()
    {
      return Do("/lol-champ-select/v1/disabled-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectPickableChampions> GetLolChampSelectV1PickableChampions ()
    {
      return Do("/lol-champ-select/v1/pickable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectPickableSkins> GetLolChampSelectV1PickableSkins ()
    {
      return Do("/lol-champ-select/v1/pickable-skins?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectSession> GetLolChampSelectV1Session ()
    {
      return Do("/lol-champ-select/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectTimer> GetLolChampSelectV1SessionTimer ()
    {
      return Do("/lol-champ-select/v1/session/timer?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampSelectChampSelectTradeContract>> GetLolChampSelectV1SessionTrades ()
    {
      return Do("/lol-champ-select/v1/session/trades?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectTradeContract> GetLolChampSelectV1SessionTradesById (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/trades/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectTeamBoost> GetLolChampSelectV1TeamBoost ()
    {
      return Do("/lol-champ-select/v1/team-boost?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampionsCollectionsChampion>> GetLolChampionsV1InventoriesBySummonerIdChampions (const uint64_t& summonerId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampionsCollectionsChampion> GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionId (const uint64_t& summonerId /**/,
      const int32_t& championId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions/"+as_string(championId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampionsCollectionsChampionSkin>> GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkins (const uint64_t& summonerId /**/,
      const int32_t& championId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions/"+as_string(championId)+"/skins?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampionsCollectionsChampionSkin> GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsByChampionSkinId (const uint64_t& summonerId /**/,
      const int32_t& championId /**/,
      const int32_t& championSkinId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions/"+as_string(championId)+"/skins/"+as_string(championSkinId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampionsCollectionsChampionChroma>> GetLolChampionsV1InventoriesBySummonerIdChampionsByChampionIdSkinsBySkinIdChromas (const uint64_t& summonerId /**/,
      const int32_t& championId /**/,
      const int32_t& skinId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions/"+as_string(championId)+"/skins/"+as_string(skinId)+"/chromas?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampionsCollectionsChampionMinimal>> GetLolChampionsV1InventoriesBySummonerIdChampionsMinimal (const uint64_t& summonerId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions-minimal?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampionsCollectionsChampionPlayableCounts> GetLolChampionsV1InventoriesBySummonerIdChampionsPlayableCount (const uint64_t& summonerId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/champions-playable-count?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChampionsCollectionsChampionSkinMinimal>> GetLolChampionsV1InventoriesBySummonerIdSkinsMinimal (const uint64_t& summonerId /**/)
    {
      return Do("/lol-champions/v1/inventories/"+as_string(summonerId)+"/skins-minimal?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatBlockedPlayerResource>> GetLolChatV1BlockedPlayers ()
    {
      return Do("/lol-chat/v1/blocked-players?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatBlockedPlayerResource> GetLolChatV1BlockedPlayersById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/blocked-players/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatChatServiceDynamicClientConfig> GetLolChatV1Config ()
    {
      return Do("/lol-chat/v1/config?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatConversationResource>> GetLolChatV1Conversations ()
    {
      return Do("/lol-chat/v1/conversations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatActiveConversationResource> GetLolChatV1ConversationsActive ()
    {
      return Do("/lol-chat/v1/conversations/active?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatConversationResource> GetLolChatV1ConversationsById (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatConversationMessageResource>> GetLolChatV1ConversationsByIdMessages (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/messages?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatUserResource>> GetLolChatV1ConversationsByIdParticipants (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/participants?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolChatV1ConversationsNotify ()
    {
      return Do("/lol-chat/v1/conversations/notify?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatErrorResource>> GetLolChatV1Errors ()
    {
      return Do("/lol-chat/v1/errors?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatGroupResource>> GetLolChatV1FriendGroups ()
    {
      return Do("/lol-chat/v1/friend-groups?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatGroupResource> GetLolChatV1FriendGroupsById (const uint32_t& id /**/)
    {
      return Do("/lol-chat/v1/friend-groups/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatFriendResource>> GetLolChatV1FriendGroupsByIdFriends (const uint32_t& id /**/)
    {
      return Do("/lol-chat/v1/friend-groups/"+as_string(id)+"/friends?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatFriendRequestResource>> GetLolChatV1FriendRequests ()
    {
      return Do("/lol-chat/v1/friend-requests?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolChatFriendResource>> GetLolChatV1Friends ()
    {
      return Do("/lol-chat/v1/friends?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatFriendResource> GetLolChatV1FriendsById (const uint64_t& id /**/)
    {
      return Do("/lol-chat/v1/friends/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatUserResource> GetLolChatV1Me ()
    {
      return Do("/lol-chat/v1/me?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatSessionResource> GetLolChatV1Session ()
    {
      return Do("/lol-chat/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolChatV1Settings ()
    {
      return Do("/lol-chat/v1/settings?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolChatV1SettingsByKey (const std::string& key /**/)
    {
      return Do("/lol-chat/v1/settings/"+as_string(key)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolClashV1CheckinAllowed ()
    {
      return Do("/lol-clash/v1/checkin-allowed?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolClashV1Enabled ()
    {
      return Do("/lol-clash/v1/enabled?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashEogPlayerUpdateDTO> GetLolClashV1EogPlayerUpdate ()
    {
      return Do("/lol-clash/v1/eogPlayerUpdate?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClashEventData> GetLolClashV1EventByUuid (const std::string& uuid /**/)
    {
      return Do("/lol-clash/v1/event/"+as_string(uuid)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashTournamentGameEnd> GetLolClashV1GameEnd ()
    {
      return Do("/lol-clash/v1/gameEnd?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashTournamentHistoryAndWinners> GetLolClashV1Historyandwinners ()
    {
      return Do("/lol-clash/v1/historyandwinners?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolClashV1Iconconfig ()
    {
      return Do("/lol-clash/v1/iconconfig?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashRoster>> GetLolClashV1Invitations ()
    {
      return Do("/lol-clash/v1/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashPlayerNotificationData> GetLolClashV1Notifications ()
    {
      return Do("/lol-clash/v1/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolClashV1Ping ()
    {
      return Do("/lol-clash/v1/ping?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashPlayerData> GetLolClashV1Player ()
    {
      return Do("/lol-clash/v1/player?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashPlayerChatRoster>> GetLolClashV1PlayerChatRosters ()
    {
      return Do("/lol-clash/v1/player/chat-rosters?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashRosterStats>> GetLolClashV1PlayerHistory ()
    {
      return Do("/lol-clash/v1/player/history?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolClashV1PlaymodeRestricted ()
    {
      return Do("/lol-clash/v1/playmode-restricted?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolClashV1Ready ()
    {
      return Do("/lol-clash/v1/ready?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashPlayerRewards> GetLolClashV1Rewards ()
    {
      return Do("/lol-clash/v1/rewards?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashRosterStats> GetLolClashV1RosterByRosterIdStats (const int64_t& rosterId /**/)
    {
      return Do("/lol-clash/v1/roster/"+as_string(rosterId)+"/stats?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashRankedScoutingMember>> GetLolClashV1ScoutingRanked (const std::vector<uint64_t>& summonerIds /**/)
    {
      return Do("/lol-clash/v1/scouting/ranked?", "get", { 
        { "summonerIds", as_string(summonerIds) },
      }, { 
      });
    } 
    /**/
    HttpsResult<int64_t> GetLolClashV1Time ()
    {
      return Do("/lol-clash/v1/time?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashTournament> GetLolClashV1TournamentByTournamentId (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashBracket> GetLolClashV1TournamentByTournamentIdBracketByBracketId (const int64_t& tournamentId /**/,
      const int64_t& bracketId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/bracket/"+as_string(bracketId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashRoster>> GetLolClashV1TournamentByTournamentIdInvitations (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashPlayerTournamentData> GetLolClashV1TournamentByTournamentIdPlayer (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/player?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashRoster> GetLolClashV1TournamentByTournamentIdRosterByRosterId (const int64_t& tournamentId /**/,
      const std::string& rosterId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/"+as_string(rosterId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashTournamentStateInfo> GetLolClashV1TournamentByTournamentIdStateInfo (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/stateInfo?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashTournamentWinnerHistory> GetLolClashV1TournamentByTournamentIdWinners (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/winners?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<int64_t>> GetLolClashV1TournamentIds ()
    {
      return Do("/lol-clash/v1/tournamentIds?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashTournamentStateInfo>> GetLolClashV1TournamentStateInfo ()
    {
      return Do("/lol-clash/v1/tournament-state-info?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClashTournamentSummary>> GetLolClashV1TournamentSummary ()
    {
      return Do("/lol-clash/v1/tournament-summary?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolClashV1Visible ()
    {
      return Do("/lol-clash/v1/visible?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClashPlaymodeRestrictedInfo> GetLolClashV2PlaymodeRestricted ()
    {
      return Do("/lol-clash/v2/playmode-restricted?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolClubsPublicClubsPublicData>> GetLolClubsPublicV1ClubsPublic (const std::string& summonerNames /**/)
    {
      return Do("/lol-clubs-public/v1/clubs/public?", "get", { 
        { "summonerNames", as_string(summonerNames) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClubsPublicClubsPublicData> GetLolClubsPublicV1ClubsPublicBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs-public/v1/clubs/public/"+as_string(summonerId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolClubsPublicClubTag> GetLolClubsPublicV1ClubsPublicBySummonerIdTag (const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs-public/v1/clubs/public/"+as_string(summonerId)+"/tag?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<PlayerClub>> GetLolClubsV1Clubs ()
    {
      return Do("/lol-clubs/v1/clubs?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerClub> GetLolClubsV1ClubsByClubKey (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<ClubMember>> GetLolClubsV1ClubsByClubKeyInvitations (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<ClubMember>> GetLolClubsV1ClubsByClubKeyMembers (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/members?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolClubsV1ClubsByClubKeyMotd (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/motd?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<ClubMember>> GetLolClubsV1ClubsByClubKeyNominations (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/nominations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<ClubInvite>> GetLolClubsV1ClubsInvitations ()
    {
      return Do("/lol-clubs/v1/clubs/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerClubMembership> GetLolClubsV1ClubsMembership ()
    {
      return Do("/lol-clubs/v1/clubs/membership?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubPreferences> GetLolClubsV1ClubsMembershipPreferences ()
    {
      return Do("/lol-clubs/v1/clubs/membership/preferences?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsSummonerBackdrop> GetLolCollectionsV1InventoriesBySummonerIdBackdrop (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/backdrop?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolCollectionsCollectionsChampionMastery>> GetLolCollectionsV1InventoriesBySummonerIdChampionMastery (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/champion-mastery?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsTopChampionMasteries> GetLolCollectionsV1InventoriesBySummonerIdChampionMasteryTop (const uint64_t& summonerId /**/,
      const uint64_t& limit /**/,
      const std::optional<std::string>& sortRule = std::nullopt /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/champion-mastery/top?", "get", { 
        { "limit", as_string(limit) },
        { "sortRule", as_string(sortRule) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsMasteryBook> GetLolCollectionsV1InventoriesBySummonerIdMasteryBook (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/mastery-book?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsRuneBook> GetLolCollectionsV1InventoriesBySummonerIdRuneBook (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/rune-book?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsRuneQuantities> GetLolCollectionsV1InventoriesBySummonerIdRunes (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/runes?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsSummonerSpells> GetLolCollectionsV1InventoriesBySummonerIdSpells (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/spells?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsSummonerIcons> GetLolCollectionsV1InventoriesBySummonerIdSummonerIcons (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/summoner-icons?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolCollectionsV1InventoriesBySummonerIdVerification (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/verification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolCollectionsCollectionsWardSkin>> GetLolCollectionsV1InventoriesBySummonerIdWardSkins (const uint64_t& summonerId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/ward-skins?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsWardSkin> GetLolCollectionsV1InventoriesBySummonerIdWardSkinsByWardSkinId (const uint64_t& summonerId /**/,
      const int64_t& wardSkinId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/ward-skins/"+as_string(wardSkinId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsChestEligibility> GetLolCollectionsV1InventoriesChestEligibility ()
    {
      return Do("/lol-collections/v1/inventories/chest-eligibility?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsSummonerIcon> GetLolCollectionsV2InventoriesBySummonerIdSummonerIconsBySummonerIconId (const uint64_t& summonerId /**/,
      const int32_t& summonerIconId /**/)
    {
      return Do("/lol-collections/v2/inventories/"+as_string(summonerId)+"/summoner-icons/"+as_string(summonerIconId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolEmailVerificationEmailVerificationSession> GetLolEmailVerificationV1Email ()
    {
      return Do("/lol-email-verification/v1/email?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolEndOfGameChampionMasteryUpdate> GetLolEndOfGameV1ChampionMasteryUpdates ()
    {
      return Do("/lol-end-of-game/v1/champion-mastery-updates?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolEndOfGameEndOfGameStats> GetLolEndOfGameV1EogStatsBlock ()
    {
      return Do("/lol-end-of-game/v1/eog-stats-block?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<uint64_t>> GetLolEndOfGameV1ReportedPlayers ()
    {
      return Do("/lol-end-of-game/v1/reported-players?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolEsportStreamNotificationsESportsLiveStreams> GetLolEsportStreamNotificationsV1LiveStreams ()
    {
      return Do("/lol-esport-stream-notifications/v1/live-streams?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolEsportStreamNotificationsV1StreamUrl ()
    {
      return Do("/lol-esport-stream-notifications/v1/stream-url?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<std::string>> GetLolGameClientChatV1Buddies ()
    {
      return Do("/lol-game-client-chat/v1/buddies?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<std::string>> GetLolGameClientChatV1IgnoredSummoners ()
    {
      return Do("/lol-game-client-chat/v1/ignored-summoners?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueueCustomGame> GetLolGameQueuesV1Custom ()
    {
      return Do("/lol-game-queues/v1/custom?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueueCustomGame> GetLolGameQueuesV1CustomNonDefault ()
    {
      return Do("/lol-game-queues/v1/custom-non-default?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueueGameTypeConfig> GetLolGameQueuesV1GameTypeConfigByGameTypeConfigId (const uint32_t& gameTypeConfigId /**/)
    {
      return Do("/lol-game-queues/v1/game-type-config/"+as_string(gameTypeConfigId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueueGameTypeConfig> GetLolGameQueuesV1GameTypeConfigByGameTypeConfigIdMapByMapId (const uint32_t& gameTypeConfigId /**/,
      const int32_t& mapId /**/)
    {
      return Do("/lol-game-queues/v1/game-type-config/"+as_string(gameTypeConfigId)+"/map/"+as_string(mapId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolGameQueuesQueue>> GetLolGameQueuesV1Queues ()
    {
      return Do("/lol-game-queues/v1/queues?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueue> GetLolGameQueuesV1QueuesById (const int32_t& id /**/)
    {
      return Do("/lol-game-queues/v1/queues/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameQueuesQueue> GetLolGameQueuesV1QueuesTypeByQueueType (const std::string& queueType /**/)
    {
      return Do("/lol-game-queues/v1/queues/type/"+as_string(queueType)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameSettingsV1Didreset ()
    {
      return Do("/lol-game-settings/v1/didreset?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolGameSettingsV1GameSettings ()
    {
      return Do("/lol-game-settings/v1/game-settings?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolGameSettingsV1GameSettingsSchema ()
    {
      return Do("/lol-game-settings/v1/game-settings-schema?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolGameSettingsV1InputSettings ()
    {
      return Do("/lol-game-settings/v1/input-settings?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolGameSettingsV1InputSettingsSchema ()
    {
      return Do("/lol-game-settings/v1/input-settings-schema?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameSettingsV1Ready ()
    {
      return Do("/lol-game-settings/v1/ready?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameflowV1ActivePatcherLock ()
    {
      return Do("/lol-gameflow/v1/active-patcher-lock?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameflowGameflowAvailability> GetLolGameflowV1Availability ()
    {
      return Do("/lol-gameflow/v1/availability?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameflowV1BasicTutorial ()
    {
      return Do("/lol-gameflow/v1/basic-tutorial?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameflowV1BattleTraining ()
    {
      return Do("/lol-gameflow/v1/battle-training?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<std::string>> GetLolGameflowV1ExtraGameClientArgs ()
    {
      return Do("/lol-gameflow/v1/extra-game-client-args?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameflowPlayerStatus> GetLolGameflowV1GameflowMetadataPlayerStatus ()
    {
      return Do("/lol-gameflow/v1/gameflow-metadata/player-status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameflowGameflowSession> GetLolGameflowV1Session ()
    {
      return Do("/lol-gameflow/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolGameflowV1Spectate ()
    {
      return Do("/lol-gameflow/v1/spectate?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> GetLolGameflowV1SpectateDelayedLaunch ()
    {
      return Do("/lol-gameflow/v1/spectate/delayed-launch?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGameflowGameflowWatchPhase> GetLolGameflowV1Watch ()
    {
      return Do("/lol-gameflow/v1/watch?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGeoinfoGeoInfo> GetLolGeoinfoV1Getlocation (const std::string& ip_address /**/)
    {
      return Do("/lol-geoinfo/v1/getlocation?", "get", { 
        { "ip_address", as_string(ip_address) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolGeoinfoGeoInfoResponse> GetLolGeoinfoV1Whereami ()
    {
      return Do("/lol-geoinfo/v1/whereami?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<HighlightsConfig> GetLolHighlightsV1Config ()
    {
      return Do("/lol-highlights/v1/config?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<Highlight>> GetLolHighlightsV1Highlights ()
    {
      return Do("/lol-highlights/v1/highlights?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<Highlight> GetLolHighlightsV1HighlightsById (const uint64_t& id /**/)
    {
      return Do("/lol-highlights/v1/highlights/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolHighlightsV1HighlightsFolderPath ()
    {
      return Do("/lol-highlights/v1/highlights-folder-path?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolHighlightsV1HighlightsFolderPathDefault ()
    {
      return Do("/lol-highlights/v1/highlights-folder-path/default?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2Ballot> GetLolHonorV2V1Ballot ()
    {
      return Do("/lol-honor-v2/v1/ballot?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2HonorConfig> GetLolHonorV2V1Config ()
    {
      return Do("/lol-honor-v2/v1/config?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2FullTeamVote> GetLolHonorV2V1FullTeamVote ()
    {
      return Do("/lol-honor-v2/v1/full-team-vote?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolHonorV2Honor>> GetLolHonorV2V1LateRecognition ()
    {
      return Do("/lol-honor-v2/v1/late-recognition?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<uint64_t> GetLolHonorV2V1LatestEligibleGame ()
    {
      return Do("/lol-honor-v2/v1/latest-eligible-game?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2VendedHonorChange> GetLolHonorV2V1LevelChange ()
    {
      return Do("/lol-honor-v2/v1/level-change?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2ProfileInfo> GetLolHonorV2V1Profile ()
    {
      return Do("/lol-honor-v2/v1/profile?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolHonorV2Honor>> GetLolHonorV2V1Recognition ()
    {
      return Do("/lol-honor-v2/v1/recognition?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2Reward> GetLolHonorV2V1RewardGranted ()
    {
      return Do("/lol-honor-v2/v1/reward-granted?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<uint64_t>> GetLolHonorV2V1TeamChoices ()
    {
      return Do("/lol-honor-v2/v1/team-choices?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolHonorV2VoteCompletion> GetLolHonorV2V1VoteCompletion ()
    {
      return Do("/lol-honor-v2/v1/vote-completion?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolInventoryInventoryItem>> GetLolInventoryV1Inventory (const std::vector<std::string>& inventoryTypes /**/)
    {
      return Do("/lol-inventory/v1/inventory?", "get", { 
        { "inventoryTypes", as_string(inventoryTypes) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolInventoryInventoryItem>> GetLolInventoryV1InventoryEmotes ()
    {
      return Do("/lol-inventory/v1/inventory/emotes?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, std::string>> GetLolInventoryV1SignedInventory (const std::vector<std::string>& inventoryTypes /**/)
    {
      return Do("/lol-inventory/v1/signedInventory?", "get", { 
        { "inventoryTypes", as_string(inventoryTypes) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolItemSetsItemSets> GetLolItemSetsV1ItemSetsBySummonerIdSets (const uint64_t& summonerId /**/)
    {
      return Do("/lol-item-sets/v1/item-sets/"+as_string(summonerId)+"/sets?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<KickoutMessage> GetLolKickoutV1Notification ()
    {
      return Do("/lol-kickout/v1/notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolKrPlaytimeReminderV1Message ()
    {
      return Do("/lol-kr-playtime-reminder/v1/message?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlaytimeReminder> GetLolKrPlaytimeReminderV1Playtime ()
    {
      return Do("/lol-kr-playtime-reminder/v1/playtime?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolKrShutdownLawQueueShutdownStatus> GetLolKrShutdownLawV1CustomStatus ()
    {
      return Do("/lol-kr-shutdown-law/v1/custom-status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<int32_t>> GetLolKrShutdownLawV1DisabledQueues ()
    {
      return Do("/lol-kr-shutdown-law/v1/disabled-queues?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolKrShutdownLawShutdownLawNotification> GetLolKrShutdownLawV1Notification ()
    {
      return Do("/lol-kr-shutdown-law/v1/notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolKrShutdownLawQueueShutdownStatus> GetLolKrShutdownLawV1QueueStatusByQueueId (const int32_t& queue_id /**/)
    {
      return Do("/lol-kr-shutdown-law/v1/queue-status/"+as_string(queue_id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolKrShutdownLawAllQueueShutdownStatus> GetLolKrShutdownLawV1Status ()
    {
      return Do("/lol-kr-shutdown-law/v1/status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolLasToxicityV1AccountsByAccountId (const uint64_t& accountId /**/)
    {
      return Do("/lol-las-toxicity/v1/accounts/"+as_string(accountId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolLasToxicityV1SummonersBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-las-toxicity/v1/summoners/"+as_string(summonerId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLeaguesApexLeagues> GetLolLeaguesV1ChallengerLeagues ()
    {
      return Do("/lol-leagues/v1/challenger-leagues?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLeaguesLeague>> GetLolLeaguesV1SummonerLeaguesBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-leagues/v1/summoner-leagues/"+as_string(summonerId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLeaguesLeagueChampAndStat>> GetLolLeaguesV1SummonerTopChampsBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-leagues/v1/summoner-top-champs/"+as_string(summonerId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLeaguesLeagueTeam> GetLolLeaguesV1TeamsById (const std::string& id /**/)
    {
      return Do("/lol-leagues/v1/teams/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLeaguesLeaguesNotification>> GetLolLeaguesV2Notifications ()
    {
      return Do("/lol-leagues/v2/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLeaguesSignedSummonerLeagueItemsDTO> GetLolLeaguesV2SummonerLeaguesCurrentSummonerSignedLeagues ()
    {
      return Do("/lol-leagues/v2/summoner-leagues/current-summoner/signed-leagues?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLeaguesParticipantTiers>> GetLolLeaguesV2Tiers (const std::vector<uint64_t>& summonerIds /**/,
      const std::vector<LolLeaguesLeagueQueueType>& queueTypes /**/)
    {
      return Do("/lol-leagues/v2/tiers?", "get", { 
        { "summonerIds", as_string(summonerIds) },
        { "queueTypes", as_string(queueTypes) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LeaverBusterNotificationResource>> GetLolLeaverBusterV1Notifications ()
    {
      return Do("/lol-leaver-buster/v1/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LeaverBusterNotificationResource> GetLolLeaverBusterV1NotificationsById (const uint32_t& id /**/)
    {
      return Do("/lol-leaver-buster/v1/notifications/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLicenseAgreementLicenseAgreement>> GetLolLicenseAgreementV1Agreements ()
    {
      return Do("/lol-license-agreement/v1/agreements?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLicenseAgreementLicenseAgreement>> GetLolLicenseAgreementV1AllAgreements ()
    {
      return Do("/lol-license-agreement/v1/all-agreements?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoadoutsFrontendInventoryResponse> GetLolLoadoutsV1Inventory (const std::vector<std::string>& inventoryTypes /**/)
    {
      return Do("/lol-loadouts/v1/inventory?", "get", { 
        { "inventoryTypes", as_string(inventoryTypes) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolLoadoutsV2ItemsByIdByInventoryType (const uint32_t& id /**/,
      const std::string& inventoryType /**/)
    {
      return Do("/lol-loadouts/v2/items/"+as_string(id)+"/"+as_string(inventoryType)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectBannableChampions> GetLolLobbyTeamBuilderChampSelectV1BannableChampions ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/bannable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectDisabledChampions> GetLolLobbyTeamBuilderChampSelectV1DisabledChampions ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/disabled-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLobbyTeamBuilderChampSelectV1ImplementationActive ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/implementation-active?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectPickableChampions> GetLolLobbyTeamBuilderChampSelectV1PickableChampions ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/pickable-champions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectPickableSkins> GetLolLobbyTeamBuilderChampSelectV1PickableSkins ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/pickable-skins?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectSession> GetLolLobbyTeamBuilderChampSelectV1Session ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectTimer> GetLolLobbyTeamBuilderChampSelectV1SessionTimer ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/timer?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyTeamBuilderChampSelectTradeContract>> GetLolLobbyTeamBuilderChampSelectV1SessionTrades ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectTradeContract> GetLolLobbyTeamBuilderChampSelectV1SessionTradesById (const int64_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderTeamBoost> GetLolLobbyTeamBuilderChampSelectV1TeamBoost ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/team-boost?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderLobby> GetLolLobbyTeamBuilderV1Lobby ()
    {
      return Do("/lol-lobby-team-builder/v1/lobby?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderLobbyCountdownTimer> GetLolLobbyTeamBuilderV1LobbyCountdown ()
    {
      return Do("/lol-lobby-team-builder/v1/lobby/countdown?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderMatchmakingSearchResource> GetLolLobbyTeamBuilderV1Matchmaking ()
    {
      return Do("/lol-lobby-team-builder/v1/matchmaking?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderTbLobbyEnabledFeaturesResource> GetLolLobbyTeamBuilderV1TbEnabledFeatures ()
    {
      return Do("/lol-lobby-team-builder/v1/tb-enabled-features?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLobbyV1AutofillDisplayed ()
    {
      return Do("/lol-lobby/v1/autofill-displayed?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyCustomGame>> GetLolLobbyV1CustomGames ()
    {
      return Do("/lol-lobby/v1/custom-games?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyCustomGame> GetLolLobbyV1CustomGamesById (const int32_t& id /**/)
    {
      return Do("/lol-lobby/v1/custom-games/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyLastQueuedLobby> GetLolLobbyV1LastQueuedLobby ()
    {
      return Do("/lol-lobby/v1/last-queued-lobby?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobby> GetLolLobbyV1Lobby ()
    {
      return Do("/lol-lobby/v1/lobby?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyQueueAvailability> GetLolLobbyV1LobbyAvailability ()
    {
      return Do("/lol-lobby/v1/lobby/availability?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<int64_t> GetLolLobbyV1LobbyCountdown ()
    {
      return Do("/lol-lobby/v1/lobby/countdown?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyBotChampion>> GetLolLobbyV1LobbyCustomAvailableBots ()
    {
      return Do("/lol-lobby/v1/lobby/custom/available-bots?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLobbyV1LobbyCustomBotsEnabled ()
    {
      return Do("/lol-lobby/v1/lobby/custom/bots-enabled?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyInvitation>> GetLolLobbyV1LobbyInvitations ()
    {
      return Do("/lol-lobby/v1/lobby/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyInvitation> GetLolLobbyV1LobbyInvitationsById (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/invitations/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyMember>> GetLolLobbyV1LobbyMembers ()
    {
      return Do("/lol-lobby/v1/lobby/members?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyMember> GetLolLobbyV1LobbyMembersById (const uint64_t& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolLobbyV1PartiesHealth ()
    {
      return Do("/lol-lobby/v1/parties/health?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyPlayerDto> GetLolLobbyV1PartiesPlayer ()
    {
      return Do("/lol-lobby/v1/parties/player?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyPartyRewards> GetLolLobbyV1PartyRewards ()
    {
      return Do("/lol-lobby/v1/party-rewards?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyInvitation>> GetLolLobbyV1ReceivedInvitations ()
    {
      return Do("/lol-lobby/v1/received-invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyInvitation> GetLolLobbyV1ReceivedInvitationsById (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/received-invitations/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyPremadePartyDto> GetLolLobbyV2CommsMembers ()
    {
      return Do("/lol-lobby/v2/comms/members?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolLobbyV2CommsToken ()
    {
      return Do("/lol-lobby/v2/comms/token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyDto> GetLolLobbyV2Lobby ()
    {
      return Do("/lol-lobby/v2/lobby?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyBotChampion>> GetLolLobbyV2LobbyCustomAvailableBots ()
    {
      return Do("/lol-lobby/v2/lobby/custom/available-bots?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLobbyV2LobbyCustomBotsEnabled ()
    {
      return Do("/lol-lobby/v2/lobby/custom/bots-enabled?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyInvitationDto>> GetLolLobbyV2LobbyInvitations ()
    {
      return Do("/lol-lobby/v2/lobby/invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyMatchmakingSearchResource> GetLolLobbyV2LobbyMatchmakingSearchState ()
    {
      return Do("/lol-lobby/v2/lobby/matchmaking/search-state?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyParticipantDto>> GetLolLobbyV2LobbyMembers ()
    {
      return Do("/lol-lobby/v2/lobby/members?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyNotification>> GetLolLobbyV2Notifications ()
    {
      return Do("/lol-lobby/v2/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyReceivedInvitationDto>> GetLolLobbyV2ReceivedInvitations ()
    {
      return Do("/lol-lobby/v2/received-invitations?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoginAccountStateResource> GetLolLoginV1AccountState ()
    {
      return Do("/lol-login/v1/account-state?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolLoginV1LoginDataPacket ()
    {
      return Do("/lol-login/v1/login-data-packet?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolLoginV1LoginInGameCreds ()
    {
      return Do("/lol-login/v1/login-in-game-creds?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoginPlatformGeneratedCredentials> GetLolLoginV1LoginPlatformCredentials ()
    {
      return Do("/lol-login/v1/login-platform-credentials?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoginLoginSession> GetLolLoginV1Session ()
    {
      return Do("/lol-login/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoginLoginSessionWallet> GetLolLoginV1Wallet ()
    {
      return Do("/lol-login/v1/wallet?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> GetLolLootV1CurrencyConfiguration ()
    {
      return Do("/lol-loot/v1/currency-configuration?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLootV1Enabled ()
    {
      return Do("/lol-loot/v1/enabled?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootLootGrantNotification>> GetLolLootV1LootGrants ()
    {
      return Do("/lol-loot/v1/loot-grants?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootLootItem>> GetLolLootV1LootItems ()
    {
      return Do("/lol-loot/v1/loot-items?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLootV1NewPlayerCheckDone ()
    {
      return Do("/lol-loot/v1/new-player-check-done?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<std::string>> GetLolLootV1PlayerDisplayCategories ()
    {
      return Do("/lol-loot/v1/player-display-categories?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootPlayerLoot>> GetLolLootV1PlayerLoot ()
    {
      return Do("/lol-loot/v1/player-loot?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLootPlayerLoot> GetLolLootV1PlayerLootByLootId (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/player-loot/"+as_string(lootId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootContextMenu>> GetLolLootV1PlayerLootByLootIdContextMenu (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/player-loot/"+as_string(lootId)+"/context-menu?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, LolLootPlayerLoot>> GetLolLootV1PlayerLootMap ()
    {
      return Do("/lol-loot/v1/player-loot-map?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootPlayerLootNotification>> GetLolLootV1PlayerLootNotifications ()
    {
      return Do("/lol-loot/v1/player-loot-notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolLootV1Ready ()
    {
      return Do("/lol-loot/v1/ready?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> GetLolLootV1RecipesConfiguration ()
    {
      return Do("/lol-loot/v1/recipes/configuration?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootRecipe>> GetLolLootV1RecipesInitialItemByLootId (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/recipes/initial-item/"+as_string(lootId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLootPlayerLootMap> GetLolLootV2PlayerLootMap ()
    {
      return Do("/lol-loot/v2/player-loot-map?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LoyaltyStatusNotification> GetLolLoyaltyV1StatusNotification ()
    {
      return Do("/lol-loyalty/v1/status-notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMapsMaps> GetLolMapsV1MapById (const int64_t& id /**/)
    {
      return Do("/lol-maps/v1/map/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolMapsMaps>> GetLolMapsV1Maps ()
    {
      return Do("/lol-maps/v1/maps?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMapsMaps> GetLolMapsV2MapByIdByGameMode (const int64_t& id /**/,
      const std::string& gameMode /**/)
    {
      return Do("/lol-maps/v2/map/"+as_string(id)+"/"+as_string(gameMode)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMapsMaps> GetLolMapsV2MapByIdByGameModeByGameMutator (const int64_t& id /**/,
      const std::string& gameMode /**/,
      const std::string& gameMutator /**/)
    {
      return Do("/lol-maps/v2/map/"+as_string(id)+"/"+as_string(gameMode)+"/"+as_string(gameMutator)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolMapsMaps>> GetLolMapsV2Maps ()
    {
      return Do("/lol-maps/v2/maps?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchHistoryMatchHistoryPlayerDelta> GetLolMatchHistoryV1Delta ()
    {
      return Do("/lol-match-history/v1/delta?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchHistoryMatchHistoryList> GetLolMatchHistoryV1FriendMatchlistsByAccountId (const uint64_t& accountId /**/)
    {
      return Do("/lol-match-history/v1/friend-matchlists/"+as_string(accountId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchHistoryMatchHistoryTimelineFrames> GetLolMatchHistoryV1GameTimelinesByGameId (const uint64_t& gameId /**/)
    {
      return Do("/lol-match-history/v1/game-timelines/"+as_string(gameId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchHistoryMatchHistoryGame> GetLolMatchHistoryV1GamesByGameId (const uint64_t& gameId /**/)
    {
      return Do("/lol-match-history/v1/games/"+as_string(gameId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchHistoryMatchHistoryList> GetLolMatchHistoryV1Matchlist ()
    {
      return Do("/lol-match-history/v1/matchlist?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolMatchHistoryRecentlyPlayedSummoner>> GetLolMatchHistoryV1RecentlyPlayedSummoners ()
    {
      return Do("/lol-match-history/v1/recently-played-summoners?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolMatchHistoryV1WebUrl ()
    {
      return Do("/lol-match-history/v1/web-url?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchmakingMatchmakingReadyCheckResource> GetLolMatchmakingV1ReadyCheck ()
    {
      return Do("/lol-matchmaking/v1/ready-check?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchmakingMatchmakingSearchResource> GetLolMatchmakingV1Search ()
    {
      return Do("/lol-matchmaking/v1/search?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolMatchmakingMatchmakingSearchErrorResource>> GetLolMatchmakingV1SearchErrors ()
    {
      return Do("/lol-matchmaking/v1/search/errors?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolMatchmakingMatchmakingSearchErrorResource> GetLolMatchmakingV1SearchErrorsById (const int32_t& id /**/)
    {
      return Do("/lol-matchmaking/v1/search/errors/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<PlayerMissionDTO>> GetLolMissionsV1Missions ()
    {
      return Do("/lol-missions/v1/missions?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerMissionDTO> GetLolMissionsV1MissionsByMissionId (const std::string& missionId /**/)
    {
      return Do("/lol-missions/v1/missions/"+as_string(missionId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<SeriesDTO>> GetLolMissionsV1Series ()
    {
      return Do("/lol-missions/v1/series?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksPerkPageResource> GetLolPerksV1Currentpage ()
    {
      return Do("/lol-perks/v1/currentpage?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksCustomizationLimits> GetLolPerksV1Customizationlimits ()
    {
      return Do("/lol-perks/v1/customizationlimits?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksPlayerInventory> GetLolPerksV1Inventory ()
    {
      return Do("/lol-perks/v1/inventory?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPerksPerkPageResource>> GetLolPerksV1Pages ()
    {
      return Do("/lol-perks/v1/pages?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksPerkPageResource> GetLolPerksV1PagesById (const int32_t& id /**/)
    {
      return Do("/lol-perks/v1/pages/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPerksPerkUIPerk>> GetLolPerksV1Perks ()
    {
      return Do("/lol-perks/v1/perks?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<int32_t>> GetLolPerksV1PerksDisabled ()
    {
      return Do("/lol-perks/v1/perks/disabled?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksServiceSettings> GetLolPerksV1Servicesettings ()
    {
      return Do("/lol-perks/v1/servicesettings?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksUISettings> GetLolPerksV1Settings ()
    {
      return Do("/lol-perks/v1/settings?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPerksPerkUIStyle>> GetLolPerksV1Styles ()
    {
      return Do("/lol-perks/v1/styles?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPersonalizedOffersUIOffer>> GetLolPersonalizedOffersV1Offers ()
    {
      return Do("/lol-personalized-offers/v1/offers?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolPersonalizedOffersV1Status ()
    {
      return Do("/lol-personalized-offers/v1/status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolPersonalizedOffersV1Themed ()
    {
      return Do("/lol-personalized-offers/v1/themed?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPftPFTSurvey> GetLolPftV2Survey ()
    {
      return Do("/lol-pft/v2/survey?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolPlatformConfigV1InitialConfigurationComplete ()
    {
      return Do("/lol-platform-config/v1/initial-configuration-complete?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolPlatformConfigV1Namespaces ()
    {
      return Do("/lol-platform-config/v1/namespaces?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolPlatformConfigV1NamespacesByNs (const std::string& ns /**/)
    {
      return Do("/lol-platform-config/v1/namespaces/"+as_string(ns)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolPlatformConfigV1NamespacesByNsByKey (const std::string& ns /**/,
      const std::string& key /**/)
    {
      return Do("/lol-platform-config/v1/namespaces/"+as_string(ns)+"/"+as_string(key)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorBanNotification> GetLolPlayerBehaviorV1Ban ()
    {
      return Do("/lol-player-behavior/v1/ban?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorRestrictionNotification> GetLolPlayerBehaviorV1ChatRestriction ()
    {
      return Do("/lol-player-behavior/v1/chat-restriction?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorRestrictionNotification> GetLolPlayerBehaviorV1RankedRestriction ()
    {
      return Do("/lol-player-behavior/v1/ranked-restriction?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorReformCard> GetLolPlayerBehaviorV1ReformCard ()
    {
      return Do("/lol-player-behavior/v1/reform-card?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPlayerBehaviorReporterFeedback>> GetLolPlayerBehaviorV1ReporterFeedback ()
    {
      return Do("/lol-player-behavior/v1/reporter-feedback?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPlayerBehaviorReporterFeedback> GetLolPlayerBehaviorV1ReporterFeedbackById (const std::string& id /**/)
    {
      return Do("/lol-player-behavior/v1/reporter-feedback/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerLevelUpEvent> GetLolPlayerLevelUpV1LevelUp ()
    {
      return Do("/lol-player-level-up/v1/level-up?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerLevelUpEventAck> GetLolPlayerLevelUpV1LevelUpNotificationsByPluginName (const std::string& pluginName /**/)
    {
      return Do("/lol-player-level-up/v1/level-up-notifications/"+as_string(pluginName)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<DynamicCelebrationMessagingNotificationResource> GetLolPlayerMessagingV1CelebrationNotification ()
    {
      return Do("/lol-player-messaging/v1/celebration/notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerMessagingNotificationResource> GetLolPlayerMessagingV1Notification ()
    {
      return Do("/lol-player-messaging/v1/notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolPlayerPreferencesV1PlayerPreferencesReady ()
    {
      return Do("/lol-player-preferences/v1/player-preferences-ready?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolPlayerPreferencesV1PreferenceByType (const std::string& type /**/,
      const std::optional<std::string>& hash = std::nullopt /**/)
    {
      return Do("/lol-player-preferences/v1/preference/"+as_string(type)+"?", "get", { 
        { "hash", as_string(hash) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPreEndOfGameSequenceEvent> GetLolPreEndOfGameV1CurrentSequenceEvent ()
    {
      return Do("/lol-pre-end-of-game/v1/currentSequenceEvent?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPurchaseWidgetPurchaseWidgetConfig> GetLolPurchaseWidgetV1Configuration ()
    {
      return Do("/lol-purchase-widget/v1/configuration?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolQueueEligibilityV1InitialConfigurationComplete ()
    {
      return Do("/lol-queue-eligibility/v1/initial-configuration-complete?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolQueueEligibilityEligibility>> GetLolQueueEligibilityV3Custom (const int32_t& teamSize /**/,
      const std::string& pickMode /**/)
    {
      return Do("/lol-queue-eligibility/v3/custom?", "get", { 
        { "teamSize", as_string(teamSize) },
        { "pickMode", as_string(pickMode) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolQueueEligibilityEligibility>> GetLolQueueEligibilityV3Eligibility (const std::vector<uint64_t>& summonerIds /**/,
      const std::vector<int32_t>& queueIds /**/)
    {
      return Do("/lol-queue-eligibility/v3/eligibility?", "get", { 
        { "summonerIds", as_string(summonerIds) },
        { "queueIds", as_string(queueIds) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolRankedStatsRankedData> GetLolRankedStatsV1StatsBySummonerId (const uint64_t& summonerId /**/)
    {
      return Do("/lol-ranked-stats/v1/stats/"+as_string(summonerId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolRankedStatsPluginStatus> GetLolRankedStatsV1Status ()
    {
      return Do("/lol-ranked-stats/v1/status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolReplaysReplaysConfiguration> GetLolReplaysV1Configuration ()
    {
      return Do("/lol-replays/v1/configuration?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolReplaysReplayMetadata> GetLolReplaysV1MetadataByGameId (const uint64_t& gameId /**/)
    {
      return Do("/lol-replays/v1/metadata/"+as_string(gameId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolReplaysV1RoflsPath ()
    {
      return Do("/lol-replays/v1/rofls/path?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolReplaysV1RoflsPathDefault ()
    {
      return Do("/lol-replays/v1/rofls/path/default?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ServiceStatusResource> GetLolServiceStatusV1LcuStatus ()
    {
      return Do("/lol-service-status/v1/lcu-status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<TickerMessage>> GetLolServiceStatusV1TickerMessages ()
    {
      return Do("/lol-service-status/v1/ticker-messages?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSettingsV1AccountByCategory (const std::string& category /**/)
    {
      return Do("/lol-settings/v1/account/"+as_string(category)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolSettingsV1AccountDidreset ()
    {
      return Do("/lol-settings/v1/account/didreset?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSettingsV1LocalByCategory (const std::string& category /**/)
    {
      return Do("/lol-settings/v1/local/"+as_string(category)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSettingsV2AccountByPpTypeByCategory (const std::string& ppType /**/,
      const std::string& category /**/)
    {
      return Do("/lol-settings/v2/account/"+as_string(ppType)+"/"+as_string(category)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolSettingsV2DidresetByPpType (const std::string& ppType /**/)
    {
      return Do("/lol-settings/v2/didreset/"+as_string(ppType)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSettingsV2LocalByCategory (const std::string& category /**/)
    {
      return Do("/lol-settings/v2/local/"+as_string(category)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolSettingsV2Ready ()
    {
      return Do("/lol-settings/v2/ready?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ShutdownNotification> GetLolShutdownV1Notification ()
    {
      return Do("/lol-shutdown/v1/notification?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolSimpleDialogMessagesMessage>> GetLolSimpleDialogMessagesV1Messages ()
    {
      return Do("/lol-simple-dialog-messages/v1/messages?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<SpectateGameInfo> GetLolSpectatorV1Spectate ()
    {
      return Do("/lol-spectator/v1/spectate?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolStoreV1ByPageType (const std::string& pageType /**/)
    {
      return Do("/lol-store/v1/"+as_string(pageType)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolStoreCatalogItem>> GetLolStoreV1Catalog (const std::optional<std::vector<std::string>>& inventoryType = std::nullopt /**/,
      const std::optional<std::vector<int32_t>>& itemId = std::nullopt /**/)
    {
      return Do("/lol-store/v1/catalog?", "get", { 
        { "inventoryType", as_string(inventoryType) },
        { "itemId", as_string(itemId) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolStoreV1GetStoreUrl ()
    {
      return Do("/lol-store/v1/getStoreUrl?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetLolStoreV1LastPage ()
    {
      return Do("/lol-store/v1/lastPage?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolStoreV1Login ()
    {
      return Do("/lol-store/v1/login?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolStoreOrderNotificationResource>> GetLolStoreV1OrderNotifications ()
    {
      return Do("/lol-store/v1/order-notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolStoreOrderNotificationResource> GetLolStoreV1OrderNotificationsById (const uint64_t& id /**/)
    {
      return Do("/lol-store/v1/order-notifications/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolStoreV1PaymentDetails (const std::string& action /**/,
      const std::optional<uint64_t>& giftRecipientAccountId = std::nullopt /**/,
      const std::optional<std::string>& giftMessage = std::nullopt /**/)
    {
      return Do("/lol-store/v1/paymentDetails?", "get", { 
        { "action", as_string(action) },
        { "giftRecipientAccountId", as_string(giftRecipientAccountId) },
        { "giftMessage", as_string(giftMessage) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolStoreCatalogItem> GetLolStoreV1SkinsBySkinId (const int32_t& skinId /**/)
    {
      return Do("/lol-store/v1/skins/"+as_string(skinId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolStoreWallet> GetLolStoreV1Wallet ()
    {
      return Do("/lol-store/v1/wallet?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolSuggestedPlayersSuggestedPlayersSuggestedPlayer>> GetLolSuggestedPlayersV1SuggestedPlayers ()
    {
      return Do("/lol-suggested-players/v1/suggested-players?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> GetLolSummonerV1CheckNameAvailabilityByName (const std::string& name /**/)
    {
      return Do("/lol-summoner/v1/check-name-availability/"+as_string(name)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerSummoner> GetLolSummonerV1CurrentSummoner ()
    {
      return Do("/lol-summoner/v1/current-summoner?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerAutoFillDto> GetLolSummonerV1CurrentSummonerAutofill ()
    {
      return Do("/lol-summoner/v1/current-summoner/autofill?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerSummonerRerollPoints> GetLolSummonerV1CurrentSummonerRerollPoints ()
    {
      return Do("/lol-summoner/v1/current-summoner/rerollPoints?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSummonerV1CurrentSummonerSummonerProfile ()
    {
      return Do("/lol-summoner/v1/current-summoner/summoner-profile?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetLolSummonerV1SummonerProfile (const std::string& puuid /**/)
    {
      return Do("/lol-summoner/v1/summoner-profile?", "get", { 
        { "puuid", as_string(puuid) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerSummoner> GetLolSummonerV1Summoners (const std::string& name /**/)
    {
      return Do("/lol-summoner/v1/summoners?", "get", { 
        { "name", as_string(name) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerSummoner> GetLolSummonerV1SummonersById (const uint64_t& id /**/)
    {
      return Do("/lol-summoner/v1/summoners/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolSummonerSummonerIdAndIcon>> GetLolSummonerV2SummonerIcons (const std::vector<uint64_t>& ids /**/)
    {
      return Do("/lol-summoner/v2/summoner-icons?", "get", { 
        { "ids", as_string(ids) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolSummonerSummonerIdAndName>> GetLolSummonerV2SummonerNames (const std::vector<uint64_t>& ids /**/)
    {
      return Do("/lol-summoner/v2/summoner-names?", "get", { 
        { "ids", as_string(ids) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolSummonerSummoner>> GetLolSummonerV2Summoners (const std::optional<std::string>& name = std::nullopt /**/,
      const std::optional<std::vector<uint64_t>>& ids = std::nullopt /**/)
    {
      return Do("/lol-summoner/v2/summoners?", "get", { 
        { "name", as_string(name) },
        { "ids", as_string(ids) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, TencentQTNotification>> GetLolTencentQtV1UiStates ()
    {
      return Do("/lol-tencent-qt/v1/ui-states?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<TencentQTNotification> GetLolTencentQtV1UiStatesByFeature (const std::string& feature /**/)
    {
      return Do("/lol-tencent-qt/v1/ui-states/"+as_string(feature)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<NetworkExperimentsResource> GetNetworkTestingV1Experiments ()
    {
      return Do("/network-testing/v1/experiments?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> GetPatcherV1ExecutableVersion ()
    {
      return Do("/patcher/v1/executable-version?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<PatcherNotification>> GetPatcherV1Notifications ()
    {
      return Do("/patcher/v1/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PatcherP2PStatus> GetPatcherV1P2pStatus ()
    {
      return Do("/patcher/v1/p2p/status?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<std::string>> GetPatcherV1Products ()
    {
      return Do("/patcher/v1/products?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, std::string>> GetPatcherV1ProductsByProductIdPaths (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/paths?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PatcherProductState> GetPatcherV1ProductsByProductIdState (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/state?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, std::string>> GetPatcherV1ProductsByProductIdTags (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/tags?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PatcherStatus> GetPatcherV1Status ()
    {
      return Do("/patcher/v1/status?", "get", { 
      }, { 
      });
    } 
    /*Returns process memory status*/
    HttpsResult<json> GetPerformanceV1Memory ()
    {
      return Do("/performance/v1/memory?", "get", { 
      }, { 
      });
    } 
    /*Returns the various performance information for the cef processes*/
    HttpsResult<json> GetPerformanceV1Report ()
    {
      return Do("/performance/v1/report?", "get", { 
      }, { 
      });
    } 
    /*Returns hardware and software specs for the machine the client is running on.*/
    HttpsResult<json> GetPerformanceV1SystemInfo (const std::optional<int32_t>& full = std::nullopt /*Returns all available system information*/)
    {
      return Do("/performance/v1/system-info?", "get", { 
        { "full", as_string(full) },
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerNotificationConfigResource> GetPlayerNotificationsV1Config ()
    {
      return Do("/player-notifications/v1/config?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<PlayerNotificationResource>> GetPlayerNotificationsV1Notifications ()
    {
      return Do("/player-notifications/v1/notifications?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerNotificationResource> GetPlayerNotificationsV1NotificationsById (const uint64_t& id /**/)
    {
      return Do("/player-notifications/v1/notifications/"+as_string(id)+"?", "get", { 
      }, { 
      });
    } 
    /*Write the current plugin stats for the log file.*/
    HttpsResult<void> GetPluginManagerV1PluginStatsLog ()
    {
      return Do("/plugin-manager/v1/plugin-stats/log?", "get", { 
      }, { 
      });
    } 
    /*Get the status of the plugin manager.*/
    HttpsResult<PluginManagerResource> GetPluginManagerV1Status ()
    {
      return Do("/plugin-manager/v1/status?", "get", { 
      }, { 
      });
    } 
    /*Get all plugin descriptions.*/
    HttpsResult<std::vector<PluginDescriptionResource>> GetPluginManagerV2Descriptions ()
    {
      return Do("/plugin-manager/v2/descriptions?", "get", { 
      }, { 
      });
    } 
    /*Get a plugin description.*/
    HttpsResult<PluginDescriptionResource> GetPluginManagerV2DescriptionsByPlugin (const std::string& plugin /*Plugin name*/)
    {
      return Do("/plugin-manager/v2/descriptions/"+as_string(plugin)+"?", "get", { 
      }, { 
      });
    } 
    /*Get diagnostic information for all plugins.*/
    HttpsResult<std::vector<PluginResource>> GetPluginManagerV2Plugins ()
    {
      return Do("/plugin-manager/v2/plugins?", "get", { 
      }, { 
      });
    } 
    /*Get diagnostic information for a single plugin.*/
    HttpsResult<PluginResource> GetPluginManagerV2PluginsByPlugin (const std::string& plugin /*Plugin name*/)
    {
      return Do("/plugin-manager/v2/plugins/"+as_string(plugin)+"?", "get", { 
      }, { 
      });
    } 
    /*Get the plugin manifest.*/
    HttpsResult<json> GetPluginManagerV2PluginsManifest ()
    {
      return Do("/plugin-manager/v2/plugins-manifest?", "get", { 
      }, { 
      });
    } 
    /*Returns information about the process-control.*/
    HttpsResult<ProcessControlProcess> GetProcessControlV1Process ()
    {
      return Do("/process-control/v1/process?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderConfig> GetRecofrienderV1Config ()
    {
      return Do("/recofriender/v1/config?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderNetworkConfig> GetRecofrienderV1ConfigByNetwork (const std::string& network /**/)
    {
      return Do("/recofriender/v1/config/"+as_string(network)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<RecofrienderContactResource>> GetRecofrienderV1Contacts (const std::optional<uint64_t>& accountId = std::nullopt /**/,
      const std::optional<std::string>& source = std::nullopt /**/,
      const std::optional<std::string>& friendState = std::nullopt /**/)
    {
      return Do("/recofriender/v1/contacts?", "get", { 
        { "accountId", as_string(accountId) },
        { "source", as_string(source) },
        { "friendState", as_string(friendState) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderDebugConfig> GetRecofrienderV1Debug ()
    {
      return Do("/recofriender/v1/debug?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderUrlResource> GetRecofrienderV1FaqUrl ()
    {
      return Do("/recofriender/v1/faq-url?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<RecofrienderLinkResource>> GetRecofrienderV1Registrations (const std::optional<std::string>& cb = std::nullopt /**/)
    {
      return Do("/recofriender/v1/registrations?", "get", { 
        { "cb", as_string(cb) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderLinkResource> GetRecofrienderV1RegistrationsByNetwork (const std::string& network /**/)
    {
      return Do("/recofriender/v1/registrations/"+as_string(network)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<RecofrienderContactResource>> GetRecofrienderV2Contacts ()
    {
      return Do("/recofriender/v2/contacts?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactResource> GetRecofrienderV2ContactsByAccountId (const uint64_t& accountId /**/)
    {
      return Do("/recofriender/v2/contacts/"+as_string(accountId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactPaginationResource> GetRecofrienderV2ContactsPage (const uint64_t& start /**/,
      const uint64_t& limit /**/)
    {
      return Do("/recofriender/v2/contacts/page?", "get", { 
        { "start", as_string(start) },
        { "limit", as_string(limit) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<RecofrienderContactResource>> GetRecofrienderV2Dismissed ()
    {
      return Do("/recofriender/v2/dismissed?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactPaginationResource> GetRecofrienderV2DismissedPage (const uint64_t& start /**/,
      const uint64_t& limit /**/)
    {
      return Do("/recofriender/v2/dismissed/page?", "get", { 
        { "start", as_string(start) },
        { "limit", as_string(limit) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RiotMessagingServiceSession> GetRiotMessagingServiceV1Session ()
    {
      return Do("/riot-messaging-service/v1/session?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RiotMessagingServiceState> GetRiotMessagingServiceV1State ()
    {
      return Do("/riot-messaging-service/v1/state?", "get", { 
      }, { 
      });
    } 
    /*Get the current runtime affinity of the application.*/
    HttpsResult<json> GetRiotclientAffinity ()
    {
      return Do("/riotclient/affinity?", "get", { 
      }, { 
      });
    } 
    /*Application name without file extension*/
    HttpsResult<std::string> GetRiotclientAppName ()
    {
      return Do("/riotclient/app-name?", "get", { 
      }, { 
      });
    } 
    /*Get the TCP port number that the remoting server is listening on.*/
    HttpsResult<uint16_t> GetRiotclientAppPort ()
    {
      return Do("/riotclient/app-port?", "get", { 
      }, { 
      });
    } 
    /*Return the auth token used by the remoting server*/
    HttpsResult<std::string> GetRiotclientAuthToken ()
    {
      return Do("/riotclient/auth-token?", "get", { 
      }, { 
      });
    } 
    /*Get the command line parameters for the application*/
    HttpsResult<std::vector<std::string>> GetRiotclientCommandLineArgs ()
    {
      return Do("/riotclient/command-line-args?", "get", { 
      }, { 
      });
    } 
    /*Get the current region and locale.*/
    HttpsResult<RegionLocale> GetRiotclientGetRegionLocale ()
    {
      return Do("/riotclient/get_region_locale?", "get", { 
      }, { 
      });
    } 
    /*Base64 encoded uuid identifying the user's machine*/
    HttpsResult<std::string> GetRiotclientMachineId ()
    {
      return Do("/riotclient/machine-id?", "get", { 
      }, { 
      });
    } 
    /*Get the current region and locale.*/
    HttpsResult<RegionLocale> GetRiotclientRegionLocale ()
    {
      return Do("/riotclient/region-locale?", "get", { 
      }, { 
      });
    } 
    /*Get basic system information: OS, memory, processor speed, and number of physical cores*/
    HttpsResult<basicSystemInfo> GetRiotclientSystemInfoV1BasicInfo ()
    {
      return Do("/riotclient/system-info/v1/basic-info?", "get", { 
      }, { 
      });
    } 
    /*Retrieves a completed scheduler trace.*/
    HttpsResult<json> GetRiotclientTrace ()
    {
      return Do("/riotclient/trace?", "get", { 
      }, { 
      });
    } 
    /*Returns whether the ux has crashed or not*/
    HttpsResult<uint32_t> GetRiotclientUxCrashCount ()
    {
      return Do("/riotclient/ux-crash-count?", "get", { 
      }, { 
      });
    } 
    /*Get the current Ux state.*/
    HttpsResult<std::string> GetRiotclientUxState ()
    {
      return Do("/riotclient/ux-state?", "get", { 
      }, { 
      });
    } 
    /*Get the bugsplat platform id.*/
    HttpsResult<std::string> GetRiotclientV1BugsplatPlatformId ()
    {
      return Do("/riotclient/v1/bugsplat/platform-id?", "get", { 
      }, { 
      });
    } 
    /*Gets the last known posted zoom-scale value.*/
    HttpsResult<double> GetRiotclientZoomScale ()
    {
      return Do("/riotclient/zoom-scale?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthAuthorization> GetRsoAuthV1Authorization ()
    {
      return Do("/rso-auth/v1/authorization?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthAccessToken> GetRsoAuthV1AuthorizationAccessToken ()
    {
      return Do("/rso-auth/v1/authorization/access-token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthEntitlementsToken> GetRsoAuthV1AuthorizationEntitlementsToken ()
    {
      return Do("/rso-auth/v1/authorization/entitlements-token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthAuthError> GetRsoAuthV1AuthorizationError ()
    {
      return Do("/rso-auth/v1/authorization/error?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> GetRsoAuthV1AuthorizationGasToken ()
    {
      return Do("/rso-auth/v1/authorization/gas-token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthIdToken> GetRsoAuthV1AuthorizationIdToken ()
    {
      return Do("/rso-auth/v1/authorization/id-token?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthUserInfo> GetRsoAuthV1AuthorizationUserinfo ()
    {
      return Do("/rso-auth/v1/authorization/userinfo?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthRSOJWTConfig> GetRsoAuthV1ConfigByPlatformId (const std::string& platformId /**/)
    {
      return Do("/rso-auth/v1/config/"+as_string(platformId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthRegionStatus> GetRsoAuthV1StatusByPlatformId (const std::string& platformId /**/)
    {
      return Do("/rso-auth/v1/status/"+as_string(platformId)+"?", "get", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<SanitizerSanitizerStatus> GetSanitizerV1Status ()
    {
      return Do("/sanitizer/v1/status?", "get", { 
      }, { 
      });
    } 
    /*Information about the current artifacts that make up this build*/
    HttpsResult<BuildInfo> GetSystemV1Builds ()
    {
      return Do("/system/v1/builds?", "get", { 
      }, { 
      });
    } 
    /*Download the header for a backend asset*/
    HttpsResult<json> HeadByPluginAssetsByPath (const std::string& plugin /*Plugin name to serve from*/,
      const std::string& path /*Path to the asset to serve*/,
      const std::optional<std::string>& if_none_match = std::nullopt /*optional ETag of the asset that the caller has cached*/)
    {
      return Do("/"+as_string(plugin)+"/assets/"+as_string(path)+"?", "head", { 
      }, { 
        { "if-none-match", as_string(if_none_match) },
      });
    } 
    /*Returns information on available functions and types*/
    HttpsResult<json> Help (const std::optional<std::string>& target = std::nullopt /*Name of the function or type to describe*/,
      const std::optional<RemotingHelpFormat>& format = std::nullopt /*Format for returned information*/)
    {
      return Do("/Help?", "post", { 
        { "target", as_string(target) },
        { "format", as_string(format) },
      }, { 
      });
    } 
    /*Retrieves the API documentation resource listing*/
    HttpsResult<json> Http2ApiDocsV1 ()
    {
      return Do("/v1/api-docs?", "get", { 
      }, { 
      });
    } 
    /*Retrieves the API declaration for a supported API*/
    HttpsResult<json> HttpApiDeclarationV1 (const std::string& api /*API to get a declaration for*/)
    {
      return Do("/v1/api-docs/"+as_string(api)+"?", "get", { 
      }, { 
      });
    } 
    /*Retrieves the API documentation*/
    HttpsResult<json> HttpApiDocsV2 ()
    {
      return Do("/v2/swagger.json?", "get", { 
      }, { 
      });
    } 
    /*Retrieves the API documentation*/
    HttpsResult<json> HttpApiDocsV3 ()
    {
      return Do("/v3/openapi.json?", "get", { 
      }, { 
      });
    } 
    /*Cancels the asynchronous operation or removes its completion status.*/
    HttpsResult<json> HttpAsyncDelete (const uint32_t& asyncToken /*ID of the asynchronous operation to remove*/)
    {
      return Do("/async/v1/status/"+as_string(asyncToken)+"?", "delete", { 
      }, { 
      });
    } 
    /*Retrieves the result of a completed asynchronous operation.*/
    HttpsResult<json> HttpAsyncResult (const uint32_t& asyncToken /*ID of the asynchronous operation to check*/)
    {
      return Do("/async/v1/result/"+as_string(asyncToken)+"?", "get", { 
      }, { 
      });
    } 
    /*Retrieves details on the current state of an asynchronous operation.*/
    HttpsResult<json> HttpAsyncStatus (const uint32_t& asyncToken /*ID of the asynchronous operation to check*/)
    {
      return Do("/async/v1/status/"+as_string(asyncToken)+"?", "get", { 
      }, { 
      });
    } 
    /*Gets all buffered log entries since the last call.*/
    HttpsResult<std::vector<LogEvent>> LoggingGetEntries ()
    {
      return Do("/LoggingGetEntries?", "post", { 
      }, { 
      });
    } 
    /*Returns all metrics*/
    HttpsResult<json> LoggingMetrics ()
    {
      return Do("/LoggingMetrics?", "post", { 
      }, { 
      });
    } 
    /*Returns metadata for all metrics*/
    HttpsResult<json> LoggingMetricsMetadata ()
    {
      return Do("/LoggingMetricsMetadata?", "post", { 
      }, { 
      });
    } 
    /*Initializes the logging system.*/
    HttpsResult<void> LoggingStart (const std::optional<bool>& buffered = std::nullopt /*Specifies whether logs will be buffered for LoggingGetEntries to work*/,
      const std::optional<LogSeverityLevels>& severity = std::nullopt /*Minimum severity level to fire a log event*/)
    {
      return Do("/LoggingStart?", "post", { 
        { "buffered", as_string(buffered) },
        { "severity", as_string(severity) },
      }, { 
      });
    } 
    /*Finalizes the logging system.*/
    HttpsResult<void> LoggingStop ()
    {
      return Do("/LoggingStop?", "post", { 
      }, { 
      });
    } 
    /*Memory filter prints to the log when memory is allocated or freed that matches the filter parameters set in MemoryFilterSet*/
    HttpsResult<void> MemoryFilterEnable (const std::optional<int32_t>& enable = std::nullopt /*Enable/disable the memory filter*/)
    {
      return Do("/MemoryFilterEnable?", "post", { 
        { "enable", as_string(enable) },
      }, { 
      });
    } 
    /*Sets the filter parameters for when to print to the log. Use MemoryFilterEnable to start/stop the print outs*/
    HttpsResult<void> MemoryFilterSet (const std::optional<uint32_t>& minSize = std::nullopt /*Optional filter for minimum size to output*/,
      const std::optional<uint32_t>& maxSize = std::nullopt /*Optional filter for maximum size to output*/,
      const std::optional<std::string>& minAddress = std::nullopt /*Optional filter for minimum address in hex to output*/,
      const std::optional<std::string>& maxAddress = std::nullopt /*Optional filter for maximum address in hex to output*/)
    {
      return Do("/MemoryFilterSet?", "post", { 
        { "minSize", as_string(minSize) },
        { "maxSize", as_string(maxSize) },
        { "minAddress", as_string(minAddress) },
        { "maxAddress", as_string(maxAddress) },
      }, { 
      });
    } 
    /*Returns current pool usage*/
    HttpsResult<json> MemoryPools (const std::optional<std::string>& contextName = std::nullopt /*Name of the context to find (optional)*/)
    {
      return Do("/MemoryPools?", "post", { 
        { "contextName", as_string(contextName) },
      }, { 
      });
    } 
    /*Returns aggregate information about memory usage*/
    HttpsResult<json> MemoryStats ()
    {
      return Do("/MemoryStats?", "post", { 
      }, { 
      });
    } 
    /*Returns current memory usage by callstack site*/
    HttpsResult<json> MemoryUsage (const std::optional<uint32_t>& minSize = std::nullopt /*Minimum size of total allocations at call site in order to print (optional: MEMORYUSAGE_MINSIZE default)*/,
      const std::optional<uint32_t>& minCount = std::nullopt /*Minimum count of total allocations at call site in order to print (optional: MEMORYUSAGE_MINCOUNT default)*/)
    {
      return Do("/MemoryUsage?", "post", { 
        { "minSize", as_string(minSize) },
        { "minCount", as_string(minCount) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PatchLolChampSelectLegacyV1SessionActionsById (const uint64_t& id /**/,
      const LolChampSelectLegacyChampSelectAction& data /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/actions/"+as_string(id)+"?", "patch", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<json> PatchLolChampSelectLegacyV1SessionMySelection (const LolChampSelectLegacyChampSelectMySelection& selection /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/my-selection?", "patch", { 
      }, { 
      },selection);
    } 
    /**/
    HttpsResult<json> PatchLolChampSelectV1SessionActionsById (const uint64_t& id /**/,
      const LolChampSelectChampSelectAction& data /**/)
    {
      return Do("/lol-champ-select/v1/session/actions/"+as_string(id)+"?", "patch", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<json> PatchLolChampSelectV1SessionMySelection (const LolChampSelectChampSelectMySelection& selection /**/)
    {
      return Do("/lol-champ-select/v1/session/my-selection?", "patch", { 
      }, { 
      },selection);
    } 
    /**/
    HttpsResult<PlayerClub> PatchLolClubsV1ClubsByClubKey (const std::string& clubKey /**/,
      const ClubTag& tag /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"?", "patch", { 
      }, { 
      },tag);
    } 
    /**/
    HttpsResult<PlayerClub> PatchLolClubsV1ClubsByClubKeyMotd (const std::string& clubKey /**/,
      const ClubMOTD& motd /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/motd?", "patch", { 
      }, { 
      },motd);
    } 
    /**/
    HttpsResult<PlayerClubMembership> PatchLolClubsV1ClubsInvitations (const ClubInvite& invitation /**/)
    {
      return Do("/lol-clubs/v1/clubs/invitations?", "patch", { 
      }, { 
      },invitation);
    } 
    /**/
    HttpsResult<ClubPreferences> PatchLolClubsV1ClubsMembershipPreferences (const ClubPreferences& preferences /**/)
    {
      return Do("/lol-clubs/v1/clubs/membership/preferences?", "patch", { 
      }, { 
      },preferences);
    } 
    /**/
    HttpsResult<json> PatchLolGameSettingsV1GameSettings (const json& settingsResource /**/)
    {
      return Do("/lol-game-settings/v1/game-settings?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchLolGameSettingsV1InputSettings (const json& settingsResource /**/)
    {
      return Do("/lol-game-settings/v1/input-settings?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchLolLobbyTeamBuilderChampSelectV1SessionActionsById (const int32_t& id /**/,
      const LolLobbyTeamBuilderChampSelectAction& data /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/actions/"+as_string(id)+"?", "patch", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<json> PatchLolLobbyTeamBuilderChampSelectV1SessionMySelection (const LolLobbyTeamBuilderChampSelectMySelection& selection /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/my-selection?", "patch", { 
      }, { 
      },selection);
    } 
    /**/
    HttpsResult<json> PatchLolSettingsV1AccountByCategory (const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v1/account/"+as_string(category)+"?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchLolSettingsV1LocalByCategory (const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v1/local/"+as_string(category)+"?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchLolSettingsV2AccountByPpTypeByCategory (const std::string& ppType /**/,
      const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v2/account/"+as_string(ppType)+"/"+as_string(category)+"?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchLolSettingsV2LocalByCategory (const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v2/local/"+as_string(category)+"?", "patch", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PatchPatcherV1P2pStatus (const PatcherP2PStatusUpdate& data /**/)
    {
      return Do("/patcher/v1/p2p/status?", "patch", { 
      }, { 
      },data);
    } 
    /*Set a cookie.*/
    HttpsResult<json> PostCookieJarV1Cookies (const std::vector<cookie>& cookie /*Cookie to set*/)
    {
      return Do("/cookie-jar/v1/cookies?", "post", { 
      }, { 
      },cookie);
    } 
    /*Set the data for the specified key from the install settings.*/
    HttpsResult<void> PostDataStoreV1InstallSettingsByPath (const std::string& path /*The path to the settings key*/,
      const json& data /*The data to assign to the key*/)
    {
      return Do("/data-store/v1/install-settings/"+as_string(path)+"?", "post", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<LolAccountVerificationInvalidateResponse> PostLolAccountVerificationV1Invalidate ()
    {
      return Do("/lol-account-verification/v1/invalidate?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolAccountVerificationSendTokenResponse> PostLolAccountVerificationV1SendToken (const LolAccountVerificationSendTokenRequest& SendTokenRequest /**/)
    {
      return Do("/lol-account-verification/v1/send-token?", "post", { 
      }, { 
      },SendTokenRequest);
    } 
    /**/
    HttpsResult<LolAccountVerificationVerifyResponse> PostLolAccountVerificationV1Verify (const LolAccountVerificationVerifyRequest& VerifyRequest /**/)
    {
      return Do("/lol-account-verification/v1/verify?", "post", { 
      }, { 
      },VerifyRequest);
    } 
    /**/
    HttpsResult<json> PostLolAcsV1AcsEndpointOverride (const LolAcsAcsEndPoint& data /**/)
    {
      return Do("/lol-acs/v1/acs-endpoint-override?", "post", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<void> PostLolBetaOptInV1DoMigration ()
    {
      return Do("/lol-beta-opt-in/v1/do-migration?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1BattleTrainingLaunch ()
    {
      return Do("/lol-champ-select-legacy/v1/battle-training/launch?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1SessionActionsByIdComplete (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/actions/"+as_string(id)+"/complete?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1SessionMySelectionReroll ()
    {
      return Do("/lol-champ-select-legacy/v1/session/my-selection/reroll?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1SessionTradesByIdAccept (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/trades/"+as_string(id)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1SessionTradesByIdCancel (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/trades/"+as_string(id)+"/cancel?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1SessionTradesByIdDecline (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/trades/"+as_string(id)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectLegacyChampSelectTradeContract> PostLolChampSelectLegacyV1SessionTradesByIdRequest (const int64_t& id /**/)
    {
      return Do("/lol-champ-select-legacy/v1/session/trades/"+as_string(id)+"/request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectLegacyV1TeamBoostPurchase ()
    {
      return Do("/lol-champ-select-legacy/v1/team-boost/purchase?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1BattleTrainingLaunch ()
    {
      return Do("/lol-champ-select/v1/battle-training/launch?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1SessionActionsByIdComplete (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/actions/"+as_string(id)+"/complete?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1SessionMySelectionReroll ()
    {
      return Do("/lol-champ-select/v1/session/my-selection/reroll?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1SessionTradesByIdAccept (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/trades/"+as_string(id)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1SessionTradesByIdCancel (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/trades/"+as_string(id)+"/cancel?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1SessionTradesByIdDecline (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/trades/"+as_string(id)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChampSelectChampSelectTradeContract> PostLolChampSelectV1SessionTradesByIdRequest (const int64_t& id /**/)
    {
      return Do("/lol-champ-select/v1/session/trades/"+as_string(id)+"/request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChampSelectV1TeamBoostPurchase ()
    {
      return Do("/lol-champ-select/v1/team-boost/purchase?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolChatV1BlockedPlayers (const LolChatBlockedPlayerResource& blocked /**/)
    {
      return Do("/lol-chat/v1/blocked-players?", "post", { 
      }, { 
      },blocked);
    } 
    /**/
    HttpsResult<LolChatConversationResource> PostLolChatV1Conversations (const LolChatConversationResource& conversation /**/)
    {
      return Do("/lol-chat/v1/conversations?", "post", { 
      }, { 
      },conversation);
    } 
    /**/
    HttpsResult<json> PostLolChatV1ConversationsByIdClosed (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/closed?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolChatConversationMessageResource> PostLolChatV1ConversationsByIdMessages (const std::string& id /**/,
      const LolChatConversationMessageResource& body /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/messages?", "post", { 
      }, { 
      },body);
    } 
    /**/
    HttpsResult<json> PostLolChatV1ConversationsByIdParticipants (const std::string& id /**/,
      const LolChatUserResource& invitee /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/participants?", "post", { 
      }, { 
      },invitee);
    } 
    /**/
    HttpsResult<json> PostLolChatV1FriendGroups (const LolChatGroupResource& group /**/)
    {
      return Do("/lol-chat/v1/friend-groups?", "post", { 
      }, { 
      },group);
    } 
    /**/
    HttpsResult<json> PostLolChatV1FriendRequests (const LolChatFriendRequestResource& request /**/)
    {
      return Do("/lol-chat/v1/friend-requests?", "post", { 
      }, { 
      },request);
    } 
    /**/
    HttpsResult<LolChatSessionResource> PostLolChatV1SessionPlain (const LolChatAuthResourcePlain& auth /**/)
    {
      return Do("/lol-chat/v1/session/plain?", "post", { 
      }, { 
      },auth);
    } 
    /**/
    HttpsResult<LolChatSessionResource> PostLolChatV1SessionRso (const LolChatAuthResourceRsoAccessToken& auth /**/)
    {
      return Do("/lol-chat/v1/session/rso?", "post", { 
      }, { 
      },auth);
    } 
    /**/
    HttpsResult<json> PostLolClashV1EogPlayerUpdateAcknowledge ()
    {
      return Do("/lol-clash/v1/eogPlayerUpdate/acknowledge?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::map<std::string, ClashEventData>> PostLolClashV1Events (const std::vector<std::string>& uuids /**/)
    {
      return Do("/lol-clash/v1/events?", "post", { 
      }, { 
      },uuids);
    } 
    /**/
    HttpsResult<json> PostLolClashV1GameEndAcknowledge ()
    {
      return Do("/lol-clash/v1/gameEnd/acknowledge?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1NotificationsAcknowledge ()
    {
      return Do("/lol-clash/v1/notifications/acknowledge?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1Refresh ()
    {
      return Do("/lol-clash/v1/refresh?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdBidOfferBySummonerIdAccept (const int64_t& tournamentId /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/bid-offer/"+as_string(summonerId)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdBidOfferBySummonerIdDecline (const int64_t& tournamentId /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/bid-offer/"+as_string(summonerId)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdBidOfferBySummonerIdOffer (const int64_t& tournamentId /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/bid-offer/"+as_string(summonerId)+"/offer?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdBidOfferBySummonerIdRevoke (const int64_t& tournamentId /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/bid-offer/"+as_string(summonerId)+"/revoke?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdCreateRoster (const int64_t& tournamentId /**/,
      const LolClashRosterDetails& rosterDetails /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/create-roster?", "post", { 
      }, { 
      },rosterDetails);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterByRosterIdAccept (const int64_t& tournamentId /**/,
      const std::string& rosterId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/"+as_string(rosterId)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterByRosterIdDecline (const int64_t& tournamentId /**/,
      const std::string& rosterId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/"+as_string(rosterId)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterByRosterIdSubstituteAccept (const int64_t& tournamentId /**/,
      const std::string& rosterId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/"+as_string(rosterId)+"/substitute/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterByRosterIdSubstituteDecline (const int64_t& tournamentId /**/,
      const std::string& rosterId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/"+as_string(rosterId)+"/substitute/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterCancelWithdraw (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/cancel-withdraw?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterChangeAllDetails (const int64_t& tournamentId /**/,
      const LolClashRosterDetails& rosterDetails /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/change-all-details?", "post", { 
      }, { 
      },rosterDetails);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterChangeIcon (const int64_t& tournamentId /**/,
      const LolClashChangeIconRequest& changeIconRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/change-icon?", "post", { 
      }, { 
      },changeIconRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterChangeName (const int64_t& tournamentId /**/,
      const LolClashChangeNameRequest& changeNameRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/change-name?", "post", { 
      }, { 
      },changeNameRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterChangeShortName (const int64_t& tournamentId /**/,
      const LolClashChangeNameRequest& changeNameRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/change-short-name?", "post", { 
      }, { 
      },changeNameRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterDisband (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/disband?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<FailedInvite>> PostLolClashV1TournamentByTournamentIdRosterInvite (const int64_t& tournamentId /**/,
      const std::vector<uint64_t>& summonerIds /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/invite?", "post", { 
      }, { 
      },summonerIds);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterKick (const int64_t& tournamentId /**/,
      const LolClashKickRequest& kickRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/kick?", "post", { 
      }, { 
      },kickRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterLeave (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/leave?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterLockin (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/lockin?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterSetBid (const int64_t& tournamentId /**/,
      const LolClashSetTicketRequest& setTicketRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/set-bid?", "post", { 
      }, { 
      },setTicketRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterSetPosition (const int64_t& tournamentId /**/,
      const LolClashSetPositionRequest& setPositionRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/set-position?", "post", { 
      }, { 
      },setPositionRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterSubstituteBySummonerIdRevoke (const int64_t& tournamentId /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/substitute/"+as_string(summonerId)+"/revoke?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterSubstituteInvite (const int64_t& tournamentId /**/,
      const LolClashInviteSubRequest& inviteSubRequest /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/substitute/invite?", "post", { 
      }, { 
      },inviteSubRequest);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterSubstituteReclaim (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/substitute/reclaim?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterTransferCaptain (const int64_t& tournamentId /**/,
      const uint64_t& newCaptainSummonerId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/transfer-captain?", "post", { 
      }, { 
      },newCaptainSummonerId);
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterUnlockin (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/unlockin?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterUnwithdraw (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/unwithdraw?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClashV1TournamentByTournamentIdRosterWithdraw (const int64_t& tournamentId /**/)
    {
      return Do("/lol-clash/v1/tournament/"+as_string(tournamentId)+"/roster/withdraw?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> PostLolClubsV1ClubsByClubKeyInvitationsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/invitations/"+as_string(summonerId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerClub> PostLolClubsV1ClubsByClubKeyMembersBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/members/"+as_string(summonerId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> PostLolClubsV1ClubsByClubKeyNominationsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/nominations/"+as_string(summonerId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<ClubMemberLists> PostLolClubsV1ClubsByClubKeyPromotionsBySummonerId (const std::string& clubKey /**/,
      const uint64_t& summonerId /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/promotions/"+as_string(summonerId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolClubsV1ClubsByClubKeyView (const std::string& clubKey /**/)
    {
      return Do("/lol-clubs/v1/clubs/"+as_string(clubKey)+"/view?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerClub> PostLolClubsV1ClubsMembership (const ClubName& name /**/)
    {
      return Do("/lol-clubs/v1/clubs/membership?", "post", { 
      }, { 
      },name);
    } 
    /**/
    HttpsResult<json> PostLolEmailVerificationV1ConfirmEmail ()
    {
      return Do("/lol-email-verification/v1/confirm-email?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolEndOfGameV1StateDismissStats ()
    {
      return Do("/lol-end-of-game/v1/state/dismiss-stats?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolEndOfGameEndOfGamePlayerComplaintV2> PostLolEndOfGameV2PlayerComplaints (const LolEndOfGameEndOfGamePlayerComplaintV2& complaint /**/)
    {
      return Do("/lol-end-of-game/v2/player-complaints?", "post", { 
      }, { 
      },complaint);
    } 
    /**/
    HttpsResult<void> PostLolEsportStreamNotificationsV1SendStats (const std::string& eventType /**/,
      const std::string& matchId /**/)
    {
      return Do("/lol-esport-stream-notifications/v1/send-stats?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameClientChatV1IgnoredSummoners (const std::string& summonerName /**/)
    {
      return Do("/lol-game-client-chat/v1/ignored-summoners?", "post", { 
        { "summonerName", as_string(summonerName) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameClientChatV1InstantMessages (const std::string& summonerName /**/,
      const std::string& message /**/)
    {
      return Do("/lol-game-client-chat/v1/instant-messages?", "post", { 
        { "summonerName", as_string(summonerName) },
        { "message", as_string(message) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameClientChatV1PartyMessages (const std::string& message /**/)
    {
      return Do("/lol-game-client-chat/v1/party-messages?", "post", { 
        { "message", as_string(message) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameSettingsV1ReloadPostGame ()
    {
      return Do("/lol-game-settings/v1/reload-post-game?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> PostLolGameSettingsV1Save ()
    {
      return Do("/lol-game-settings/v1/save?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1AckFailedToLaunch ()
    {
      return Do("/lol-gameflow/v1/ack-failed-to-launch?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1BasicTutorialStart ()
    {
      return Do("/lol-gameflow/v1/basic-tutorial/start?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1BattleTrainingStart ()
    {
      return Do("/lol-gameflow/v1/battle-training/start?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1BattleTrainingStop ()
    {
      return Do("/lol-gameflow/v1/battle-training/stop?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1ClientReceivedMessage (const std::string& messsage /**/)
    {
      return Do("/lol-gameflow/v1/client-received-message?", "post", { 
      }, { 
      },messsage);
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1ExtraGameClientArgs (const std::vector<std::string>& extraGameClientArgs /**/)
    {
      return Do("/lol-gameflow/v1/extra-game-client-args?", "post", { 
      }, { 
      },extraGameClientArgs);
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1GameflowMetadataPlayerStatus (const LolGameflowPlayerStatus& playerStatus /**/)
    {
      return Do("/lol-gameflow/v1/gameflow-metadata/player-status?", "post", { 
      }, { 
      },playerStatus);
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1PreEndGameTransition (const bool& enabled /**/)
    {
      return Do("/lol-gameflow/v1/pre-end-game-transition?", "post", { 
        { "enabled", as_string(enabled) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1Reconnect ()
    {
      return Do("/lol-gameflow/v1/reconnect?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1SessionDodge (const LolGameflowGameflowGameDodge& dodgeData /**/)
    {
      return Do("/lol-gameflow/v1/session/dodge?", "post", { 
      }, { 
      },dodgeData);
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1SessionEvent (const std::string& session /**/)
    {
      return Do("/lol-gameflow/v1/session/event?", "post", { 
      }, { 
      },session);
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1SessionGameConfiguration (const LolGameflowQueue& queue /**/)
    {
      return Do("/lol-gameflow/v1/session/game-configuration?", "post", { 
      }, { 
      },queue);
    } 
    /**/
    HttpsResult<bool> PostLolGameflowV1SessionRequestLobby ()
    {
      return Do("/lol-gameflow/v1/session/request-lobby?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<bool> PostLolGameflowV1SessionRequestTournamentCheckin ()
    {
      return Do("/lol-gameflow/v1/session/request-tournament-checkin?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1SessionTournamentEnded ()
    {
      return Do("/lol-gameflow/v1/session/tournament-ended?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1SpectateLaunch (const std::optional<std::string>& summonerName = std::nullopt /**/)
    {
      return Do("/lol-gameflow/v1/spectate/launch?", "post", { 
      }, { 
      },summonerName);
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1SpectateQuit ()
    {
      return Do("/lol-gameflow/v1/spectate/quit?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolGameflowV1Tick ()
    {
      return Do("/lol-gameflow/v1/tick?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolGameflowV1WatchLaunch (const std::vector<std::string>& args /**/)
    {
      return Do("/lol-gameflow/v1/watch/launch?", "post", { 
      }, { 
      },args);
    } 
    /**/
    HttpsResult<json> PostLolHighlightsV1FileBrowserByHighlightId (const uint64_t& highlightId /**/)
    {
      return Do("/lol-highlights/v1/file-browser/"+as_string(highlightId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<Highlight>> PostLolHighlightsV1Highlights ()
    {
      return Do("/lol-highlights/v1/highlights?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> PostLolHonorV2V1HonorPlayer (const LolHonorV2ApiHonorPlayerServerRequest& honorPlayerRequest /**/)
    {
      return Do("/lol-honor-v2/v1/honor-player?", "post", { 
      }, { 
      },honorPlayerRequest);
    } 
    /**/
    HttpsResult<void> PostLolHonorV2V1LateRecognitionAck ()
    {
      return Do("/lol-honor-v2/v1/late-recognition/ack?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolHonorV2V1LevelChangeAck ()
    {
      return Do("/lol-honor-v2/v1/level-change/ack?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolHonorV2V1RewardGrantedAck ()
    {
      return Do("/lol-honor-v2/v1/reward-granted/ack?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolItemSetsV1ItemSetsBySummonerIdSets (const uint64_t& summonerId /**/,
      const LolItemSetsItemSet& itemSet /**/)
    {
      return Do("/lol-item-sets/v1/item-sets/"+as_string(summonerId)+"/sets?", "post", { 
      }, { 
      },itemSet);
    } 
    /**/
    HttpsResult<json> PostLolLeaguesV2NotificationsByIdAcknowledge (const uint64_t& id /**/)
    {
      return Do("/lol-leagues/v2/notifications/"+as_string(id)+"/acknowledge?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLicenseAgreementV1AgreementsByIdAccept (const std::string& id /**/)
    {
      return Do("/lol-license-agreement/v1/agreements/"+as_string(id)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLicenseAgreementV1AgreementsByIdDecline (const std::string& id /**/)
    {
      return Do("/lol-license-agreement/v1/agreements/"+as_string(id)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLoadoutsV1SendItemsToMegaPacketById (const uint32_t& id /**/)
    {
      return Do("/lol-loadouts/v1/sendItemsToMegaPacket/"+as_string(id)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLoadoutsV2ItemsById (const uint32_t& id /**/,
      const std::map<std::string, json>& items /**/)
    {
      return Do("/lol-loadouts/v2/items/"+as_string(id)+"?", "post", { 
      }, { 
      },items);
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1SessionActionsByIdComplete (const int32_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/actions/"+as_string(id)+"/complete?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1SessionMySelectionReroll ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/my-selection/reroll?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdAccept (const int32_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades/"+as_string(id)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdCancel (const int32_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades/"+as_string(id)+"/cancel?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdDecline (const int32_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades/"+as_string(id)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderChampSelectTradeContract> PostLolLobbyTeamBuilderChampSelectV1SessionTradesByIdRequest (const int32_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/session/trades/"+as_string(id)+"/request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderChampSelectV1TeamBoostPurchase ()
    {
      return Do("/lol-lobby-team-builder/champ-select/v1/team-boost/purchase?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1InvitationsAccept (const LolLobbyTeamBuilderLobbyInvitation& invitation /**/)
    {
      return Do("/lol-lobby-team-builder/v1/invitations/accept?", "post", { 
      }, { 
      },invitation);
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderLobby> PostLolLobbyTeamBuilderV1Lobby (const LolLobbyTeamBuilderLobby& lobby /**/)
    {
      return Do("/lol-lobby-team-builder/v1/lobby?", "post", { 
      }, { 
      },lobby);
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1LobbyMembersByIdKick (const uint64_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/v1/lobby/members/"+as_string(id)+"/kick?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1LobbyMembersByIdPromote (const uint64_t& id /**/)
    {
      return Do("/lol-lobby-team-builder/v1/lobby/members/"+as_string(id)+"/promote?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1MatchmakingLowPriorityQueueAbandon (const std::string& leaverBusterToken /**/)
    {
      return Do("/lol-lobby-team-builder/v1/matchmaking/low-priority-queue/abandon?", "post", { 
      }, { 
      },leaverBusterToken);
    } 
    /**/
    HttpsResult<LolLobbyTeamBuilderMatchmakingSearchResource> PostLolLobbyTeamBuilderV1MatchmakingSearch (const std::string& leaverBusterToken /**/)
    {
      return Do("/lol-lobby-team-builder/v1/matchmaking/search?", "post", { 
      }, { 
      },leaverBusterToken);
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1PositionPreferences (const LolLobbyTeamBuilderLobbyPositionPreferences& positionPreferences /**/)
    {
      return Do("/lol-lobby-team-builder/v1/position-preferences?", "post", { 
      }, { 
      },positionPreferences);
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1ReadyCheckAccept ()
    {
      return Do("/lol-lobby-team-builder/v1/ready-check/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV1ReadyCheckDecline ()
    {
      return Do("/lol-lobby-team-builder/v1/ready-check/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyTeamBuilderV2PositionPreferences (const LolLobbyTeamBuilderLobbyPositionPreferencesV2& positionPreferences /**/)
    {
      return Do("/lol-lobby-team-builder/v2/position-preferences?", "post", { 
      }, { 
      },positionPreferences);
    } 
    /**/
    HttpsResult<LolLobbyLobby> PostLolLobbyV1ChangeQueue (const LolLobbyLobbyChangeQueue& queueId /**/)
    {
      return Do("/lol-lobby/v1/change-queue?", "post", { 
      }, { 
      },queueId);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1CustomGamesByIdJoin (const uint64_t& id /**/,
      const LolLobbyLobbyCustomJoinParameters& parameters /**/)
    {
      return Do("/lol-lobby/v1/custom-games/"+as_string(id)+"/join?", "post", { 
      }, { 
      },parameters);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1CustomGamesRefresh ()
    {
      return Do("/lol-lobby/v1/custom-games/refresh?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobby> PostLolLobbyV1LastQueuedLobbyPlayAgain ()
    {
      return Do("/lol-lobby/v1/last-queued-lobby/play-again?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobby> PostLolLobbyV1Lobby (const LolLobbyLobby& lobby /**/)
    {
      return Do("/lol-lobby/v1/lobby?", "post", { 
      }, { 
      },lobby);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyCustomBots (const LolLobbyLobbyBotParams& parameters /**/)
    {
      return Do("/lol-lobby/v1/lobby/custom/bots?", "post", { 
      }, { 
      },parameters);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyCustomBotsBySummonerInternalName (const std::string& summonerInternalName /**/,
      const LolLobbyLobbyBotParams& parameters /**/)
    {
      return Do("/lol-lobby/v1/lobby/custom/bots/"+as_string(summonerInternalName)+"?", "post", { 
      }, { 
      },parameters);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyCustomCancelChampSelect ()
    {
      return Do("/lol-lobby/v1/lobby/custom/cancel-champ-select?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyCustomChampSelectStartResponse> PostLolLobbyV1LobbyCustomStartChampSelect ()
    {
      return Do("/lol-lobby/v1/lobby/custom/start-champ-select?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyCustomSwitchTeams (const std::optional<std::string>& team = std::nullopt /**/)
    {
      return Do("/lol-lobby/v1/lobby/custom/switch-teams?", "post", { 
        { "team", as_string(team) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLobbyLobbyInvitation> PostLolLobbyV1LobbyInvitations (const LolLobbyLobbyInvitation& invitation /**/)
    {
      return Do("/lol-lobby/v1/lobby/invitations?", "post", { 
      }, { 
      },invitation);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyMembersByIdGrantInvite (const uint64_t& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/"+as_string(id)+"/grant-invite?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyMembersByIdKick (const uint64_t& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/"+as_string(id)+"/kick?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyMembersByIdPromote (const uint64_t& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/"+as_string(id)+"/promote?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1LobbyMembersByIdRevokeInvite (const uint64_t& id /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/"+as_string(id)+"/revoke-invite?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1ReceivedInvitationsByIdAccept (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/received-invitations/"+as_string(id)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1ReceivedInvitationsByIdDecline (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/received-invitations/"+as_string(id)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV1TournamentsByIdJoin (const std::string& id /**/)
    {
      return Do("/lol-lobby/v1/tournaments/"+as_string(id)+"/join?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyInvitationDto>> PostLolLobbyV2EogInvitations (const std::vector<LolLobbyLobbyInvitationDto>& invitations /**/)
    {
      return Do("/lol-lobby/v2/eog-invitations?", "post", { 
      }, { 
      },invitations);
    } 
    /**/
    HttpsResult<LolLobbyLobbyDto> PostLolLobbyV2Lobby (const LolLobbyLobbyChangeGameDto& lobbyChange /**/)
    {
      return Do("/lol-lobby/v2/lobby?", "post", { 
      }, { 
      },lobbyChange);
    } 
    /**/
    HttpsResult<std::vector<LolLobbyEligibility>> PostLolLobbyV2LobbyEligibilityPremade ()
    {
      return Do("/lol-lobby/v2/lobby/eligibility/premade?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLobbyLobbyInvitationDto>> PostLolLobbyV2LobbyInvitations (const std::vector<LolLobbyLobbyInvitationDto>& invitations /**/)
    {
      return Do("/lol-lobby/v2/lobby/invitations?", "post", { 
      }, { 
      },invitations);
    } 
    /**/
    HttpsResult<json> PostLolLobbyV2LobbyMatchmakingSearch ()
    {
      return Do("/lol-lobby/v2/lobby/matchmaking/search?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<uint64_t> PostLolLobbyV2LobbyMembersBySummonerIdGrantInvite (const uint64_t& summonerId /**/)
    {
      return Do("/lol-lobby/v2/lobby/members/"+as_string(summonerId)+"/grant-invite?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<uint64_t> PostLolLobbyV2LobbyMembersBySummonerIdKick (const uint64_t& summonerId /**/)
    {
      return Do("/lol-lobby/v2/lobby/members/"+as_string(summonerId)+"/kick?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<uint64_t> PostLolLobbyV2LobbyMembersBySummonerIdPromote (const uint64_t& summonerId /**/)
    {
      return Do("/lol-lobby/v2/lobby/members/"+as_string(summonerId)+"/promote?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<uint64_t> PostLolLobbyV2LobbyMembersBySummonerIdRevokeInvite (const uint64_t& summonerId /**/)
    {
      return Do("/lol-lobby/v2/lobby/members/"+as_string(summonerId)+"/revoke-invite?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLobbyV2Notifications (const LolLobbyLobbyNotification& notification /**/)
    {
      return Do("/lol-lobby/v2/notifications?", "post", { 
      }, { 
      },notification);
    } 
    /**/
    HttpsResult<void> PostLolLobbyV2PartiesOverridesEnabled (const bool& enabled /**/)
    {
      return Do("/lol-lobby/v2/parties/overrides/Enabled?", "post", { 
        { "enabled", as_string(enabled) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLobbyV2PartiesOverridesEnabledForTeamBuilderQueues (const bool& enabledForTeambuilderQueues /**/)
    {
      return Do("/lol-lobby/v2/parties/overrides/EnabledForTeamBuilderQueues?", "post", { 
        { "enabledForTeambuilderQueues", as_string(enabledForTeambuilderQueues) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV2PlayAgain ()
    {
      return Do("/lol-lobby/v2/play-again?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLobbyV2PlayAgainDecline ()
    {
      return Do("/lol-lobby/v2/play-again-decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLobbyV2ReceivedInvitationsByInvitationIdAccept (const std::string& invitationId /**/)
    {
      return Do("/lol-lobby/v2/received-invitations/"+as_string(invitationId)+"/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLobbyV2ReceivedInvitationsByInvitationIdDecline (const std::string& invitationId /**/)
    {
      return Do("/lol-lobby/v2/received-invitations/"+as_string(invitationId)+"/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLoginV1AccessToken (const LolLoginAccessToken& AccessToken /**/)
    {
      return Do("/lol-login/v1/access-token?", "post", { 
      }, { 
      },AccessToken);
    } 
    /**/
    HttpsResult<void> PostLolLoginV1AccountState ()
    {
      return Do("/lol-login/v1/account-state?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolLoginV1ChangeSummonerName (const std::string& name /**/)
    {
      return Do("/lol-login/v1/change-summoner-name?", "post", { 
      }, { 
      },name);
    } 
    /**/
    HttpsResult<json> PostLolLoginV1NewPlayerFlowCompleted ()
    {
      return Do("/lol-login/v1/new-player-flow-completed?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLoginV1ServiceProxyAsyncRequestsByServiceNameByMethodName (const std::string& serviceName /**/,
      const std::string& methodName /**/,
      const uint32_t& pluginId /**/)
    {
      return Do("/lol-login/v1/service-proxy-async-requests/"+as_string(serviceName)+"/"+as_string(methodName)+"?", "post", { 
        { "pluginId", as_string(pluginId) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolLoginV1ServiceProxyMethodRequests (const std::string& serviceName /**/,
      const std::string& methodName /**/,
      const std::string& responseMethodName /**/,
      const std::string& responseErrorName /**/,
      const uint32_t& pluginId /**/,
      const std::string& payload /**/)
    {
      return Do("/lol-login/v1/service-proxy-method-requests?", "post", { 
        { "serviceName", as_string(serviceName) },
        { "methodName", as_string(methodName) },
        { "responseMethodName", as_string(responseMethodName) },
        { "responseErrorName", as_string(responseErrorName) },
        { "pluginId", as_string(pluginId) },
        { "payload", as_string(payload) },
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> PostLolLoginV1ServiceProxyUuidRequests (const std::string& serviceName /**/,
      const std::string& methodName /**/,
      const uint32_t& pluginId /**/,
      const std::string& payload /**/)
    {
      return Do("/lol-login/v1/service-proxy-uuid-requests?", "post", { 
        { "serviceName", as_string(serviceName) },
        { "methodName", as_string(methodName) },
        { "pluginId", as_string(pluginId) },
        { "payload", as_string(payload) },
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLoginLoginSession> PostLolLoginV1Session (const LolLoginUsernameAndPassword& UsernameAndPassword /**/)
    {
      return Do("/lol-login/v1/session?", "post", { 
      }, { 
      },UsernameAndPassword);
    } 
    /**/
    HttpsResult<LolLoginLcdsResponse> PostLolLoginV1SessionInvoke (const std::string& destination /**/,
      const std::string& method /**/,
      const std::vector<json>& args /**/)
    {
      return Do("/lol-login/v1/session/invoke?", "post", { 
        { "destination", as_string(destination) },
        { "method", as_string(method) },
      }, { 
      }, { 
        { "args", as_string(args) },
      }, true );
    } 
    /**/
    HttpsResult<json> PostLolLoginV1SummonerCreated (const LolLoginSummonerCreatedResource& summonerId /**/)
    {
      return Do("/lol-login/v1/summoner-created?", "post", { 
      }, { 
      },summonerId);
    } 
    /**/
    HttpsResult<std::string> PostLolLootV1NewPlayerCheckDoneByNewValue (const bool& newValue /**/)
    {
      return Do("/lol-loot/v1/new-player-check-done/"+as_string(newValue)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolLootContextMenu>> PostLolLootV1PlayerLootByLootIdContextMenu (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/player-loot/"+as_string(lootId)+"/context-menu?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLootPlayerLootUpdate> PostLolLootV1PlayerLootByLootNameRedeem (const std::string& lootName /**/)
    {
      return Do("/lol-loot/v1/player-loot/"+as_string(lootName)+"/redeem?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> PostLolLootV1PlayerLootNotificationsByIdAcknowledge (const std::string& id /**/)
    {
      return Do("/lol-loot/v1/player-loot-notifications/"+as_string(id)+"/acknowledge?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolLootPlayerLootUpdate> PostLolLootV1RecipesByRecipeNameCraft (const std::string& recipeName /**/,
      const std::vector<std::string>& playerLootList /**/,
      const std::optional<int32_t>& repeat = std::nullopt /**/)
    {
      return Do("/lol-loot/v1/recipes/"+as_string(recipeName)+"/craft?", "post", { 
        { "repeat", as_string(repeat) },
      }, { 
      },playerLootList);
    } 
    /**/
    HttpsResult<std::vector<LolLootRecipe>> PostLolLootV1RecipesInitialItemByLootId (const std::string& lootId /**/)
    {
      return Do("/lol-loot/v1/recipes/initial-item/"+as_string(lootId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> PostLolLootV1Refresh (const bool& force /**/)
    {
      return Do("/lol-loot/v1/refresh?", "post", { 
        { "force", as_string(force) },
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolMapsV1Map (const LolMapsMaps& map /**/)
    {
      return Do("/lol-maps/v1/map?", "post", { 
      }, { 
      },map);
    } 
    /**/
    HttpsResult<json> PostLolMatchmakingV1ReadyCheckAccept ()
    {
      return Do("/lol-matchmaking/v1/ready-check/accept?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolMatchmakingV1ReadyCheckDecline ()
    {
      return Do("/lol-matchmaking/v1/ready-check/decline?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolMatchmakingV1Search ()
    {
      return Do("/lol-matchmaking/v1/search?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolMissionsV1Missions ()
    {
      return Do("/lol-missions/v1/missions?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolMissionsV1MissionsByMissionId (const std::string& missionId /**/)
    {
      return Do("/lol-missions/v1/missions/"+as_string(missionId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolMissionsV1MissionsUpdate ()
    {
      return Do("/lol-missions/v1/missions/update?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPerksPerkPageResource> PostLolPerksV1Pages (const LolPerksPerkPageResource& page /**/)
    {
      return Do("/lol-perks/v1/pages?", "post", { 
      }, { 
      },page);
    } 
    /**/
    HttpsResult<LolPersonalizedOffersPurchaseResponse> PostLolPersonalizedOffersV1OffersByIdPurchase (const std::string& id /**/)
    {
      return Do("/lol-personalized-offers/v1/offers/"+as_string(id)+"/purchase?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::vector<LolPersonalizedOffersUIOffer>> PostLolPersonalizedOffersV1OffersByIdReveal (const std::string& id /**/)
    {
      return Do("/lol-personalized-offers/v1/offers/"+as_string(id)+"/reveal?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolPersonalizedOffersPurchaseResponse> PostLolPersonalizedOffersV1OffersPurchase (const LolPersonalizedOffersOfferRequests& offerRequests /**/)
    {
      return Do("/lol-personalized-offers/v1/offers/purchase?", "post", { 
      }, { 
      },offerRequests);
    } 
    /**/
    HttpsResult<std::vector<LolPersonalizedOffersUIOffer>> PostLolPersonalizedOffersV1OffersReveal (const LolPersonalizedOffersOfferIds& offerIds /**/)
    {
      return Do("/lol-personalized-offers/v1/offers/reveal?", "post", { 
      }, { 
      },offerIds);
    } 
    /**/
    HttpsResult<json> PostLolPftV2Events (const LolPftPFTEvent& pftEvent /**/)
    {
      return Do("/lol-pft/v2/events?", "post", { 
      }, { 
      },pftEvent);
    } 
    /**/
    HttpsResult<void> PostLolPftV2Survey (const LolPftPFTSurvey& survey /**/)
    {
      return Do("/lol-pft/v2/survey?", "post", { 
      }, { 
      },survey);
    } 
    /**/
    HttpsResult<void> PostLolPlayerLevelUpV1LevelUpNotificationsByPluginName (const std::string& pluginName /**/,
      const PlayerLevelUpEventAck& levelUpEventAck /**/)
    {
      return Do("/lol-player-level-up/v1/level-up-notifications/"+as_string(pluginName)+"?", "post", { 
      }, { 
      },levelUpEventAck);
    } 
    /**/
    HttpsResult<std::string> PostLolPlayerPreferencesV1Hash (const std::string& preferences /**/)
    {
      return Do("/lol-player-preferences/v1/hash?", "post", { 
      }, { 
      },preferences);
    } 
    /**/
    HttpsResult<json> PostLolPlayerPreferencesV1PlayerPreferencesEndpointOverride (const PlayerPreferencesEndpoint& preferences /**/)
    {
      return Do("/lol-player-preferences/v1/player-preferences-endpoint-override?", "post", { 
      }, { 
      },preferences);
    } 
    /**/
    HttpsResult<void> PostLolPreEndOfGameV1CompleteBySequenceEventName (const std::string& sequenceEventName /**/)
    {
      return Do("/lol-pre-end-of-game/v1/complete/"+as_string(sequenceEventName)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolPreEndOfGameV1RegistrationBySequenceEventNameByPriority (const std::string& sequenceEventName /**/,
      const int32_t& priority /**/)
    {
      return Do("/lol-pre-end-of-game/v1/registration/"+as_string(sequenceEventName)+"/"+as_string(priority)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolPurchaseWidgetV1PurchaseItems (const LolPurchaseWidgetPurchaseRequest& purchaseRequest /**/)
    {
      return Do("/lol-purchase-widget/v1/purchaseItems?", "post", { 
      }, { 
      },purchaseRequest);
    } 
    /**/
    HttpsResult<json> PostLolPurchaseWidgetV1ValidateItems (const LolPurchaseWidgetValidationRequest& validationRequest /**/)
    {
      return Do("/lol-purchase-widget/v1/validateItems?", "post", { 
      }, { 
      },validationRequest);
    } 
    /**/
    HttpsResult<std::vector<LolQueueEligibilityEligibility>> PostLolQueueEligibilityV1Eligibility (const LolQueueEligibilityEligibilityQueryParams& eligibilityQueryParam /**/)
    {
      return Do("/lol-queue-eligibility/v1/eligibility?", "post", { 
      }, { 
      },eligibilityQueryParam);
    } 
    /**/
    HttpsResult<std::vector<LolQueueEligibilityEligibility>> PostLolQueueEligibilityV2Eligibility (const LolQueueEligibilityEligibilityQueryParams& eligibilityQueryParam /**/)
    {
      return Do("/lol-queue-eligibility/v2/eligibility?", "post", { 
      }, { 
      },eligibilityQueryParam);
    } 
    /**/
    HttpsResult<void> PostLolReplaysV1MetadataByGameIdCreateGameVersionByGameVersionGameTypeByGameTypeQueueIdByQueueId (const uint64_t& gameId /**/,
      const std::string& gameVersion /**/,
      const std::string& gameType /**/,
      const int32_t& queueId /**/)
    {
      return Do("/lol-replays/v1/metadata/"+as_string(gameId)+"/create/gameVersion/"+as_string(gameVersion)+"/gameType/"+as_string(gameType)+"/queueId/"+as_string(queueId)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolReplaysV1RoflsByGameIdDownload (const uint64_t& gameId /**/,
      const LolReplaysReplayContextData& contextData /**/)
    {
      return Do("/lol-replays/v1/rofls/"+as_string(gameId)+"/download?", "post", { 
      }, { 
      },contextData);
    } 
    /**/
    HttpsResult<void> PostLolReplaysV1RoflsByGameIdDownloadGraceful (const uint64_t& gameId /**/,
      const LolReplaysReplayContextData& contextData /**/)
    {
      return Do("/lol-replays/v1/rofls/"+as_string(gameId)+"/download/graceful?", "post", { 
      }, { 
      },contextData);
    } 
    /**/
    HttpsResult<void> PostLolReplaysV1RoflsByGameIdWatch (const uint64_t& gameId /**/,
      const LolReplaysReplayContextData& contextData /**/)
    {
      return Do("/lol-replays/v1/rofls/"+as_string(gameId)+"/watch?", "post", { 
      }, { 
      },contextData);
    } 
    /**/
    HttpsResult<void> PostLolReplaysV1RoflsScan ()
    {
      return Do("/lol-replays/v1/rofls/scan?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostLolReplaysV2MetadataByGameIdCreate (const uint64_t& gameId /**/,
      const LolReplaysReplayCreateMetadata& request /**/)
    {
      return Do("/lol-replays/v2/metadata/"+as_string(gameId)+"/create?", "post", { 
      }, { 
      },request);
    } 
    /**/
    HttpsResult<void> PostLolSettingsV1AccountSave ()
    {
      return Do("/lol-settings/v1/account/save?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostLolSimpleDialogMessagesV1Messages (const LolSimpleDialogMessagesLocalMessageRequest& messageRequest /**/)
    {
      return Do("/lol-simple-dialog-messages/v1/messages?", "post", { 
      }, { 
      },messageRequest);
    } 
    /**/
    HttpsResult<SummonerOrTeamAvailabilty> PostLolSpectatorV1BuddySpectate (const std::vector<std::string>& summonerOrTeamNames /**/)
    {
      return Do("/lol-spectator/v1/buddy/spectate?", "post", { 
      }, { 
      },summonerOrTeamNames);
    } 
    /**/
    HttpsResult<json> PostLolSpectatorV1SpectateLaunch (const SpectateGameInfo& spectateGameInfo /**/)
    {
      return Do("/lol-spectator/v1/spectate/launch?", "post", { 
      }, { 
      },spectateGameInfo);
    } 
    /**/
    HttpsResult<void> PostLolStoreV1LastPage (const std::string& pageType /**/)
    {
      return Do("/lol-store/v1/lastPage?", "post", { 
      }, { 
      },pageType);
    } 
    /**/
    HttpsResult<json> PostLolStoreV1NotificationsAcknowledge (const std::string& id /**/)
    {
      return Do("/lol-store/v1/notifications/acknowledge?", "post", { 
      }, { 
      },id);
    } 
    /**/
    HttpsResult<json> PostLolStoreV1SkinsBySkinIdPurchase (const int32_t& skinId /**/,
      const LolStoreItemCost& cost /**/)
    {
      return Do("/lol-store/v1/skins/"+as_string(skinId)+"/purchase?", "post", { 
      }, { 
      },cost);
    } 
    /**/
    HttpsResult<void> PostLolSuggestedPlayersV1ReportedPlayer (const LolSuggestedPlayersSuggestedPlayersReportedPlayer& resource /**/)
    {
      return Do("/lol-suggested-players/v1/reported-player?", "post", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<void> PostLolSuggestedPlayersV1VictoriousComrade (const LolSuggestedPlayersSuggestedPlayersVictoriousComrade& resource /**/)
    {
      return Do("/lol-suggested-players/v1/victorious-comrade?", "post", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<LolSummonerSummoner> PostLolSummonerV1CurrentSummonerName (const std::string& name /**/)
    {
      return Do("/lol-summoner/v1/current-summoner/name?", "post", { 
      }, { 
      },name);
    } 
    /**/
    HttpsResult<json> PostLolSummonerV1CurrentSummonerSummonerProfile (const LolSummonerSummonerProfileUpdate& body /**/)
    {
      return Do("/lol-summoner/v1/current-summoner/summoner-profile?", "post", { 
      }, { 
      },body);
    } 
    /**/
    HttpsResult<LolSummonerSummoner> PostLolSummonerV1CurrentSummonerXpInfo ()
    {
      return Do("/lol-summoner/v1/current-summoner/xpInfo?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<LolSummonerInternalSummoner> PostLolSummonerV1Summoners (const LolSummonerSummonerRequestedName& name /**/)
    {
      return Do("/lol-summoner/v1/summoners?", "post", { 
      }, { 
      },name);
    } 
    /**/
    HttpsResult<json> PostLolTencentQtV1UiStatesByFeature (const std::string& feature /**/,
      const TencentQTNotification& state /**/)
    {
      return Do("/lol-tencent-qt/v1/ui-states/"+as_string(feature)+"?", "post", { 
      }, { 
      },state);
    } 
    /**/
    HttpsResult<void> PostPatcherV1Notifications (const PatcherNotificationId& notificationId /**/)
    {
      return Do("/patcher/v1/notifications?", "post", { 
        { "notificationId", as_string(notificationId) },
      }, { 
      });
    } 
    /**/
    HttpsResult<PatcherProductState> PostPatcherV1ProductsByProductIdDetectCorruptionRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/detect-corruption-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdFullRepairRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/full-repair-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostPatcherV1ProductsByProductIdInjectError (const std::string& product_id /**/,
      const std::string& component_id /**/,
      const PatcherInjectedPatcherError& error /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/inject-error?", "post", { 
        { "component-id", as_string(component_id) },
        { "error", as_string(error) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdPartialRepairRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/partial-repair-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdSignalStartPatchingDelayed (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/signal-start-patching-delayed?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdStartCheckingRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/start-checking-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdStartPatchingRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/start-patching-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdStopCheckingRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/stop-checking-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PostPatcherV1ProductsByProductIdStopPatchingRequest (const std::string& product_id /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/stop-patching-request?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<PaymentsFrontEndResult> PostPaymentsV1PmcStartUrl (const PaymentsFrontEndRequest& options /**/)
    {
      return Do("/payments/v1/pmc-start-url?", "post", { 
      }, { 
      },options);
    } 
    /*Registers the process and includes it with the performance information.*/
    HttpsResult<void> PostPerformanceV1ProcessByProcessId (const uint32_t& processId /*Id of the process to track performance information.*/)
    {
      return Do("/performance/v1/process/"+as_string(processId)+"?", "post", { 
      }, { 
      });
    } 
    /*Restarts the CPU timing information and returns the results from PerfReportProcesses*/
    HttpsResult<json> PostPerformanceV1ReportRestart (const std::optional<int32_t>& sampleLength = std::nullopt /*Time in seconds for each CPU timing sample.*/,
      const std::optional<int32_t>& sampleCount = std::nullopt /*Number of samples to record.*/)
    {
      return Do("/performance/v1/report/restart?", "post", { 
        { "sampleLength", as_string(sampleLength) },
        { "sampleCount", as_string(sampleCount) },
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerNotificationResource> PostPlayerNotificationsV1Notifications (const PlayerNotificationResource& notification /**/)
    {
      return Do("/player-notifications/v1/notifications?", "post", { 
      }, { 
      },notification);
    } 
    /*Exits the application and runs a given executable just before it shuts down.*/
    HttpsResult<void> PostProcessControlV1ProcessExitAndRun (const std::string& executablePath /**/,
      const std::string& workingDir /**/,
      const std::vector<std::string>& args /**/)
    {
      return Do("/process-control/v1/process/exit-and-run?", "post", { 
        { "executablePath", as_string(executablePath) },
        { "workingDir", as_string(workingDir) },
      }, { 
      }, { 
        { "args", as_string(args) },
      }, true );
    } 
    /*Quits the application.*/
    HttpsResult<void> PostProcessControlV1ProcessQuit ()
    {
      return Do("/process-control/v1/process/quit?", "post", { 
      }, { 
      });
    } 
    /*Restarts the application.  Does nothing if there is already a waiting delayed restart.  Optionally accepts specific version to restart.*/
    HttpsResult<void> PostProcessControlV1ProcessRestart (const uint32_t& delaySeconds /**/,
      const std::optional<uint32_t>& restartVersion = std::nullopt /**/)
    {
      return Do("/process-control/v1/process/restart?", "post", { 
        { "delaySeconds", as_string(delaySeconds) },
        { "restartVersion", as_string(restartVersion) },
      }, { 
      });
    } 
    /*Restarts the application in order to perform a full repair (including self repair).*/
    HttpsResult<void> PostProcessControlV1ProcessRestartToRepair (const std::string& productId /**/)
    {
      return Do("/process-control/v1/process/restart-to-repair?", "post", { 
        { "productId", as_string(productId) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactStateResource> PostRecofrienderV1ContactsByAccountIdAvailable (const uint64_t& accountId /**/,
      const std::optional<bool>& retainInCache = std::nullopt /**/)
    {
      return Do("/recofriender/v1/contacts/"+as_string(accountId)+"/available?", "post", { 
        { "retainInCache", as_string(retainInCache) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactStateResource> PostRecofrienderV1ContactsByAccountIdDismissed (const uint64_t& accountId /**/,
      const std::optional<bool>& retainInCache = std::nullopt /**/)
    {
      return Do("/recofriender/v1/contacts/"+as_string(accountId)+"/dismissed?", "post", { 
        { "retainInCache", as_string(retainInCache) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderContactStateResource> PostRecofrienderV1ContactsByAccountIdInvited (const uint64_t& accountId /**/,
      const std::optional<bool>& retainInCache = std::nullopt /**/)
    {
      return Do("/recofriender/v1/contacts/"+as_string(accountId)+"/invited?", "post", { 
        { "retainInCache", as_string(retainInCache) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RecofrienderUrlResource> PostRecofrienderV1RegistrationsByNetwork (const std::string& network /**/)
    {
      return Do("/recofriender/v1/registrations/"+as_string(network)+"?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostRiotMessagingServiceV1Connect (const std::string& idToken /**/)
    {
      return Do("/riot-messaging-service/v1/connect?", "post", { 
      }, { 
      },idToken);
    } 
    /**/
    HttpsResult<void> PostRiotMessagingServiceV1Reconnect ()
    {
      return Do("/riot-messaging-service/v1/reconnect?", "post", { 
      }, { 
      });
    } 
    /*Adds or Updates a Metric*/
    HttpsResult<void> PostRiotclientAddorupdatemetric (const std::string& group /*Name of metric group*/,
      const std::string& object /*Name of metric object*/,
      const std::string& name /*Name of metric item*/,
      const uint64_t& value /*Value to store*/)
    {
      return Do("/riotclient/addorupdatemetric?", "post", { 
        { "group", as_string(group) },
        { "object", as_string(object) },
        { "name", as_string(name) },
        { "value", as_string(value) },
      }, { 
      });
    } 
    /*Sets the current runtime affinity of the application.*/
    HttpsResult<void> PostRiotclientAffinity (const std::string& newAffinity /*The new affinity to use.*/)
    {
      return Do("/riotclient/affinity?", "post", { 
        { "newAffinity", as_string(newAffinity) },
      }, { 
      });
    } 
    /*Kills the ux process and restarts it. Used only when the ux process crashes.*/
    HttpsResult<void> PostRiotclientKillAndRestartUx ()
    {
      return Do("/riotclient/kill-and-restart-ux?", "post", { 
      }, { 
      });
    } 
    /*Kills the ux process.*/
    HttpsResult<void> PostRiotclientKillUx ()
    {
      return Do("/riotclient/kill-ux?", "post", { 
      }, { 
      });
    } 
    /*Launches the ux process.*/
    HttpsResult<void> PostRiotclientLaunchUx ()
    {
      return Do("/riotclient/launch-ux?", "post", { 
      }, { 
      });
    } 
    /*Endpoint for passing in new data.*/
    HttpsResult<void> PostRiotclientNewArgs (const std::vector<std::string>& args /*Vector of new command line arguments*/)
    {
      return Do("/riotclient/new-args?", "post", { 
      }, { 
      }, { 
        { "args", as_string(args) },
      }, true );
    } 
    /*Update the region and locale.*/
    HttpsResult<void> PostRiotclientSetRegionLocale (const std::string& region /*Name of the region.*/,
      const std::string& locale /*Name of the locale.*/)
    {
      return Do("/riotclient/set_region_locale?", "post", { 
        { "region", as_string(region) },
        { "locale", as_string(locale) },
      }, { 
      });
    } 
    /*Open swagger in the default browser.*/
    HttpsResult<void> PostRiotclientShowSwagger ()
    {
      return Do("/riotclient/show-swagger?", "post", { 
      }, { 
      });
    } 
    /*Unloads the UX process*/
    HttpsResult<void> PostRiotclientUnload ()
    {
      return Do("/riotclient/unload?", "post", { 
      }, { 
      });
    } 
    /*Flash the ux process' main window and the taskbar/dock icon, if they exist.*/
    HttpsResult<void> PostRiotclientUxFlash ()
    {
      return Do("/riotclient/ux-flash?", "post", { 
      }, { 
      });
    } 
    /*Minimize the ux process and all its windows if it exists. This does not kill the ux.*/
    HttpsResult<void> PostRiotclientUxMinimize ()
    {
      return Do("/riotclient/ux-minimize?", "post", { 
      }, { 
      });
    } 
    /*Shows the ux process if it exists; create and show if it does not.*/
    HttpsResult<void> PostRiotclientUxShow ()
    {
      return Do("/riotclient/ux-show?", "post", { 
      }, { 
      });
    } 
    /*Adds the enclosed log to the app's bugsplat report.*/
    HttpsResult<void> PostRiotclientV1BugsplatLogs (const std::string& logFilePath /*Full path to the log file.*/)
    {
      return Do("/riotclient/v1/bugsplat/logs?", "post", { 
      }, { 
      },logFilePath);
    } 
    /*Handles changing the zoom scale value.*/
    HttpsResult<void> PostRiotclientZoomScale (const double& newZoomScale /*The new value of the zoom scale.*/)
    {
      return Do("/riotclient/zoom-scale?", "post", { 
        { "newZoomScale", as_string(newZoomScale) },
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthAuthorization> PostRsoAuthV1AuthorizationGas (const RsoAuthRSOPlayerCredentials& creds /**/)
    {
      return Do("/rso-auth/v1/authorization/gas?", "post", { 
      }, { 
      },creds);
    } 
    /**/
    HttpsResult<RsoAuthAuthorization> PostRsoAuthV1AuthorizationRefresh ()
    {
      return Do("/rso-auth/v1/authorization/refresh?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<RsoAuthUserInfo> PostRsoAuthV1AuthorizationUserinfo ()
    {
      return Do("/rso-auth/v1/authorization/userinfo?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostRsoAuthV1Config (const RsoAuthRSOJWTConfig& config /**/)
    {
      return Do("/rso-auth/v1/config?", "post", { 
      }, { 
      },config);
    } 
    /**/
    HttpsResult<RsoAuthDeviceId> PostRsoAuthV1DeviceId ()
    {
      return Do("/rso-auth/v1/device-id?", "post", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<void> PostRsoAuthV2Config (const RsoAuthPublicClientConfig& config /**/)
    {
      return Do("/rso-auth/v2/config?", "post", { 
      }, { 
      },config);
    } 
    /**/
    HttpsResult<SanitizerContainsSanitizedResponse> PostSanitizerV1ContainsSanitized (const SanitizerContainsSanitizedRequest& request /**/)
    {
      return Do("/sanitizer/v1/containsSanitized?", "post", { 
      }, { 
      },request);
    } 
    /**/
    HttpsResult<SanitizerSanitizeResponse> PostSanitizerV1Sanitize (const SanitizerSanitizeRequest& request /**/)
    {
      return Do("/sanitizer/v1/sanitize?", "post", { 
      }, { 
      },request);
    } 
    /*Adds/updates a common data key and value to be sent with every subsequent event.*/
    HttpsResult<void> PostTelemetryV1CommonDataByKey (const std::string& key /*The name of the common data key*/,
      const std::string& value /*The value of the common data key*/)
    {
      return Do("/telemetry/v1/common-data/"+as_string(key)+"?", "post", { 
      }, { 
      },value);
    } 
    /*Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. All events will have their eventType prefixed with ""*/
    HttpsResult<void> PostTelemetryV1EventsByEventType (const std::string& eventType /*The name of the event type*/,
      const std::map<std::string, json>& eventData /*A map of event data*/)
    {
      return Do("/telemetry/v1/events/"+as_string(eventType)+"?", "post", { 
      }, { 
      },eventData);
    } 
    /*Adds a new event to be sent to Dradis and/or other analytics/monitoring data sinks. This will include current performance information along with the passed in data. Each call will record the performance counters then reset them for use in the next call. All events will have their eventType prefixed with ""*/
    HttpsResult<void> PostTelemetryV1EventsWithPerfInfoByEventType (const std::string& eventType /*The name of the event type*/,
      const std::map<std::string, json>& eventData /*A map of event data*/)
    {
      return Do("/telemetry/v1/events-with-perf-info/"+as_string(eventType)+"?", "post", { 
      }, { 
      },eventData);
    } 
    /**/
    HttpsResult<LolBannersBannerFlag> PutLolBannersV1CurrentSummonerFlagsEquipped (const LolBannersBannerFlag& flag /**/)
    {
      return Do("/lol-banners/v1/current-summoner/flags/equipped?", "put", { 
      }, { 
      },flag);
    } 
    /**/
    HttpsResult<void> PutLolBetaOptInV1MigrationError (const std::string& errString /**/)
    {
      return Do("/lol-beta-opt-in/v1/migration-error?", "put", { 
        { "errString", as_string(errString) },
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PutLolChatV1ConversationsActive (const LolChatActiveConversationResource& activeConversation /**/)
    {
      return Do("/lol-chat/v1/conversations/active?", "put", { 
      }, { 
      },activeConversation);
    } 
    /**/
    HttpsResult<LolChatConversationResource> PutLolChatV1ConversationsById (const std::string& id /**/,
      const LolChatConversationResource& updatedConversation /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"?", "put", { 
      }, { 
      },updatedConversation);
    } 
    /**/
    HttpsResult<json> PutLolChatV1ConversationsByIdClosed (const std::string& id /**/)
    {
      return Do("/lol-chat/v1/conversations/"+as_string(id)+"/closed?", "put", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PutLolChatV1FriendGroupsById (const uint32_t& id /**/,
      const LolChatGroupResource& group /**/)
    {
      return Do("/lol-chat/v1/friend-groups/"+as_string(id)+"?", "put", { 
      }, { 
      },group);
    } 
    /**/
    HttpsResult<json> PutLolChatV1FriendRequestsById (const uint64_t& id /**/,
      const LolChatFriendRequestResource& request /**/)
    {
      return Do("/lol-chat/v1/friend-requests/"+as_string(id)+"?", "put", { 
      }, { 
      },request);
    } 
    /**/
    HttpsResult<json> PutLolChatV1FriendsById (const uint64_t& id /**/,
      const LolChatFriendResource& contact /**/)
    {
      return Do("/lol-chat/v1/friends/"+as_string(id)+"?", "put", { 
      }, { 
      },contact);
    } 
    /**/
    HttpsResult<LolChatUserResource> PutLolChatV1Me (const LolChatUserResource& me /**/)
    {
      return Do("/lol-chat/v1/me?", "put", { 
      }, { 
      },me);
    } 
    /**/
    HttpsResult<json> PutLolChatV1Settings (const json& data /**/,
      const std::optional<bool>& doAsync = std::nullopt /**/)
    {
      return Do("/lol-chat/v1/settings?", "put", { 
        { "doAsync", as_string(doAsync) },
      }, { 
      },data);
    } 
    /**/
    HttpsResult<json> PutLolChatV1SettingsByKey (const std::string& key /**/,
      const json& value /**/,
      const std::optional<bool>& doAsync = std::nullopt /**/)
    {
      return Do("/lol-chat/v1/settings/"+as_string(key)+"?", "put", { 
        { "doAsync", as_string(doAsync) },
      }, { 
      },value);
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsMasteryBook> PutLolCollectionsV1InventoriesBySummonerIdMasteryBook (const uint64_t& summonerId /**/,
      const LolCollectionsCollectionsMasteryBook& resource /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/mastery-book?", "put", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsMasteryPage> PutLolCollectionsV1InventoriesBySummonerIdMasteryBookPages (const uint64_t& summonerId /**/,
      const LolCollectionsCollectionsMasteryPage& resource /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/mastery-book/pages?", "put", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsRuneBook> PutLolCollectionsV1InventoriesBySummonerIdRuneBook (const uint64_t& summonerId /**/,
      const LolCollectionsCollectionsRuneBook& resource /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/rune-book?", "put", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsRunePage> PutLolCollectionsV1InventoriesBySummonerIdRuneBookPagesByPageId (const uint64_t& summonerId /**/,
      const uint32_t& pageId /**/,
      const LolCollectionsCollectionsRunePage& resource /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/rune-book/pages/"+as_string(pageId)+"?", "put", { 
      }, { 
      },resource);
    } 
    /**/
    HttpsResult<LolCollectionsCollectionsRunePage> PutLolCollectionsV1InventoriesBySummonerIdRuneBookSelectPageByPageId (const uint64_t& summonerId /**/,
      const uint32_t& pageId /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/rune-book/select-page/"+as_string(pageId)+"?", "put", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<std::string> PutLolCollectionsV1InventoriesBySummonerIdVerification (const uint64_t& summonerId /**/,
      const std::string& verificationCode /**/)
    {
      return Do("/lol-collections/v1/inventories/"+as_string(summonerId)+"/verification?", "put", { 
      }, { 
      },verificationCode);
    } 
    /**/
    HttpsResult<json> PutLolEmailVerificationV1Email (const LolEmailVerificationEmailUpdate& EmailUpdate /**/)
    {
      return Do("/lol-email-verification/v1/email?", "put", { 
      }, { 
      },EmailUpdate);
    } 
    /**/
    HttpsResult<Highlight> PutLolHighlightsV1HighlightsById (const uint64_t& id /**/,
      const Highlight& highlight /**/)
    {
      return Do("/lol-highlights/v1/highlights/"+as_string(id)+"?", "put", { 
      }, { 
      },highlight);
    } 
    /**/
    HttpsResult<void> PutLolItemSetsV1ItemSetsBySummonerIdSets (const uint64_t& summonerId /**/,
      const LolItemSetsItemSets& itemSets /**/)
    {
      return Do("/lol-item-sets/v1/item-sets/"+as_string(summonerId)+"/sets?", "put", { 
      }, { 
      },itemSets);
    } 
    /**/
    HttpsResult<bool> PutLolLobbyV1AutofillDisplayed ()
    {
      return Do("/lol-lobby/v1/autofill-displayed?", "put", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PutLolLobbyV1LobbyMembersLocalMemberPositionPreferences (const LolLobbyLobbyPositionPreferences& positionPreferences /**/)
    {
      return Do("/lol-lobby/v1/lobby/members/localMember/position-preferences?", "put", { 
      }, { 
      },positionPreferences);
    } 
    /**/
    HttpsResult<void> PutLolLobbyV1PartiesActive (const int32_t& active /**/)
    {
      return Do("/lol-lobby/v1/parties/active?", "put", { 
      }, { 
      },active);
    } 
    /**/
    HttpsResult<void> PutLolLobbyV1PartiesByPartyIdMembersByPuuidRole (const std::string& partyId /**/,
      const std::string& puuid /**/,
      const std::string& role /**/)
    {
      return Do("/lol-lobby/v1/parties/"+as_string(partyId)+"/members/"+as_string(puuid)+"/role?", "put", { 
      }, { 
      },role);
    } 
    /**/
    HttpsResult<void> PutLolLobbyV1PartiesMetadata (const LolLobbyPartyMemberMetadataDto& metadata /**/)
    {
      return Do("/lol-lobby/v1/parties/metadata?", "put", { 
      }, { 
      },metadata);
    } 
    /**/
    HttpsResult<void> PutLolLobbyV1PartiesQueue (const int32_t& queueId /**/)
    {
      return Do("/lol-lobby/v1/parties/queue?", "put", { 
      }, { 
      },queueId);
    } 
    /**/
    HttpsResult<void> PutLolLobbyV1PartiesReady (const int32_t& ready /**/)
    {
      return Do("/lol-lobby/v1/parties/ready?", "put", { 
      }, { 
      },ready);
    } 
    /**/
    HttpsResult<json> PutLolLobbyV2LobbyMembersLocalMemberPositionPreferences (const LolLobbyLobbyPositionPreferences& positionPreferences /**/)
    {
      return Do("/lol-lobby/v2/lobby/members/localMember/position-preferences?", "put", { 
      }, { 
      },positionPreferences);
    } 
    /**/
    HttpsResult<void> PutLolLoginV1ShutdownLocksByLockName (const std::string& lockName /**/)
    {
      return Do("/lol-login/v1/shutdown-locks/"+as_string(lockName)+"?", "put", { 
      }, { 
      });
    } 
    /**/
    HttpsResult<json> PutLolMatchmakingV1Search (const LolMatchmakingMatchmakingSearchResource& search /**/)
    {
      return Do("/lol-matchmaking/v1/search?", "put", { 
      }, { 
      },search);
    } 
    /**/
    HttpsResult<void> PutLolMissionsV2Missions (const MissionIdsDTO& missionIds /**/)
    {
      return Do("/lol-missions/v2/missions?", "put", { 
      }, { 
      },missionIds);
    } 
    /**/
    HttpsResult<json> PutLolPerksV1Currentpage (const int32_t& id /**/)
    {
      return Do("/lol-perks/v1/currentpage?", "put", { 
      }, { 
      },id);
    } 
    /**/
    HttpsResult<json> PutLolPerksV1PagesById (const int32_t& id /**/,
      const LolPerksPerkPageResource& page /**/)
    {
      return Do("/lol-perks/v1/pages/"+as_string(id)+"?", "put", { 
      }, { 
      },page);
    } 
    /**/
    HttpsResult<json> PutLolPerksV1Settings (const LolPerksUISettings& showLongDescriptions /**/)
    {
      return Do("/lol-perks/v1/settings?", "put", { 
      }, { 
      },showLongDescriptions);
    } 
    /**/
    HttpsResult<json> PutLolPlayerPreferencesV1Preference (const PlayerPreferences& preferences /**/)
    {
      return Do("/lol-player-preferences/v1/preference?", "put", { 
      }, { 
      },preferences);
    } 
    /**/
    HttpsResult<json> PutLolSettingsV1AccountByCategory (const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v1/account/"+as_string(category)+"?", "put", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<json> PutLolSettingsV2AccountByPpTypeByCategory (const std::string& ppType /**/,
      const std::string& category /**/,
      const LolSettingsSettingCategory& settingsResource /**/)
    {
      return Do("/lol-settings/v2/account/"+as_string(ppType)+"/"+as_string(category)+"?", "put", { 
      }, { 
      },settingsResource);
    } 
    /**/
    HttpsResult<LolSummonerSummoner> PutLolSummonerV1CurrentSummonerIcon (const LolSummonerSummonerIcon& body /**/)
    {
      return Do("/lol-summoner/v1/current-summoner/icon?", "put", { 
      }, { 
      },body);
    } 
    /**/
    HttpsResult<json> PutPatcherV1ProductsByProductId (const std::string& product_id /**/,
      const PatcherProductResource& data /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"?", "put", { 
      }, { 
      },data);
    } 
    /**/
    HttpsResult<json> PutPatcherV1ProductsByProductIdByComponentIdHttpHeaders (const std::string& product_id /**/,
      const std::string& component_id /**/,
      const std::vector<PatcherHeaderEntry>& headers /**/)
    {
      return Do("/patcher/v1/products/"+as_string(product_id)+"/"+as_string(component_id)+"/http-headers?", "put", { 
      }, { 
      },headers);
    } 
    /**/
    HttpsResult<json> PutPatcherV1SelfUpdateRestart (const bool& forceRestartOnSelfUpdate /**/)
    {
      return Do("/patcher/v1/self-update-restart?", "put", { 
        { "forceRestartOnSelfUpdate", as_string(forceRestartOnSelfUpdate) },
      }, { 
      });
    } 
    /**/
    HttpsResult<PlayerNotificationConfigResource> PutPlayerNotificationsV1Config (const PlayerNotificationConfigResource& config /**/)
    {
      return Do("/player-notifications/v1/config?", "put", { 
      }, { 
      },config);
    } 
    /**/
    HttpsResult<PlayerNotificationResource> PutPlayerNotificationsV1NotificationsById (const uint64_t& id /**/,
      const json& notification /**/)
    {
      return Do("/player-notifications/v1/notifications/"+as_string(id)+"?", "put", { 
      }, { 
      },notification);
    } 
    /**/
    HttpsResult<RecofrienderDebugConfig> PutRecofrienderV1Debug (const RecofrienderDebugConfig& debugConfiguration /**/)
    {
      return Do("/recofriender/v1/debug?", "put", { 
      }, { 
      },debugConfiguration);
    } 
    /*Update the region and locale.*/
    HttpsResult<void> PutRiotclientRegionLocale (const RegionLocale& data /*Region and locale resource.*/)
    {
      return Do("/riotclient/region-locale?", "put", { 
      }, { 
      },data);
    } 
    /*Ux acknowledges the update to the region and locale.*/
    HttpsResult<void> PutRiotclientRegionLocaleAck (const uint32_t& requestId /*The region and locale change requestId that is being acknowledged.*/)
    {
      return Do("/riotclient/region-locale/ack?", "put", { 
      }, { 
      },requestId);
    } 
    /*Show the splash screen.*/
    HttpsResult<void> PutRiotclientSplash ()
    {
      return Do("/riotclient/splash?", "put", { 
      }, { 
      });
    } 
    /*Ux notification that it has completed loading the main window.*/
    HttpsResult<void> PutRiotclientUxLoadComplete ()
    {
      return Do("/riotclient/ux-load-complete?", "put", { 
      }, { 
      });
    } 
    /*Ux acknowledges the update to the Ux state.*/
    HttpsResult<void> PutRiotclientUxStateAck (const uint32_t& requestId /*The ux change requestId that is being acknowledged.*/)
    {
      return Do("/riotclient/ux-state/ack?", "put", { 
      }, { 
      },requestId);
    } 
    /*Tags the bugsplat with a platform id so it can be filtered more easily.*/
    HttpsResult<void> PutRiotclientV1BugsplatPlatformId (const std::string& platformId /*The platform id that should be reported to bugsplat.*/)
    {
      return Do("/riotclient/v1/bugsplat/platform-id?", "put", { 
      }, { 
      },platformId);
    } 
    /**/
    HttpsResult<void> PutRsoAuthV1Config (const RsoAuthRSOJWTConfig& config /**/)
    {
      return Do("/rso-auth/v1/config?", "put", { 
      }, { 
      },config);
    } 
    /*Subscribes to a given event*/
    HttpsResult<json> Subscribe (const std::string& eventName /*Name of the event to subscribe to*/,
      const std::optional<RemotingSerializedFormat>& format = std::nullopt /*Desired format to receive events in. If unspecified, events will be sent in the active result format at the time.*/)
    {
      return Do("/Subscribe?", "post", { 
        { "eventName", as_string(eventName) },
        { "format", as_string(format) },
      }, { 
      });
    } 
    /*Unsubscribes from a given event*/
    HttpsResult<json> Unsubscribe (const std::string& eventName /*Name of the event to unsubscribe from*/)
    {
      return Do("/Unsubscribe?", "post", { 
        { "eventName", as_string(eventName) },
      }, { 
      });
    } 
    /*Controls the console output format*/
    HttpsResult<json> WebSocketFormat (const std::optional<RemotingSerializedFormat>& format = std::nullopt /*Output format to switch to*/)
    {
      return Do("/WebSocketFormat?", "post", { 
        { "format", as_string(format) },
      }, { 
      });
    } 
  };
}
