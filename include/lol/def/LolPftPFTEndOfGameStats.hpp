#pragma once
#include "../base_def.hpp" 
#include "LolPftPFTEndOfGameTeam.hpp"
#include "LolPftPFTEndOfGamePoints.hpp"
namespace lol {
  struct LolPftPFTEndOfGameStats { 
    std::string difficulty;
    uint64_t gameId;
    int32_t gameLength;
    std::string gameMode;
    std::vector<std::string> gameMutators;
    std::string gameType;
    bool imbalancedTeamsNoPoints;
    bool invalid;
    std::string queueType;
    bool ranked;
    uint64_t reportGameId;
    std::string roomName;
    std::string roomPassword;
    bool sendStatsToTournamentProvider;
    std::vector<LolPftPFTEndOfGameTeam> teams;
    std::string myTeamStatus;
    int32_t elo;
    int32_t eloChange;
    bool leveledUp;
    std::vector<int32_t> newSpells;
    uint64_t previousLevel;
    int32_t rpEarned;
    int32_t skinIndex;
    int32_t skinId;
    std::string summonerName;
    int32_t talentPointsGained;
    uint64_t userId;
    uint64_t accountId;
    uint64_t summonerId;
    int32_t championId;
    int32_t basePoints;
    int32_t battleBoostIpEarned;
    int32_t boostIpEarned;
    int32_t firstWinBonus;
    int32_t ipEarned;
    int32_t ipTotal;
    int32_t loyaltyBoostIpEarned;
    int32_t odinBonusIp;
    int32_t partyRewardsBonusIpEarned;
    json pointsPenalties;
    int32_t queueBonusEarned;
    int32_t boostXpEarned;
    int32_t completionBonusPoints;
    int32_t experienceEarned;
    int32_t experienceTotal;
    int32_t loyaltyBoostXpEarned;
    uint64_t previousXpTotal;
    int32_t coOpVsAiMinutesLeftToday;
    int32_t coOpVsAiMsecsUntilReset;
    int32_t customMinutesLeftToday;
    int32_t customMsecsUntilReset;
    int32_t timeUntilNextFirstWinBonus;
    bool causedEarlySurrender;
    bool earlySurrenderAccomplice;
    bool teamEarlySurrendered;
    bool gameEndedInEarlySurrender;
    bool isAramGame;
    LolPftPFTEndOfGamePoints rerollData; 
  };
  inline void to_json(json& j, const LolPftPFTEndOfGameStats& v) {
    j["difficulty"] = v.difficulty; 
    j["gameId"] = v.gameId; 
    j["gameLength"] = v.gameLength; 
    j["gameMode"] = v.gameMode; 
    j["gameMutators"] = v.gameMutators; 
    j["gameType"] = v.gameType; 
    j["imbalancedTeamsNoPoints"] = v.imbalancedTeamsNoPoints; 
    j["invalid"] = v.invalid; 
    j["queueType"] = v.queueType; 
    j["ranked"] = v.ranked; 
    j["reportGameId"] = v.reportGameId; 
    j["roomName"] = v.roomName; 
    j["roomPassword"] = v.roomPassword; 
    j["sendStatsToTournamentProvider"] = v.sendStatsToTournamentProvider; 
    j["teams"] = v.teams; 
    j["myTeamStatus"] = v.myTeamStatus; 
    j["elo"] = v.elo; 
    j["eloChange"] = v.eloChange; 
    j["leveledUp"] = v.leveledUp; 
    j["newSpells"] = v.newSpells; 
    j["previousLevel"] = v.previousLevel; 
    j["rpEarned"] = v.rpEarned; 
    j["skinIndex"] = v.skinIndex; 
    j["skinId"] = v.skinId; 
    j["summonerName"] = v.summonerName; 
    j["talentPointsGained"] = v.talentPointsGained; 
    j["userId"] = v.userId; 
    j["accountId"] = v.accountId; 
    j["summonerId"] = v.summonerId; 
    j["championId"] = v.championId; 
    j["basePoints"] = v.basePoints; 
    j["battleBoostIpEarned"] = v.battleBoostIpEarned; 
    j["boostIpEarned"] = v.boostIpEarned; 
    j["firstWinBonus"] = v.firstWinBonus; 
    j["ipEarned"] = v.ipEarned; 
    j["ipTotal"] = v.ipTotal; 
    j["loyaltyBoostIpEarned"] = v.loyaltyBoostIpEarned; 
    j["odinBonusIp"] = v.odinBonusIp; 
    j["partyRewardsBonusIpEarned"] = v.partyRewardsBonusIpEarned; 
    j["pointsPenalties"] = v.pointsPenalties; 
    j["queueBonusEarned"] = v.queueBonusEarned; 
    j["boostXpEarned"] = v.boostXpEarned; 
    j["completionBonusPoints"] = v.completionBonusPoints; 
    j["experienceEarned"] = v.experienceEarned; 
    j["experienceTotal"] = v.experienceTotal; 
    j["loyaltyBoostXpEarned"] = v.loyaltyBoostXpEarned; 
    j["previousXpTotal"] = v.previousXpTotal; 
    j["coOpVsAiMinutesLeftToday"] = v.coOpVsAiMinutesLeftToday; 
    j["coOpVsAiMsecsUntilReset"] = v.coOpVsAiMsecsUntilReset; 
    j["customMinutesLeftToday"] = v.customMinutesLeftToday; 
    j["customMsecsUntilReset"] = v.customMsecsUntilReset; 
    j["timeUntilNextFirstWinBonus"] = v.timeUntilNextFirstWinBonus; 
    j["causedEarlySurrender"] = v.causedEarlySurrender; 
    j["earlySurrenderAccomplice"] = v.earlySurrenderAccomplice; 
    j["teamEarlySurrendered"] = v.teamEarlySurrendered; 
    j["gameEndedInEarlySurrender"] = v.gameEndedInEarlySurrender; 
    j["isAramGame"] = v.isAramGame; 
    j["rerollData"] = v.rerollData; 
  }
  inline void from_json(const json& j, LolPftPFTEndOfGameStats& v) {
    v.difficulty = j.at("difficulty").get<std::string>(); 
    v.gameId = j.at("gameId").get<uint64_t>(); 
    v.gameLength = j.at("gameLength").get<int32_t>(); 
    v.gameMode = j.at("gameMode").get<std::string>(); 
    v.gameMutators = j.at("gameMutators").get<std::vector<std::string>>(); 
    v.gameType = j.at("gameType").get<std::string>(); 
    v.imbalancedTeamsNoPoints = j.at("imbalancedTeamsNoPoints").get<bool>(); 
    v.invalid = j.at("invalid").get<bool>(); 
    v.queueType = j.at("queueType").get<std::string>(); 
    v.ranked = j.at("ranked").get<bool>(); 
    v.reportGameId = j.at("reportGameId").get<uint64_t>(); 
    v.roomName = j.at("roomName").get<std::string>(); 
    v.roomPassword = j.at("roomPassword").get<std::string>(); 
    v.sendStatsToTournamentProvider = j.at("sendStatsToTournamentProvider").get<bool>(); 
    v.teams = j.at("teams").get<std::vector<LolPftPFTEndOfGameTeam>>(); 
    v.myTeamStatus = j.at("myTeamStatus").get<std::string>(); 
    v.elo = j.at("elo").get<int32_t>(); 
    v.eloChange = j.at("eloChange").get<int32_t>(); 
    v.leveledUp = j.at("leveledUp").get<bool>(); 
    v.newSpells = j.at("newSpells").get<std::vector<int32_t>>(); 
    v.previousLevel = j.at("previousLevel").get<uint64_t>(); 
    v.rpEarned = j.at("rpEarned").get<int32_t>(); 
    v.skinIndex = j.at("skinIndex").get<int32_t>(); 
    v.skinId = j.at("skinId").get<int32_t>(); 
    v.summonerName = j.at("summonerName").get<std::string>(); 
    v.talentPointsGained = j.at("talentPointsGained").get<int32_t>(); 
    v.userId = j.at("userId").get<uint64_t>(); 
    v.accountId = j.at("accountId").get<uint64_t>(); 
    v.summonerId = j.at("summonerId").get<uint64_t>(); 
    v.championId = j.at("championId").get<int32_t>(); 
    v.basePoints = j.at("basePoints").get<int32_t>(); 
    v.battleBoostIpEarned = j.at("battleBoostIpEarned").get<int32_t>(); 
    v.boostIpEarned = j.at("boostIpEarned").get<int32_t>(); 
    v.firstWinBonus = j.at("firstWinBonus").get<int32_t>(); 
    v.ipEarned = j.at("ipEarned").get<int32_t>(); 
    v.ipTotal = j.at("ipTotal").get<int32_t>(); 
    v.loyaltyBoostIpEarned = j.at("loyaltyBoostIpEarned").get<int32_t>(); 
    v.odinBonusIp = j.at("odinBonusIp").get<int32_t>(); 
    v.partyRewardsBonusIpEarned = j.at("partyRewardsBonusIpEarned").get<int32_t>(); 
    v.pointsPenalties = j.at("pointsPenalties").get<json>(); 
    v.queueBonusEarned = j.at("queueBonusEarned").get<int32_t>(); 
    v.boostXpEarned = j.at("boostXpEarned").get<int32_t>(); 
    v.completionBonusPoints = j.at("completionBonusPoints").get<int32_t>(); 
    v.experienceEarned = j.at("experienceEarned").get<int32_t>(); 
    v.experienceTotal = j.at("experienceTotal").get<int32_t>(); 
    v.loyaltyBoostXpEarned = j.at("loyaltyBoostXpEarned").get<int32_t>(); 
    v.previousXpTotal = j.at("previousXpTotal").get<uint64_t>(); 
    v.coOpVsAiMinutesLeftToday = j.at("coOpVsAiMinutesLeftToday").get<int32_t>(); 
    v.coOpVsAiMsecsUntilReset = j.at("coOpVsAiMsecsUntilReset").get<int32_t>(); 
    v.customMinutesLeftToday = j.at("customMinutesLeftToday").get<int32_t>(); 
    v.customMsecsUntilReset = j.at("customMsecsUntilReset").get<int32_t>(); 
    v.timeUntilNextFirstWinBonus = j.at("timeUntilNextFirstWinBonus").get<int32_t>(); 
    v.causedEarlySurrender = j.at("causedEarlySurrender").get<bool>(); 
    v.earlySurrenderAccomplice = j.at("earlySurrenderAccomplice").get<bool>(); 
    v.teamEarlySurrendered = j.at("teamEarlySurrendered").get<bool>(); 
    v.gameEndedInEarlySurrender = j.at("gameEndedInEarlySurrender").get<bool>(); 
    v.isAramGame = j.at("isAramGame").get<bool>(); 
    v.rerollData = j.at("rerollData").get<LolPftPFTEndOfGamePoints>(); 
  }
}